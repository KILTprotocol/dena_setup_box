let e,t;function r(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0})}function n(e){return e&&e.__esModule?e.default:e}var a,i,o,s,l,c,u,d,f,p,h,b,y,m,g,v,x,w,P,O,T,z,k,L,E,N,S,M,j,H,R,I,B=globalThis;function V(e,t){return Object.keys(t).forEach(function(r){"default"===r||"__esModule"===r||e.hasOwnProperty(r)||Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[r]}})}),e}var X={},U={},A=B.parcelRequire10c2;null==A&&((A=function(e){if(e in X)return X[e].exports;if(e in U){var t=U[e];delete U[e];var r={id:e,exports:{}};return X[e]=r,t.call(r.exports,r,r.exports),r.exports}var n=Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}).register=function(e,t){U[e]=t},B.parcelRequire10c2=A);var D=A.register;D("1b2ls",function(e,t){r(e.exports,"Fragment",()=>n,e=>n=e),r(e.exports,"jsx",()=>a,e=>a=e),r(e.exports,"jsxs",()=>i,e=>i=e);var n,a,i,o=A("acw62"),s=Symbol.for("react.element"),l=Symbol.for("react.fragment"),c=Object.prototype.hasOwnProperty,u=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,d={key:!0,ref:!0,__self:!0,__source:!0};function f(e,t,r){var n,a={},i=null,o=null;for(n in void 0!==r&&(i=""+r),void 0!==t.key&&(i=""+t.key),void 0!==t.ref&&(o=t.ref),t)c.call(t,n)&&!d.hasOwnProperty(n)&&(a[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===a[n]&&(a[n]=t[n]);return{$$typeof:s,type:e,key:i,ref:o,props:a,_owner:u.current}}n=l,a=f,i=f}),D("acw62",function(e,t){e.exports=A("2pUnB")}),D("2pUnB",function(e,t){r(e.exports,"Children",()=>n,e=>n=e),r(e.exports,"Component",()=>a,e=>a=e),r(e.exports,"Fragment",()=>i,e=>i=e),r(e.exports,"Profiler",()=>o,e=>o=e),r(e.exports,"PureComponent",()=>s,e=>s=e),r(e.exports,"StrictMode",()=>l,e=>l=e),r(e.exports,"Suspense",()=>c,e=>c=e),r(e.exports,"__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED",()=>u,e=>u=e),r(e.exports,"cloneElement",()=>d,e=>d=e),r(e.exports,"createContext",()=>f,e=>f=e),r(e.exports,"createElement",()=>p,e=>p=e),r(e.exports,"createFactory",()=>h,e=>h=e),r(e.exports,"createRef",()=>b,e=>b=e),r(e.exports,"forwardRef",()=>y,e=>y=e),r(e.exports,"isValidElement",()=>m,e=>m=e),r(e.exports,"lazy",()=>g,e=>g=e),r(e.exports,"memo",()=>v,e=>v=e),r(e.exports,"startTransition",()=>x,e=>x=e),r(e.exports,"unstable_act",()=>w,e=>w=e),r(e.exports,"useCallback",()=>P,e=>P=e),r(e.exports,"useContext",()=>O,e=>O=e),r(e.exports,"useDebugValue",()=>T,e=>T=e),r(e.exports,"useDeferredValue",()=>z,e=>z=e),r(e.exports,"useEffect",()=>k,e=>k=e),r(e.exports,"useId",()=>L,e=>L=e),r(e.exports,"useImperativeHandle",()=>E,e=>E=e),r(e.exports,"useInsertionEffect",()=>N,e=>N=e),r(e.exports,"useLayoutEffect",()=>S,e=>S=e),r(e.exports,"useMemo",()=>M,e=>M=e),r(e.exports,"useReducer",()=>j,e=>j=e),r(e.exports,"useRef",()=>H,e=>H=e),r(e.exports,"useState",()=>R,e=>R=e),r(e.exports,"useSyncExternalStore",()=>I,e=>I=e),r(e.exports,"useTransition",()=>B,e=>B=e),r(e.exports,"version",()=>V,e=>V=e);var n,a,i,o,s,l,c,u,d,f,p,h,b,y,m,g,v,x,w,P,O,T,z,k,L,E,N,S,M,j,H,R,I,B,V,X=Symbol.for("react.element"),U=Symbol.for("react.portal"),A=Symbol.for("react.fragment"),D=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),F=Symbol.for("react.provider"),Z=Symbol.for("react.context"),q=Symbol.for("react.forward_ref"),G=Symbol.for("react.suspense"),W=Symbol.for("react.memo"),Y=Symbol.for("react.lazy"),K=Symbol.iterator,J={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Q=Object.assign,_={};function $(e,t,r){this.props=e,this.context=t,this.refs=_,this.updater=r||J}function ee(){}function et(e,t,r){this.props=e,this.context=t,this.refs=_,this.updater=r||J}$.prototype.isReactComponent={},$.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},$.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},ee.prototype=$.prototype;var er=et.prototype=new ee;er.constructor=et,Q(er,$.prototype),er.isPureReactComponent=!0;var en=Array.isArray,ea=Object.prototype.hasOwnProperty,ei={current:null},eo={key:!0,ref:!0,__self:!0,__source:!0};function es(e,t,r){var n,a={},i=null,o=null;if(null!=t)for(n in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(i=""+t.key),t)ea.call(t,n)&&!eo.hasOwnProperty(n)&&(a[n]=t[n]);var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){for(var l=Array(s),c=0;c<s;c++)l[c]=arguments[c+2];a.children=l}if(e&&e.defaultProps)for(n in s=e.defaultProps)void 0===a[n]&&(a[n]=s[n]);return{$$typeof:X,type:e,key:i,ref:o,props:a,_owner:ei.current}}function el(e){return"object"==typeof e&&null!==e&&e.$$typeof===X}var ec=/\/+/g;function eu(e,t){var r,n;return"object"==typeof e&&null!==e&&null!=e.key?(r=""+e.key,n={"=":"=0",":":"=2"},"$"+r.replace(/[=:]/g,function(e){return n[e]})):t.toString(36)}function ed(e,t,r){if(null==e)return e;var n=[],a=0;return function e(t,r,n,a,i){var o,s,l,c=typeof t;("undefined"===c||"boolean"===c)&&(t=null);var u=!1;if(null===t)u=!0;else switch(c){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case X:case U:u=!0}}if(u)return i=i(u=t),t=""===a?"."+eu(u,0):a,en(i)?(n="",null!=t&&(n=t.replace(ec,"$&/")+"/"),e(i,r,n,"",function(e){return e})):null!=i&&(el(i)&&(o=i,s=n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(ec,"$&/")+"/")+t,i={$$typeof:X,type:o.type,key:s,ref:o.ref,props:o.props,_owner:o._owner}),r.push(i)),1;if(u=0,a=""===a?".":a+":",en(t))for(var d=0;d<t.length;d++){var f=a+eu(c=t[d],d);u+=e(c,r,n,f,i)}else if("function"==typeof(f=null===(l=t)||"object"!=typeof l?null:"function"==typeof(l=K&&l[K]||l["@@iterator"])?l:null))for(t=f.call(t),d=0;!(c=t.next()).done;)f=a+eu(c=c.value,d++),u+=e(c,r,n,f,i);else if("object"===c)throw Error("Objects are not valid as a React child (found: "+("[object Object]"===(r=String(t))?"object with keys {"+Object.keys(t).join(", ")+"}":r)+"). If you meant to render a collection of children, use an array instead.");return u}(e,n,"","",function(e){return t.call(r,e,a++)}),n}function ef(e){if(-1===e._status){var t=e._result;(t=t()).then(function(t){(0===e._status||-1===e._status)&&(e._status=1,e._result=t)},function(t){(0===e._status||-1===e._status)&&(e._status=2,e._result=t)}),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var ep={current:null},eh={transition:null};n={map:ed,forEach:function(e,t,r){ed(e,function(){t.apply(this,arguments)},r)},count:function(e){var t=0;return ed(e,function(){t++}),t},toArray:function(e){return ed(e,function(e){return e})||[]},only:function(e){if(!el(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},a=$,i=A,o=C,s=et,l=D,c=G,u={ReactCurrentDispatcher:ep,ReactCurrentBatchConfig:eh,ReactCurrentOwner:ei},d=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var n=Q({},e.props),a=e.key,i=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,o=ei.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(l in t)ea.call(t,l)&&!eo.hasOwnProperty(l)&&(n[l]=void 0===t[l]&&void 0!==s?s[l]:t[l])}var l=arguments.length-2;if(1===l)n.children=r;else if(1<l){s=Array(l);for(var c=0;c<l;c++)s[c]=arguments[c+2];n.children=s}return{$$typeof:X,type:e.type,key:a,ref:i,props:n,_owner:o}},f=function(e){return(e={$$typeof:Z,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:F,_context:e},e.Consumer=e},p=es,h=function(e){var t=es.bind(null,e);return t.type=e,t},b=function(){return{current:null}},y=function(e){return{$$typeof:q,render:e}},m=el,g=function(e){return{$$typeof:Y,_payload:{_status:-1,_result:e},_init:ef}},v=function(e,t){return{$$typeof:W,type:e,compare:void 0===t?null:t}},x=function(e){var t=eh.transition;eh.transition={};try{e()}finally{eh.transition=t}},w=function(){throw Error("act(...) is not supported in production builds of React.")},P=function(e,t){return ep.current.useCallback(e,t)},O=function(e){return ep.current.useContext(e)},T=function(){},z=function(e){return ep.current.useDeferredValue(e)},k=function(e,t){return ep.current.useEffect(e,t)},L=function(){return ep.current.useId()},E=function(e,t,r){return ep.current.useImperativeHandle(e,t,r)},N=function(e,t){return ep.current.useInsertionEffect(e,t)},S=function(e,t){return ep.current.useLayoutEffect(e,t)},M=function(e,t){return ep.current.useMemo(e,t)},j=function(e,t,r){return ep.current.useReducer(e,t,r)},H=function(e){return ep.current.useRef(e)},R=function(e){return ep.current.useState(e)},I=function(e,t,r){return ep.current.useSyncExternalStore(e,t,r)},B=function(){return ep.current.useTransition()},V="18.2.0"}),D("Xw6Mv",function(e,t){r(e.exports,"__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED",()=>F,e=>F=e),r(e.exports,"createPortal",()=>Z,e=>Z=e),r(e.exports,"createRoot",()=>q,e=>q=e),r(e.exports,"findDOMNode",()=>G,e=>G=e),r(e.exports,"flushSync",()=>W,e=>W=e),r(e.exports,"hydrate",()=>Y,e=>Y=e),r(e.exports,"hydrateRoot",()=>K,e=>K=e),r(e.exports,"render",()=>J,e=>J=e),r(e.exports,"unmountComponentAtNode",()=>Q,e=>Q=e),r(e.exports,"unstable_batchedUpdates",()=>_,e=>_=e),r(e.exports,"unstable_renderSubtreeIntoContainer",()=>$,e=>$=e),r(e.exports,"version",()=>ee,e=>ee=e);var n,a,i,o,s,l,c=A("acw62"),u=A("fO90s");function d(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var f=new Set,p={};function h(e,t){b(e,t),b(e+"Capture",t)}function b(e,t){for(p[e]=t,e=0;e<t.length;e++)f.add(t[e])}var y=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),m=Object.prototype.hasOwnProperty,g=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,v={},x={};function w(e,t,r,n,a,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=a,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=o}var P={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){P[e]=new w(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];P[t]=new w(t,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){P[e]=new w(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){P[e]=new w(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){P[e]=new w(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){P[e]=new w(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){P[e]=new w(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){P[e]=new w(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){P[e]=new w(e,5,!1,e.toLowerCase(),null,!1,!1)});var O=/[\-:]([a-z])/g;function T(e){return e[1].toUpperCase()}function z(e,t,r,n){var a,i=P.hasOwnProperty(t)?P[t]:null;(null!==i?0!==i.type:n||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,r,n){if(null==t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":if(n)return!1;if(null!==r)return!r.acceptsBooleans;return"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e;default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,i,n)&&(r=null),n||null===i?(a=t,(!!m.call(x,a)||!m.call(v,a)&&(g.test(a)?x[a]=!0:(v[a]=!0,!1)))&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r))):i.mustUseProperty?e[i.propertyName]=null===r?3!==i.type&&"":r:(t=i.attributeName,n=i.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(i=i.type)||4===i&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(O,T);P[t]=new w(t,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(O,T);P[t]=new w(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(O,T);P[t]=new w(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){P[e]=new w(e,1,!1,e.toLowerCase(),null,!1,!1)}),P.xlinkHref=new w("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){P[e]=new w(e,1,!1,e.toLowerCase(),null,!0,!0)});var k=c.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,L=Symbol.for("react.element"),E=Symbol.for("react.portal"),N=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),M=Symbol.for("react.profiler"),j=Symbol.for("react.provider"),H=Symbol.for("react.context"),R=Symbol.for("react.forward_ref"),I=Symbol.for("react.suspense"),B=Symbol.for("react.suspense_list"),V=Symbol.for("react.memo"),X=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var U=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var D=Symbol.iterator;function C(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=D&&e[D]||e["@@iterator"])?e:null}var F,Z,q,G,W,Y,K,J,Q,_,$,ee,et,er=Object.assign;function en(e){if(void 0===et)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);et=t&&t[1]||""}return"\n"+et+e}var ea=!1;function ei(e,t){if(!e||ea)return"";ea=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t){if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),i=n.stack.split("\n"),o=a.length-1,s=i.length-1;1<=o&&0<=s&&a[o]!==i[s];)s--;for(;1<=o&&0<=s;o--,s--)if(a[o]!==i[s]){if(1!==o||1!==s)do if(o--,0>--s||a[o]!==i[s]){var l="\n"+a[o].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}while(1<=o&&0<=s)break}}}finally{ea=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?en(e):""}function eo(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function es(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function el(e){e._valueTracker||(e._valueTracker=function(e){var t=es(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var a=r.get,i=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){n=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ec(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=es(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function eu(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function ed(e,t){var r=t.checked;return er({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function ef(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=eo(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function ep(e,t){null!=(t=t.checked)&&z(e,"checked",t,!1)}function eh(e,t){ep(e,t);var r=eo(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n){e.removeAttribute("value");return}t.hasOwnProperty("value")?ey(e,t.type,r):t.hasOwnProperty("defaultValue")&&ey(e,t.type,eo(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function eb(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function ey(e,t,r){("number"!==t||eu(e.ownerDocument)!==e)&&(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}var em=Array.isArray;function eg(e,t,r,n){if(e=e.options,t){t={};for(var a=0;a<r.length;a++)t["$"+r[a]]=!0;for(r=0;r<e.length;r++)a=t.hasOwnProperty("$"+e[r].value),e[r].selected!==a&&(e[r].selected=a),a&&n&&(e[r].defaultSelected=!0)}else{for(a=0,r=""+eo(r),t=null;a<e.length;a++){if(e[a].value===r){e[a].selected=!0,n&&(e[a].defaultSelected=!0);return}null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function ev(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(d(91));return er({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ex(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(d(92));if(em(r)){if(1<r.length)throw Error(d(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:eo(r)}}function ew(e,t){var r=eo(t.value),n=eo(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function eP(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function eO(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function eT(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?eO(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ez,ek,eL=(ez=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ek=ek||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ek.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction(function(){return ez(e,t,r,n)})}:ez);function eE(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType){r.nodeValue=t;return}}e.textContent=t}var eN={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},eS=["Webkit","ms","Moz","O"];function eM(e,t,r){return null==t||"boolean"==typeof t||""===t?"":r||"number"!=typeof t||0===t||eN.hasOwnProperty(e)&&eN[e]?(""+t).trim():t+"px"}function ej(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),a=eM(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,a):e[r]=a}}Object.keys(eN).forEach(function(e){eS.forEach(function(t){eN[t=t+e.charAt(0).toUpperCase()+e.substring(1)]=eN[e]})});var eH=er({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function eR(e,t){if(t){if(eH[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(d(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(d(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(d(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(d(62))}}function eI(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var eB=null;function eV(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var eX=null,eU=null,eA=null;function eD(e){if(e=nK(e)){if("function"!=typeof eX)throw Error(d(280));var t=e.stateNode;t&&(t=nQ(t),eX(e.stateNode,e.type,t))}}function eC(e){eU?eA?eA.push(e):eA=[e]:eU=e}function eF(){if(eU){var e=eU,t=eA;if(eA=eU=null,eD(e),t)for(e=0;e<t.length;e++)eD(t[e])}}function eZ(e,t){return e(t)}function eq(){}var eG=!1;function eW(e,t,r){if(eG)return e(t,r);eG=!0;try{return eZ(e,t,r)}finally{eG=!1,(null!==eU||null!==eA)&&(eq(),eF())}}function eY(e,t){var r=e.stateNode;if(null===r)return null;var n=nQ(r);if(null===n)return null;switch(r=n[t],t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break;default:e=!1}if(e)return null;if(r&&"function"!=typeof r)throw Error(d(231,t,typeof r));return r}var eK=!1;if(y)try{var eJ={};Object.defineProperty(eJ,"passive",{get:function(){eK=!0}}),window.addEventListener("test",eJ,eJ),window.removeEventListener("test",eJ,eJ)}catch(e){eK=!1}function eQ(e,t,r,n,a,i,o,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(r,c)}catch(e){this.onError(e)}}var e_=!1,e$=null,e0=!1,e1=null,e2={onError:function(e){e_=!0,e$=e}};function e5(e,t,r,n,a,i,o,s,l){e_=!1,e$=null,eQ.apply(e2,arguments)}function e3(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do 0!=(4098&(t=e).flags)&&(r=t.return),e=t.return;while(e)}return 3===t.tag?r:null}function e8(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function e9(e){if(e3(e)!==e)throw Error(d(188))}function e6(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=e3(e)))throw Error(d(188));return t!==e?null:e}for(var r=e,n=t;;){var a=r.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(n=a.return)){r=n;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===r)return e9(a),e;if(i===n)return e9(a),t;i=i.sibling}throw Error(d(188))}if(r.return!==n.return)r=a,n=i;else{for(var o=!1,s=a.child;s;){if(s===r){o=!0,r=a,n=i;break}if(s===n){o=!0,n=a,r=i;break}s=s.sibling}if(!o){for(s=i.child;s;){if(s===r){o=!0,r=i,n=a;break}if(s===n){o=!0,n=i,r=a;break}s=s.sibling}if(!o)throw Error(d(189))}}if(r.alternate!==n)throw Error(d(190))}if(3!==r.tag)throw Error(d(188));return r.stateNode.current===r?e:t}(e))?function e(t){if(5===t.tag||6===t.tag)return t;for(t=t.child;null!==t;){var r=e(t);if(null!==r)return r;t=t.sibling}return null}(e):null}var e4=u.unstable_scheduleCallback,e7=u.unstable_cancelCallback,te=u.unstable_shouldYield,tt=u.unstable_requestPaint,tr=u.unstable_now,tn=u.unstable_getCurrentPriorityLevel,ta=u.unstable_ImmediatePriority,ti=u.unstable_UserBlockingPriority,to=u.unstable_NormalPriority,ts=u.unstable_LowPriority,tl=u.unstable_IdlePriority,tc=null,tu=null,td=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(tf(e)/tp|0)|0},tf=Math.log,tp=Math.LN2,th=64,tb=4194304;function ty(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function tm(e,t){var r=e.pendingLanes;if(0===r)return 0;var n=0,a=e.suspendedLanes,i=e.pingedLanes,o=268435455&r;if(0!==o){var s=o&~a;0!==s?n=ty(s):0!=(i&=o)&&(n=ty(i))}else 0!=(o=r&~a)?n=ty(o):0!==i&&(n=ty(i));if(0===n)return 0;if(0!==t&&t!==n&&0==(t&a)&&((a=n&-n)>=(i=t&-t)||16===a&&0!=(4194240&i)))return t;if(0!=(4&n)&&(n|=16&r),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)a=1<<(r=31-td(t)),n|=e[r],t&=~a;return n}function tg(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function tv(){var e=th;return 0==(4194240&(th<<=1))&&(th=64),e}function tx(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function tw(e,t,r){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-td(t)]=r}function tP(e,t){var r=e.entangledLanes|=t;for(e=e.entanglements;r;){var n=31-td(r),a=1<<n;a&t|e[n]&t&&(e[n]|=t),r&=~a}}var tO=0;function tT(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var tz,tk,tL,tE,tN,tS=!1,tM=[],tj=null,tH=null,tR=null,tI=new Map,tB=new Map,tV=[],tX="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function tU(e,t){switch(e){case"focusin":case"focusout":tj=null;break;case"dragenter":case"dragleave":tH=null;break;case"mouseover":case"mouseout":tR=null;break;case"pointerover":case"pointerout":tI.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":tB.delete(t.pointerId)}}function tA(e,t,r,n,a,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:r,eventSystemFlags:n,nativeEvent:i,targetContainers:[a]},null!==t&&null!==(t=nK(t))&&tk(t)):(e.eventSystemFlags|=n,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a)),e}function tD(e){var t=nY(e.target);if(null!==t){var r=e3(t);if(null!==r){if(13===(t=r.tag)){if(null!==(t=e8(r))){e.blockedOn=t,tN(e.priority,function(){tL(r)});return}}else if(3===t&&r.stateNode.current.memoizedState.isDehydrated){e.blockedOn=3===r.tag?r.stateNode.containerInfo:null;return}}}e.blockedOn=null}function tC(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=t$(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=nK(r))&&tk(t),e.blockedOn=r,!1;var n=new(r=e.nativeEvent).constructor(r.type,r);eB=n,r.target.dispatchEvent(n),eB=null,t.shift()}return!0}function tF(e,t,r){tC(e)&&r.delete(t)}function tZ(){tS=!1,null!==tj&&tC(tj)&&(tj=null),null!==tH&&tC(tH)&&(tH=null),null!==tR&&tC(tR)&&(tR=null),tI.forEach(tF),tB.forEach(tF)}function tq(e,t){e.blockedOn===t&&(e.blockedOn=null,tS||(tS=!0,u.unstable_scheduleCallback(u.unstable_NormalPriority,tZ)))}function tG(e){function t(t){return tq(t,e)}if(0<tM.length){tq(tM[0],e);for(var r=1;r<tM.length;r++){var n=tM[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==tj&&tq(tj,e),null!==tH&&tq(tH,e),null!==tR&&tq(tR,e),tI.forEach(t),tB.forEach(t),r=0;r<tV.length;r++)(n=tV[r]).blockedOn===e&&(n.blockedOn=null);for(;0<tV.length&&null===(r=tV[0]).blockedOn;)tD(r),null===r.blockedOn&&tV.shift()}var tW=k.ReactCurrentBatchConfig,tY=!0;function tK(e,t,r,n){var a=tO,i=tW.transition;tW.transition=null;try{tO=1,tQ(e,t,r,n)}finally{tO=a,tW.transition=i}}function tJ(e,t,r,n){var a=tO,i=tW.transition;tW.transition=null;try{tO=4,tQ(e,t,r,n)}finally{tO=a,tW.transition=i}}function tQ(e,t,r,n){if(tY){var a=t$(e,t,r,n);if(null===a)nx(e,t,n,t_,r),tU(e,n);else if(function(e,t,r,n,a){switch(t){case"focusin":return tj=tA(tj,e,t,r,n,a),!0;case"dragenter":return tH=tA(tH,e,t,r,n,a),!0;case"mouseover":return tR=tA(tR,e,t,r,n,a),!0;case"pointerover":var i=a.pointerId;return tI.set(i,tA(tI.get(i)||null,e,t,r,n,a)),!0;case"gotpointercapture":return i=a.pointerId,tB.set(i,tA(tB.get(i)||null,e,t,r,n,a)),!0}return!1}(a,e,t,r,n))n.stopPropagation();else if(tU(e,n),4&t&&-1<tX.indexOf(e)){for(;null!==a;){var i=nK(a);if(null!==i&&tz(i),null===(i=t$(e,t,r,n))&&nx(e,t,n,t_,r),i===a)break;a=i}null!==a&&n.stopPropagation()}else nx(e,t,n,null,r)}}var t_=null;function t$(e,t,r,n){if(t_=null,null!==(e=nY(e=eV(n)))){if(null===(t=e3(e)))e=null;else if(13===(r=t.tag)){if(null!==(e=e8(t)))return e;e=null}else if(3===r){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}return t_=e,null}function t0(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(tn()){case ta:return 1;case ti:return 4;case to:case ts:return 16;case tl:return 536870912;default:return 16}default:return 16}}var t1=null,t2=null,t5=null;function t3(){if(t5)return t5;var e,t,r=t2,n=r.length,a="value"in t1?t1.value:t1.textContent,i=a.length;for(e=0;e<n&&r[e]===a[e];e++);var o=n-e;for(t=1;t<=o&&r[n-t]===a[i-t];t++);return t5=a.slice(e,1<t?1-t:void 0)}function t8(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function t9(){return!0}function t6(){return!1}function t4(e){function t(t,r,n,a,i){for(var o in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=a,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?t9:t6,this.isPropagationStopped=t6,this}return er(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=t9)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=t9)},persist:function(){},isPersistent:t9}),t}var t7,re,rt,rr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},rn=t4(rr),ra=er({},rr,{view:0,detail:0}),ri=t4(ra),ro=er({},ra,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:rm,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==rt&&(rt&&"mousemove"===e.type?(t7=e.screenX-rt.screenX,re=e.screenY-rt.screenY):re=t7=0,rt=e),t7)},movementY:function(e){return"movementY"in e?e.movementY:re}}),rs=t4(ro),rl=t4(er({},ro,{dataTransfer:0})),rc=t4(er({},ra,{relatedTarget:0})),ru=t4(er({},rr,{animationName:0,elapsedTime:0,pseudoElement:0})),rd=t4(er({},rr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),rf=t4(er({},rr,{data:0})),rp={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},rh={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rb={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function ry(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=rb[e])&&!!t[e]}function rm(){return ry}var rg=t4(er({},ra,{key:function(e){if(e.key){var t=rp[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=t8(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?rh[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:rm,charCode:function(e){return"keypress"===e.type?t8(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?t8(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),rv=t4(er({},ro,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),rx=t4(er({},ra,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:rm})),rw=t4(er({},rr,{propertyName:0,elapsedTime:0,pseudoElement:0})),rP=t4(er({},ro,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),rO=[9,13,27,32],rT=y&&"CompositionEvent"in window,rz=null;y&&"documentMode"in document&&(rz=document.documentMode);var rk=y&&"TextEvent"in window&&!rz,rL=y&&(!rT||rz&&8<rz&&11>=rz),rE=!1;function rN(e,t){switch(e){case"keyup":return -1!==rO.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function rS(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var rM=!1,rj={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function rH(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!rj[e.type]:"textarea"===t}function rR(e,t,r,n){eC(n),0<(t=nP(t,"onChange")).length&&(r=new rn("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var rI=null,rB=null;function rV(e){nh(e,0)}function rX(e){if(ec(nJ(e)))return e}function rU(e,t){if("change"===e)return t}var rA=!1;if(y){if(y){var rD="oninput"in document;if(!rD){var rC=document.createElement("div");rC.setAttribute("oninput","return;"),rD="function"==typeof rC.oninput}n=rD}else n=!1;rA=n&&(!document.documentMode||9<document.documentMode)}function rF(){rI&&(rI.detachEvent("onpropertychange",rZ),rB=rI=null)}function rZ(e){if("value"===e.propertyName&&rX(rB)){var t=[];rR(t,rB,e,eV(e)),eW(rV,t)}}function rq(e,t,r){"focusin"===e?(rF(),rI=t,rB=r,rI.attachEvent("onpropertychange",rZ)):"focusout"===e&&rF()}function rG(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return rX(rB)}function rW(e,t){if("click"===e)return rX(t)}function rY(e,t){if("input"===e||"change"===e)return rX(t)}var rK="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function rJ(e,t){if(rK(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++){var a=r[n];if(!m.call(t,a)||!rK(e[a],t[a]))return!1}return!0}function rQ(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function r_(e,t){var r,n=rQ(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=rQ(n)}}function r$(){for(var e=window,t=eu();t instanceof e.HTMLIFrameElement;){try{var r="string"==typeof t.contentWindow.location.href}catch(e){r=!1}if(r)e=t.contentWindow;else break;t=eu(e.document)}return t}function r0(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var r1=y&&"documentMode"in document&&11>=document.documentMode,r2=null,r5=null,r3=null,r8=!1;function r9(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;r8||null==r2||r2!==eu(n)||(n="selectionStart"in(n=r2)&&r0(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},r3&&rJ(r3,n)||(r3=n,0<(n=nP(r5,"onSelect")).length&&(t=new rn("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=r2)))}function r6(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var r4={animationend:r6("Animation","AnimationEnd"),animationiteration:r6("Animation","AnimationIteration"),animationstart:r6("Animation","AnimationStart"),transitionend:r6("Transition","TransitionEnd")},r7={},ne={};function nt(e){if(r7[e])return r7[e];if(!r4[e])return e;var t,r=r4[e];for(t in r)if(r.hasOwnProperty(t)&&t in ne)return r7[e]=r[t];return e}y&&(ne=document.createElement("div").style,"AnimationEvent"in window||(delete r4.animationend.animation,delete r4.animationiteration.animation,delete r4.animationstart.animation),"TransitionEvent"in window||delete r4.transitionend.transition);var nr=nt("animationend"),nn=nt("animationiteration"),na=nt("animationstart"),ni=nt("transitionend"),no=new Map,ns="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function nl(e,t){no.set(e,t),h(t,[e])}for(var nc=0;nc<ns.length;nc++){var nu=ns[nc];nl(nu.toLowerCase(),"on"+(nu[0].toUpperCase()+nu.slice(1)))}nl(nr,"onAnimationEnd"),nl(nn,"onAnimationIteration"),nl(na,"onAnimationStart"),nl("dblclick","onDoubleClick"),nl("focusin","onFocus"),nl("focusout","onBlur"),nl(ni,"onTransitionEnd"),b("onMouseEnter",["mouseout","mouseover"]),b("onMouseLeave",["mouseout","mouseover"]),b("onPointerEnter",["pointerout","pointerover"]),b("onPointerLeave",["pointerout","pointerover"]),h("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),h("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),h("onBeforeInput",["compositionend","keypress","textInput","paste"]),h("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),h("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),h("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var nd="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),nf=new Set("cancel close invalid load scroll toggle".split(" ").concat(nd));function np(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,a,i,o,s,l){if(e5.apply(this,arguments),e_){if(e_){var c=e$;e_=!1,e$=null}else throw Error(d(198));e0||(e0=!0,e1=c)}}(n,t,void 0,e),e.currentTarget=null}function nh(e,t){t=0!=(4&t);for(var r=0;r<e.length;r++){var n=e[r],a=n.event;n=n.listeners;e:{var i=void 0;if(t)for(var o=n.length-1;0<=o;o--){var s=n[o],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==i&&a.isPropagationStopped())break e;np(a,s,c),i=l}else for(o=0;o<n.length;o++){if(l=(s=n[o]).instance,c=s.currentTarget,s=s.listener,l!==i&&a.isPropagationStopped())break e;np(a,s,c),i=l}}}if(e0)throw e=e1,e0=!1,e1=null,e}function nb(e,t){var r=t[nq];void 0===r&&(r=t[nq]=new Set);var n=e+"__bubble";r.has(n)||(nv(t,e,2,!1),r.add(n))}function ny(e,t,r){var n=0;t&&(n|=4),nv(r,e,n,t)}var nm="_reactListening"+Math.random().toString(36).slice(2);function ng(e){if(!e[nm]){e[nm]=!0,f.forEach(function(t){"selectionchange"!==t&&(nf.has(t)||ny(t,!1,e),ny(t,!0,e))});var t=9===e.nodeType?e:e.ownerDocument;null===t||t[nm]||(t[nm]=!0,ny("selectionchange",!1,t))}}function nv(e,t,r,n){switch(t0(t)){case 1:var a=tK;break;case 4:a=tJ;break;default:a=tQ}r=a.bind(null,t,r,e),a=void 0,eK&&("touchstart"===t||"touchmove"===t||"wheel"===t)&&(a=!0),n?void 0!==a?e.addEventListener(t,r,{capture:!0,passive:a}):e.addEventListener(t,r,!0):void 0!==a?e.addEventListener(t,r,{passive:a}):e.addEventListener(t,r,!1)}function nx(e,t,r,n,a){var i=n;if(0==(1&t)&&0==(2&t)&&null!==n)e:for(;;){if(null===n)return;var o=n.tag;if(3===o||4===o){var s=n.stateNode.containerInfo;if(s===a||8===s.nodeType&&s.parentNode===a)break;if(4===o)for(o=n.return;null!==o;){var l=o.tag;if((3===l||4===l)&&((l=o.stateNode.containerInfo)===a||8===l.nodeType&&l.parentNode===a))return;o=o.return}for(;null!==s;){if(null===(o=nY(s)))return;if(5===(l=o.tag)||6===l){n=i=o;continue e}s=s.parentNode}}n=n.return}eW(function(){var n=i,a=eV(r),o=[];e:{var s=no.get(e);if(void 0!==s){var l=rn,c=e;switch(e){case"keypress":if(0===t8(r))break e;case"keydown":case"keyup":l=rg;break;case"focusin":c="focus",l=rc;break;case"focusout":c="blur",l=rc;break;case"beforeblur":case"afterblur":l=rc;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=rs;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=rl;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=rx;break;case nr:case nn:case na:l=ru;break;case ni:l=rw;break;case"scroll":l=ri;break;case"wheel":l=rP;break;case"copy":case"cut":case"paste":l=rd;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=rv}var u=0!=(4&t),d=!u&&"scroll"===e,f=u?null!==s?s+"Capture":null:s;u=[];for(var p,h=n;null!==h;){var b=(p=h).stateNode;if(5===p.tag&&null!==b&&(p=b,null!==f&&null!=(b=eY(h,f))&&u.push(nw(h,b,p))),d)break;h=h.return}0<u.length&&(s=new l(s,c,null,r,a),o.push({event:s,listeners:u}))}}if(0==(7&t)){if(s="mouseover"===e||"pointerover"===e,l="mouseout"===e||"pointerout"===e,!(s&&r!==eB&&(c=r.relatedTarget||r.fromElement)&&(nY(c)||c[nZ]))&&(l||s)&&(s=a.window===a?a:(s=a.ownerDocument)?s.defaultView||s.parentWindow:window,l?(c=r.relatedTarget||r.toElement,l=n,null!==(c=c?nY(c):null)&&(d=e3(c),c!==d||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=n),l!==c)){if(u=rs,b="onMouseLeave",f="onMouseEnter",h="mouse",("pointerout"===e||"pointerover"===e)&&(u=rv,b="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==l?s:nJ(l),p=null==c?s:nJ(c),(s=new u(b,h+"leave",l,r,a)).target=d,s.relatedTarget=p,b=null,nY(a)===n&&((u=new u(f,h+"enter",c,r,a)).target=p,u.relatedTarget=d,b=u),d=b,l&&c)t:{for(u=l,f=c,h=0,p=u;p;p=nO(p))h++;for(p=0,b=f;b;b=nO(b))p++;for(;0<h-p;)u=nO(u),h--;for(;0<p-h;)f=nO(f),p--;for(;h--;){if(u===f||null!==f&&u===f.alternate)break t;u=nO(u),f=nO(f)}u=null}else u=null;null!==l&&nT(o,s,l,u,!1),null!==c&&null!==d&&nT(o,d,c,u,!0)}e:{if("select"===(l=(s=n?nJ(n):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var y,m=rU;else if(rH(s)){if(rA)m=rY;else{m=rG;var g=rq}}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=rW);if(m&&(m=m(e,n))){rR(o,m,r,a);break e}g&&g(e,s,n),"focusout"===e&&(g=s._wrapperState)&&g.controlled&&"number"===s.type&&ey(s,"number",s.value)}switch(g=n?nJ(n):window,e){case"focusin":(rH(g)||"true"===g.contentEditable)&&(r2=g,r5=n,r3=null);break;case"focusout":r3=r5=r2=null;break;case"mousedown":r8=!0;break;case"contextmenu":case"mouseup":case"dragend":r8=!1,r9(o,r,a);break;case"selectionchange":if(r1)break;case"keydown":case"keyup":r9(o,r,a)}if(rT)t:{switch(e){case"compositionstart":var v="onCompositionStart";break t;case"compositionend":v="onCompositionEnd";break t;case"compositionupdate":v="onCompositionUpdate";break t}v=void 0}else rM?rN(e,r)&&(v="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(v="onCompositionStart");v&&(rL&&"ko"!==r.locale&&(rM||"onCompositionStart"!==v?"onCompositionEnd"===v&&rM&&(y=t3()):(t2="value"in(t1=a)?t1.value:t1.textContent,rM=!0)),0<(g=nP(n,v)).length&&(v=new rf(v,e,null,r,a),o.push({event:v,listeners:g}),y?v.data=y:null!==(y=rS(r))&&(v.data=y))),(y=rk?function(e,t){switch(e){case"compositionend":return rS(t);case"keypress":if(32!==t.which)return null;return rE=!0," ";case"textInput":return" "===(e=t.data)&&rE?null:e;default:return null}}(e,r):function(e,t){if(rM)return"compositionend"===e||!rT&&rN(e,t)?(e=t3(),t5=t2=t1=null,rM=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return rL&&"ko"!==t.locale?null:t.data}}(e,r))&&0<(n=nP(n,"onBeforeInput")).length&&(a=new rf("onBeforeInput","beforeinput",null,r,a),o.push({event:a,listeners:n}),a.data=y)}nh(o,t)})}function nw(e,t,r){return{instance:e,listener:t,currentTarget:r}}function nP(e,t){for(var r=t+"Capture",n=[];null!==e;){var a=e,i=a.stateNode;5===a.tag&&null!==i&&(a=i,null!=(i=eY(e,r))&&n.unshift(nw(e,i,a)),null!=(i=eY(e,t))&&n.push(nw(e,i,a))),e=e.return}return n}function nO(e){if(null===e)return null;do e=e.return;while(e&&5!==e.tag)return e||null}function nT(e,t,r,n,a){for(var i=t._reactName,o=[];null!==r&&r!==n;){var s=r,l=s.alternate,c=s.stateNode;if(null!==l&&l===n)break;5===s.tag&&null!==c&&(s=c,a?null!=(l=eY(r,i))&&o.unshift(nw(r,l,s)):a||null!=(l=eY(r,i))&&o.push(nw(r,l,s))),r=r.return}0!==o.length&&e.push({event:t,listeners:o})}var nz=/\r\n?/g,nk=/\u0000|\uFFFD/g;function nL(e){return("string"==typeof e?e:""+e).replace(nz,"\n").replace(nk,"")}function nE(e,t,r){if(t=nL(t),nL(e)!==t&&r)throw Error(d(425))}function nN(){}var nS=null,nM=null;function nj(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var nH="function"==typeof setTimeout?setTimeout:void 0,nR="function"==typeof clearTimeout?clearTimeout:void 0,nI="function"==typeof Promise?Promise:void 0,nB="function"==typeof queueMicrotask?queueMicrotask:void 0!==nI?function(e){return nI.resolve(null).then(e).catch(nV)}:nH;function nV(e){setTimeout(function(){throw e})}function nX(e,t){var r=t,n=0;do{var a=r.nextSibling;if(e.removeChild(r),a&&8===a.nodeType){if("/$"===(r=a.data)){if(0===n){e.removeChild(a),tG(t);return}n--}else"$"!==r&&"$?"!==r&&"$!"!==r||n++}r=a}while(r)tG(t)}function nU(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function nA(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var nD=Math.random().toString(36).slice(2),nC="__reactFiber$"+nD,nF="__reactProps$"+nD,nZ="__reactContainer$"+nD,nq="__reactEvents$"+nD,nG="__reactListeners$"+nD,nW="__reactHandles$"+nD;function nY(e){var t=e[nC];if(t)return t;for(var r=e.parentNode;r;){if(t=r[nZ]||r[nC]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=nA(e);null!==e;){if(r=e[nC])return r;e=nA(e)}return t}r=(e=r).parentNode}return null}function nK(e){return(e=e[nC]||e[nZ])&&(5===e.tag||6===e.tag||13===e.tag||3===e.tag)?e:null}function nJ(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(d(33))}function nQ(e){return e[nF]||null}var n_=[],n$=-1;function n0(e){return{current:e}}function n1(e){0>n$||(e.current=n_[n$],n_[n$]=null,n$--)}function n2(e,t){n_[++n$]=e.current,e.current=t}var n5={},n3=n0(n5),n8=n0(!1),n9=n5;function n6(e,t){var r=e.type.contextTypes;if(!r)return n5;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in r)i[a]=t[a];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function n4(e){return null!=(e=e.childContextTypes)}function n7(){n1(n8),n1(n3)}function ae(e,t,r){if(n3.current!==n5)throw Error(d(168));n2(n3,t),n2(n8,r)}function at(e,t,r){var n=e.stateNode;if(t=t.childContextTypes,"function"!=typeof n.getChildContext)return r;for(var a in n=n.getChildContext())if(!(a in t))throw Error(d(108,function(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return function e(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case N:return"Fragment";case E:return"Portal";case M:return"Profiler";case S:return"StrictMode";case I:return"Suspense";case B:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case H:return(t.displayName||"Context")+".Consumer";case j:return(t._context.displayName||"Context")+".Provider";case R:var r=t.render;return(t=t.displayName)||(t=""!==(t=r.displayName||r.name||"")?"ForwardRef("+t+")":"ForwardRef"),t;case V:return null!==(r=t.displayName||null)?r:e(t.type)||"Memo";case X:r=t._payload,t=t._init;try{return e(t(r))}catch(e){}}return null}(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}(e)||"Unknown",a));return er({},r,n)}function ar(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||n5,n9=n3.current,n2(n3,e),n2(n8,n8.current),!0}function an(e,t,r){var n=e.stateNode;if(!n)throw Error(d(169));r?(e=at(e,t,n9),n.__reactInternalMemoizedMergedChildContext=e,n1(n8),n1(n3),n2(n3,e)):n1(n8),n2(n8,r)}var aa=null,ai=!1,ao=!1;function as(e){null===aa?aa=[e]:aa.push(e)}function al(){if(!ao&&null!==aa){ao=!0;var e=0,t=tO;try{var r=aa;for(tO=1;e<r.length;e++){var n=r[e];do n=n(!0);while(null!==n)}aa=null,ai=!1}catch(t){throw null!==aa&&(aa=aa.slice(e+1)),e4(ta,al),t}finally{tO=t,ao=!1}}return null}var ac=[],au=0,ad=null,af=0,ap=[],ah=0,ab=null,ay=1,am="";function ag(e,t){ac[au++]=af,ac[au++]=ad,ad=e,af=t}function av(e,t,r){ap[ah++]=ay,ap[ah++]=am,ap[ah++]=ab,ab=e;var n=ay;e=am;var a=32-td(n)-1;n&=~(1<<a),r+=1;var i=32-td(t)+a;if(30<i){var o=a-a%5;i=(n&(1<<o)-1).toString(32),n>>=o,a-=o,ay=1<<32-td(t)+a|r<<a|n,am=i+e}else ay=1<<i|r<<a|n,am=e}function ax(e){null!==e.return&&(ag(e,1),av(e,1,0))}function aw(e){for(;e===ad;)ad=ac[--au],ac[au]=null,af=ac[--au],ac[au]=null;for(;e===ab;)ab=ap[--ah],ap[ah]=null,am=ap[--ah],ap[ah]=null,ay=ap[--ah],ap[ah]=null}var aP=null,aO=null,aT=!1,az=null;function ak(e,t){var r=s4(5,null,null,0);r.elementType="DELETED",r.stateNode=t,r.return=e,null===(t=e.deletions)?(e.deletions=[r],e.flags|=16):t.push(r)}function aL(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,aP=e,aO=nU(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,aP=e,aO=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(r=null!==ab?{id:ay,overflow:am}:null,e.memoizedState={dehydrated:t,treeContext:r,retryLane:1073741824},(r=s4(18,null,null,0)).stateNode=t,r.return=e,e.child=r,aP=e,aO=null,!0);default:return!1}}function aE(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function aN(e){if(aT){var t=aO;if(t){var r=t;if(!aL(e,t)){if(aE(e))throw Error(d(418));t=nU(r.nextSibling);var n=aP;t&&aL(e,t)?ak(n,r):(e.flags=-4097&e.flags|2,aT=!1,aP=e)}}else{if(aE(e))throw Error(d(418));e.flags=-4097&e.flags|2,aT=!1,aP=e}}}function aS(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;aP=e}function aM(e){if(e!==aP)return!1;if(!aT)return aS(e),aT=!0,!1;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!nj(e.type,e.memoizedProps)),t&&(t=aO)){if(aE(e))throw aj(),Error(d(418));for(;t;)ak(e,t),t=nU(t.nextSibling)}if(aS(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(d(317));e:{for(t=0,e=e.nextSibling;e;){if(8===e.nodeType){var t,r=e.data;if("/$"===r){if(0===t){aO=nU(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}aO=null}}else aO=aP?nU(e.stateNode.nextSibling):null;return!0}function aj(){for(var e=aO;e;)e=nU(e.nextSibling)}function aH(){aO=aP=null,aT=!1}function aR(e){null===az?az=[e]:az.push(e)}var aI=k.ReactCurrentBatchConfig;function aB(e,t){if(e&&e.defaultProps)for(var r in t=er({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}var aV=n0(null),aX=null,aU=null,aA=null;function aD(){aA=aU=aX=null}function aC(e){var t=aV.current;n1(aV),e._currentValue=t}function aF(e,t,r){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==n&&(n.childLanes|=t)):null!==n&&(n.childLanes&t)!==t&&(n.childLanes|=t),e===r)break;e=e.return}}function aZ(e,t){aX=e,aA=aU=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ow=!0),e.firstContext=null)}function aq(e){var t=e._currentValue;if(aA!==e){if(e={context:e,memoizedValue:t,next:null},null===aU){if(null===aX)throw Error(d(308));aU=e,aX.dependencies={lanes:0,firstContext:e}}else aU=aU.next=e}return t}var aG=null;function aW(e){null===aG?aG=[e]:aG.push(e)}function aY(e,t,r,n){var a=t.interleaved;return null===a?(r.next=r,aW(t)):(r.next=a.next,a.next=r),t.interleaved=r,aK(e,n)}function aK(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}var aJ=!1;function aQ(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function a_(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function a$(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function a0(e,t,r){var n=e.updateQueue;if(null===n)return null;if(n=n.shared,0!=(2&sl)){var a=n.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),n.pending=t,aK(e,r)}return null===(a=n.interleaved)?(t.next=t,aW(n)):(t.next=a.next,a.next=t),n.interleaved=t,aK(e,r)}function a1(e,t,r){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&r))){var n=t.lanes;n&=e.pendingLanes,r|=n,t.lanes=r,tP(e,r)}}function a2(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var a=null,i=null;if(null!==(r=r.firstBaseUpdate)){do{var o={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===i?a=i=o:i=i.next=o,r=r.next}while(null!==r)null===i?a=i=t:i=i.next=t}else a=i=t;r={baseState:n.baseState,firstBaseUpdate:a,lastBaseUpdate:i,shared:n.shared,effects:n.effects},e.updateQueue=r;return}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function a5(e,t,r,n){var a=e.updateQueue;aJ=!1;var i=a.firstBaseUpdate,o=a.lastBaseUpdate,s=a.shared.pending;if(null!==s){a.shared.pending=null;var l=s,c=l.next;l.next=null,null===o?i=c:o.next=c,o=l;var u=e.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==o&&(null===s?u.firstBaseUpdate=c:s.next=c,u.lastBaseUpdate=l)}if(null!==i){var d=a.baseState;for(o=0,u=c=l=null,s=i;;){var f=s.lane,p=s.eventTime;if((n&f)===f){null!==u&&(u=u.next={eventTime:p,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var h=e,b=s;switch(f=t,p=r,b.tag){case 1:if("function"==typeof(h=b.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=b.payload)?h.call(p,d,f):h))break e;d=er({},d,f);break e;case 2:aJ=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[s]:f.push(s))}else p={eventTime:p,lane:f,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(c=u=p,l=d):u=u.next=p,o|=f;if(null===(s=s.next)){if(null===(s=a.shared.pending))break;s=(f=s).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===u&&(l=d),a.baseState=l,a.firstBaseUpdate=c,a.lastBaseUpdate=u,null!==(t=a.shared.interleaved)){a=t;do o|=a.lane,a=a.next;while(a!==t)}else null===i&&(a.shared.lanes=0);sy|=o,e.lanes=o,e.memoizedState=d}}function a3(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],a=n.callback;if(null!==a){if(n.callback=null,n=r,"function"!=typeof a)throw Error(d(191,a));a.call(n)}}}var a8=(new c.Component).refs;function a9(e,t,r,n){r=null==(r=r(n,t=e.memoizedState))?t:er({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var a6={isMounted:function(e){return!!(e=e._reactInternals)&&e3(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=sR(),a=sI(e),i=a$(n,a);i.payload=t,null!=r&&(i.callback=r),null!==(t=a0(e,i,a))&&(sB(t,e,a,n),a1(t,e,a))},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=sR(),a=sI(e),i=a$(n,a);i.tag=1,i.payload=t,null!=r&&(i.callback=r),null!==(t=a0(e,i,a))&&(sB(t,e,a,n),a1(t,e,a))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=sR(),n=sI(e),a=a$(r,n);a.tag=2,null!=t&&(a.callback=t),null!==(t=a0(e,a,n))&&(sB(t,e,n,r),a1(t,e,n))}};function a4(e,t,r,n,a,i,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,i,o):!t.prototype||!t.prototype.isPureReactComponent||!rJ(r,n)||!rJ(a,i)}function a7(e,t,r){var n=!1,a=n5,i=t.contextType;return"object"==typeof i&&null!==i?i=aq(i):(a=n4(t)?n9:n3.current,i=(n=null!=(n=t.contextTypes))?n6(e,a):n5),t=new t(r,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=a6,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function ie(e,t,r,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&a6.enqueueReplaceState(t,t.state,null)}function it(e,t,r,n){var a=e.stateNode;a.props=r,a.state=e.memoizedState,a.refs=a8,aQ(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=aq(i):(i=n4(t)?n9:n3.current,a.context=n6(e,i)),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(a9(e,t,i,r),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&a6.enqueueReplaceState(a,a.state,null),a5(e,r,a,n),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}function ir(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!=typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(d(309));var n=r.stateNode}if(!n)throw Error(d(147,e));var a=n,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=a.refs;t===a8&&(t=a.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(d(284));if(!r._owner)throw Error(d(290,e))}return e}function ia(e,t){throw Error(d(31,"[object Object]"===(e=Object.prototype.toString.call(t))?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ii(e){return(0,e._init)(e._payload)}function io(e){function t(t,r){if(e){var n=t.deletions;null===n?(t.deletions=[r],t.flags|=16):n.push(r)}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=le(e,t)).index=0,e.sibling=null,e}function i(t,r,n){return(t.index=n,e)?null!==(n=t.alternate)?(n=n.index)<r?(t.flags|=2,r):n:(t.flags|=2,r):(t.flags|=1048576,r)}function o(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,r,n){return null===t||6!==t.tag?(t=la(r,e.mode,n)).return=e:(t=a(t,r)).return=e,t}function l(e,t,r,n){var i=r.type;return i===N?u(e,t,r.props.children,n,r.key):(null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===X&&ii(i)===t.type)?(n=a(t,r.props)).ref=ir(e,t,r):(n=lt(r.type,r.key,r.props,null,e.mode,n)).ref=ir(e,t,r),n.return=e,n)}function c(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?(t=li(r,e.mode,n)).return=e:(t=a(t,r.children||[])).return=e,t}function u(e,t,r,n,i){return null===t||7!==t.tag?(t=lr(r,e.mode,n,i)).return=e:(t=a(t,r)).return=e,t}function f(e,t,r){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=la(""+t,e.mode,r)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case L:return(r=lt(t.type,t.key,t.props,null,e.mode,r)).ref=ir(e,null,t),r.return=e,r;case E:return(t=li(t,e.mode,r)).return=e,t;case X:return f(e,(0,t._init)(t._payload),r)}if(em(t)||C(t))return(t=lr(t,e.mode,r,null)).return=e,t;ia(e,t)}return null}function p(e,t,r,n){var a=null!==t?t.key:null;if("string"==typeof r&&""!==r||"number"==typeof r)return null!==a?null:s(e,t,""+r,n);if("object"==typeof r&&null!==r){switch(r.$$typeof){case L:return r.key===a?l(e,t,r,n):null;case E:return r.key===a?c(e,t,r,n):null;case X:return p(e,t,(a=r._init)(r._payload),n)}if(em(r)||C(r))return null!==a?null:u(e,t,r,n,null);ia(e,r)}return null}function h(e,t,r,n,a){if("string"==typeof n&&""!==n||"number"==typeof n)return s(t,e=e.get(r)||null,""+n,a);if("object"==typeof n&&null!==n){switch(n.$$typeof){case L:return l(t,e=e.get(null===n.key?r:n.key)||null,n,a);case E:return c(t,e=e.get(null===n.key?r:n.key)||null,n,a);case X:return h(e,t,r,(0,n._init)(n._payload),a)}if(em(n)||C(n))return u(t,e=e.get(r)||null,n,a,null);ia(t,n)}return null}return function s(l,c,u,b){if("object"==typeof u&&null!==u&&u.type===N&&null===u.key&&(u=u.props.children),"object"==typeof u&&null!==u){switch(u.$$typeof){case L:e:{for(var y=u.key,m=c;null!==m;){if(m.key===y){if((y=u.type)===N){if(7===m.tag){r(l,m.sibling),(c=a(m,u.props.children)).return=l,l=c;break e}}else if(m.elementType===y||"object"==typeof y&&null!==y&&y.$$typeof===X&&ii(y)===m.type){r(l,m.sibling),(c=a(m,u.props)).ref=ir(l,m,u),c.return=l,l=c;break e}r(l,m);break}t(l,m),m=m.sibling}u.type===N?((c=lr(u.props.children,l.mode,b,u.key)).return=l,l=c):((b=lt(u.type,u.key,u.props,null,l.mode,b)).ref=ir(l,c,u),b.return=l,l=b)}return o(l);case E:e:{for(m=u.key;null!==c;){if(c.key===m){if(4===c.tag&&c.stateNode.containerInfo===u.containerInfo&&c.stateNode.implementation===u.implementation){r(l,c.sibling),(c=a(c,u.children||[])).return=l,l=c;break e}r(l,c);break}t(l,c),c=c.sibling}(c=li(u,l.mode,b)).return=l,l=c}return o(l);case X:return s(l,c,(m=u._init)(u._payload),b)}if(em(u))return function(a,o,s,l){for(var c=null,u=null,d=o,b=o=0,y=null;null!==d&&b<s.length;b++){d.index>b?(y=d,d=null):y=d.sibling;var m=p(a,d,s[b],l);if(null===m){null===d&&(d=y);break}e&&d&&null===m.alternate&&t(a,d),o=i(m,o,b),null===u?c=m:u.sibling=m,u=m,d=y}if(b===s.length)return r(a,d),aT&&ag(a,b),c;if(null===d){for(;b<s.length;b++)null!==(d=f(a,s[b],l))&&(o=i(d,o,b),null===u?c=d:u.sibling=d,u=d);return aT&&ag(a,b),c}for(d=n(a,d);b<s.length;b++)null!==(y=h(d,a,b,s[b],l))&&(e&&null!==y.alternate&&d.delete(null===y.key?b:y.key),o=i(y,o,b),null===u?c=y:u.sibling=y,u=y);return e&&d.forEach(function(e){return t(a,e)}),aT&&ag(a,b),c}(l,c,u,b);if(C(u))return function(a,o,s,l){var c=C(s);if("function"!=typeof c)throw Error(d(150));if(null==(s=c.call(s)))throw Error(d(151));for(var u=c=null,b=o,y=o=0,m=null,g=s.next();null!==b&&!g.done;y++,g=s.next()){b.index>y?(m=b,b=null):m=b.sibling;var v=p(a,b,g.value,l);if(null===v){null===b&&(b=m);break}e&&b&&null===v.alternate&&t(a,b),o=i(v,o,y),null===u?c=v:u.sibling=v,u=v,b=m}if(g.done)return r(a,b),aT&&ag(a,y),c;if(null===b){for(;!g.done;y++,g=s.next())null!==(g=f(a,g.value,l))&&(o=i(g,o,y),null===u?c=g:u.sibling=g,u=g);return aT&&ag(a,y),c}for(b=n(a,b);!g.done;y++,g=s.next())null!==(g=h(b,a,y,g.value,l))&&(e&&null!==g.alternate&&b.delete(null===g.key?y:g.key),o=i(g,o,y),null===u?c=g:u.sibling=g,u=g);return e&&b.forEach(function(e){return t(a,e)}),aT&&ag(a,y),c}(l,c,u,b);ia(l,u)}return"string"==typeof u&&""!==u||"number"==typeof u?(u=""+u,null!==c&&6===c.tag?(r(l,c.sibling),(c=a(c,u)).return=l):(r(l,c),(c=la(u,l.mode,b)).return=l),o(l=c)):r(l,c)}}var is=io(!0),il=io(!1),ic={},iu=n0(ic),id=n0(ic),ip=n0(ic);function ih(e){if(e===ic)throw Error(d(174));return e}function ib(e,t){switch(n2(ip,t),n2(id,e),n2(iu,ic),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:eT(null,"");break;default:t=eT(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}n1(iu),n2(iu,t)}function iy(){n1(iu),n1(id),n1(ip)}function im(e){ih(ip.current);var t=ih(iu.current),r=eT(t,e.type);t!==r&&(n2(id,e),n2(iu,r))}function ig(e){id.current===e&&(n1(iu),n1(id))}var iv=n0(0);function ix(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var iw=[];function iP(){for(var e=0;e<iw.length;e++)iw[e]._workInProgressVersionPrimary=null;iw.length=0}var iO=k.ReactCurrentDispatcher,iT=k.ReactCurrentBatchConfig,iz=0,ik=null,iL=null,iE=null,iN=!1,iS=!1,iM=0,ij=0;function iH(){throw Error(d(321))}function iR(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!rK(e[r],t[r]))return!1;return!0}function iI(e,t,r,n,a,i){if(iz=i,ik=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,iO.current=null===e||null===e.memoizedState?ol:oc,e=r(n,a),iS){i=0;do{if(iS=!1,iM=0,25<=i)throw Error(d(301));i+=1,iE=iL=null,t.updateQueue=null,iO.current=ou,e=r(n,a)}while(iS)}if(iO.current=os,t=null!==iL&&null!==iL.next,iz=0,iE=iL=ik=null,iN=!1,t)throw Error(d(300));return e}function iB(){var e=0!==iM;return iM=0,e}function iV(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===iE?ik.memoizedState=iE=e:iE=iE.next=e,iE}function iX(){if(null===iL){var e=ik.alternate;e=null!==e?e.memoizedState:null}else e=iL.next;var t=null===iE?ik.memoizedState:iE.next;if(null!==t)iE=t,iL=e;else{if(null===e)throw Error(d(310));e={memoizedState:(iL=e).memoizedState,baseState:iL.baseState,baseQueue:iL.baseQueue,queue:iL.queue,next:null},null===iE?ik.memoizedState=iE=e:iE=iE.next=e}return iE}function iU(e,t){return"function"==typeof t?t(e):t}function iA(e){var t=iX(),r=t.queue;if(null===r)throw Error(d(311));r.lastRenderedReducer=e;var n=iL,a=n.baseQueue,i=r.pending;if(null!==i){if(null!==a){var o=a.next;a.next=i.next,i.next=o}n.baseQueue=a=i,r.pending=null}if(null!==a){i=a.next,n=n.baseState;var s=o=null,l=null,c=i;do{var u=c.lane;if((iz&u)===u)null!==l&&(l=l.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),n=c.hasEagerState?c.eagerState:e(n,c.action);else{var f={lane:u,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===l?(s=l=f,o=n):l=l.next=f,ik.lanes|=u,sy|=u}c=c.next}while(null!==c&&c!==i)null===l?o=n:l.next=s,rK(n,t.memoizedState)||(ow=!0),t.memoizedState=n,t.baseState=o,t.baseQueue=l,r.lastRenderedState=n}if(null!==(e=r.interleaved)){a=e;do i=a.lane,ik.lanes|=i,sy|=i,a=a.next;while(a!==e)}else null===a&&(r.lanes=0);return[t.memoizedState,r.dispatch]}function iD(e){var t=iX(),r=t.queue;if(null===r)throw Error(d(311));r.lastRenderedReducer=e;var n=r.dispatch,a=r.pending,i=t.memoizedState;if(null!==a){r.pending=null;var o=a=a.next;do i=e(i,o.action),o=o.next;while(o!==a)rK(i,t.memoizedState)||(ow=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),r.lastRenderedState=i}return[i,n]}function iC(){}function iF(e,t){var r=ik,n=iX(),a=t(),i=!rK(n.memoizedState,a);if(i&&(n.memoizedState=a,ow=!0),n=n.queue,i1(iG.bind(null,r,n,e),[e]),n.getSnapshot!==t||i||null!==iE&&1&iE.memoizedState.tag){if(r.flags|=2048,iJ(9,iq.bind(null,r,n,a,t),void 0,null),null===sc)throw Error(d(349));0!=(30&iz)||iZ(r,t,a)}return a}function iZ(e,t,r){e.flags|=16384,e={getSnapshot:t,value:r},null===(t=ik.updateQueue)?(t={lastEffect:null,stores:null},ik.updateQueue=t,t.stores=[e]):null===(r=t.stores)?t.stores=[e]:r.push(e)}function iq(e,t,r,n){t.value=r,t.getSnapshot=n,iW(t)&&iY(e)}function iG(e,t,r){return r(function(){iW(t)&&iY(e)})}function iW(e){var t=e.getSnapshot;e=e.value;try{var r=t();return!rK(e,r)}catch(e){return!0}}function iY(e){var t=aK(e,1);null!==t&&sB(t,e,1,-1)}function iK(e){var t=iV();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:iU,lastRenderedState:e},t.queue=e,e=e.dispatch=on.bind(null,ik,e),[t.memoizedState,e]}function iJ(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=ik.updateQueue)?(t={lastEffect:null,stores:null},ik.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function iQ(){return iX().memoizedState}function i_(e,t,r,n){var a=iV();ik.flags|=e,a.memoizedState=iJ(1|t,r,void 0,void 0===n?null:n)}function i$(e,t,r,n){var a=iX();n=void 0===n?null:n;var i=void 0;if(null!==iL){var o=iL.memoizedState;if(i=o.destroy,null!==n&&iR(n,o.deps)){a.memoizedState=iJ(t,r,i,n);return}}ik.flags|=e,a.memoizedState=iJ(1|t,r,i,n)}function i0(e,t){return i_(8390656,8,e,t)}function i1(e,t){return i$(2048,8,e,t)}function i2(e,t){return i$(4,2,e,t)}function i5(e,t){return i$(4,4,e,t)}function i3(e,t){return"function"==typeof t?(t(e=e()),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function i8(e,t,r){return r=null!=r?r.concat([e]):null,i$(4,4,i3.bind(null,t,e),r)}function i9(){}function i6(e,t){var r=iX();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&iR(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function i4(e,t){var r=iX();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&iR(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function i7(e,t,r){return 0==(21&iz)?(e.baseState&&(e.baseState=!1,ow=!0),e.memoizedState=r):(rK(r,t)||(r=tv(),ik.lanes|=r,sy|=r,e.baseState=!0),t)}function oe(e,t){var r=tO;tO=0!==r&&4>r?r:4,e(!0);var n=iT.transition;iT.transition={};try{e(!1),t()}finally{tO=r,iT.transition=n}}function ot(){return iX().memoizedState}function or(e,t,r){var n=sI(e);r={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null},oa(e)?oi(t,r):null!==(r=aY(e,t,r,n))&&(sB(r,e,n,sR()),oo(r,t,n))}function on(e,t,r){var n=sI(e),a={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null};if(oa(e))oi(t,a);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var o=t.lastRenderedState,s=i(o,r);if(a.hasEagerState=!0,a.eagerState=s,rK(s,o)){var l=t.interleaved;null===l?(a.next=a,aW(t)):(a.next=l.next,l.next=a),t.interleaved=a;return}}catch(e){}finally{}null!==(r=aY(e,t,a,n))&&(sB(r,e,n,a=sR()),oo(r,t,n))}}function oa(e){var t=e.alternate;return e===ik||null!==t&&t===ik}function oi(e,t){iS=iN=!0;var r=e.pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}function oo(e,t,r){if(0!=(4194240&r)){var n=t.lanes;n&=e.pendingLanes,r|=n,t.lanes=r,tP(e,r)}}var os={readContext:aq,useCallback:iH,useContext:iH,useEffect:iH,useImperativeHandle:iH,useInsertionEffect:iH,useLayoutEffect:iH,useMemo:iH,useReducer:iH,useRef:iH,useState:iH,useDebugValue:iH,useDeferredValue:iH,useTransition:iH,useMutableSource:iH,useSyncExternalStore:iH,useId:iH,unstable_isNewReconciler:!1},ol={readContext:aq,useCallback:function(e,t){return iV().memoizedState=[e,void 0===t?null:t],e},useContext:aq,useEffect:i0,useImperativeHandle:function(e,t,r){return r=null!=r?r.concat([e]):null,i_(4194308,4,i3.bind(null,t,e),r)},useLayoutEffect:function(e,t){return i_(4194308,4,e,t)},useInsertionEffect:function(e,t){return i_(4,2,e,t)},useMemo:function(e,t){var r=iV();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=iV();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},n.queue=e,e=e.dispatch=or.bind(null,ik,e),[n.memoizedState,e]},useRef:function(e){return e={current:e},iV().memoizedState=e},useState:iK,useDebugValue:i9,useDeferredValue:function(e){return iV().memoizedState=e},useTransition:function(){var e=iK(!1),t=e[0];return e=oe.bind(null,e[1]),iV().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,r){var n=ik,a=iV();if(aT){if(void 0===r)throw Error(d(407));r=r()}else{if(r=t(),null===sc)throw Error(d(349));0!=(30&iz)||iZ(n,t,r)}a.memoizedState=r;var i={value:r,getSnapshot:t};return a.queue=i,i0(iG.bind(null,n,i,e),[e]),n.flags|=2048,iJ(9,iq.bind(null,n,i,r,t),void 0,null),r},useId:function(){var e=iV(),t=sc.identifierPrefix;if(aT){var r=am,n=ay;t=":"+t+"R"+(r=(n&~(1<<32-td(n)-1)).toString(32)+r),0<(r=iM++)&&(t+="H"+r.toString(32)),t+=":"}else t=":"+t+"r"+(r=ij++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},oc={readContext:aq,useCallback:i6,useContext:aq,useEffect:i1,useImperativeHandle:i8,useInsertionEffect:i2,useLayoutEffect:i5,useMemo:i4,useReducer:iA,useRef:iQ,useState:function(){return iA(iU)},useDebugValue:i9,useDeferredValue:function(e){return i7(iX(),iL.memoizedState,e)},useTransition:function(){return[iA(iU)[0],iX().memoizedState]},useMutableSource:iC,useSyncExternalStore:iF,useId:ot,unstable_isNewReconciler:!1},ou={readContext:aq,useCallback:i6,useContext:aq,useEffect:i1,useImperativeHandle:i8,useInsertionEffect:i2,useLayoutEffect:i5,useMemo:i4,useReducer:iD,useRef:iQ,useState:function(){return iD(iU)},useDebugValue:i9,useDeferredValue:function(e){var t=iX();return null===iL?t.memoizedState=e:i7(t,iL.memoizedState,e)},useTransition:function(){return[iD(iU)[0],iX().memoizedState]},useMutableSource:iC,useSyncExternalStore:iF,useId:ot,unstable_isNewReconciler:!1};function od(e,t){try{var r="",n=t;do r+=function(e){switch(e.tag){case 5:return en(e.type);case 16:return en("Lazy");case 13:return en("Suspense");case 19:return en("SuspenseList");case 0:case 2:case 15:return e=ei(e.type,!1);case 11:return e=ei(e.type.render,!1);case 1:return e=ei(e.type,!0);default:return""}}(n),n=n.return;while(n)var a=r}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a,digest:null}}function of(e,t,r){return{value:e,source:null,stack:null!=r?r:null,digest:null!=t?t:null}}function op(e,t){try{console.error(t.value)}catch(e){setTimeout(function(){throw e})}}var oh="function"==typeof WeakMap?WeakMap:Map;function ob(e,t,r){(r=a$(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){sT||(sT=!0,sz=n),op(e,t)},r}function oy(e,t,r){(r=a$(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var a=t.value;r.payload=function(){return n(a)},r.callback=function(){op(e,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(r.callback=function(){op(e,t),"function"!=typeof n&&(null===sk?sk=new Set([this]):sk.add(this));var r=t.stack;this.componentDidCatch(t.value,{componentStack:null!==r?r:""})}),r}function om(e,t,r){var n=e.pingCache;if(null===n){n=e.pingCache=new oh;var a=new Set;n.set(t,a)}else void 0===(a=n.get(t))&&(a=new Set,n.set(t,a));a.has(r)||(a.add(r),e=s5.bind(null,e,t,r),t.then(e,e))}function og(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e)return null}function ov(e,t,r,n,a){return 0==(1&e.mode)?e===t?e.flags|=65536:(e.flags|=128,r.flags|=131072,r.flags&=-52805,1===r.tag&&(null===r.alternate?r.tag=17:((t=a$(-1,1)).tag=2,a0(r,t,1))),r.lanes|=1):(e.flags|=65536,e.lanes=a),e}var ox=k.ReactCurrentOwner,ow=!1;function oP(e,t,r,n){t.child=null===e?il(t,null,r,n):is(t,e.child,r,n)}function oO(e,t,r,n,a){r=r.render;var i=t.ref;return(aZ(t,a),n=iI(e,t,r,n,i,a),r=iB(),null===e||ow)?(aT&&r&&ax(t),t.flags|=1,oP(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,oC(e,t,a))}function oT(e,t,r,n,a){if(null===e){var i=r.type;return"function"!=typeof i||s7(i)||void 0!==i.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=lt(r.type,null,n,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,oz(e,t,i,n,a))}if(i=e.child,0==(e.lanes&a)){var o=i.memoizedProps;if((r=null!==(r=r.compare)?r:rJ)(o,n)&&e.ref===t.ref)return oC(e,t,a)}return t.flags|=1,(e=le(i,n)).ref=t.ref,e.return=t,t.child=e}function oz(e,t,r,n,a){if(null!==e){var i=e.memoizedProps;if(rJ(i,n)&&e.ref===t.ref){if(ow=!1,t.pendingProps=n=i,0==(e.lanes&a))return t.lanes=e.lanes,oC(e,t,a);0!=(131072&e.flags)&&(ow=!0)}}return oE(e,t,r,n,a)}function ok(e,t,r){var n=t.pendingProps,a=n.children,i=null!==e?e.memoizedState:null;if("hidden"===n.mode){if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},n2(sp,sf),sf|=r;else{if(0==(1073741824&r))return e=null!==i?i.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,n2(sp,sf),sf|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},n=null!==i?i.baseLanes:r,n2(sp,sf),sf|=n}}else null!==i?(n=i.baseLanes|r,t.memoizedState=null):n=r,n2(sp,sf),sf|=n;return oP(e,t,a,r),t.child}function oL(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=512,t.flags|=2097152)}function oE(e,t,r,n,a){var i=n4(r)?n9:n3.current;return(i=n6(t,i),aZ(t,a),r=iI(e,t,r,n,i,a),n=iB(),null===e||ow)?(aT&&n&&ax(t),t.flags|=1,oP(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,oC(e,t,a))}function oN(e,t,r,n,a){if(n4(r)){var i=!0;ar(t)}else i=!1;if(aZ(t,a),null===t.stateNode)oD(e,t),a7(t,r,n),it(t,r,n,a),n=!0;else if(null===e){var o=t.stateNode,s=t.memoizedProps;o.props=s;var l=o.context,c=r.contextType;c="object"==typeof c&&null!==c?aq(c):n6(t,c=n4(r)?n9:n3.current);var u=r.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof o.getSnapshotBeforeUpdate;d||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==n||l!==c)&&ie(t,o,n,c),aJ=!1;var f=t.memoizedState;o.state=f,a5(t,n,o,a),l=t.memoizedState,s!==n||f!==l||n8.current||aJ?("function"==typeof u&&(a9(t,r,u,n),l=t.memoizedState),(s=aJ||a4(t,r,s,n,f,l,c))?(d||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=n,t.memoizedState=l),o.props=n,o.state=l,o.context=c,n=s):("function"==typeof o.componentDidMount&&(t.flags|=4194308),n=!1)}else{o=t.stateNode,a_(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:aB(t.type,s),o.props=c,d=t.pendingProps,f=o.context,l="object"==typeof(l=r.contextType)&&null!==l?aq(l):n6(t,l=n4(r)?n9:n3.current);var p=r.getDerivedStateFromProps;(u="function"==typeof p||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==d||f!==l)&&ie(t,o,n,l),aJ=!1,f=t.memoizedState,o.state=f,a5(t,n,o,a);var h=t.memoizedState;s!==d||f!==h||n8.current||aJ?("function"==typeof p&&(a9(t,r,p,n),h=t.memoizedState),(c=aJ||a4(t,r,c,n,f,h,l)||!1)?(u||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(n,h,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(n,h,l)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=n,t.memoizedState=h),o.props=n,o.state=h,o.context=l,n=c):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),n=!1)}return oS(e,t,r,n,i,a)}function oS(e,t,r,n,a,i){oL(e,t);var o=0!=(128&t.flags);if(!n&&!o)return a&&an(t,r,!1),oC(e,t,i);n=t.stateNode,ox.current=t;var s=o&&"function"!=typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&o?(t.child=is(t,e.child,null,i),t.child=is(t,null,s,i)):oP(e,t,s,i),t.memoizedState=n.state,a&&an(t,r,!0),t.child}function oM(e){var t=e.stateNode;t.pendingContext?ae(e,t.pendingContext,t.pendingContext!==t.context):t.context&&ae(e,t.context,!1),ib(e,t.containerInfo)}function oj(e,t,r,n,a){return aH(),aR(a),t.flags|=256,oP(e,t,r,n),t.child}var oH={dehydrated:null,treeContext:null,retryLane:0};function oR(e){return{baseLanes:e,cachePool:null,transitions:null}}function oI(e,t,r){var n,a=t.pendingProps,i=iv.current,o=!1,s=0!=(128&t.flags);if((n=s)||(n=(null===e||null!==e.memoizedState)&&0!=(2&i)),n?(o=!0,t.flags&=-129):(null===e||null!==e.memoizedState)&&(i|=1),n2(iv,1&i),null===e)return(aN(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated))?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(s=a.children,e=a.fallback,o?(a=t.mode,o=t.child,s={mode:"hidden",children:s},0==(1&a)&&null!==o?(o.childLanes=0,o.pendingProps=s):o=ln(s,a,0,null),e=lr(e,a,r,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=oR(r),t.memoizedState=oH,e):oB(t,s));if(null!==(i=e.memoizedState)&&null!==(n=i.dehydrated))return function(e,t,r,n,a,i,o){if(r)return 256&t.flags?(t.flags&=-257,oV(e,t,o,n=of(Error(d(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=n.fallback,a=t.mode,n=ln({mode:"visible",children:n.children},a,0,null),i=lr(i,a,o,null),i.flags|=2,n.return=t,i.return=t,n.sibling=i,t.child=n,0!=(1&t.mode)&&is(t,e.child,null,o),t.child.memoizedState=oR(o),t.memoizedState=oH,i);if(0==(1&t.mode))return oV(e,t,o,null);if("$!"===a.data){if(n=a.nextSibling&&a.nextSibling.dataset)var s=n.dgst;return n=s,oV(e,t,o,n=of(i=Error(d(419)),n,void 0))}if(s=0!=(o&e.childLanes),ow||s){if(null!==(n=sc)){switch(o&-o){case 4:a=2;break;case 16:a=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:a=32;break;case 536870912:a=268435456;break;default:a=0}0!==(a=0!=(a&(n.suspendedLanes|o))?0:a)&&a!==i.retryLane&&(i.retryLane=a,aK(e,a),sB(n,e,a,-1))}return sK(),oV(e,t,o,n=of(Error(d(421))))}return"$?"===a.data?(t.flags|=128,t.child=e.child,t=s8.bind(null,e),a._reactRetry=t,null):(e=i.treeContext,aO=nU(a.nextSibling),aP=t,aT=!0,az=null,null!==e&&(ap[ah++]=ay,ap[ah++]=am,ap[ah++]=ab,ay=e.id,am=e.overflow,ab=t),t=oB(t,n.children),t.flags|=4096,t)}(e,t,s,a,n,i,r);if(o){o=a.fallback,s=t.mode,n=(i=e.child).sibling;var l={mode:"hidden",children:a.children};return 0==(1&s)&&t.child!==i?((a=t.child).childLanes=0,a.pendingProps=l,t.deletions=null):(a=le(i,l)).subtreeFlags=14680064&i.subtreeFlags,null!==n?o=le(n,o):(o=lr(o,s,r,null),o.flags|=2),o.return=t,a.return=t,a.sibling=o,t.child=a,a=o,o=t.child,s=null===(s=e.child.memoizedState)?oR(r):{baseLanes:s.baseLanes|r,cachePool:null,transitions:s.transitions},o.memoizedState=s,o.childLanes=e.childLanes&~r,t.memoizedState=oH,a}return e=(o=e.child).sibling,a=le(o,{mode:"visible",children:a.children}),0==(1&t.mode)&&(a.lanes=r),a.return=t,a.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=a,t.memoizedState=null,a}function oB(e,t){return(t=ln({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function oV(e,t,r,n){return null!==n&&aR(n),is(t,e.child,null,r),e=oB(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function oX(e,t,r){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),aF(e.return,t,r)}function oU(e,t,r,n,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=r,i.tailMode=a)}function oA(e,t,r){var n=t.pendingProps,a=n.revealOrder,i=n.tail;if(oP(e,t,n.children,r),0!=(2&(n=iv.current)))n=1&n|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&oX(e,r,t);else if(19===e.tag)oX(e,r,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(n2(iv,n),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(a=null,r=t.child;null!==r;)null!==(e=r.alternate)&&null===ix(e)&&(a=r),r=r.sibling;null===(r=a)?(a=t.child,t.child=null):(a=r.sibling,r.sibling=null),oU(t,!1,a,r,i);break;case"backwards":for(r=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===ix(e)){t.child=a;break}e=a.sibling,a.sibling=r,r=a,a=e}oU(t,!0,r,null,i);break;case"together":oU(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function oD(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function oC(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),sy|=t.lanes,0==(r&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(d(153));if(null!==t.child){for(r=le(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=le(e,e.pendingProps)).return=t;r.sibling=null}return t.child}function oF(e,t){if(!aT)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function oZ(e){var t=null!==e.alternate&&e.alternate.child===e.child,r=0,n=0;if(t)for(var a=e.child;null!==a;)r|=a.lanes|a.childLanes,n|=14680064&a.subtreeFlags,n|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)r|=a.lanes|a.childLanes,n|=a.subtreeFlags,n|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=n,e.childLanes=r,t}a=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},i=function(){},o=function(e,t,r,n){var a=e.memoizedProps;if(a!==n){e=t.stateNode,ih(iu.current);var i,o=null;switch(r){case"input":a=ed(e,a),n=ed(e,n),o=[];break;case"select":a=er({},a,{value:void 0}),n=er({},n,{value:void 0}),o=[];break;case"textarea":a=ev(e,a),n=ev(e,n),o=[];break;default:"function"!=typeof a.onClick&&"function"==typeof n.onClick&&(e.onclick=nN)}for(c in eR(r,n),r=null,a)if(!n.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c]){if("style"===c){var s=a[c];for(i in s)s.hasOwnProperty(i)&&(r||(r={}),r[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(p.hasOwnProperty(c)?o||(o=[]):(o=o||[]).push(c,null))}for(c in n){var l=n[c];if(s=null!=a?a[c]:void 0,n.hasOwnProperty(c)&&l!==s&&(null!=l||null!=s)){if("style"===c){if(s){for(i in s)!s.hasOwnProperty(i)||l&&l.hasOwnProperty(i)||(r||(r={}),r[i]="");for(i in l)l.hasOwnProperty(i)&&s[i]!==l[i]&&(r||(r={}),r[i]=l[i])}else r||(o||(o=[]),o.push(c,r)),r=l}else"dangerouslySetInnerHTML"===c?(l=l?l.__html:void 0,s=s?s.__html:void 0,null!=l&&s!==l&&(o=o||[]).push(c,l)):"children"===c?"string"!=typeof l&&"number"!=typeof l||(o=o||[]).push(c,""+l):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(p.hasOwnProperty(c)?(null!=l&&"onScroll"===c&&nb("scroll",e),o||s===l||(o=[])):(o=o||[]).push(c,l))}}r&&(o=o||[]).push("style",r);var c=o;(t.updateQueue=c)&&(t.flags|=4)}},s=function(e,t,r,n){r!==n&&(t.flags|=4)};var oq=!1,oG=!1,oW="function"==typeof WeakSet?WeakSet:Set,oY=null;function oK(e,t){var r=e.ref;if(null!==r){if("function"==typeof r)try{r(null)}catch(r){s2(e,t,r)}else r.current=null}}function oJ(e,t,r){try{r()}catch(r){s2(e,t,r)}}var oQ=!1;function o_(e,t,r){var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var a=n=n.next;do{if((a.tag&e)===e){var i=a.destroy;a.destroy=void 0,void 0!==i&&oJ(t,r,i)}a=a.next}while(a!==n)}}function o$(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var r=t=t.next;do{if((r.tag&e)===e){var n=r.create;r.destroy=n()}r=r.next}while(r!==t)}}function o0(e){var t=e.ref;if(null!==t){var r=e.stateNode;e.tag,e=r,"function"==typeof t?t(e):t.current=e}}function o1(e){return 5===e.tag||3===e.tag||4===e.tag}function o2(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||o1(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags||null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}var o5=null,o3=!1;function o8(e,t,r){for(r=r.child;null!==r;)o9(e,t,r),r=r.sibling}function o9(e,t,r){if(tu&&"function"==typeof tu.onCommitFiberUnmount)try{tu.onCommitFiberUnmount(tc,r)}catch(e){}switch(r.tag){case 5:oG||oK(r,t);case 6:var n=o5,a=o3;o5=null,o8(e,t,r),o5=n,o3=a,null!==o5&&(o3?(e=o5,r=r.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)):o5.removeChild(r.stateNode));break;case 18:null!==o5&&(o3?(e=o5,r=r.stateNode,8===e.nodeType?nX(e.parentNode,r):1===e.nodeType&&nX(e,r),tG(e)):nX(o5,r.stateNode));break;case 4:n=o5,a=o3,o5=r.stateNode.containerInfo,o3=!0,o8(e,t,r),o5=n,o3=a;break;case 0:case 11:case 14:case 15:if(!oG&&null!==(n=r.updateQueue)&&null!==(n=n.lastEffect)){a=n=n.next;do{var i=a,o=i.destroy;i=i.tag,void 0!==o&&(0!=(2&i)?oJ(r,t,o):0!=(4&i)&&oJ(r,t,o)),a=a.next}while(a!==n)}o8(e,t,r);break;case 1:if(!oG&&(oK(r,t),"function"==typeof(n=r.stateNode).componentWillUnmount))try{n.props=r.memoizedProps,n.state=r.memoizedState,n.componentWillUnmount()}catch(e){s2(r,t,e)}o8(e,t,r);break;case 21:default:o8(e,t,r);break;case 22:1&r.mode?(oG=(n=oG)||null!==r.memoizedState,o8(e,t,r),oG=n):o8(e,t,r)}}function o6(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new oW),t.forEach(function(t){var n=s9.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))})}}function o4(e,t){var r=t.deletions;if(null!==r)for(var n=0;n<r.length;n++){var a=r[n];try{var i=t,o=i;e:for(;null!==o;){switch(o.tag){case 5:o5=o.stateNode,o3=!1;break e;case 3:case 4:o5=o.stateNode.containerInfo,o3=!0;break e}o=o.return}if(null===o5)throw Error(d(160));o9(e,i,a),o5=null,o3=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){s2(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)o7(t,e),t=t.sibling}function o7(e,t){var r=e.alternate,n=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(o4(t,e),se(e),4&n){try{o_(3,e,e.return),o$(3,e)}catch(t){s2(e,e.return,t)}try{o_(5,e,e.return)}catch(t){s2(e,e.return,t)}}break;case 1:o4(t,e),se(e),512&n&&null!==r&&oK(r,r.return);break;case 5:if(o4(t,e),se(e),512&n&&null!==r&&oK(r,r.return),32&e.flags){var a=e.stateNode;try{eE(a,"")}catch(t){s2(e,e.return,t)}}if(4&n&&null!=(a=e.stateNode)){var i=e.memoizedProps,o=null!==r?r.memoizedProps:i,s=e.type,l=e.updateQueue;if(e.updateQueue=null,null!==l)try{"input"===s&&"radio"===i.type&&null!=i.name&&ep(a,i),eI(s,o);var c=eI(s,i);for(o=0;o<l.length;o+=2){var u=l[o],f=l[o+1];"style"===u?ej(a,f):"dangerouslySetInnerHTML"===u?eL(a,f):"children"===u?eE(a,f):z(a,u,f,c)}switch(s){case"input":eh(a,i);break;case"textarea":ew(a,i);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?eg(a,!!i.multiple,h,!1):!!i.multiple!==p&&(null!=i.defaultValue?eg(a,!!i.multiple,i.defaultValue,!0):eg(a,!!i.multiple,i.multiple?[]:"",!1))}a[nF]=i}catch(t){s2(e,e.return,t)}}break;case 6:if(o4(t,e),se(e),4&n){if(null===e.stateNode)throw Error(d(162));a=e.stateNode,i=e.memoizedProps;try{a.nodeValue=i}catch(t){s2(e,e.return,t)}}break;case 3:if(o4(t,e),se(e),4&n&&null!==r&&r.memoizedState.isDehydrated)try{tG(t.containerInfo)}catch(t){s2(e,e.return,t)}break;case 4:default:o4(t,e),se(e);break;case 13:o4(t,e),se(e),8192&(a=e.child).flags&&(i=null!==a.memoizedState,a.stateNode.isHidden=i,i&&(null===a.alternate||null===a.alternate.memoizedState)&&(sw=tr())),4&n&&o6(e);break;case 22:if(u=null!==r&&null!==r.memoizedState,1&e.mode?(oG=(c=oG)||u,o4(t,e),oG=c):o4(t,e),se(e),8192&n){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!u&&0!=(1&e.mode))for(oY=e,u=e.child;null!==u;){for(f=oY=u;null!==oY;){switch(h=(p=oY).child,p.tag){case 0:case 11:case 14:case 15:o_(4,p,p.return);break;case 1:oK(p,p.return);var b=p.stateNode;if("function"==typeof b.componentWillUnmount){n=p,r=p.return;try{t=n,b.props=t.memoizedProps,b.state=t.memoizedState,b.componentWillUnmount()}catch(e){s2(n,r,e)}}break;case 5:oK(p,p.return);break;case 22:if(null!==p.memoizedState){sr(f);continue}}null!==h?(h.return=p,oY=h):sr(f)}u=u.sibling}e:for(u=null,f=e;;){if(5===f.tag){if(null===u){u=f;try{a=f.stateNode,c?(i=a.style,"function"==typeof i.setProperty?i.setProperty("display","none","important"):i.display="none"):(s=f.stateNode,o=null!=(l=f.memoizedProps.style)&&l.hasOwnProperty("display")?l.display:null,s.style.display=eM("display",o))}catch(t){s2(e,e.return,t)}}}else if(6===f.tag){if(null===u)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){s2(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;u===f&&(u=null),f=f.return}u===f&&(u=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:o4(t,e),se(e),4&n&&o6(e);case 21:}}function se(e){var t=e.flags;if(2&t){try{e:{for(var r=e.return;null!==r;){if(o1(r)){var n=r;break e}r=r.return}throw Error(d(160))}switch(n.tag){case 5:var a=n.stateNode;32&n.flags&&(eE(a,""),n.flags&=-33);var i=o2(e);!function e(t,r,n){var a=t.tag;if(5===a||6===a)t=t.stateNode,r?n.insertBefore(t,r):n.appendChild(t);else if(4!==a&&null!==(t=t.child))for(e(t,r,n),t=t.sibling;null!==t;)e(t,r,n),t=t.sibling}(e,i,a);break;case 3:case 4:var o=n.stateNode.containerInfo,s=o2(e);!function e(t,r,n){var a=t.tag;if(5===a||6===a)t=t.stateNode,r?8===n.nodeType?n.parentNode.insertBefore(t,r):n.insertBefore(t,r):(8===n.nodeType?(r=n.parentNode).insertBefore(t,n):(r=n).appendChild(t),null!=(n=n._reactRootContainer)||null!==r.onclick||(r.onclick=nN));else if(4!==a&&null!==(t=t.child))for(e(t,r,n),t=t.sibling;null!==t;)e(t,r,n),t=t.sibling}(e,s,o);break;default:throw Error(d(161))}}catch(t){s2(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function st(e){for(;null!==oY;){var t=oY;if(0!=(8772&t.flags)){var r=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:oG||o$(5,t);break;case 1:var n=t.stateNode;if(4&t.flags&&!oG){if(null===r)n.componentDidMount();else{var a=t.elementType===t.type?r.memoizedProps:aB(t.type,r.memoizedProps);n.componentDidUpdate(a,r.memoizedState,n.__reactInternalSnapshotBeforeUpdate)}}var i=t.updateQueue;null!==i&&a3(t,i,n);break;case 3:var o=t.updateQueue;if(null!==o){if(r=null,null!==t.child)switch(t.child.tag){case 5:case 1:r=t.child.stateNode}a3(t,o,r)}break;case 5:var s=t.stateNode;if(null===r&&4&t.flags){r=s;var l=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&r.focus();break;case"img":l.src&&(r.src=l.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var u=c.memoizedState;if(null!==u){var f=u.dehydrated;null!==f&&tG(f)}}}break;default:throw Error(d(163))}oG||512&t.flags&&o0(t)}catch(e){s2(t,t.return,e)}}if(t===e){oY=null;break}if(null!==(r=t.sibling)){r.return=t.return,oY=r;break}oY=t.return}}function sr(e){for(;null!==oY;){var t=oY;if(t===e){oY=null;break}var r=t.sibling;if(null!==r){r.return=t.return,oY=r;break}oY=t.return}}function sn(e){for(;null!==oY;){var t=oY;try{switch(t.tag){case 0:case 11:case 15:var r=t.return;try{o$(4,t)}catch(e){s2(t,r,e)}break;case 1:var n=t.stateNode;if("function"==typeof n.componentDidMount){var a=t.return;try{n.componentDidMount()}catch(e){s2(t,a,e)}}var i=t.return;try{o0(t)}catch(e){s2(t,i,e)}break;case 5:var o=t.return;try{o0(t)}catch(e){s2(t,o,e)}}}catch(e){s2(t,t.return,e)}if(t===e){oY=null;break}var s=t.sibling;if(null!==s){s.return=t.return,oY=s;break}oY=t.return}}var sa=Math.ceil,si=k.ReactCurrentDispatcher,so=k.ReactCurrentOwner,ss=k.ReactCurrentBatchConfig,sl=0,sc=null,su=null,sd=0,sf=0,sp=n0(0),sh=0,sb=null,sy=0,sm=0,sg=0,sv=null,sx=null,sw=0,sP=1/0,sO=null,sT=!1,sz=null,sk=null,sL=!1,sE=null,sN=0,sS=0,sM=null,sj=-1,sH=0;function sR(){return 0!=(6&sl)?tr():-1!==sj?sj:sj=tr()}function sI(e){return 0==(1&e.mode)?1:0!=(2&sl)&&0!==sd?sd&-sd:null!==aI.transition?(0===sH&&(sH=tv()),sH):0!==(e=tO)?e:e=void 0===(e=window.event)?16:t0(e.type)}function sB(e,t,r,n){if(50<sS)throw sS=0,sM=null,Error(d(185));tw(e,r,n),(0==(2&sl)||e!==sc)&&(e===sc&&(0==(2&sl)&&(sm|=r),4===sh&&sD(e,sd)),sV(e,n),1===r&&0===sl&&0==(1&t.mode)&&(sP=tr()+500,ai&&al()))}function sV(e,t){var r,n,a,i=e.callbackNode;!function(e,t){for(var r=e.suspendedLanes,n=e.pingedLanes,a=e.expirationTimes,i=e.pendingLanes;0<i;){var o=31-td(i),s=1<<o,l=a[o];-1===l?(0==(s&r)||0!=(s&n))&&(a[o]=function(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return -1}}(s,t)):l<=t&&(e.expiredLanes|=s),i&=~s}}(e,t);var o=tm(e,e===sc?sd:0);if(0===o)null!==i&&e7(i),e.callbackNode=null,e.callbackPriority=0;else if(t=o&-o,e.callbackPriority!==t){if(null!=i&&e7(i),1===t)0===e.tag?(a=sC.bind(null,e),ai=!0,as(a)):as(sC.bind(null,e)),nB(function(){0==(6&sl)&&al()}),i=null;else{switch(tT(o)){case 1:i=ta;break;case 4:i=ti;break;case 16:default:i=to;break;case 536870912:i=tl}i=e4(i,sX.bind(null,e))}e.callbackPriority=t,e.callbackNode=i}}function sX(e,t){if(sj=-1,sH=0,0!=(6&sl))throw Error(d(327));var r=e.callbackNode;if(s0()&&e.callbackNode!==r)return null;var n=tm(e,e===sc?sd:0);if(0===n)return null;if(0!=(30&n)||0!=(n&e.expiredLanes)||t)t=sJ(e,n);else{t=n;var a=sl;sl|=2;var i=sY();for((sc!==e||sd!==t)&&(sO=null,sP=tr()+500,sG(e,t));;)try{(function(){for(;null!==su&&!te();)sQ(su)})();break}catch(t){sW(e,t)}aD(),si.current=i,sl=a,null!==su?t=0:(sc=null,sd=0,t=sh)}if(0!==t){if(2===t&&0!==(a=tg(e))&&(n=a,t=sU(e,a)),1===t)throw r=sb,sG(e,0),sD(e,n),sV(e,tr()),r;if(6===t)sD(e,n);else{if(a=e.current.alternate,0==(30&n)&&!function(e){for(var t=e;;){if(16384&t.flags){var r=t.updateQueue;if(null!==r&&null!==(r=r.stores))for(var n=0;n<r.length;n++){var a=r[n],i=a.getSnapshot;a=a.value;try{if(!rK(i(),a))return!1}catch(e){return!1}}}if(r=t.child,16384&t.subtreeFlags&&null!==r)r.return=t,t=r;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=sJ(e,n))&&0!==(i=tg(e))&&(n=i,t=sU(e,i)),1===t))throw r=sb,sG(e,0),sD(e,n),sV(e,tr()),r;switch(e.finishedWork=a,e.finishedLanes=n,t){case 0:case 1:throw Error(d(345));case 2:case 5:s$(e,sx,sO);break;case 3:if(sD(e,n),(130023424&n)===n&&10<(t=sw+500-tr())){if(0!==tm(e,0))break;if(((a=e.suspendedLanes)&n)!==n){sR(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=nH(s$.bind(null,e,sx,sO),t);break}s$(e,sx,sO);break;case 4:if(sD(e,n),(4194240&n)===n)break;for(a=-1,t=e.eventTimes;0<n;){var o=31-td(n);i=1<<o,(o=t[o])>a&&(a=o),n&=~i}if(n=a,10<(n=(120>(n=tr()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*sa(n/1960))-n)){e.timeoutHandle=nH(s$.bind(null,e,sx,sO),n);break}s$(e,sx,sO);break;default:throw Error(d(329))}}}return sV(e,tr()),e.callbackNode===r?sX.bind(null,e):null}function sU(e,t){var r=sv;return e.current.memoizedState.isDehydrated&&(sG(e,t).flags|=256),2!==(e=sJ(e,t))&&(t=sx,sx=r,null!==t&&sA(t)),e}function sA(e){null===sx?sx=e:sx.push.apply(sx,e)}function sD(e,t){for(t&=~sg,t&=~sm,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-td(t),n=1<<r;e[r]=-1,t&=~n}}function sC(e){if(0!=(6&sl))throw Error(d(327));s0();var t=tm(e,0);if(0==(1&t))return sV(e,tr()),null;var r=sJ(e,t);if(0!==e.tag&&2===r){var n=tg(e);0!==n&&(t=n,r=sU(e,n))}if(1===r)throw r=sb,sG(e,0),sD(e,t),sV(e,tr()),r;if(6===r)throw Error(d(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,s$(e,sx,sO),sV(e,tr()),null}function sF(e,t){var r=sl;sl|=1;try{return e(t)}finally{0===(sl=r)&&(sP=tr()+500,ai&&al())}}function sZ(e){null!==sE&&0===sE.tag&&0==(6&sl)&&s0();var t=sl;sl|=1;var r=ss.transition,n=tO;try{if(ss.transition=null,tO=1,e)return e()}finally{tO=n,ss.transition=r,0==(6&(sl=t))&&al()}}function sq(){sf=sp.current,n1(sp)}function sG(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,nR(r)),null!==su)for(r=su.return;null!==r;){var n=r;switch(aw(n),n.tag){case 1:null!=(n=n.type.childContextTypes)&&n7();break;case 3:iy(),n1(n8),n1(n3),iP();break;case 5:ig(n);break;case 4:iy();break;case 13:case 19:n1(iv);break;case 10:aC(n.type._context);break;case 22:case 23:sq()}r=r.return}if(sc=e,su=e=le(e.current,null),sd=sf=t,sh=0,sb=null,sg=sm=sy=0,sx=sv=null,null!==aG){for(t=0;t<aG.length;t++)if(null!==(n=(r=aG[t]).interleaved)){r.interleaved=null;var a=n.next,i=r.pending;if(null!==i){var o=i.next;i.next=a,n.next=o}r.pending=n}aG=null}return e}function sW(e,t){for(;;){var r=su;try{if(aD(),iO.current=os,iN){for(var n=ik.memoizedState;null!==n;){var a=n.queue;null!==a&&(a.pending=null),n=n.next}iN=!1}if(iz=0,iE=iL=ik=null,iS=!1,iM=0,so.current=null,null===r||null===r.return){sh=1,sb=t,su=null;break}e:{var i=e,o=r.return,s=r,l=t;if(t=sd,s.flags|=32768,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l,u=s,f=u.tag;if(0==(1&u.mode)&&(0===f||11===f||15===f)){var p=u.alternate;p?(u.updateQueue=p.updateQueue,u.memoizedState=p.memoizedState,u.lanes=p.lanes):(u.updateQueue=null,u.memoizedState=null)}var h=og(o);if(null!==h){h.flags&=-257,ov(h,o,s,i,t),1&h.mode&&om(i,c,t),t=h,l=c;var b=t.updateQueue;if(null===b){var y=new Set;y.add(l),t.updateQueue=y}else b.add(l);break e}if(0==(1&t)){om(i,c,t),sK();break e}l=Error(d(426))}else if(aT&&1&s.mode){var m=og(o);if(null!==m){0==(65536&m.flags)&&(m.flags|=256),ov(m,o,s,i,t),aR(od(l,s));break e}}i=l=od(l,s),4!==sh&&(sh=2),null===sv?sv=[i]:sv.push(i),i=o;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t;var g=ob(i,l,t);a2(i,g);break e;case 1:s=l;var v=i.type,x=i.stateNode;if(0==(128&i.flags)&&("function"==typeof v.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===sk||!sk.has(x)))){i.flags|=65536,t&=-t,i.lanes|=t;var w=oy(i,s,t);a2(i,w);break e}}i=i.return}while(null!==i)}s_(r)}catch(e){t=e,su===r&&null!==r&&(su=r=r.return);continue}break}}function sY(){var e=si.current;return si.current=os,null===e?os:e}function sK(){(0===sh||3===sh||2===sh)&&(sh=4),null===sc||0==(268435455&sy)&&0==(268435455&sm)||sD(sc,sd)}function sJ(e,t){var r=sl;sl|=2;var n=sY();for((sc!==e||sd!==t)&&(sO=null,sG(e,t));;)try{(function(){for(;null!==su;)sQ(su)})();break}catch(t){sW(e,t)}if(aD(),sl=r,si.current=n,null!==su)throw Error(d(261));return sc=null,sd=0,sh}function sQ(e){var t=l(e.alternate,e,sf);e.memoizedProps=e.pendingProps,null===t?s_(e):su=t,so.current=null}function s_(e){var t=e;do{var r=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(r=function(e,t,r){var n=t.pendingProps;switch(aw(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return oZ(t),null;case 1:case 17:return n4(t.type)&&n7(),oZ(t),null;case 3:return n=t.stateNode,iy(),n1(n8),n1(n3),iP(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),(null===e||null===e.child)&&(aM(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==az&&(sA(az),az=null))),i(e,t),oZ(t),null;case 5:ig(t);var l=ih(ip.current);if(r=t.type,null!==e&&null!=t.stateNode)o(e,t,r,n,l),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!n){if(null===t.stateNode)throw Error(d(166));return oZ(t),null}if(e=ih(iu.current),aM(t)){n=t.stateNode,r=t.type;var c=t.memoizedProps;switch(n[nC]=t,n[nF]=c,e=0!=(1&t.mode),r){case"dialog":nb("cancel",n),nb("close",n);break;case"iframe":case"object":case"embed":nb("load",n);break;case"video":case"audio":for(l=0;l<nd.length;l++)nb(nd[l],n);break;case"source":nb("error",n);break;case"img":case"image":case"link":nb("error",n),nb("load",n);break;case"details":nb("toggle",n);break;case"input":ef(n,c),nb("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!c.multiple},nb("invalid",n);break;case"textarea":ex(n,c),nb("invalid",n)}for(var u in eR(r,c),l=null,c)if(c.hasOwnProperty(u)){var f=c[u];"children"===u?"string"==typeof f?n.textContent!==f&&(!0!==c.suppressHydrationWarning&&nE(n.textContent,f,e),l=["children",f]):"number"==typeof f&&n.textContent!==""+f&&(!0!==c.suppressHydrationWarning&&nE(n.textContent,f,e),l=["children",""+f]):p.hasOwnProperty(u)&&null!=f&&"onScroll"===u&&nb("scroll",n)}switch(r){case"input":el(n),eb(n,c,!0);break;case"textarea":el(n),eP(n);break;case"select":case"option":break;default:"function"==typeof c.onClick&&(n.onclick=nN)}n=l,t.updateQueue=n,null!==n&&(t.flags|=4)}else{u=9===l.nodeType?l:l.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=eO(r)),"http://www.w3.org/1999/xhtml"===e?"script"===r?((e=u.createElement("div")).innerHTML="<script></script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=u.createElement(r,{is:n.is}):(e=u.createElement(r),"select"===r&&(u=e,n.multiple?u.multiple=!0:n.size&&(u.size=n.size))):e=u.createElementNS(e,r),e[nC]=t,e[nF]=n,a(e,t,!1,!1),t.stateNode=e;e:{switch(u=eI(r,n),r){case"dialog":nb("cancel",e),nb("close",e),l=n;break;case"iframe":case"object":case"embed":nb("load",e),l=n;break;case"video":case"audio":for(l=0;l<nd.length;l++)nb(nd[l],e);l=n;break;case"source":nb("error",e),l=n;break;case"img":case"image":case"link":nb("error",e),nb("load",e),l=n;break;case"details":nb("toggle",e),l=n;break;case"input":ef(e,n),l=ed(e,n),nb("invalid",e);break;case"option":default:l=n;break;case"select":e._wrapperState={wasMultiple:!!n.multiple},l=er({},n,{value:void 0}),nb("invalid",e);break;case"textarea":ex(e,n),l=ev(e,n),nb("invalid",e)}for(c in eR(r,l),f=l)if(f.hasOwnProperty(c)){var h=f[c];"style"===c?ej(e,h):"dangerouslySetInnerHTML"===c?null!=(h=h?h.__html:void 0)&&eL(e,h):"children"===c?"string"==typeof h?("textarea"!==r||""!==h)&&eE(e,h):"number"==typeof h&&eE(e,""+h):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(p.hasOwnProperty(c)?null!=h&&"onScroll"===c&&nb("scroll",e):null!=h&&z(e,c,h,u))}switch(r){case"input":el(e),eb(e,n,!1);break;case"textarea":el(e),eP(e);break;case"option":null!=n.value&&e.setAttribute("value",""+eo(n.value));break;case"select":e.multiple=!!n.multiple,null!=(c=n.value)?eg(e,!!n.multiple,c,!1):null!=n.defaultValue&&eg(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=nN)}switch(r){case"button":case"input":case"select":case"textarea":n=!!n.autoFocus;break e;case"img":n=!0;break e;default:n=!1}}n&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return oZ(t),null;case 6:if(e&&null!=t.stateNode)s(e,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(d(166));if(r=ih(ip.current),ih(iu.current),aM(t)){if(n=t.stateNode,r=t.memoizedProps,n[nC]=t,(c=n.nodeValue!==r)&&null!==(e=aP))switch(e.tag){case 3:nE(n.nodeValue,r,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&nE(n.nodeValue,r,0!=(1&e.mode))}c&&(t.flags|=4)}else(n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[nC]=t,t.stateNode=n}return oZ(t),null;case 13:if(n1(iv),n=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aT&&null!==aO&&0!=(1&t.mode)&&0==(128&t.flags))aj(),aH(),t.flags|=98560,c=!1;else if(c=aM(t),null!==n&&null!==n.dehydrated){if(null===e){if(!c)throw Error(d(318));if(!(c=null!==(c=t.memoizedState)?c.dehydrated:null))throw Error(d(317));c[nC]=t}else aH(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;oZ(t),c=!1}else null!==az&&(sA(az),az=null),c=!0;if(!c)return 65536&t.flags?t:null}if(0!=(128&t.flags))return t.lanes=r,t;return(n=null!==n)!=(null!==e&&null!==e.memoizedState)&&n&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&iv.current)?0===sh&&(sh=3):sK())),null!==t.updateQueue&&(t.flags|=4),oZ(t),null;case 4:return iy(),i(e,t),null===e&&ng(t.stateNode.containerInfo),oZ(t),null;case 10:return aC(t.type._context),oZ(t),null;case 19:if(n1(iv),null===(c=t.memoizedState))return oZ(t),null;if(n=0!=(128&t.flags),null===(u=c.rendering)){if(n)oF(c,!1);else{if(0!==sh||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=ix(e))){for(t.flags|=128,oF(c,!1),null!==(n=u.updateQueue)&&(t.updateQueue=n,t.flags|=4),t.subtreeFlags=0,n=r,r=t.child;null!==r;)c=r,e=n,c.flags&=14680066,null===(u=c.alternate)?(c.childLanes=0,c.lanes=e,c.child=null,c.subtreeFlags=0,c.memoizedProps=null,c.memoizedState=null,c.updateQueue=null,c.dependencies=null,c.stateNode=null):(c.childLanes=u.childLanes,c.lanes=u.lanes,c.child=u.child,c.subtreeFlags=0,c.deletions=null,c.memoizedProps=u.memoizedProps,c.memoizedState=u.memoizedState,c.updateQueue=u.updateQueue,c.type=u.type,e=u.dependencies,c.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return n2(iv,1&iv.current|2),t.child}e=e.sibling}null!==c.tail&&tr()>sP&&(t.flags|=128,n=!0,oF(c,!1),t.lanes=4194304)}}else{if(!n){if(null!==(e=ix(u))){if(t.flags|=128,n=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),oF(c,!0),null===c.tail&&"hidden"===c.tailMode&&!u.alternate&&!aT)return oZ(t),null}else 2*tr()-c.renderingStartTime>sP&&1073741824!==r&&(t.flags|=128,n=!0,oF(c,!1),t.lanes=4194304)}c.isBackwards?(u.sibling=t.child,t.child=u):(null!==(r=c.last)?r.sibling=u:t.child=u,c.last=u)}if(null!==c.tail)return t=c.tail,c.rendering=t,c.tail=t.sibling,c.renderingStartTime=tr(),t.sibling=null,r=iv.current,n2(iv,n?1&r|2:1&r),t;return oZ(t),null;case 22:case 23:return sq(),n=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==n&&(t.flags|=8192),n&&0!=(1&t.mode)?0!=(1073741824&sf)&&(oZ(t),6&t.subtreeFlags&&(t.flags|=8192)):oZ(t),null;case 24:case 25:return null}throw Error(d(156,t.tag))}(r,t,sf))){su=r;return}}else{if(null!==(r=function(e,t){switch(aw(t),t.tag){case 1:return n4(t.type)&&n7(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return iy(),n1(n8),n1(n3),iP(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ig(t),null;case 13:if(n1(iv),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(d(340));aH()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return n1(iv),null;case 4:return iy(),null;case 10:return aC(t.type._context),null;case 22:case 23:return sq(),null;default:return null}}(r,t))){r.flags&=32767,su=r;return}if(null!==e)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{sh=6,su=null;return}}if(null!==(t=t.sibling)){su=t;return}su=t=e}while(null!==t)0===sh&&(sh=5)}function s$(e,t,r){var n=tO,a=ss.transition;try{ss.transition=null,tO=1,function(e,t,r,n){do s0();while(null!==sE)if(0!=(6&sl))throw Error(d(327));r=e.finishedWork;var a=e.finishedLanes;if(null!==r){if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(d(177));e.callbackNode=null,e.callbackPriority=0;var i=r.lanes|r.childLanes;if(function(e,t){var r=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var n=e.eventTimes;for(e=e.expirationTimes;0<r;){var a=31-td(r),i=1<<a;t[a]=0,n[a]=-1,e[a]=-1,r&=~i}}(e,i),e===sc&&(su=sc=null,sd=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||sL||(sL=!0,o=to,s=function(){return s0(),null},e4(o,s)),i=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||i){i=ss.transition,ss.transition=null;var o,s,l,c,u,f=tO;tO=1;var p=sl;sl|=4,so.current=null,function(e,t){if(nS=tY,r0(e=r$())){if("selectionStart"in e)var r={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(r=(r=e.ownerDocument)&&r.defaultView||window).getSelection&&r.getSelection();if(n&&0!==n.rangeCount){r=n.anchorNode;var a,i=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{r.nodeType,o.nodeType}catch(e){r=null;break e}var s=0,l=-1,c=-1,u=0,f=0,p=e,h=null;t:for(;;){for(;p!==r||0!==i&&3!==p.nodeType||(l=s+i),p!==o||0!==n&&3!==p.nodeType||(c=s+n),3===p.nodeType&&(s+=p.nodeValue.length),null!==(a=p.firstChild);)h=p,p=a;for(;;){if(p===e)break t;if(h===r&&++u===i&&(l=s),h===o&&++f===n&&(c=s),null!==(a=p.nextSibling))break;h=(p=h).parentNode}p=a}r=-1===l||-1===c?null:{start:l,end:c}}else r=null}r=r||{start:0,end:0}}else r=null;for(nM={focusedElem:e,selectionRange:r},tY=!1,oY=t;null!==oY;)if(e=(t=oY).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,oY=e;else for(;null!==oY;){t=oY;try{var b=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==b){var y=b.memoizedProps,m=b.memoizedState,g=t.stateNode,v=g.getSnapshotBeforeUpdate(t.elementType===t.type?y:aB(t.type,y),m);g.__reactInternalSnapshotBeforeUpdate=v}break;case 3:var x=t.stateNode.containerInfo;1===x.nodeType?x.textContent="":9===x.nodeType&&x.documentElement&&x.removeChild(x.documentElement);break;default:throw Error(d(163))}}catch(e){s2(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,oY=e;break}oY=t.return}b=oQ,oQ=!1}(e,r),o7(r,e),function(e){var t=r$(),r=e.focusedElem,n=e.selectionRange;if(t!==r&&r&&r.ownerDocument&&function e(t,r){return!!t&&!!r&&(t===r||(!t||3!==t.nodeType)&&(r&&3===r.nodeType?e(t,r.parentNode):"contains"in t?t.contains(r):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(r))))}(r.ownerDocument.documentElement,r)){if(null!==n&&r0(r)){if(t=n.start,void 0===(e=n.end)&&(e=t),"selectionStart"in r)r.selectionStart=t,r.selectionEnd=Math.min(e,r.value.length);else if((e=(t=r.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=r.textContent.length,i=Math.min(n.start,a);n=void 0===n.end?i:Math.min(n.end,a),!e.extend&&i>n&&(a=n,n=i,i=a),a=r_(r,i);var o=r_(r,n);a&&o&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),i>n?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}}for(t=[],e=r;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof r.focus&&r.focus(),r=0;r<t.length;r++)(e=t[r]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}(nM),tY=!!nS,nM=nS=null,e.current=r,l=r,c=e,u=a,oY=l,function e(t,r,n){for(var a=0!=(1&t.mode);null!==oY;){var i=oY,o=i.child;if(22===i.tag&&a){var s=null!==i.memoizedState||oq;if(!s){var l=i.alternate,c=null!==l&&null!==l.memoizedState||oG;l=oq;var u=oG;if(oq=s,(oG=c)&&!u)for(oY=i;null!==oY;)c=(s=oY).child,22===s.tag&&null!==s.memoizedState?sn(i):null!==c?(c.return=s,oY=c):sn(i);for(;null!==o;)oY=o,e(o,r,n),o=o.sibling;oY=i,oq=l,oG=u}st(t,r,n)}else 0!=(8772&i.subtreeFlags)&&null!==o?(o.return=i,oY=o):st(t,r,n)}}(l,c,u),tt(),sl=p,tO=f,ss.transition=i}else e.current=r;if(sL&&(sL=!1,sE=e,sN=a),0===(i=e.pendingLanes)&&(sk=null),function(e){if(tu&&"function"==typeof tu.onCommitFiberRoot)try{tu.onCommitFiberRoot(tc,e,void 0,128==(128&e.current.flags))}catch(e){}}(r.stateNode,n),sV(e,tr()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n((a=t[r]).value,{componentStack:a.stack,digest:a.digest});if(sT)throw sT=!1,e=sz,sz=null,e;0!=(1&sN)&&0!==e.tag&&s0(),0!=(1&(i=e.pendingLanes))?e===sM?sS++:(sS=0,sM=e):sS=0,al()}}(e,t,r,n)}finally{ss.transition=a,tO=n}return null}function s0(){if(null!==sE){var e=tT(sN),t=ss.transition,r=tO;try{if(ss.transition=null,tO=16>e?16:e,null===sE)var n=!1;else{if(e=sE,sE=null,sN=0,0!=(6&sl))throw Error(d(331));var a=sl;for(sl|=4,oY=e.current;null!==oY;){var i=oY,o=i.child;if(0!=(16&oY.flags)){var s=i.deletions;if(null!==s){for(var l=0;l<s.length;l++){var c=s[l];for(oY=c;null!==oY;){var u=oY;switch(u.tag){case 0:case 11:case 15:o_(8,u,i)}var f=u.child;if(null!==f)f.return=u,oY=f;else for(;null!==oY;){var p=(u=oY).sibling,h=u.return;if(function e(t){var r=t.alternate;null!==r&&(t.alternate=null,e(r)),t.child=null,t.deletions=null,t.sibling=null,5===t.tag&&null!==(r=t.stateNode)&&(delete r[nC],delete r[nF],delete r[nq],delete r[nG],delete r[nW]),t.stateNode=null,t.return=null,t.dependencies=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.stateNode=null,t.updateQueue=null}(u),u===c){oY=null;break}if(null!==p){p.return=h,oY=p;break}oY=h}}}var b=i.alternate;if(null!==b){var y=b.child;if(null!==y){b.child=null;do{var m=y.sibling;y.sibling=null,y=m}while(null!==y)}}oY=i}}if(0!=(2064&i.subtreeFlags)&&null!==o)o.return=i,oY=o;else for(;null!==oY;){if(i=oY,0!=(2048&i.flags))switch(i.tag){case 0:case 11:case 15:o_(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,oY=g;break}oY=i.return}}var v=e.current;for(oY=v;null!==oY;){var x=(o=oY).child;if(0!=(2064&o.subtreeFlags)&&null!==x)x.return=o,oY=x;else for(o=v;null!==oY;){if(s=oY,0!=(2048&s.flags))try{switch(s.tag){case 0:case 11:case 15:o$(9,s)}}catch(e){s2(s,s.return,e)}if(s===o){oY=null;break}var w=s.sibling;if(null!==w){w.return=s.return,oY=w;break}oY=s.return}}if(sl=a,al(),tu&&"function"==typeof tu.onPostCommitFiberRoot)try{tu.onPostCommitFiberRoot(tc,e)}catch(e){}n=!0}return n}finally{tO=r,ss.transition=t}}return!1}function s1(e,t,r){t=ob(e,t=od(r,t),1),e=a0(e,t,1),t=sR(),null!==e&&(tw(e,1,t),sV(e,t))}function s2(e,t,r){if(3===e.tag)s1(e,e,r);else for(;null!==t;){if(3===t.tag){s1(t,e,r);break}if(1===t.tag){var n=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===sk||!sk.has(n))){e=oy(t,e=od(r,e),1),t=a0(t,e,1),e=sR(),null!==t&&(tw(t,1,e),sV(t,e));break}}t=t.return}}function s5(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=sR(),e.pingedLanes|=e.suspendedLanes&r,sc===e&&(sd&r)===r&&(4===sh||3===sh&&(130023424&sd)===sd&&500>tr()-sw?sG(e,0):sg|=r),sV(e,t)}function s3(e,t){0===t&&(0==(1&e.mode)?t=1:(t=tb,0==(130023424&(tb<<=1))&&(tb=4194304)));var r=sR();null!==(e=aK(e,t))&&(tw(e,t,r),sV(e,r))}function s8(e){var t=e.memoizedState,r=0;null!==t&&(r=t.retryLane),s3(e,r)}function s9(e,t){var r=0;switch(e.tag){case 13:var n=e.stateNode,a=e.memoizedState;null!==a&&(r=a.retryLane);break;case 19:n=e.stateNode;break;default:throw Error(d(314))}null!==n&&n.delete(t),s3(e,r)}function s6(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function s4(e,t,r,n){return new s6(e,t,r,n)}function s7(e){return!(!(e=e.prototype)||!e.isReactComponent)}function le(e,t){var r=e.alternate;return null===r?((r=s4(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.subtreeFlags=0,r.deletions=null),r.flags=14680064&e.flags,r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function lt(e,t,r,n,a,i){var o=2;if(n=e,"function"==typeof e)s7(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case N:return lr(r.children,a,i,t);case S:o=8,a|=8;break;case M:return(e=s4(12,r,t,2|a)).elementType=M,e.lanes=i,e;case I:return(e=s4(13,r,t,a)).elementType=I,e.lanes=i,e;case B:return(e=s4(19,r,t,a)).elementType=B,e.lanes=i,e;case U:return ln(r,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case j:o=10;break e;case H:o=9;break e;case R:o=11;break e;case V:o=14;break e;case X:o=16,n=null;break e}throw Error(d(130,null==e?e:typeof e,""))}return(t=s4(o,r,t,a)).elementType=e,t.type=n,t.lanes=i,t}function lr(e,t,r,n){return(e=s4(7,e,n,t)).lanes=r,e}function ln(e,t,r,n){return(e=s4(22,e,n,t)).elementType=U,e.lanes=r,e.stateNode={isHidden:!1},e}function la(e,t,r){return(e=s4(6,e,null,t)).lanes=r,e}function li(e,t,r){return(t=s4(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function lo(e,t,r,n,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=tx(0),this.expirationTimes=tx(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=tx(0),this.identifierPrefix=n,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function ls(e,t,r,n,a,i,o,s,l){return e=new lo(e,t,r,s,l),1===t?(t=1,!0===i&&(t|=8)):t=0,i=s4(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:n,isDehydrated:r,cache:null,transitions:null,pendingSuspenseBoundaries:null},aQ(i),e}function ll(e){if(!e)return n5;e=e._reactInternals;e:{if(e3(e)!==e||1!==e.tag)throw Error(d(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(n4(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t)throw Error(d(171))}if(1===e.tag){var r=e.type;if(n4(r))return at(e,r,t)}return t}function lc(e,t,r,n,a,i,o,s,l){return(e=ls(r,n,!0,e,a,i,o,s,l)).context=ll(null),r=e.current,(i=a$(n=sR(),a=sI(r))).callback=null!=t?t:null,a0(r,i,a),e.current.lanes=a,tw(e,a,n),sV(e,n),e}function lu(e,t,r,n){var a=t.current,i=sR(),o=sI(a);return r=ll(r),null===t.context?t.context=r:t.pendingContext=r,(t=a$(i,o)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),null!==(e=a0(a,t,o))&&(sB(e,a,o,i),a1(e,a,o)),o}function ld(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function lf(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function lp(e,t){lf(e,t),(e=e.alternate)&&lf(e,t)}l=function(e,t,r){if(null!==e){if(e.memoizedProps!==t.pendingProps||n8.current)ow=!0;else{if(0==(e.lanes&r)&&0==(128&t.flags))return ow=!1,function(e,t,r){switch(t.tag){case 3:oM(t),aH();break;case 5:im(t);break;case 1:n4(t.type)&&ar(t);break;case 4:ib(t,t.stateNode.containerInfo);break;case 10:var n=t.type._context,a=t.memoizedProps.value;n2(aV,n._currentValue),n._currentValue=a;break;case 13:if(null!==(n=t.memoizedState)){if(null!==n.dehydrated)return n2(iv,1&iv.current),t.flags|=128,null;if(0!=(r&t.child.childLanes))return oI(e,t,r);return n2(iv,1&iv.current),null!==(e=oC(e,t,r))?e.sibling:null}n2(iv,1&iv.current);break;case 19:if(n=0!=(r&t.childLanes),0!=(128&e.flags)){if(n)return oA(e,t,r);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),n2(iv,iv.current),!n)return null;break;case 22:case 23:return t.lanes=0,ok(e,t,r)}return oC(e,t,r)}(e,t,r);ow=0!=(131072&e.flags)}}else ow=!1,aT&&0!=(1048576&t.flags)&&av(t,af,t.index);switch(t.lanes=0,t.tag){case 2:var n=t.type;oD(e,t),e=t.pendingProps;var a=n6(t,n3.current);aZ(t,r),a=iI(null,t,n,e,a,r);var i=iB();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,n4(n)?(i=!0,ar(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,aQ(t),a.updater=a6,t.stateNode=a,a._reactInternals=t,it(t,n,e,r),t=oS(null,t,n,!0,i,r)):(t.tag=0,aT&&i&&ax(t),oP(null,t,a,r),t=t.child),t;case 16:n=t.elementType;e:{switch(oD(e,t),e=t.pendingProps,n=(a=n._init)(n._payload),t.type=n,a=t.tag=function(e){if("function"==typeof e)return s7(e)?1:0;if(null!=e){if((e=e.$$typeof)===R)return 11;if(e===V)return 14}return 2}(n),e=aB(n,e),a){case 0:t=oE(null,t,n,e,r);break e;case 1:t=oN(null,t,n,e,r);break e;case 11:t=oO(null,t,n,e,r);break e;case 14:t=oT(null,t,n,aB(n.type,e),r);break e}throw Error(d(306,n,""))}return t;case 0:return n=t.type,a=t.pendingProps,a=t.elementType===n?a:aB(n,a),oE(e,t,n,a,r);case 1:return n=t.type,a=t.pendingProps,a=t.elementType===n?a:aB(n,a),oN(e,t,n,a,r);case 3:e:{if(oM(t),null===e)throw Error(d(387));n=t.pendingProps,a=(i=t.memoizedState).element,a_(e,t),a5(t,n,null,r);var o=t.memoizedState;if(n=o.element,i.isDehydrated){if(i={element:n,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){a=od(Error(d(423)),t),t=oj(e,t,n,r,a);break e}if(n!==a){a=od(Error(d(424)),t),t=oj(e,t,n,r,a);break e}for(aO=nU(t.stateNode.containerInfo.firstChild),aP=t,aT=!0,az=null,r=il(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|4096,r=r.sibling}else{if(aH(),n===a){t=oC(e,t,r);break e}oP(e,t,n,r)}t=t.child}return t;case 5:return im(t),null===e&&aN(t),n=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,o=a.children,nj(n,a)?o=null:null!==i&&nj(n,i)&&(t.flags|=32),oL(e,t),oP(e,t,o,r),t.child;case 6:return null===e&&aN(t),null;case 13:return oI(e,t,r);case 4:return ib(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=is(t,null,n,r):oP(e,t,n,r),t.child;case 11:return n=t.type,a=t.pendingProps,a=t.elementType===n?a:aB(n,a),oO(e,t,n,a,r);case 7:return oP(e,t,t.pendingProps,r),t.child;case 8:case 12:return oP(e,t,t.pendingProps.children,r),t.child;case 10:e:{if(n=t.type._context,a=t.pendingProps,i=t.memoizedProps,o=a.value,n2(aV,n._currentValue),n._currentValue=o,null!==i){if(rK(i.value,o)){if(i.children===a.children&&!n8.current){t=oC(e,t,r);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var s=i.dependencies;if(null!==s){o=i.child;for(var l=s.firstContext;null!==l;){if(l.context===n){if(1===i.tag){(l=a$(-1,r&-r)).tag=2;var c=i.updateQueue;if(null!==c){var u=(c=c.shared).pending;null===u?l.next=l:(l.next=u.next,u.next=l),c.pending=l}}i.lanes|=r,null!==(l=i.alternate)&&(l.lanes|=r),aF(i.return,r,t),s.lanes|=r;break}l=l.next}}else if(10===i.tag)o=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(o=i.return))throw Error(d(341));o.lanes|=r,null!==(s=o.alternate)&&(s.lanes|=r),aF(o,r,t),o=i.sibling}else o=i.child;if(null!==o)o.return=i;else for(o=i;null!==o;){if(o===t){o=null;break}if(null!==(i=o.sibling)){i.return=o.return,o=i;break}o=o.return}i=o}}oP(e,t,a.children,r),t=t.child}return t;case 9:return a=t.type,n=t.pendingProps.children,aZ(t,r),n=n(a=aq(a)),t.flags|=1,oP(e,t,n,r),t.child;case 14:return a=aB(n=t.type,t.pendingProps),a=aB(n.type,a),oT(e,t,n,a,r);case 15:return oz(e,t,t.type,t.pendingProps,r);case 17:return n=t.type,a=t.pendingProps,a=t.elementType===n?a:aB(n,a),oD(e,t),t.tag=1,n4(n)?(e=!0,ar(t)):e=!1,aZ(t,r),a7(t,n,a),it(t,n,a,r),oS(null,t,n,!0,e,r);case 19:return oA(e,t,r);case 22:return ok(e,t,r)}throw Error(d(156,t.tag))};var lh="function"==typeof reportError?reportError:function(e){console.error(e)};function lb(e){this._internalRoot=e}function ly(e){this._internalRoot=e}function lm(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function lg(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function lv(){}function lx(e,t,r,n,a){var i=r._reactRootContainer;if(i){var o=i;if("function"==typeof a){var s=a;a=function(){var e=ld(o);s.call(e)}}lu(t,o,e,a)}else o=function(e,t,r,n,a){if(a){if("function"==typeof n){var i=n;n=function(){var e=ld(o);i.call(e)}}var o=lc(t,n,e,0,null,!1,!1,"",lv);return e._reactRootContainer=o,e[nZ]=o.current,ng(8===e.nodeType?e.parentNode:e),sZ(),o}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof n){var s=n;n=function(){var e=ld(l);s.call(e)}}var l=ls(e,0,!1,null,null,!1,!1,"",lv);return e._reactRootContainer=l,e[nZ]=l.current,ng(8===e.nodeType?e.parentNode:e),sZ(function(){lu(t,l,r,n)}),l}(r,t,e,a,n);return ld(o)}ly.prototype.render=lb.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(d(409));lu(e,t,null,null)},ly.prototype.unmount=lb.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;sZ(function(){lu(null,e,null,null)}),t[nZ]=null}},ly.prototype.unstable_scheduleHydration=function(e){if(e){var t=tE();e={blockedOn:null,target:e,priority:t};for(var r=0;r<tV.length&&0!==t&&t<tV[r].priority;r++);tV.splice(r,0,e),0===r&&tD(e)}},tz=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var r=ty(t.pendingLanes);0!==r&&(tP(t,1|r),sV(t,tr()),0==(6&sl)&&(sP=tr()+500,al()))}break;case 13:sZ(function(){var t=aK(e,1);null!==t&&sB(t,e,1,sR())}),lp(e,1)}},tk=function(e){if(13===e.tag){var t=aK(e,134217728);null!==t&&sB(t,e,134217728,sR()),lp(e,134217728)}},tL=function(e){if(13===e.tag){var t=sI(e),r=aK(e,t);null!==r&&sB(r,e,t,sR()),lp(e,t)}},tE=function(){return tO},tN=function(e,t){var r=tO;try{return tO=e,t()}finally{tO=r}},eX=function(e,t,r){switch(t){case"input":if(eh(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var a=nQ(n);if(!a)throw Error(d(90));ec(n),eh(n,a)}}}break;case"textarea":ew(e,r);break;case"select":null!=(t=r.value)&&eg(e,!!r.multiple,t,!1)}},eZ=sF,eq=sZ;var lw={findFiberByHostInstance:nY,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},lP={bundleType:lw.bundleType,version:lw.version,rendererPackageName:lw.rendererPackageName,rendererConfig:lw.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=e6(e))?null:e.stateNode},findFiberByHostInstance:lw.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lO=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lO.isDisabled&&lO.supportsFiber)try{tc=lO.inject(lP),tu=lO}catch(e){}}F={usingClientEntryPoint:!1,Events:[nK,nJ,nQ,eC,eF,sF]},Z=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!lm(t))throw Error(d(200));return function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==n?null:""+n,children:e,containerInfo:t,implementation:null}}(e,t,null,r)},q=function(e,t){if(!lm(e))throw Error(d(299));var r=!1,n="",a=lh;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(n=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=ls(e,1,!1,null,null,r,!1,n,a),e[nZ]=t.current,ng(8===e.nodeType?e.parentNode:e),new lb(t)},G=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(d(188));throw Error(d(268,e=Object.keys(e).join(",")))}return e=null===(e=e6(t))?null:e.stateNode},W=function(e){return sZ(e)},Y=function(e,t,r){if(!lg(t))throw Error(d(200));return lx(null,e,t,!0,r)},K=function(e,t,r){if(!lm(e))throw Error(d(405));var n=null!=r&&r.hydratedSources||null,a=!1,i="",o=lh;if(null!=r&&(!0===r.unstable_strictMode&&(a=!0),void 0!==r.identifierPrefix&&(i=r.identifierPrefix),void 0!==r.onRecoverableError&&(o=r.onRecoverableError)),t=lc(t,null,e,1,null!=r?r:null,a,!1,i,o),e[nZ]=t.current,ng(e),n)for(e=0;e<n.length;e++)a=(a=(r=n[e])._getVersion)(r._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[r,a]:t.mutableSourceEagerHydrationData.push(r,a);return new ly(t)},J=function(e,t,r){if(!lg(t))throw Error(d(200));return lx(null,e,t,!1,r)},Q=function(e){if(!lg(e))throw Error(d(40));return!!e._reactRootContainer&&(sZ(function(){lx(null,null,e,!1,function(){e._reactRootContainer=null,e[nZ]=null})}),!0)},_=sF,$=function(e,t,r,n){if(!lg(r))throw Error(d(200));if(null==e||void 0===e._reactInternals)throw Error(d(38));return lx(e,t,r,!1,n)},ee="18.2.0-next-9e3b772b8-20220608"}),D("fO90s",function(e,t){e.exports=A("gcnCG")}),D("gcnCG",function(e,t){function n(e,t){var r=e.length;for(e.push(t);0<r;){var n=r-1>>>1,a=e[n];if(0<o(a,t))e[n]=t,e[r]=a,r=n;else break}}function a(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],r=e.pop();if(r!==t){e[0]=r;for(var n=0,a=e.length,i=a>>>1;n<i;){var s=2*(n+1)-1,l=e[s],c=s+1,u=e[c];if(0>o(l,r))c<a&&0>o(u,l)?(e[n]=u,e[c]=r,n=c):(e[n]=l,e[s]=r,n=s);else if(c<a&&0>o(u,r))e[n]=u,e[c]=r,n=c;else break}}return t}function o(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}if(r(e.exports,"unstable_now",()=>s,e=>s=e),r(e.exports,"unstable_IdlePriority",()=>l,e=>l=e),r(e.exports,"unstable_ImmediatePriority",()=>c,e=>c=e),r(e.exports,"unstable_LowPriority",()=>u,e=>u=e),r(e.exports,"unstable_NormalPriority",()=>d,e=>d=e),r(e.exports,"unstable_Profiling",()=>f,e=>f=e),r(e.exports,"unstable_UserBlockingPriority",()=>p,e=>p=e),r(e.exports,"unstable_cancelCallback",()=>h,e=>h=e),r(e.exports,"unstable_continueExecution",()=>b,e=>b=e),r(e.exports,"unstable_forceFrameRate",()=>y,e=>y=e),r(e.exports,"unstable_getCurrentPriorityLevel",()=>m,e=>m=e),r(e.exports,"unstable_getFirstCallbackNode",()=>g,e=>g=e),r(e.exports,"unstable_next",()=>v,e=>v=e),r(e.exports,"unstable_pauseExecution",()=>x,e=>x=e),r(e.exports,"unstable_requestPaint",()=>w,e=>w=e),r(e.exports,"unstable_runWithPriority",()=>P,e=>P=e),r(e.exports,"unstable_scheduleCallback",()=>O,e=>O=e),r(e.exports,"unstable_shouldYield",()=>T,e=>T=e),r(e.exports,"unstable_wrapCallback",()=>z,e=>z=e),"object"==typeof performance&&"function"==typeof performance.now){var s,l,c,u,d,f,p,h,b,y,m,g,v,x,w,P,O,T,z,k,L=performance;s=function(){return L.now()}}else{var E=Date,N=E.now();s=function(){return E.now()-N}}var S=[],M=[],j=1,H=null,R=3,I=!1,B=!1,V=!1,X="function"==typeof setTimeout?setTimeout:null,U="function"==typeof clearTimeout?clearTimeout:null,A="undefined"!=typeof setImmediate?setImmediate:null;function D(e){for(var t=a(M);null!==t;){if(null===t.callback)i(M);else if(t.startTime<=e)i(M),t.sortIndex=t.expirationTime,n(S,t);else break;t=a(M)}}function C(e){if(V=!1,D(e),!B){if(null!==a(S))B=!0,$(F);else{var t=a(M);null!==t&&ee(C,t.startTime-e)}}}function F(e,t){B=!1,V&&(V=!1,U(G),G=-1),I=!0;var r=R;try{for(D(t),H=a(S);null!==H&&(!(H.expirationTime>t)||e&&!K());){var n=H.callback;if("function"==typeof n){H.callback=null,R=H.priorityLevel;var o=n(H.expirationTime<=t);t=s(),"function"==typeof o?H.callback=o:H===a(S)&&i(S),D(t)}else i(S);H=a(S)}if(null!==H)var l=!0;else{var c=a(M);null!==c&&ee(C,c.startTime-t),l=!1}return l}finally{H=null,R=r,I=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var Z=!1,q=null,G=-1,W=5,Y=-1;function K(){return!(s()-Y<W)}function J(){if(null!==q){var e=s();Y=e;var t=!0;try{t=q(!0,e)}finally{t?k():(Z=!1,q=null)}}else Z=!1}if("function"==typeof A)k=function(){A(J)};else if("undefined"!=typeof MessageChannel){var Q=new MessageChannel,_=Q.port2;Q.port1.onmessage=J,k=function(){_.postMessage(null)}}else k=function(){X(J,0)};function $(e){q=e,Z||(Z=!0,k())}function ee(e,t){G=X(function(){e(s())},t)}l=5,c=1,u=4,d=3,f=null,p=2,h=function(e){e.callback=null},b=function(){B||I||(B=!0,$(F))},y=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):W=0<e?Math.floor(1e3/e):5},m=function(){return R},g=function(){return a(S)},v=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var r=R;R=t;try{return e()}finally{R=r}},x=function(){},w=function(){},P=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=R;R=e;try{return t()}finally{R=r}},O=function(e,t,r){var i=s();switch(r="object"==typeof r&&null!==r&&"number"==typeof(r=r.delay)&&0<r?i+r:i,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return o=r+o,e={id:j++,callback:t,priorityLevel:e,startTime:r,expirationTime:o,sortIndex:-1},r>i?(e.sortIndex=r,n(M,e),null===a(S)&&e===a(M)&&(V?(U(G),G=-1):V=!0,ee(C,r-i))):(e.sortIndex=o,n(S,e),B||I||(B=!0,$(F))),e},T=K,z=function(e){var t=R;return function(){var r=R;R=t;try{return e.apply(this,arguments)}finally{R=r}}}}),D("lkFCe",function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.validateBasic=t.wNAF=void 0;var r=A("2D9sF"),n=A("esaJO");let a=BigInt(0),i=BigInt(1);t.wNAF=// Elliptic curve multiplication of Point by scalar. Fragile.
// Scalars should always be less than curve order: this should be checked inside of a curve itself.
// Creates precomputation tables for fast multiplication:
// - private scalar is split by fixed size windows of W bits
// - every window point is collected from window's table & added to accumulator
// - since windows are different, same point inside tables won't be accessed more than once per calc
// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
// - +1 window is neccessary for wNAF
// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
// windows to be in different memory locations
function(e,t){let r=(e,t)=>{let r=t.negate();return e?r:t},n=e=>{let r=Math.ceil(t/e)+1;// +1, because
return{windows:r,windowSize:2**(e-1)}};return{constTimeNegate:r,// non-const time multiplication ladder
unsafeLadder(t,r){let n=e.ZERO,o=t;for(;r>a;)r&i&&(n=n.add(o)),o=o.double(),r>>=i;return n},/**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */precomputeWindow(e,t){let{windows:r,windowSize:a}=n(t),i=[],o=e,s=o;for(let e=0;e<r;e++){s=o,i.push(s);// =1, because we skip zero
for(let e=1;e<a;e++)s=s.add(o),i.push(s);o=s.double()}return i},/**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */wNAF(t,a,o){// TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
// But need to carefully remove other checks before wNAF. ORDER == bits here
let{windows:s,windowSize:l}=n(t),c=e.ZERO,u=e.BASE,d=BigInt(2**t-1),f=2**t,p=BigInt(t);for(let e=0;e<s;e++){let t=e*l,n=Number(o&d);// Shift number by W bits.
o>>=p,n>l&&(n-=f,o+=i);let s=t+Math.abs(n)-1,h=e%2!=0,b=n<0;// -1 because we skip zero
0===n?u=u.add(r(h,a[t])):c=c.add(r(b,a[s]))}// JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
// Even if the variable is still unused, there are some checks which will
// throw an exception, so compiler needs to prove they won't happen, which is hard.
// At this point there is a way to F be infinity-point even if p is not,
// which makes it less const-time: around 1 bigint multiply.
return{p:c,f:u}},wNAFCached(e,t,r,n){// @ts-ignore
let a=e._WINDOW_SIZE||1,i=t.get(e);return i||(i=this.precomputeWindow(e,a),1!==a&&t.set(e,n(i))),this.wNAF(a,i,r)}}},t.validateBasic=function(e){// Set defaults
return(0,r.validateField)(e.Fp),(0,n.validateObject)(e,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...(0,r.nLength)(e.n,e.nBitLength),...e,p:e.Fp.ORDER})}}),D("2D9sF",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.mapHashToField=e.exports.getMinHashLength=e.exports.getFieldBytesLength=e.exports.hashToPrivateScalar=e.exports.FpSqrtEven=e.exports.FpSqrtOdd=e.exports.Field=e.exports.nLength=e.exports.FpIsSquare=e.exports.FpDiv=e.exports.FpInvertBatch=e.exports.FpPow=e.exports.validateField=e.exports.isNegativeLE=e.exports.FpSqrt=e.exports.tonelliShanks=e.exports.invert=e.exports.pow2=e.exports.pow=e.exports.mod=void 0;var r=A("esaJO");// prettier-ignore
let n=BigInt(0),a=BigInt(1),i=BigInt(2),o=BigInt(3),s=BigInt(4),l=BigInt(5),c=BigInt(8);// Calculates a modulo b
function u(e,t){let r=e%t;return r>=n?r:t+r}/**
 * Efficiently raise num to power and do modular division.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 * @example
 * pow(2n, 6n, 11n) // 64n % 11n == 9n
 */// TODO: use field version && remove
function d(e,t,r){if(r<=n||t<n)throw Error("Expected power/modulo > 0");if(r===a)return n;let i=a;for(;t>n;)t&a&&(i=i*e%r),e=e*e%r,t>>=a;return i}// Inverses number over modulo
function f(e,t){if(e===n||t<=n)throw Error(`invert: expected positive integers, got n=${e} mod=${t}`);// Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
// Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
let r=u(e,t),i=t,o=n,s=a,l=a,c=n;for(;r!==n;){// JIT applies optimization if those two lines follow each other
let e=i/r,t=i%r,n=o-l*e,a=s-c*e;// prettier-ignore
i=r,r=t,o=l,s=c,l=n,c=a}let d=i;if(d!==a)throw Error("invert: does not exist");return u(o,t)}/**
 * Tonelli-Shanks square root search algorithm.
 * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
 * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
 * Will start an infinite loop if field order P is not prime.
 * @param P field order
 * @returns function that takes field Fp (created from P) and number n
 */function p(e){let t,r,o;// Legendre constant: used to calculate Legendre symbol (a | p),
// which denotes the value of a^((p-1)/2) (mod p).
// (a | p) ≡ 1    if a is a square (mod p)
// (a | p) ≡ -1   if a is not a square (mod p)
// (a | p) ≡ 0    if a ≡ 0 (mod p)
let l=(e-a)/i;// Step 1: By factoring out powers of 2 from p - 1,
// find q and s such that p - 1 = q*(2^s) with q odd
for(t=e-a,r=0;t%i===n;t/=i,r++);// Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
for(o=i;o<e&&d(o,l,e)!==e-a;o++);// Fast-path
if(1===r){let t=(e+a)/s;return function(e,r){let n=e.pow(r,t);if(!e.eql(e.sqr(n),r))throw Error("Cannot find square root");return n}}// Slow-path
let c=(t+a)/i;return function(e,n){// Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
if(e.pow(n,l)===e.neg(e.ONE))throw Error("Cannot find square root");let i=r,s=e.pow(e.mul(e.ONE,o),t),u=e.pow(n,c),d=e.pow(n,t);for(;!e.eql(d,e.ONE);){if(e.eql(d,e.ZERO))return e.ZERO;// https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
// Find m such b^(2^m)==1
let t=1;for(let r=e.sqr(d);t<i&&!e.eql(r,e.ONE);t++)r=e.sqr(r);// t2 *= t2
// NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
let r=e.pow(s,a<<BigInt(i-t-1));// ge = 2^(r-m-1)
s=e.sqr(r),u=e.mul(u,r),d=e.mul(d,s),i=t}return u}}function h(e){// NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
// For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
// P ≡ 3 (mod 4)
// √n = n^((P+1)/4)
if(e%s===o){// Not all roots possible!
// const ORDER =
//   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
// const NUM = 72057594037927816n;
let t=(e+a)/s;return function(e,r){let n=e.pow(r,t);// Throw if root**2 != n
if(!e.eql(e.sqr(n),r))throw Error("Cannot find square root");return n}}// Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
if(e%c===l){let t=(e-l)/c;return function(e,r){let n=e.mul(r,i),a=e.pow(n,t),o=e.mul(r,a),s=e.mul(e.mul(o,i),a),l=e.mul(o,e.sub(s,e.ONE));if(!e.eql(e.sqr(l),r))throw Error("Cannot find square root");return l}}// Other cases: Tonelli-Shanks algorithm
return p(e)}BigInt(9),BigInt(16),e.exports.mod=u,e.exports.pow=d,e.exports.pow2=// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
function(e,t,r){let a=e;for(;t-- >n;)a*=a,a%=r;return a},e.exports.invert=f,e.exports.tonelliShanks=p,e.exports.FpSqrt=h,e.exports.isNegativeLE=(e,t)=>(u(e,t)&a)===a;// prettier-ignore
let b=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];// Generic field functions
/**
 * Same as `pow` but for Fp: non-constant-time.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 */function y(e,t,r){// Should have same speed as pow for bigints
// TODO: benchmark!
if(r<n)throw Error("Expected power > 0");if(r===n)return e.ONE;if(r===a)return t;let i=e.ONE,o=t;for(;r>n;)r&a&&(i=e.mul(i,o)),o=e.sqr(o),r>>=a;return i}/**
 * Efficiently invert an array of Field elements.
 * `inv(0)` will return `undefined` here: make sure to throw an error.
 */function m(e,t){let r=Array(t.length),n=t.reduce((t,n,a)=>e.is0(n)?t:(r[a]=t,e.mul(t,n)),e.ONE),a=e.inv(n);return(// Walk from last to first, multiply them by inverted each other MOD p
t.reduceRight((t,n,a)=>e.is0(n)?t:(r[a]=e.mul(t,r[a]),e.mul(t,n)),a),r)}// CURVE.n lengths
function g(e,t){// Bit size, byte size of CURVE.n
let r=void 0!==t?t:e.toString(2).length,n=Math.ceil(r/8);return{nBitLength:r,nByteLength:n}}/**
 * Returns total number of bytes consumed by the field element.
 * For example, 32 bytes for usual 256-bit weierstrass curve.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of field
 */function v(e){if("bigint"!=typeof e)throw Error("field order must be bigint");let t=e.toString(2).length;return Math.ceil(t/8)}/**
 * Returns minimal amount of bytes that can be safely reduced
 * by field order.
 * Should be 2^-128 for 128-bit curve such as P256.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of target hash
 */function x(e){let t=v(e);return t+Math.ceil(t/2)}e.exports.validateField=function(e){let t=b.reduce((e,t)=>(e[t]="function",e),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"});return(0,r.validateObject)(e,t)},e.exports.FpPow=y,e.exports.FpInvertBatch=m,e.exports.FpDiv=function(e,t,r){return e.mul(t,"bigint"==typeof r?f(r,e.ORDER):e.inv(r))},e.exports.FpIsSquare=// This function returns True whenever the value x is a square in the field F.
function(e){let t=(e.ORDER-a)/i;// Integer arithmetic
return r=>{let n=e.pow(r,t);return e.eql(n,e.ZERO)||e.eql(n,e.ONE)}},e.exports.nLength=g,e.exports.Field=/**
 * Initializes a finite field over prime. **Non-primes are not supported.**
 * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
 * Major performance optimizations:
 * * a) denormalized operations like mulN instead of mul
 * * b) same object shape: never add or remove keys
 * * c) Object.freeze
 * @param ORDER prime positive bigint
 * @param bitLen how many bits the field consumes
 * @param isLE (def: false) if encoding / decoding should be in little-endian
 * @param redef optional faster redefinitions of sqrt and other methods
 */function(e,t,i=!1,o={}){if(e<=n)throw Error(`Expected Field ORDER > 0, got ${e}`);let{nBitLength:s,nByteLength:l}=g(e,t);if(l>2048)throw Error("Field lengths over 2048 bytes are not supported");let c=h(e),d=Object.freeze({ORDER:e,BITS:s,BYTES:l,MASK:(0,r.bitMask)(s),ZERO:n,ONE:a,create:t=>u(t,e),isValid:t=>{if("bigint"!=typeof t)throw Error(`Invalid field element: expected bigint, got ${typeof t}`);return n<=t&&t<e;// 0 is valid element, but it's not invertible
},is0:e=>e===n,isOdd:e=>(e&a)===a,neg:t=>u(-t,e),eql:(e,t)=>e===t,sqr:t=>u(t*t,e),add:(t,r)=>u(t+r,e),sub:(t,r)=>u(t-r,e),mul:(t,r)=>u(t*r,e),pow:(e,t)=>y(d,e,t),div:(t,r)=>u(t*f(r,e),e),// Same as above, but doesn't normalize
sqrN:e=>e*e,addN:(e,t)=>e+t,subN:(e,t)=>e-t,mulN:(e,t)=>e*t,inv:t=>f(t,e),sqrt:o.sqrt||(e=>c(d,e)),invertBatch:e=>m(d,e),// TODO: do we really need constant cmov?
// We don't have const-time bigints anyway, so probably will be not very useful
cmov:(e,t,r)=>r?t:e,toBytes:e=>i?(0,r.numberToBytesLE)(e,l):(0,r.numberToBytesBE)(e,l),fromBytes:e=>{if(e.length!==l)throw Error(`Fp.fromBytes: expected ${l}, got ${e.length}`);return i?(0,r.bytesToNumberLE)(e):(0,r.bytesToNumberBE)(e)}});return Object.freeze(d)},e.exports.FpSqrtOdd=function(e,t){if(!e.isOdd)throw Error("Field doesn't have isOdd");let r=e.sqrt(t);return e.isOdd(r)?r:e.neg(r)},e.exports.FpSqrtEven=function(e,t){if(!e.isOdd)throw Error("Field doesn't have isOdd");let r=e.sqrt(t);return e.isOdd(r)?e.neg(r):r},e.exports.hashToPrivateScalar=/**
 * "Constant-time" private key generation utility.
 * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).
 * Which makes it slightly more biased, less secure.
 * @deprecated use mapKeyToField instead
 */function(e,t,n=!1){e=(0,r.ensureBytes)("privateHash",e);let i=e.length,o=g(t).nByteLength+8;if(o<24||i<o||i>1024)throw Error(`hashToPrivateScalar: expected ${o}-1024 bytes of input, got ${i}`);let s=n?(0,r.bytesToNumberLE)(e):(0,r.bytesToNumberBE)(e);return u(s,t-a)+a},e.exports.getFieldBytesLength=v,e.exports.getMinHashLength=x,e.exports.mapHashToField=/**
 * "Constant-time" private key generation utility.
 * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
 * and convert them into private scalar, with the modulo bias being negligible.
 * Needs at least 48 bytes of input for 32-byte private key.
 * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
 * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
 * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
 * @param hash hash output from SHA3 or a similar function
 * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
 * @param isLE interpret hash bytes as LE num
 * @returns valid private scalar
 */function(e,t,n=!1){let i=e.length,o=v(t),s=x(t);// No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
if(i<16||i<s||i>1024)throw Error(`expected ${s}-1024 bytes of input, got ${i}`);let l=n?(0,r.bytesToNumberBE)(e):(0,r.bytesToNumberLE)(e),c=u(l,t-a)+a;return n?(0,r.numberToBytesLE)(c,o):(0,r.numberToBytesBE)(c,o)}}),D("esaJO",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.validateObject=e.exports.createHmacDrbg=e.exports.bitMask=e.exports.bitSet=e.exports.bitGet=e.exports.bitLen=e.exports.utf8ToBytes=e.exports.equalBytes=e.exports.concatBytes=e.exports.ensureBytes=e.exports.numberToVarBytesBE=e.exports.numberToBytesLE=e.exports.numberToBytesBE=e.exports.bytesToNumberLE=e.exports.bytesToNumberBE=e.exports.hexToBytes=e.exports.hexToNumber=e.exports.numberToHexUnpadded=e.exports.bytesToHex=void 0;/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */// 100 lines of code in the file are duplicated from noble-hashes (utils).
// This is OK: `abstract` directory does not use noble-hashes.
// User may opt-in into using different hashing library. This way, noble-hashes
// won't be included into their bundle.
let r=BigInt(0),n=BigInt(1),a=BigInt(2),i=e=>e instanceof Uint8Array,o=/* @__PURE__ */Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */function s(e){if(!i(e))throw Error("Uint8Array expected");// pre-caching improves the speed 6x
let t="";for(let r=0;r<e.length;r++)t+=o[e[r]];return t}function l(e){let t=e.toString(16);return 1&t.length?`0${t}`:t}function c(e){if("string"!=typeof e)throw Error("hex string expected, got "+typeof e);// Big Endian
return BigInt(""===e?"0":`0x${e}`)}/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */function u(e){if("string"!=typeof e)throw Error("hex string expected, got "+typeof e);let t=e.length;if(t%2)throw Error("padded hex string expected, got unpadded hex of length "+t);let r=new Uint8Array(t/2);for(let t=0;t<r.length;t++){let n=2*t,a=e.slice(n,n+2),i=Number.parseInt(a,16);if(Number.isNaN(i)||i<0)throw Error("Invalid byte sequence");r[t]=i}return r}function d(e,t){return u(e.toString(16).padStart(2*t,"0"))}/**
 * Copies several Uint8Arrays into one.
 */function f(...e){let t=new Uint8Array(e.reduce((e,t)=>e+t.length,0)),r=0;return e.forEach(e=>{if(!i(e))throw Error("Uint8Array expected");t.set(e,r),r+=e.length}),t}e.exports.bytesToHex=s,e.exports.numberToHexUnpadded=l,e.exports.hexToNumber=c,e.exports.hexToBytes=u,e.exports.bytesToNumberBE=// BE: Big Endian, LE: Little Endian
function(e){return c(s(e))},e.exports.bytesToNumberLE=function(e){if(!i(e))throw Error("Uint8Array expected");return c(s(Uint8Array.from(e).reverse()))},e.exports.numberToBytesBE=d,e.exports.numberToBytesLE=function(e,t){return d(e,t).reverse()},e.exports.numberToVarBytesBE=// Unpadded, rarely used
function(e){return u(l(e))},e.exports.ensureBytes=/**
 * Takes hex string or Uint8Array, converts to Uint8Array.
 * Validates output length.
 * Will throw error for other types.
 * @param title descriptive title for an error e.g. 'private key'
 * @param hex hex string or Uint8Array
 * @param expectedLength optional, will compare to result array's length
 * @returns
 */function(e,t,r){let n;if("string"==typeof t)try{n=u(t)}catch(r){throw Error(`${e} must be valid hex string, got "${t}". Cause: ${r}`)}else if(i(t))// is instance of Uint8Array, and its slice() creates **mutable** copy
n=Uint8Array.from(t);else throw Error(`${e} must be hex string or Uint8Array`);let a=n.length;if("number"==typeof r&&a!==r)throw Error(`${e} expected ${r} bytes, got ${a}`);return n},e.exports.concatBytes=f,e.exports.equalBytes=function(e,t){// We don't care about timing attacks here
if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0},e.exports.utf8ToBytes=/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */function(e){if("string"!=typeof e)throw Error(`utf8ToBytes expected string, got ${typeof e}`);return new Uint8Array(new TextEncoder().encode(e));// https://bugzil.la/1681809
},e.exports.bitLen=// Bit operations
/**
 * Calculates amount of bits in a bigint.
 * Same as `n.toString(2).length`
 */function(e){let t;for(t=0;e>r;e>>=n,t+=1);return t},e.exports.bitGet=/**
 * Gets single bit at position.
 * NOTE: first bit position is 0 (same as arrays)
 * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
 */function(e,t){return e>>BigInt(t)&n},e.exports.bitSet=(e,t,a)=>e|(a?n:r)<<BigInt(t),e.exports.bitMask=e=>(a<<BigInt(e-1))-n;// DRBG
let p=e=>new Uint8Array(e),h=e=>Uint8Array.from(e);// creates Uint8Array
e.exports.createHmacDrbg=/**
 * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
 * @returns function that will call DRBG until 2nd arg returns something meaningful
 * @example
 *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
 *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
 */function(e,t,r){if("number"!=typeof e||e<2)throw Error("hashLen must be a number");if("number"!=typeof t||t<2)throw Error("qByteLen must be a number");if("function"!=typeof r)throw Error("hmacFn must be a function");// Step B, Step C: set hashLen to 8*ceil(hlen/8)
let n=p(e),a=p(e),i=0,o=()=>{n.fill(1),a.fill(0),i=0},s=(...e)=>r(a,n,...e),l=(e=p())=>{// HMAC-DRBG reseed() function. Steps D-G
a=s(h([0]),e),n=s(),0!==e.length&&(a=s(h([1]),e),n=s())},c=()=>{// HMAC-DRBG generate() function
if(i++>=1e3)throw Error("drbg: tried 1000 values");let e=0,r=[];for(;e<t;){n=s();let t=n.slice();r.push(t),e+=n.length}return f(...r)};// Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
return(e,t)=>{let r;for(o(),l(e);!(r=t(c()));)l();return o(),r}};// Validating curves and fields
let b={bigint:e=>"bigint"==typeof e,function:e=>"function"==typeof e,boolean:e=>"boolean"==typeof e,string:e=>"string"==typeof e,stringOrUint8Array:e=>"string"==typeof e||e instanceof Uint8Array,isSafeInteger:e=>Number.isSafeInteger(e),array:e=>Array.isArray(e),field:(e,t)=>t.Fp.isValid(e),hash:e=>"function"==typeof e&&Number.isSafeInteger(e.outputLen)};e.exports.validateObject=// type Record<K extends string | number | symbol, T> = { [P in K]: T; }
function(e,t,r={}){let n=(t,r,n)=>{let a=b[r];if("function"!=typeof a)throw Error(`Invalid validator "${r}", expected function`);let i=e[t];if((!n||void 0!==i)&&!a(i,e))throw Error(`Invalid param ${String(t)}=${i} (${typeof i}), expected ${r}`)};for(let[e,r]of Object.entries(t))n(e,r,!1);for(let[e,t]of Object.entries(r))n(e,t,!0);return e};// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
// // Should fail type-check
// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });
}),D("dEXSZ",function(e,t){!function(e,t){// Utils
function r(e,t){if(!e)throw Error(t||"Assertion failed")}// Could use `inherits` module, but don't want to move from single file
// architecture yet.
function n(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}// BN
function a(e,t,r){if(a.isBN(e))return e;this.negative=0,this.words=null,this.length=0,// Reduction context
this.red=null,null!==e&&(("le"===t||"be"===t)&&(r=t,t=10),this._init(e||0,t||10,r||"be"))}"object"==typeof e?e.exports=a:t.BN=a,a.BN=a,a.wordSize=26;try{u="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:A("kjyEk").Buffer}catch(e){}function i(e,t){var n=e.charCodeAt(t);return(// '0' - '9'
n>=48&&n<=57?n-48:n>=65&&n<=70?n-55:n>=97&&n<=102?n-87:void r(!1,"Invalid character in "+e))}function o(e,t,r){var n=i(e,r);return r-1>=t&&(n|=i(e,r-1)<<4),n}function s(e,t,n,a){for(var i=0,o=0,s=Math.min(e.length,n),l=t;l<s;l++){var c=e.charCodeAt(l)-48;i*=a,o=c>=49?c-49+10:c>=17?c-17+10:c,r(c>=0&&o<a,"Invalid character"),i+=o}return i}function l(e,t){e.words=t.words,e.length=t.length,e.negative=t.negative,e.red=t.red}// Check Symbol.for because not everywhere where Symbol defined
// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
if(a.isBN=function(e){return e instanceof a||null!==e&&"object"==typeof e&&e.constructor.wordSize===a.wordSize&&Array.isArray(e.words)},a.max=function(e,t){return e.cmp(t)>0?e:t},a.min=function(e,t){return 0>e.cmp(t)?e:t},a.prototype._init=function(e,t,n){if("number"==typeof e)return this._initNumber(e,t,n);if("object"==typeof e)return this._initArray(e,t,n);"hex"===t&&(t=16),r(t===(0|t)&&t>=2&&t<=36);var a=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&(a++,this.negative=1),a<e.length&&(16===t?this._parseHex(e,a,n):(this._parseBase(e,t,a),"le"===n&&this._initArray(this.toArray(),t,n)))},a.prototype._initNumber=function(e,t,n){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(r(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===n&&// Reverse the bytes
this._initArray(this.toArray(),t,n)},a.prototype._initArray=function(e,t,n){if(// Perhaps a Uint8Array
r("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=Array(this.length);for(var a,i,o=0;o<this.length;o++)this.words[o]=0;var s=0;if("be"===n)for(o=e.length-1,a=0;o>=0;o-=3)i=e[o]|e[o-1]<<8|e[o-2]<<16,this.words[a]|=i<<s&67108863,this.words[a+1]=i>>>26-s&67108863,(s+=24)>=26&&(s-=26,a++);else if("le"===n)for(o=0,a=0;o<e.length;o+=3)i=e[o]|e[o+1]<<8|e[o+2]<<16,this.words[a]|=i<<s&67108863,this.words[a+1]=i>>>26-s&67108863,(s+=24)>=26&&(s-=26,a++);return this._strip()},a.prototype._parseHex=function(e,t,r){// Create possibly bigger array to ensure that it fits the number
this.length=Math.ceil((e.length-t)/6),this.words=Array(this.length);for(var n,a=0;a<this.length;a++)this.words[a]=0;// 24-bits chunks
var i=0,s=0;if("be"===r)for(a=e.length-1;a>=t;a-=2)n=o(e,t,a)<<i,this.words[s]|=67108863&n,i>=18?(i-=18,s+=1,this.words[s]|=n>>>26):i+=8;else for(a=(e.length-t)%2==0?t+1:t;a<e.length;a+=2)n=o(e,t,a)<<i,this.words[s]|=67108863&n,i>=18?(i-=18,s+=1,this.words[s]|=n>>>26):i+=8;this._strip()},a.prototype._parseBase=function(e,t,r){// Initialize as zero
this.words=[0],this.length=1;// Find length of limb in base
for(var n=0,a=1;a<=67108863;a*=t)n++;n--,a=a/t|0;for(var i=e.length-r,o=i%n,l=Math.min(i,i-o)+r,c=0,u=r;u<l;u+=n)c=s(e,u,u+n,t),this.imuln(a),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c);if(0!==o){var d=1;for(c=s(e,u,e.length,t),u=0;u<o;u++)d*=t;this.imuln(d),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c)}this._strip()},a.prototype.copy=function(e){e.words=Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},a.prototype._move=function(e){l(e,this)},a.prototype.clone=function(){var e=new a(null);return this.copy(e),e},a.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},// Remove leading `0` from `this`
a.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},a.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{a.prototype[Symbol.for("nodejs.util.inspect.custom")]=c}catch(e){a.prototype.inspect=c}else a.prototype.inspect=c;function c(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}/*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */var u,d=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function h(e,t,r){r.negative=t.negative^e.negative;var n=e.length+t.length|0;r.length=n,n=n-1|0;// Peel one iteration (compiler can't do it, because of code complexity)
var a=0|e.words[0],i=0|t.words[0],o=a*i,s=67108863&o,l=o/67108864|0;r.words[0]=s;for(var c=1;c<n;c++){for(var u=l>>>26,d=67108863&l,f=Math.min(c,t.length-1),p=Math.max(0,c-e.length+1);p<=f;p++){var h=c-p|0;u+=(o=(a=0|e.words[h])*(i=0|t.words[p])+d)/67108864|0,d=67108863&o}r.words[c]=0|d,l=0|u}return 0!==l?r.words[c]=0|l:r.length--,r._strip()}a.prototype.toString=function(e,t){if(t=0|t||1,16===(e=e||10)||"hex"===e){n="";for(var n,a=0,i=0,o=0;o<this.length;o++){var s=this.words[o],l=((s<<a|i)&16777215).toString(16);i=s>>>24-a&16777215,(a+=2)>=26&&(a-=26,o--),n=0!==i||o!==this.length-1?d[6-l.length]+l+n:l+n}for(0!==i&&(n=i.toString(16)+n);n.length%t!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}if(e===(0|e)&&e>=2&&e<=36){// var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
var c=f[e],u=p[e];n="";var h=this.clone();for(h.negative=0;!h.isZero();){var b=h.modrn(u).toString(e);n=(h=h.idivn(u)).isZero()?b+n:d[c-b.length]+b+n}for(this.isZero()&&(n="0"+n);n.length%t!=0;)n="0"+n;return 0!==this.negative&&(n="-"+n),n}r(!1,"Base should be between 2 and 36")},a.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},a.prototype.toJSON=function(){return this.toString(16,2)},u&&(a.prototype.toBuffer=function(e,t){return this.toArrayLike(u,e,t)}),a.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)},a.prototype.toArrayLike=function(e,t,n){this._strip();var a=this.byteLength(),i=n||Math.max(1,a);r(a<=i,"byte array longer than desired length"),r(i>0,"Requested array length <= 0");var o=e.allocUnsafe?e.allocUnsafe(i):new e(i);return this["_toArrayLike"+("le"===t?"LE":"BE")](o,a),o},a.prototype._toArrayLikeLE=function(e,t){for(var r=0,n=0,a=0,i=0;a<this.length;a++){var o=this.words[a]<<i|n;e[r++]=255&o,r<e.length&&(e[r++]=o>>8&255),r<e.length&&(e[r++]=o>>16&255),6===i?(r<e.length&&(e[r++]=o>>24&255),n=0,i=0):(n=o>>>24,i+=2)}if(r<e.length)for(e[r++]=n;r<e.length;)e[r++]=0},a.prototype._toArrayLikeBE=function(e,t){for(var r=e.length-1,n=0,a=0,i=0;a<this.length;a++){var o=this.words[a]<<i|n;e[r--]=255&o,r>=0&&(e[r--]=o>>8&255),r>=0&&(e[r--]=o>>16&255),6===i?(r>=0&&(e[r--]=o>>24&255),n=0,i=0):(n=o>>>24,i+=2)}if(r>=0)for(e[r--]=n;r>=0;)e[r--]=0},Math.clz32?a.prototype._countBits=function(e){return 32-Math.clz32(e)}:a.prototype._countBits=function(e){var t=e,r=0;return t>=4096&&(r+=13,t>>>=13),t>=64&&(r+=7,t>>>=7),t>=8&&(r+=4,t>>>=4),t>=2&&(r+=2,t>>>=2),r+t},a.prototype._zeroBits=function(e){// Short-cut
if(0===e)return 26;var t=e,r=0;return(8191&t)==0&&(r+=13,t>>>=13),(127&t)==0&&(r+=7,t>>>=7),(15&t)==0&&(r+=4,t>>>=4),(3&t)==0&&(r+=2,t>>>=2),(1&t)==0&&r++,r},// Return number of used bits in a BN
a.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return(this.length-1)*26+t},// Number of trailing zero bits
a.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var r=this._zeroBits(this.words[t]);if(e+=r,26!==r)break}return e},a.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},a.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},a.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},a.prototype.isNeg=function(){return 0!==this.negative},// Return negative clone of `this`
a.prototype.neg=function(){return this.clone().ineg()},a.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},// Or `num` with `this` in-place
a.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this._strip()},a.prototype.ior=function(e){return r((this.negative|e.negative)==0),this.iuor(e)},// Or `num` with `this`
a.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},a.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},// And `num` with `this` in-place
a.prototype.iuand=function(e){// b = min-length(num, this)
var t;t=this.length>e.length?e:this;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]&e.words[r];return this.length=t.length,this._strip()},a.prototype.iand=function(e){return r((this.negative|e.negative)==0),this.iuand(e)},// And `num` with `this`
a.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},a.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},// Xor `num` with `this` in-place
a.prototype.iuxor=function(e){this.length>e.length?(t=this,r=e):(t=e,r=this);for(var t,r,n=0;n<r.length;n++)this.words[n]=t.words[n]^r.words[n];if(this!==t)for(;n<t.length;n++)this.words[n]=t.words[n];return this.length=t.length,this._strip()},a.prototype.ixor=function(e){return r((this.negative|e.negative)==0),this.iuxor(e)},// Xor `num` with `this`
a.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},a.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},// Not ``this`` with ``width`` bitwidth
a.prototype.inotn=function(e){r("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),n=e%26;// Extend the buffer with leading zeroes
this._expand(t),n>0&&t--;// Handle complete words
for(var a=0;a<t;a++)this.words[a]=67108863&~this.words[a];// And remove leading zeroes
return n>0&&(this.words[a]=~this.words[a]&67108863>>26-n),this._strip()},a.prototype.notn=function(e){return this.clone().inotn(e)},// Set `bit` of `this`
a.prototype.setn=function(e,t){r("number"==typeof e&&e>=0);var n=e/26|0,a=e%26;return this._expand(n+1),t?this.words[n]=this.words[n]|1<<a:this.words[n]=this.words[n]&~(1<<a),this._strip()},// Add `num` to `this` in-place
a.prototype.iadd=function(e){// negative + positive
if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(r=this,n=e):(r=e,n=this);for(var t,r,n,a=0,i=0;i<n.length;i++)t=(0|r.words[i])+(0|n.words[i])+a,this.words[i]=67108863&t,a=t>>>26;for(;0!==a&&i<r.length;i++)t=(0|r.words[i])+a,this.words[i]=67108863&t,a=t>>>26;if(this.length=r.length,0!==a)this.words[this.length]=a,this.length++;else if(r!==this)for(;i<r.length;i++)this.words[i]=r.words[i];return this},// Add `num` to `this`
a.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},// Subtract `num` from `this` in-place
a.prototype.isub=function(e){// this - (-num) = this + num
if(0!==e.negative){e.negative=0;var t,r,n=this.iadd(e);return e.negative=1,n._normSign();// -this - num = -(this + num)
}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();// At this point both numbers are positive
var a=this.cmp(e);// Optimization - zeroify
if(0===a)return this.negative=0,this.length=1,this.words[0]=0,this;a>0?(t=this,r=e):(t=e,r=this);for(var i=0,o=0;o<r.length;o++)i=(n=(0|t.words[o])-(0|r.words[o])+i)>>26,this.words[o]=67108863&n;for(;0!==i&&o<t.length;o++)i=(n=(0|t.words[o])+i)>>26,this.words[o]=67108863&n;// Copy rest of the words
if(0===i&&o<t.length&&t!==this)for(;o<t.length;o++)this.words[o]=t.words[o];return this.length=Math.max(this.length,o),t!==this&&(this.negative=1),this._strip()},// Subtract `num` from `this`
a.prototype.sub=function(e){return this.clone().isub(e)};// TODO(indutny): it may be reasonable to omit it for users who don't need
// to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
// multiplication (like elliptic secp256k1).
var b=function(e,t,r){var n,a,i,o=e.words,s=t.words,l=r.words,c=0,u=0|o[0],d=8191&u,f=u>>>13,p=0|o[1],h=8191&p,b=p>>>13,y=0|o[2],m=8191&y,g=y>>>13,v=0|o[3],x=8191&v,w=v>>>13,P=0|o[4],O=8191&P,T=P>>>13,z=0|o[5],k=8191&z,L=z>>>13,E=0|o[6],N=8191&E,S=E>>>13,M=0|o[7],j=8191&M,H=M>>>13,R=0|o[8],I=8191&R,B=R>>>13,V=0|o[9],X=8191&V,U=V>>>13,A=0|s[0],D=8191&A,C=A>>>13,F=0|s[1],Z=8191&F,q=F>>>13,G=0|s[2],W=8191&G,Y=G>>>13,K=0|s[3],J=8191&K,Q=K>>>13,_=0|s[4],$=8191&_,ee=_>>>13,et=0|s[5],er=8191&et,en=et>>>13,ea=0|s[6],ei=8191&ea,eo=ea>>>13,es=0|s[7],el=8191&es,ec=es>>>13,eu=0|s[8],ed=8191&eu,ef=eu>>>13,ep=0|s[9],eh=8191&ep,eb=ep>>>13;r.negative=e.negative^t.negative,r.length=19;var ey=(c+/* k = 0 */(n=Math.imul(d,D))|0)+((8191&(a=(a=Math.imul(d,C))+Math.imul(f,D)|0))<<13)|0;c=((i=Math.imul(f,C))+(a>>>13)|0)+(ey>>>26)|0,ey&=67108863,/* k = 1 */n=Math.imul(h,D),a=(a=Math.imul(h,C))+Math.imul(b,D)|0,i=Math.imul(b,C);var em=(c+(n=n+Math.imul(d,Z)|0)|0)+((8191&(a=(a=a+Math.imul(d,q)|0)+Math.imul(f,Z)|0))<<13)|0;c=((i=i+Math.imul(f,q)|0)+(a>>>13)|0)+(em>>>26)|0,em&=67108863,/* k = 2 */n=Math.imul(m,D),a=(a=Math.imul(m,C))+Math.imul(g,D)|0,i=Math.imul(g,C),n=n+Math.imul(h,Z)|0,a=(a=a+Math.imul(h,q)|0)+Math.imul(b,Z)|0,i=i+Math.imul(b,q)|0;var eg=(c+(n=n+Math.imul(d,W)|0)|0)+((8191&(a=(a=a+Math.imul(d,Y)|0)+Math.imul(f,W)|0))<<13)|0;c=((i=i+Math.imul(f,Y)|0)+(a>>>13)|0)+(eg>>>26)|0,eg&=67108863,/* k = 3 */n=Math.imul(x,D),a=(a=Math.imul(x,C))+Math.imul(w,D)|0,i=Math.imul(w,C),n=n+Math.imul(m,Z)|0,a=(a=a+Math.imul(m,q)|0)+Math.imul(g,Z)|0,i=i+Math.imul(g,q)|0,n=n+Math.imul(h,W)|0,a=(a=a+Math.imul(h,Y)|0)+Math.imul(b,W)|0,i=i+Math.imul(b,Y)|0;var ev=(c+(n=n+Math.imul(d,J)|0)|0)+((8191&(a=(a=a+Math.imul(d,Q)|0)+Math.imul(f,J)|0))<<13)|0;c=((i=i+Math.imul(f,Q)|0)+(a>>>13)|0)+(ev>>>26)|0,ev&=67108863,/* k = 4 */n=Math.imul(O,D),a=(a=Math.imul(O,C))+Math.imul(T,D)|0,i=Math.imul(T,C),n=n+Math.imul(x,Z)|0,a=(a=a+Math.imul(x,q)|0)+Math.imul(w,Z)|0,i=i+Math.imul(w,q)|0,n=n+Math.imul(m,W)|0,a=(a=a+Math.imul(m,Y)|0)+Math.imul(g,W)|0,i=i+Math.imul(g,Y)|0,n=n+Math.imul(h,J)|0,a=(a=a+Math.imul(h,Q)|0)+Math.imul(b,J)|0,i=i+Math.imul(b,Q)|0;var ex=(c+(n=n+Math.imul(d,$)|0)|0)+((8191&(a=(a=a+Math.imul(d,ee)|0)+Math.imul(f,$)|0))<<13)|0;c=((i=i+Math.imul(f,ee)|0)+(a>>>13)|0)+(ex>>>26)|0,ex&=67108863,/* k = 5 */n=Math.imul(k,D),a=(a=Math.imul(k,C))+Math.imul(L,D)|0,i=Math.imul(L,C),n=n+Math.imul(O,Z)|0,a=(a=a+Math.imul(O,q)|0)+Math.imul(T,Z)|0,i=i+Math.imul(T,q)|0,n=n+Math.imul(x,W)|0,a=(a=a+Math.imul(x,Y)|0)+Math.imul(w,W)|0,i=i+Math.imul(w,Y)|0,n=n+Math.imul(m,J)|0,a=(a=a+Math.imul(m,Q)|0)+Math.imul(g,J)|0,i=i+Math.imul(g,Q)|0,n=n+Math.imul(h,$)|0,a=(a=a+Math.imul(h,ee)|0)+Math.imul(b,$)|0,i=i+Math.imul(b,ee)|0;var ew=(c+(n=n+Math.imul(d,er)|0)|0)+((8191&(a=(a=a+Math.imul(d,en)|0)+Math.imul(f,er)|0))<<13)|0;c=((i=i+Math.imul(f,en)|0)+(a>>>13)|0)+(ew>>>26)|0,ew&=67108863,/* k = 6 */n=Math.imul(N,D),a=(a=Math.imul(N,C))+Math.imul(S,D)|0,i=Math.imul(S,C),n=n+Math.imul(k,Z)|0,a=(a=a+Math.imul(k,q)|0)+Math.imul(L,Z)|0,i=i+Math.imul(L,q)|0,n=n+Math.imul(O,W)|0,a=(a=a+Math.imul(O,Y)|0)+Math.imul(T,W)|0,i=i+Math.imul(T,Y)|0,n=n+Math.imul(x,J)|0,a=(a=a+Math.imul(x,Q)|0)+Math.imul(w,J)|0,i=i+Math.imul(w,Q)|0,n=n+Math.imul(m,$)|0,a=(a=a+Math.imul(m,ee)|0)+Math.imul(g,$)|0,i=i+Math.imul(g,ee)|0,n=n+Math.imul(h,er)|0,a=(a=a+Math.imul(h,en)|0)+Math.imul(b,er)|0,i=i+Math.imul(b,en)|0;var eP=(c+(n=n+Math.imul(d,ei)|0)|0)+((8191&(a=(a=a+Math.imul(d,eo)|0)+Math.imul(f,ei)|0))<<13)|0;c=((i=i+Math.imul(f,eo)|0)+(a>>>13)|0)+(eP>>>26)|0,eP&=67108863,/* k = 7 */n=Math.imul(j,D),a=(a=Math.imul(j,C))+Math.imul(H,D)|0,i=Math.imul(H,C),n=n+Math.imul(N,Z)|0,a=(a=a+Math.imul(N,q)|0)+Math.imul(S,Z)|0,i=i+Math.imul(S,q)|0,n=n+Math.imul(k,W)|0,a=(a=a+Math.imul(k,Y)|0)+Math.imul(L,W)|0,i=i+Math.imul(L,Y)|0,n=n+Math.imul(O,J)|0,a=(a=a+Math.imul(O,Q)|0)+Math.imul(T,J)|0,i=i+Math.imul(T,Q)|0,n=n+Math.imul(x,$)|0,a=(a=a+Math.imul(x,ee)|0)+Math.imul(w,$)|0,i=i+Math.imul(w,ee)|0,n=n+Math.imul(m,er)|0,a=(a=a+Math.imul(m,en)|0)+Math.imul(g,er)|0,i=i+Math.imul(g,en)|0,n=n+Math.imul(h,ei)|0,a=(a=a+Math.imul(h,eo)|0)+Math.imul(b,ei)|0,i=i+Math.imul(b,eo)|0;var eO=(c+(n=n+Math.imul(d,el)|0)|0)+((8191&(a=(a=a+Math.imul(d,ec)|0)+Math.imul(f,el)|0))<<13)|0;c=((i=i+Math.imul(f,ec)|0)+(a>>>13)|0)+(eO>>>26)|0,eO&=67108863,/* k = 8 */n=Math.imul(I,D),a=(a=Math.imul(I,C))+Math.imul(B,D)|0,i=Math.imul(B,C),n=n+Math.imul(j,Z)|0,a=(a=a+Math.imul(j,q)|0)+Math.imul(H,Z)|0,i=i+Math.imul(H,q)|0,n=n+Math.imul(N,W)|0,a=(a=a+Math.imul(N,Y)|0)+Math.imul(S,W)|0,i=i+Math.imul(S,Y)|0,n=n+Math.imul(k,J)|0,a=(a=a+Math.imul(k,Q)|0)+Math.imul(L,J)|0,i=i+Math.imul(L,Q)|0,n=n+Math.imul(O,$)|0,a=(a=a+Math.imul(O,ee)|0)+Math.imul(T,$)|0,i=i+Math.imul(T,ee)|0,n=n+Math.imul(x,er)|0,a=(a=a+Math.imul(x,en)|0)+Math.imul(w,er)|0,i=i+Math.imul(w,en)|0,n=n+Math.imul(m,ei)|0,a=(a=a+Math.imul(m,eo)|0)+Math.imul(g,ei)|0,i=i+Math.imul(g,eo)|0,n=n+Math.imul(h,el)|0,a=(a=a+Math.imul(h,ec)|0)+Math.imul(b,el)|0,i=i+Math.imul(b,ec)|0;var eT=(c+(n=n+Math.imul(d,ed)|0)|0)+((8191&(a=(a=a+Math.imul(d,ef)|0)+Math.imul(f,ed)|0))<<13)|0;c=((i=i+Math.imul(f,ef)|0)+(a>>>13)|0)+(eT>>>26)|0,eT&=67108863,/* k = 9 */n=Math.imul(X,D),a=(a=Math.imul(X,C))+Math.imul(U,D)|0,i=Math.imul(U,C),n=n+Math.imul(I,Z)|0,a=(a=a+Math.imul(I,q)|0)+Math.imul(B,Z)|0,i=i+Math.imul(B,q)|0,n=n+Math.imul(j,W)|0,a=(a=a+Math.imul(j,Y)|0)+Math.imul(H,W)|0,i=i+Math.imul(H,Y)|0,n=n+Math.imul(N,J)|0,a=(a=a+Math.imul(N,Q)|0)+Math.imul(S,J)|0,i=i+Math.imul(S,Q)|0,n=n+Math.imul(k,$)|0,a=(a=a+Math.imul(k,ee)|0)+Math.imul(L,$)|0,i=i+Math.imul(L,ee)|0,n=n+Math.imul(O,er)|0,a=(a=a+Math.imul(O,en)|0)+Math.imul(T,er)|0,i=i+Math.imul(T,en)|0,n=n+Math.imul(x,ei)|0,a=(a=a+Math.imul(x,eo)|0)+Math.imul(w,ei)|0,i=i+Math.imul(w,eo)|0,n=n+Math.imul(m,el)|0,a=(a=a+Math.imul(m,ec)|0)+Math.imul(g,el)|0,i=i+Math.imul(g,ec)|0,n=n+Math.imul(h,ed)|0,a=(a=a+Math.imul(h,ef)|0)+Math.imul(b,ed)|0,i=i+Math.imul(b,ef)|0;var ez=(c+(n=n+Math.imul(d,eh)|0)|0)+((8191&(a=(a=a+Math.imul(d,eb)|0)+Math.imul(f,eh)|0))<<13)|0;c=((i=i+Math.imul(f,eb)|0)+(a>>>13)|0)+(ez>>>26)|0,ez&=67108863,/* k = 10 */n=Math.imul(X,Z),a=(a=Math.imul(X,q))+Math.imul(U,Z)|0,i=Math.imul(U,q),n=n+Math.imul(I,W)|0,a=(a=a+Math.imul(I,Y)|0)+Math.imul(B,W)|0,i=i+Math.imul(B,Y)|0,n=n+Math.imul(j,J)|0,a=(a=a+Math.imul(j,Q)|0)+Math.imul(H,J)|0,i=i+Math.imul(H,Q)|0,n=n+Math.imul(N,$)|0,a=(a=a+Math.imul(N,ee)|0)+Math.imul(S,$)|0,i=i+Math.imul(S,ee)|0,n=n+Math.imul(k,er)|0,a=(a=a+Math.imul(k,en)|0)+Math.imul(L,er)|0,i=i+Math.imul(L,en)|0,n=n+Math.imul(O,ei)|0,a=(a=a+Math.imul(O,eo)|0)+Math.imul(T,ei)|0,i=i+Math.imul(T,eo)|0,n=n+Math.imul(x,el)|0,a=(a=a+Math.imul(x,ec)|0)+Math.imul(w,el)|0,i=i+Math.imul(w,ec)|0,n=n+Math.imul(m,ed)|0,a=(a=a+Math.imul(m,ef)|0)+Math.imul(g,ed)|0,i=i+Math.imul(g,ef)|0;var ek=(c+(n=n+Math.imul(h,eh)|0)|0)+((8191&(a=(a=a+Math.imul(h,eb)|0)+Math.imul(b,eh)|0))<<13)|0;c=((i=i+Math.imul(b,eb)|0)+(a>>>13)|0)+(ek>>>26)|0,ek&=67108863,/* k = 11 */n=Math.imul(X,W),a=(a=Math.imul(X,Y))+Math.imul(U,W)|0,i=Math.imul(U,Y),n=n+Math.imul(I,J)|0,a=(a=a+Math.imul(I,Q)|0)+Math.imul(B,J)|0,i=i+Math.imul(B,Q)|0,n=n+Math.imul(j,$)|0,a=(a=a+Math.imul(j,ee)|0)+Math.imul(H,$)|0,i=i+Math.imul(H,ee)|0,n=n+Math.imul(N,er)|0,a=(a=a+Math.imul(N,en)|0)+Math.imul(S,er)|0,i=i+Math.imul(S,en)|0,n=n+Math.imul(k,ei)|0,a=(a=a+Math.imul(k,eo)|0)+Math.imul(L,ei)|0,i=i+Math.imul(L,eo)|0,n=n+Math.imul(O,el)|0,a=(a=a+Math.imul(O,ec)|0)+Math.imul(T,el)|0,i=i+Math.imul(T,ec)|0,n=n+Math.imul(x,ed)|0,a=(a=a+Math.imul(x,ef)|0)+Math.imul(w,ed)|0,i=i+Math.imul(w,ef)|0;var eL=(c+(n=n+Math.imul(m,eh)|0)|0)+((8191&(a=(a=a+Math.imul(m,eb)|0)+Math.imul(g,eh)|0))<<13)|0;c=((i=i+Math.imul(g,eb)|0)+(a>>>13)|0)+(eL>>>26)|0,eL&=67108863,/* k = 12 */n=Math.imul(X,J),a=(a=Math.imul(X,Q))+Math.imul(U,J)|0,i=Math.imul(U,Q),n=n+Math.imul(I,$)|0,a=(a=a+Math.imul(I,ee)|0)+Math.imul(B,$)|0,i=i+Math.imul(B,ee)|0,n=n+Math.imul(j,er)|0,a=(a=a+Math.imul(j,en)|0)+Math.imul(H,er)|0,i=i+Math.imul(H,en)|0,n=n+Math.imul(N,ei)|0,a=(a=a+Math.imul(N,eo)|0)+Math.imul(S,ei)|0,i=i+Math.imul(S,eo)|0,n=n+Math.imul(k,el)|0,a=(a=a+Math.imul(k,ec)|0)+Math.imul(L,el)|0,i=i+Math.imul(L,ec)|0,n=n+Math.imul(O,ed)|0,a=(a=a+Math.imul(O,ef)|0)+Math.imul(T,ed)|0,i=i+Math.imul(T,ef)|0;var eE=(c+(n=n+Math.imul(x,eh)|0)|0)+((8191&(a=(a=a+Math.imul(x,eb)|0)+Math.imul(w,eh)|0))<<13)|0;c=((i=i+Math.imul(w,eb)|0)+(a>>>13)|0)+(eE>>>26)|0,eE&=67108863,/* k = 13 */n=Math.imul(X,$),a=(a=Math.imul(X,ee))+Math.imul(U,$)|0,i=Math.imul(U,ee),n=n+Math.imul(I,er)|0,a=(a=a+Math.imul(I,en)|0)+Math.imul(B,er)|0,i=i+Math.imul(B,en)|0,n=n+Math.imul(j,ei)|0,a=(a=a+Math.imul(j,eo)|0)+Math.imul(H,ei)|0,i=i+Math.imul(H,eo)|0,n=n+Math.imul(N,el)|0,a=(a=a+Math.imul(N,ec)|0)+Math.imul(S,el)|0,i=i+Math.imul(S,ec)|0,n=n+Math.imul(k,ed)|0,a=(a=a+Math.imul(k,ef)|0)+Math.imul(L,ed)|0,i=i+Math.imul(L,ef)|0;var eN=(c+(n=n+Math.imul(O,eh)|0)|0)+((8191&(a=(a=a+Math.imul(O,eb)|0)+Math.imul(T,eh)|0))<<13)|0;c=((i=i+Math.imul(T,eb)|0)+(a>>>13)|0)+(eN>>>26)|0,eN&=67108863,/* k = 14 */n=Math.imul(X,er),a=(a=Math.imul(X,en))+Math.imul(U,er)|0,i=Math.imul(U,en),n=n+Math.imul(I,ei)|0,a=(a=a+Math.imul(I,eo)|0)+Math.imul(B,ei)|0,i=i+Math.imul(B,eo)|0,n=n+Math.imul(j,el)|0,a=(a=a+Math.imul(j,ec)|0)+Math.imul(H,el)|0,i=i+Math.imul(H,ec)|0,n=n+Math.imul(N,ed)|0,a=(a=a+Math.imul(N,ef)|0)+Math.imul(S,ed)|0,i=i+Math.imul(S,ef)|0;var eS=(c+(n=n+Math.imul(k,eh)|0)|0)+((8191&(a=(a=a+Math.imul(k,eb)|0)+Math.imul(L,eh)|0))<<13)|0;c=((i=i+Math.imul(L,eb)|0)+(a>>>13)|0)+(eS>>>26)|0,eS&=67108863,/* k = 15 */n=Math.imul(X,ei),a=(a=Math.imul(X,eo))+Math.imul(U,ei)|0,i=Math.imul(U,eo),n=n+Math.imul(I,el)|0,a=(a=a+Math.imul(I,ec)|0)+Math.imul(B,el)|0,i=i+Math.imul(B,ec)|0,n=n+Math.imul(j,ed)|0,a=(a=a+Math.imul(j,ef)|0)+Math.imul(H,ed)|0,i=i+Math.imul(H,ef)|0;var eM=(c+(n=n+Math.imul(N,eh)|0)|0)+((8191&(a=(a=a+Math.imul(N,eb)|0)+Math.imul(S,eh)|0))<<13)|0;c=((i=i+Math.imul(S,eb)|0)+(a>>>13)|0)+(eM>>>26)|0,eM&=67108863,/* k = 16 */n=Math.imul(X,el),a=(a=Math.imul(X,ec))+Math.imul(U,el)|0,i=Math.imul(U,ec),n=n+Math.imul(I,ed)|0,a=(a=a+Math.imul(I,ef)|0)+Math.imul(B,ed)|0,i=i+Math.imul(B,ef)|0;var ej=(c+(n=n+Math.imul(j,eh)|0)|0)+((8191&(a=(a=a+Math.imul(j,eb)|0)+Math.imul(H,eh)|0))<<13)|0;c=((i=i+Math.imul(H,eb)|0)+(a>>>13)|0)+(ej>>>26)|0,ej&=67108863,/* k = 17 */n=Math.imul(X,ed),a=(a=Math.imul(X,ef))+Math.imul(U,ed)|0,i=Math.imul(U,ef);var eH=(c+(n=n+Math.imul(I,eh)|0)|0)+((8191&(a=(a=a+Math.imul(I,eb)|0)+Math.imul(B,eh)|0))<<13)|0;c=((i=i+Math.imul(B,eb)|0)+(a>>>13)|0)+(eH>>>26)|0,eH&=67108863;var eR=(c+/* k = 18 */(n=Math.imul(X,eh))|0)+((8191&(a=(a=Math.imul(X,eb))+Math.imul(U,eh)|0))<<13)|0;return c=((i=Math.imul(U,eb))+(a>>>13)|0)+(eR>>>26)|0,eR&=67108863,l[0]=ey,l[1]=em,l[2]=eg,l[3]=ev,l[4]=ex,l[5]=ew,l[6]=eP,l[7]=eO,l[8]=eT,l[9]=ez,l[10]=ek,l[11]=eL,l[12]=eE,l[13]=eN,l[14]=eS,l[15]=eM,l[16]=ej,l[17]=eH,l[18]=eR,0!==c&&(l[19]=c,r.length++),r};function y(e,t,r){r.negative=t.negative^e.negative,r.length=e.length+t.length;for(var n=0,a=0,i=0;i<r.length-1;i++){// Sum all words with the same `i + j = k` and accumulate `ncarry`,
// note that ncarry could be >= 0x3ffffff
var o=a;a=0;for(var s=67108863&n,l=Math.min(i,t.length-1),c=Math.max(0,i-e.length+1);c<=l;c++){var u=i-c,d=(0|e.words[u])*(0|t.words[c]),f=67108863&d;o=o+(d/67108864|0)|0,s=67108863&(f=f+s|0),a+=(o=o+(f>>>26)|0)>>>26,o&=67108863}r.words[i]=s,n=o,o=a}return 0!==n?r.words[i]=n:r.length--,r._strip()}// Cooley-Tukey algorithm for FFT
// slightly revisited to rely on looping instead of recursion
function m(e,t){this.x=e,this.y=t}Math.imul||(b=h),a.prototype.mulTo=function(e,t){var r,n=this.length+e.length;return 10===this.length&&10===e.length?b(this,e,t):n<63?h(this,e,t):y(this,e,t)},m.prototype.makeRBT=function(e){for(var t=Array(e),r=a.prototype._countBits(e)-1,n=0;n<e;n++)t[n]=this.revBin(n,r,e);return t},// Returns binary-reversed representation of `x`
m.prototype.revBin=function(e,t,r){if(0===e||e===r-1)return e;for(var n=0,a=0;a<t;a++)n|=(1&e)<<t-a-1,e>>=1;return n},// Performs "tweedling" phase, therefore 'emulating'
// behaviour of the recursive algorithm
m.prototype.permute=function(e,t,r,n,a,i){for(var o=0;o<i;o++)n[o]=t[e[o]],a[o]=r[e[o]]},m.prototype.transform=function(e,t,r,n,a,i){this.permute(i,e,t,r,n,a);for(var o=1;o<a;o<<=1)for(var s=o<<1,l=Math.cos(2*Math.PI/s),c=Math.sin(2*Math.PI/s),u=0;u<a;u+=s)for(var d=l,f=c,p=0;p<o;p++){var h=r[u+p],b=n[u+p],y=r[u+p+o],m=n[u+p+o],g=d*y-f*m;m=d*m+f*y,y=g,r[u+p]=h+y,n[u+p]=b+m,r[u+p+o]=h-y,n[u+p+o]=b-m,p!==s&&(g=l*d-c*f,f=l*f+c*d,d=g)}},m.prototype.guessLen13b=function(e,t){var r=1|Math.max(t,e),n=1&r,a=0;for(r=r/2|0;r;r>>>=1)a++;return 1<<a+1+n},m.prototype.conjugate=function(e,t,r){if(!(r<=1))for(var n=0;n<r/2;n++){var a=e[n];e[n]=e[r-n-1],e[r-n-1]=a,a=t[n],t[n]=-t[r-n-1],t[r-n-1]=-a}},m.prototype.normalize13b=function(e,t){for(var r=0,n=0;n<t/2;n++){var a=8192*Math.round(e[2*n+1]/t)+Math.round(e[2*n]/t)+r;e[n]=67108863&a,r=a<67108864?0:a/67108864|0}return e},m.prototype.convert13b=function(e,t,n,a){for(var i=0,o=0;o<t;o++)i+=0|e[o],n[2*o]=8191&i,i>>>=13,n[2*o+1]=8191&i,i>>>=13;// Pad with zeroes
for(o=2*t;o<a;++o)n[o]=0;r(0===i),r((-8192&i)==0)},m.prototype.stub=function(e){for(var t=Array(e),r=0;r<e;r++)t[r]=0;return t},m.prototype.mulp=function(e,t,r){var n=2*this.guessLen13b(e.length,t.length),a=this.makeRBT(n),i=this.stub(n),o=Array(n),s=Array(n),l=Array(n),c=Array(n),u=Array(n),d=Array(n),f=r.words;f.length=n,this.convert13b(e.words,e.length,o,n),this.convert13b(t.words,t.length,c,n),this.transform(o,i,s,l,n,a),this.transform(c,i,u,d,n,a);for(var p=0;p<n;p++){var h=s[p]*u[p]-l[p]*d[p];l[p]=s[p]*d[p]+l[p]*u[p],s[p]=h}return this.conjugate(s,l,n),this.transform(s,l,f,i,n,a),this.conjugate(f,i,n),this.normalize13b(f,n),r.negative=e.negative^t.negative,r.length=e.length+t.length,r._strip()},// Multiply `this` by `num`
a.prototype.mul=function(e){var t=new a(null);return t.words=Array(this.length+e.length),this.mulTo(e,t)},// Multiply employing FFT
a.prototype.mulf=function(e){var t=new a(null);return t.words=Array(this.length+e.length),y(this,e,t)},// In-place Multiplication
a.prototype.imul=function(e){return this.clone().mulTo(e,this)},a.prototype.imuln=function(e){var t=e<0;t&&(e=-e),r("number"==typeof e),r(e<67108864);for(var n=0,a=0;a<this.length;a++){var i=(0|this.words[a])*e,o=(67108863&i)+(67108863&n);n>>=26,// NOTE: lo is 27bit maximum
n+=(i/67108864|0)+(o>>>26),this.words[a]=67108863&o}return 0!==n&&(this.words[a]=n,this.length++),t?this.ineg():this},a.prototype.muln=function(e){return this.clone().imuln(e)},// `this` * `this`
a.prototype.sqr=function(){return this.mul(this)},// `this` * `this` in-place
a.prototype.isqr=function(){return this.imul(this.clone())},// Math.pow(`this`, `num`)
a.prototype.pow=function(e){var t=function(e){for(var t=Array(e.bitLength()),r=0;r<t.length;r++){var n=r/26|0,a=r%26;t[r]=e.words[n]>>>a&1}return t}(e);if(0===t.length)return new a(1);for(var r=this,n=0;n<t.length&&0===t[n];n++,r=r.sqr());if(++n<t.length)for(var i=r.sqr();n<t.length;n++,i=i.sqr())0!==t[n]&&(r=r.mul(i));return r},// Shift-left in-place
a.prototype.iushln=function(e){r("number"==typeof e&&e>=0);var t,n=e%26,a=(e-n)/26,i=67108863>>>26-n<<26-n;if(0!==n){var o=0;for(t=0;t<this.length;t++){var s=this.words[t]&i,l=(0|this.words[t])-s<<n;this.words[t]=l|o,o=s>>>26-n}o&&(this.words[t]=o,this.length++)}if(0!==a){for(t=this.length-1;t>=0;t--)this.words[t+a]=this.words[t];for(t=0;t<a;t++)this.words[t]=0;this.length+=a}return this._strip()},a.prototype.ishln=function(e){return(// TODO(indutny): implement me
r(0===this.negative),this.iushln(e))},// Shift-right in-place
// NOTE: `hint` is a lowest bit before trailing zeroes
// NOTE: if `extended` is present - it will be filled with destroyed bits
a.prototype.iushrn=function(e,t,n){r("number"==typeof e&&e>=0),a=t?(t-t%26)/26:0;var a,i=e%26,o=Math.min((e-i)/26,this.length),s=67108863^67108863>>>i<<i;// Extended mode, copy masked part
if(a-=o,a=Math.max(0,a),n){for(var l=0;l<o;l++)n.words[l]=this.words[l];n.length=o}if(0===o);else if(this.length>o)for(this.length-=o,l=0;l<this.length;l++)this.words[l]=this.words[l+o];else this.words[0]=0,this.length=1;var c=0;for(l=this.length-1;l>=0&&(0!==c||l>=a);l--){var u=0|this.words[l];this.words[l]=c<<26-i|u>>>i,c=u&s}return n&&0!==c&&(n.words[n.length++]=c),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},a.prototype.ishrn=function(e,t,n){return(// TODO(indutny): implement me
r(0===this.negative),this.iushrn(e,t,n))},// Shift-left
a.prototype.shln=function(e){return this.clone().ishln(e)},a.prototype.ushln=function(e){return this.clone().iushln(e)},// Shift-right
a.prototype.shrn=function(e){return this.clone().ishrn(e)},a.prototype.ushrn=function(e){return this.clone().iushrn(e)},// Test if n bit is set
a.prototype.testn=function(e){r("number"==typeof e&&e>=0);var t=e%26,n=(e-t)/26;return(// Fast case: bit is much higher than all existing words
!(this.length<=n)&&!!(this.words[n]&1<<t))},// Return only lowers bits of number (in-place)
a.prototype.imaskn=function(e){r("number"==typeof e&&e>=0);var t=e%26,n=(e-t)/26;return(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=n)?this:(0!==t&&n++,this.length=Math.min(n,this.length),0!==t&&(this.words[this.length-1]&=67108863^67108863>>>t<<t),this._strip())},// Return only lowers bits of number
a.prototype.maskn=function(e){return this.clone().imaskn(e)},// Add plain number `num` to `this`
a.prototype.iaddn=function(e){return(r("number"==typeof e),r(e<67108864),e<0)?this.isubn(-e):0!==this.negative?(1===this.length&&(0|this.words[0])<=e?(this.words[0]=e-(0|this.words[0]),this.negative=0):(this.negative=0,this.isubn(e),this.negative=1),this):this._iaddn(e)},a.prototype._iaddn=function(e){this.words[0]+=e;// Carry
for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},// Subtract plain number `num` from `this`
a.prototype.isubn=function(e){if(r("number"==typeof e),r(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this._strip()},a.prototype.addn=function(e){return this.clone().iaddn(e)},a.prototype.subn=function(e){return this.clone().isubn(e)},a.prototype.iabs=function(){return this.negative=0,this},a.prototype.abs=function(){return this.clone().iabs()},a.prototype._ishlnsubmul=function(e,t,n){var a,i,o=e.length+n;this._expand(o);var s=0;for(a=0;a<e.length;a++){i=(0|this.words[a+n])+s;var l=(0|e.words[a])*t;i-=67108863&l,s=(i>>26)-(l/67108864|0),this.words[a+n]=67108863&i}for(;a<this.length-n;a++)s=(i=(0|this.words[a+n])+s)>>26,this.words[a+n]=67108863&i;if(0===s)return this._strip();for(// Subtraction overflow
r(-1===s),s=0,a=0;a<this.length;a++)s=(i=-(0|this.words[a])+s)>>26,this.words[a]=67108863&i;return this.negative=1,this._strip()},a.prototype._wordDiv=function(e,t){var r,n=this.length-e.length,i=this.clone(),o=e,s=0|o.words[o.length-1];0!=(n=26-this._countBits(s))&&(o=o.ushln(n),i.iushln(n),s=0|o.words[o.length-1]);// Initialize quotient
var l=i.length-o.length;if("mod"!==t){(r=new a(null)).length=l+1,r.words=Array(r.length);for(var c=0;c<r.length;c++)r.words[c]=0}var u=i.clone()._ishlnsubmul(o,1,l);0===u.negative&&(i=u,r&&(r.words[l]=1));for(var d=l-1;d>=0;d--){var f=(0|i.words[o.length+d])*67108864+(0|i.words[o.length+d-1]);for(// NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
// (0x7ffffff)
f=Math.min(f/s|0,67108863),i._ishlnsubmul(o,f,d);0!==i.negative;)f--,i.negative=0,i._ishlnsubmul(o,1,d),i.isZero()||(i.negative^=1);r&&(r.words[d]=f)}return r&&r._strip(),i._strip(),"div"!==t&&0!==n&&i.iushrn(n),{div:r||null,mod:i}},// NOTE: 1) `mode` can be set to `mod` to request mod only,
//       to `div` to request div only, or be absent to
//       request both div & mod
//       2) `positive` is true if unsigned mod is requested
a.prototype.divmod=function(e,t,n){var i,o,s;return(r(!e.isZero()),this.isZero())?{div:new a(0),mod:new a(0)}:0!==this.negative&&0===e.negative?(s=this.neg().divmod(e,t),"mod"!==t&&(i=s.div.neg()),"div"!==t&&(o=s.mod.neg(),n&&0!==o.negative&&o.iadd(e)),{div:i,mod:o}):0===this.negative&&0!==e.negative?(s=this.divmod(e.neg(),t),"mod"!==t&&(i=s.div.neg()),{div:i,mod:s.mod}):(this.negative&e.negative)!=0?(s=this.neg().divmod(e.neg(),t),"div"!==t&&(o=s.mod.neg(),n&&0!==o.negative&&o.isub(e)),{div:s.div,mod:o}):e.length>this.length||0>this.cmp(e)?{div:new a(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new a(this.modrn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new a(this.modrn(e.words[0]))}:this._wordDiv(e,t)},// Find `this` / `num`
a.prototype.div=function(e){return this.divmod(e,"div",!1).div},// Find `this` % `num`
a.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},a.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},// Find Round(`this` / `num`)
a.prototype.divRound=function(e){var t=this.divmod(e);// Fast case - exact division
if(t.mod.isZero())return t.div;var r=0!==t.div.negative?t.mod.isub(e):t.mod,n=e.ushrn(1),a=e.andln(1),i=r.cmp(n);return(// Round down
i<0||1===a&&0===i?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1))},a.prototype.modrn=function(e){var t=e<0;t&&(e=-e),r(e<=67108863);for(var n=67108864%e,a=0,i=this.length-1;i>=0;i--)a=(n*a+(0|this.words[i]))%e;return t?-a:a},// WARNING: DEPRECATED
a.prototype.modn=function(e){return this.modrn(e)},// In-place division by number
a.prototype.idivn=function(e){var t=e<0;t&&(e=-e),r(e<=67108863);for(var n=0,a=this.length-1;a>=0;a--){var i=(0|this.words[a])+67108864*n;this.words[a]=i/e|0,n=i%e}return this._strip(),t?this.ineg():this},a.prototype.divn=function(e){return this.clone().idivn(e)},a.prototype.egcd=function(e){r(0===e.negative),r(!e.isZero());var t=this,n=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(// A * x + B * y = x
var i=new a(1),o=new a(0),s=new a(0),l=new a(1),c=0;t.isEven()&&n.isEven();)t.iushrn(1),n.iushrn(1),++c;for(var u=n.clone(),d=t.clone();!t.isZero();){for(var f=0,p=1;(t.words[0]&p)==0&&f<26;++f,p<<=1);if(f>0)for(t.iushrn(f);f-- >0;)(i.isOdd()||o.isOdd())&&(i.iadd(u),o.isub(d)),i.iushrn(1),o.iushrn(1);for(var h=0,b=1;(n.words[0]&b)==0&&h<26;++h,b<<=1);if(h>0)for(n.iushrn(h);h-- >0;)(s.isOdd()||l.isOdd())&&(s.iadd(u),l.isub(d)),s.iushrn(1),l.iushrn(1);t.cmp(n)>=0?(t.isub(n),i.isub(s),o.isub(l)):(n.isub(t),s.isub(i),l.isub(o))}return{a:s,b:l,gcd:n.iushln(c)}},// This is reduced incarnation of the binary EEA
// above, designated to invert members of the
// _prime_ fields F(p) at a maximal speed
a.prototype._invmp=function(e){r(0===e.negative),r(!e.isZero());var t,n=this,i=e.clone();n=0!==n.negative?n.umod(e):n.clone();for(var o=new a(1),s=new a(0),l=i.clone();n.cmpn(1)>0&&i.cmpn(1)>0;){for(var c=0,u=1;(n.words[0]&u)==0&&c<26;++c,u<<=1);if(c>0)for(n.iushrn(c);c-- >0;)o.isOdd()&&o.iadd(l),o.iushrn(1);for(var d=0,f=1;(i.words[0]&f)==0&&d<26;++d,f<<=1);if(d>0)for(i.iushrn(d);d-- >0;)s.isOdd()&&s.iadd(l),s.iushrn(1);n.cmp(i)>=0?(n.isub(i),o.isub(s)):(i.isub(n),s.isub(o))}return 0>(t=0===n.cmpn(1)?o:s).cmpn(0)&&t.iadd(e),t},a.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),r=e.clone();t.negative=0,r.negative=0;// Remove common factor of two
for(var n=0;t.isEven()&&r.isEven();n++)t.iushrn(1),r.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;r.isEven();)r.iushrn(1);var a=t.cmp(r);if(a<0){// Swap `a` and `b` to make `a` always bigger than `b`
var i=t;t=r,r=i}else if(0===a||0===r.cmpn(1))break;t.isub(r)}return r.iushln(n)},// Invert number in the field F(num)
a.prototype.invm=function(e){return this.egcd(e).a.umod(e)},a.prototype.isEven=function(){return(1&this.words[0])==0},a.prototype.isOdd=function(){return(1&this.words[0])==1},// And first word and num
a.prototype.andln=function(e){return this.words[0]&e},// Increment at the bit position in-line
a.prototype.bincn=function(e){r("number"==typeof e);var t=e%26,n=(e-t)/26,a=1<<t;// Fast case: bit is much higher than all existing words
if(this.length<=n)return this._expand(n+1),this.words[n]|=a,this;for(var i=a,o=n;0!==i&&o<this.length;o++){var s=0|this.words[o];s+=i,i=s>>>26,s&=67108863,this.words[o]=s}return 0!==i&&(this.words[o]=i,this.length++),this},a.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},a.prototype.cmpn=function(e){var t,n=e<0;if(0!==this.negative&&!n)return -1;if(0===this.negative&&n)return 1;if(this._strip(),this.length>1)t=1;else{n&&(e=-e),r(e<=67108863,"Number is too big");var a=0|this.words[0];t=a===e?0:a<e?-1:1}return 0!==this.negative?0|-t:t},// Compare two numbers and return:
// 1 - if `this` > `num`
// 0 - if `this` == `num`
// -1 - if `this` < `num`
a.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return -1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},// Unsigned comparison
a.prototype.ucmp=function(e){// At this point both numbers have the same sign
if(this.length>e.length)return 1;if(this.length<e.length)return -1;for(var t=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],a=0|e.words[r];if(n!==a){n<a?t=-1:n>a&&(t=1);break}}return t},a.prototype.gtn=function(e){return 1===this.cmpn(e)},a.prototype.gt=function(e){return 1===this.cmp(e)},a.prototype.gten=function(e){return this.cmpn(e)>=0},a.prototype.gte=function(e){return this.cmp(e)>=0},a.prototype.ltn=function(e){return -1===this.cmpn(e)},a.prototype.lt=function(e){return -1===this.cmp(e)},a.prototype.lten=function(e){return 0>=this.cmpn(e)},a.prototype.lte=function(e){return 0>=this.cmp(e)},a.prototype.eqn=function(e){return 0===this.cmpn(e)},a.prototype.eq=function(e){return 0===this.cmp(e)},//
// A reduce context, could be using montgomery or something better, depending
// on the `m` itself.
//
a.red=function(e){return new T(e)},a.prototype.toRed=function(e){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},a.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},a.prototype._forceRed=function(e){return this.red=e,this},a.prototype.forceRed=function(e){return r(!this.red,"Already a number in reduction context"),this._forceRed(e)},a.prototype.redAdd=function(e){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},a.prototype.redIAdd=function(e){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},a.prototype.redSub=function(e){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},a.prototype.redISub=function(e){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},a.prototype.redShl=function(e){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},a.prototype.redMul=function(e){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},a.prototype.redIMul=function(e){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},a.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},a.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},// Square root over p
a.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},a.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},// Return negative clone of `this` % `red modulo`
a.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},a.prototype.redPow=function(e){return r(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};// Prime numbers with efficient reduction
var g={k256:null,p224:null,p192:null,p25519:null};// Pseudo-Mersenne prime
function v(e,t){// P = 2 ^ N - K
this.name=e,this.p=new a(t,16),this.n=this.p.bitLength(),this.k=new a(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function x(){v.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function w(){v.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function P(){v.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function O(){// 2 ^ 255 - 19
v.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}//
// Base reduction engine
//
function T(e){if("string"==typeof e){var t=a._prime(e);this.m=t.p,this.prime=t}else r(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function z(e){T.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new a(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}v.prototype._tmp=function(){var e=new a(null);return e.words=Array(Math.ceil(this.n/13)),e},v.prototype.ireduce=function(e){// Assumes that `num` is less than `P^2`
// num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
var t,r=e;do this.split(r,this.tmp),t=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength();while(t>this.n)var n=t<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},v.prototype.split=function(e,t){e.iushrn(this.n,0,t)},v.prototype.imulK=function(e){return e.imul(this.k)},n(x,v),x.prototype.split=function(e,t){for(var r=Math.min(e.length,9),n=0;n<r;n++)t.words[n]=e.words[n];if(t.length=r,e.length<=9){e.words[0]=0,e.length=1;return}// Shift by 9 limbs
var a=e.words[9];for(n=10,t.words[t.length++]=4194303&a;n<e.length;n++){var i=0|e.words[n];e.words[n-10]=(4194303&i)<<4|a>>>22,a=i}a>>>=22,e.words[n-10]=a,0===a&&e.length>10?e.length-=10:e.length-=9},x.prototype.imulK=function(e){// K = 0x1000003d1 = [ 0x40, 0x3d1 ]
e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,r=0;r<e.length;r++){var n=0|e.words[r];t+=977*n,e.words[r]=67108863&t,t=64*n+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},n(w,v),n(P,v),n(O,v),O.prototype.imulK=function(e){for(var t=0,r=0;r<e.length;r++){var n=(0|e.words[r])*19+t,a=67108863&n;n>>>=26,e.words[r]=a,t=n}return 0!==t&&(e.words[e.length++]=t),e},// Exported mostly for testing purposes, use plain name instead
a._prime=function(e){var t;// Cached version of prime
if(g[e])return g[e];if("k256"===e)t=new x;else if("p224"===e)t=new w;else if("p192"===e)t=new P;else if("p25519"===e)t=new O;else throw Error("Unknown prime "+e);return g[e]=t,t},T.prototype._verify1=function(e){r(0===e.negative,"red works only with positives"),r(e.red,"red works only with red numbers")},T.prototype._verify2=function(e,t){r((e.negative|t.negative)==0,"red works only with positives"),r(e.red&&e.red===t.red,"red works only with red numbers")},T.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):(l(e,e.umod(this.m)._forceRed(this)),e)},T.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},T.prototype.add=function(e,t){this._verify2(e,t);var r=e.add(t);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},T.prototype.iadd=function(e,t){this._verify2(e,t);var r=e.iadd(t);return r.cmp(this.m)>=0&&r.isub(this.m),r},T.prototype.sub=function(e,t){this._verify2(e,t);var r=e.sub(t);return 0>r.cmpn(0)&&r.iadd(this.m),r._forceRed(this)},T.prototype.isub=function(e,t){this._verify2(e,t);var r=e.isub(t);return 0>r.cmpn(0)&&r.iadd(this.m),r},T.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},T.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},T.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},T.prototype.isqr=function(e){return this.imul(e,e.clone())},T.prototype.sqr=function(e){return this.mul(e,e)},T.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);// Fast case
if(r(t%2==1),3===t){var n=this.m.add(new a(1)).iushrn(2);return this.pow(e,n)}for(// Tonelli-Shanks algorithm (Totally unoptimized and slow)
//
// Find Q and S, that Q * 2 ^ S = (P - 1)
var i=this.m.subn(1),o=0;!i.isZero()&&0===i.andln(1);)o++,i.iushrn(1);r(!i.isZero());var s=new a(1).toRed(this),l=s.redNeg(),c=this.m.subn(1).iushrn(1),u=this.m.bitLength();for(u=new a(2*u*u).toRed(this);0!==this.pow(u,c).cmp(l);)u.redIAdd(l);for(var d=this.pow(u,i),f=this.pow(e,i.addn(1).iushrn(1)),p=this.pow(e,i),h=o;0!==p.cmp(s);){for(var b=p,y=0;0!==b.cmp(s);y++)b=b.redSqr();r(y<h);var m=this.pow(d,new a(1).iushln(h-y-1));f=f.redMul(m),d=m.redSqr(),p=p.redMul(d),h=y}return f},T.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},T.prototype.pow=function(e,t){if(t.isZero())return new a(1).toRed(this);if(0===t.cmpn(1))return e.clone();var r=Array(16);r[0]=new a(1).toRed(this),r[1]=e;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],e);var i=r[0],o=0,s=0,l=t.bitLength()%26;for(0===l&&(l=26),n=t.length-1;n>=0;n--){for(var c=t.words[n],u=l-1;u>=0;u--){var d=c>>u&1;if(i!==r[0]&&(i=this.sqr(i)),0===d&&0===o){s=0;continue}o<<=1,o|=d,(4==++s||0===n&&0===u)&&(i=this.mul(i,r[o]),s=0,o=0)}l=26}return i},T.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},T.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},//
// Montgomery method engine
//
a.mont=function(e){return new z(e)},n(z,T),z.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},z.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},z.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var r=e.imul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),a=r.isub(n).iushrn(this.shift),i=a;return a.cmp(this.m)>=0?i=a.isub(this.m):0>a.cmpn(0)&&(i=a.iadd(this.m)),i._forceRed(this)},z.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new a(0)._forceRed(this);var r=e.mul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):0>i.cmpn(0)&&(o=i.iadd(this.m)),o._forceRed(this)},z.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(e,this)}),D("kjyEk",function(e,t){}),D("lr2C3",function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.validateBasic=t.wNAF=void 0;var r=A("jfV5v"),n=A("j2PHb");let a=BigInt(0),i=BigInt(1);t.wNAF=// Elliptic curve multiplication of Point by scalar. Fragile.
// Scalars should always be less than curve order: this should be checked inside of a curve itself.
// Creates precomputation tables for fast multiplication:
// - private scalar is split by fixed size windows of W bits
// - every window point is collected from window's table & added to accumulator
// - since windows are different, same point inside tables won't be accessed more than once per calc
// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
// - +1 window is neccessary for wNAF
// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
// windows to be in different memory locations
function(e,t){let r=(e,t)=>{let r=t.negate();return e?r:t},n=e=>{let r=Math.ceil(t/e)+1;// +1, because
return{windows:r,windowSize:2**(e-1)}};return{constTimeNegate:r,// non-const time multiplication ladder
unsafeLadder(t,r){let n=e.ZERO,o=t;for(;r>a;)r&i&&(n=n.add(o)),o=o.double(),r>>=i;return n},/**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */precomputeWindow(e,t){let{windows:r,windowSize:a}=n(t),i=[],o=e,s=o;for(let e=0;e<r;e++){s=o,i.push(s);// =1, because we skip zero
for(let e=1;e<a;e++)s=s.add(o),i.push(s);o=s.double()}return i},/**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */wNAF(t,a,o){// TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
// But need to carefully remove other checks before wNAF. ORDER == bits here
let{windows:s,windowSize:l}=n(t),c=e.ZERO,u=e.BASE,d=BigInt(2**t-1),f=2**t,p=BigInt(t);for(let e=0;e<s;e++){let t=e*l,n=Number(o&d);// Shift number by W bits.
o>>=p,n>l&&(n-=f,o+=i);let s=t+Math.abs(n)-1,h=e%2!=0,b=n<0;// -1 because we skip zero
0===n?u=u.add(r(h,a[t])):c=c.add(r(b,a[s]))}// JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
// Even if the variable is still unused, there are some checks which will
// throw an exception, so compiler needs to prove they won't happen, which is hard.
// At this point there is a way to F be infinity-point even if p is not,
// which makes it less const-time: around 1 bigint multiply.
return{p:c,f:u}},wNAFCached(e,t,r,n){// @ts-ignore
let a=e._WINDOW_SIZE||1,i=t.get(e);return i||(i=this.precomputeWindow(e,a),1!==a&&t.set(e,n(i))),this.wNAF(a,i,r)}}},t.validateBasic=function(e){// Set defaults
return(0,r.validateField)(e.Fp),(0,n.validateObject)(e,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...(0,r.nLength)(e.n,e.nBitLength),...e,p:e.Fp.ORDER})}}),D("jfV5v",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.mapHashToField=e.exports.getMinHashLength=e.exports.getFieldBytesLength=e.exports.hashToPrivateScalar=e.exports.FpSqrtEven=e.exports.FpSqrtOdd=e.exports.Field=e.exports.nLength=e.exports.FpIsSquare=e.exports.FpDiv=e.exports.FpInvertBatch=e.exports.FpPow=e.exports.validateField=e.exports.isNegativeLE=e.exports.FpSqrt=e.exports.tonelliShanks=e.exports.invert=e.exports.pow2=e.exports.pow=e.exports.mod=void 0;var r=A("j2PHb");// prettier-ignore
let n=BigInt(0),a=BigInt(1),i=BigInt(2),o=BigInt(3),s=BigInt(4),l=BigInt(5),c=BigInt(8);// Calculates a modulo b
function u(e,t){let r=e%t;return r>=n?r:t+r}/**
 * Efficiently raise num to power and do modular division.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 * @example
 * pow(2n, 6n, 11n) // 64n % 11n == 9n
 */// TODO: use field version && remove
function d(e,t,r){if(r<=n||t<n)throw Error("Expected power/modulo > 0");if(r===a)return n;let i=a;for(;t>n;)t&a&&(i=i*e%r),e=e*e%r,t>>=a;return i}// Inverses number over modulo
function f(e,t){if(e===n||t<=n)throw Error(`invert: expected positive integers, got n=${e} mod=${t}`);// Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
// Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
let r=u(e,t),i=t,o=n,s=a,l=a,c=n;for(;r!==n;){// JIT applies optimization if those two lines follow each other
let e=i/r,t=i%r,n=o-l*e,a=s-c*e;// prettier-ignore
i=r,r=t,o=l,s=c,l=n,c=a}let d=i;if(d!==a)throw Error("invert: does not exist");return u(o,t)}/**
 * Tonelli-Shanks square root search algorithm.
 * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
 * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
 * Will start an infinite loop if field order P is not prime.
 * @param P field order
 * @returns function that takes field Fp (created from P) and number n
 */function p(e){let t,r,o;// Legendre constant: used to calculate Legendre symbol (a | p),
// which denotes the value of a^((p-1)/2) (mod p).
// (a | p) ≡ 1    if a is a square (mod p)
// (a | p) ≡ -1   if a is not a square (mod p)
// (a | p) ≡ 0    if a ≡ 0 (mod p)
let l=(e-a)/i;// Step 1: By factoring out powers of 2 from p - 1,
// find q and s such that p - 1 = q*(2^s) with q odd
for(t=e-a,r=0;t%i===n;t/=i,r++);// Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
for(o=i;o<e&&d(o,l,e)!==e-a;o++);// Fast-path
if(1===r){let t=(e+a)/s;return function(e,r){let n=e.pow(r,t);if(!e.eql(e.sqr(n),r))throw Error("Cannot find square root");return n}}// Slow-path
let c=(t+a)/i;return function(e,n){// Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
if(e.pow(n,l)===e.neg(e.ONE))throw Error("Cannot find square root");let i=r,s=e.pow(e.mul(e.ONE,o),t),u=e.pow(n,c),d=e.pow(n,t);for(;!e.eql(d,e.ONE);){if(e.eql(d,e.ZERO))return e.ZERO;// https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
// Find m such b^(2^m)==1
let t=1;for(let r=e.sqr(d);t<i&&!e.eql(r,e.ONE);t++)r=e.sqr(r);// t2 *= t2
// NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
let r=e.pow(s,a<<BigInt(i-t-1));// ge = 2^(r-m-1)
s=e.sqr(r),u=e.mul(u,r),d=e.mul(d,s),i=t}return u}}function h(e){// NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
// For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
// P ≡ 3 (mod 4)
// √n = n^((P+1)/4)
if(e%s===o){// Not all roots possible!
// const ORDER =
//   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
// const NUM = 72057594037927816n;
let t=(e+a)/s;return function(e,r){let n=e.pow(r,t);// Throw if root**2 != n
if(!e.eql(e.sqr(n),r))throw Error("Cannot find square root");return n}}// Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
if(e%c===l){let t=(e-l)/c;return function(e,r){let n=e.mul(r,i),a=e.pow(n,t),o=e.mul(r,a),s=e.mul(e.mul(o,i),a),l=e.mul(o,e.sub(s,e.ONE));if(!e.eql(e.sqr(l),r))throw Error("Cannot find square root");return l}}// Other cases: Tonelli-Shanks algorithm
return p(e)}BigInt(9),BigInt(16),e.exports.mod=u,e.exports.pow=d,e.exports.pow2=// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
function(e,t,r){let a=e;for(;t-- >n;)a*=a,a%=r;return a},e.exports.invert=f,e.exports.tonelliShanks=p,e.exports.FpSqrt=h,e.exports.isNegativeLE=(e,t)=>(u(e,t)&a)===a;// prettier-ignore
let b=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];// Generic field functions
/**
 * Same as `pow` but for Fp: non-constant-time.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 */function y(e,t,r){// Should have same speed as pow for bigints
// TODO: benchmark!
if(r<n)throw Error("Expected power > 0");if(r===n)return e.ONE;if(r===a)return t;let i=e.ONE,o=t;for(;r>n;)r&a&&(i=e.mul(i,o)),o=e.sqr(o),r>>=a;return i}/**
 * Efficiently invert an array of Field elements.
 * `inv(0)` will return `undefined` here: make sure to throw an error.
 */function m(e,t){let r=Array(t.length),n=t.reduce((t,n,a)=>e.is0(n)?t:(r[a]=t,e.mul(t,n)),e.ONE),a=e.inv(n);return(// Walk from last to first, multiply them by inverted each other MOD p
t.reduceRight((t,n,a)=>e.is0(n)?t:(r[a]=e.mul(t,r[a]),e.mul(t,n)),a),r)}// CURVE.n lengths
function g(e,t){// Bit size, byte size of CURVE.n
let r=void 0!==t?t:e.toString(2).length,n=Math.ceil(r/8);return{nBitLength:r,nByteLength:n}}/**
 * Returns total number of bytes consumed by the field element.
 * For example, 32 bytes for usual 256-bit weierstrass curve.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of field
 */function v(e){if("bigint"!=typeof e)throw Error("field order must be bigint");let t=e.toString(2).length;return Math.ceil(t/8)}/**
 * Returns minimal amount of bytes that can be safely reduced
 * by field order.
 * Should be 2^-128 for 128-bit curve such as P256.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of target hash
 */function x(e){let t=v(e);return t+Math.ceil(t/2)}e.exports.validateField=function(e){let t=b.reduce((e,t)=>(e[t]="function",e),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"});return(0,r.validateObject)(e,t)},e.exports.FpPow=y,e.exports.FpInvertBatch=m,e.exports.FpDiv=function(e,t,r){return e.mul(t,"bigint"==typeof r?f(r,e.ORDER):e.inv(r))},e.exports.FpIsSquare=// This function returns True whenever the value x is a square in the field F.
function(e){let t=(e.ORDER-a)/i;// Integer arithmetic
return r=>{let n=e.pow(r,t);return e.eql(n,e.ZERO)||e.eql(n,e.ONE)}},e.exports.nLength=g,e.exports.Field=/**
 * Initializes a finite field over prime. **Non-primes are not supported.**
 * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
 * Major performance optimizations:
 * * a) denormalized operations like mulN instead of mul
 * * b) same object shape: never add or remove keys
 * * c) Object.freeze
 * @param ORDER prime positive bigint
 * @param bitLen how many bits the field consumes
 * @param isLE (def: false) if encoding / decoding should be in little-endian
 * @param redef optional faster redefinitions of sqrt and other methods
 */function(e,t,i=!1,o={}){if(e<=n)throw Error(`Expected Field ORDER > 0, got ${e}`);let{nBitLength:s,nByteLength:l}=g(e,t);if(l>2048)throw Error("Field lengths over 2048 bytes are not supported");let c=h(e),d=Object.freeze({ORDER:e,BITS:s,BYTES:l,MASK:(0,r.bitMask)(s),ZERO:n,ONE:a,create:t=>u(t,e),isValid:t=>{if("bigint"!=typeof t)throw Error(`Invalid field element: expected bigint, got ${typeof t}`);return n<=t&&t<e;// 0 is valid element, but it's not invertible
},is0:e=>e===n,isOdd:e=>(e&a)===a,neg:t=>u(-t,e),eql:(e,t)=>e===t,sqr:t=>u(t*t,e),add:(t,r)=>u(t+r,e),sub:(t,r)=>u(t-r,e),mul:(t,r)=>u(t*r,e),pow:(e,t)=>y(d,e,t),div:(t,r)=>u(t*f(r,e),e),// Same as above, but doesn't normalize
sqrN:e=>e*e,addN:(e,t)=>e+t,subN:(e,t)=>e-t,mulN:(e,t)=>e*t,inv:t=>f(t,e),sqrt:o.sqrt||(e=>c(d,e)),invertBatch:e=>m(d,e),// TODO: do we really need constant cmov?
// We don't have const-time bigints anyway, so probably will be not very useful
cmov:(e,t,r)=>r?t:e,toBytes:e=>i?(0,r.numberToBytesLE)(e,l):(0,r.numberToBytesBE)(e,l),fromBytes:e=>{if(e.length!==l)throw Error(`Fp.fromBytes: expected ${l}, got ${e.length}`);return i?(0,r.bytesToNumberLE)(e):(0,r.bytesToNumberBE)(e)}});return Object.freeze(d)},e.exports.FpSqrtOdd=function(e,t){if(!e.isOdd)throw Error("Field doesn't have isOdd");let r=e.sqrt(t);return e.isOdd(r)?r:e.neg(r)},e.exports.FpSqrtEven=function(e,t){if(!e.isOdd)throw Error("Field doesn't have isOdd");let r=e.sqrt(t);return e.isOdd(r)?e.neg(r):r},e.exports.hashToPrivateScalar=/**
 * "Constant-time" private key generation utility.
 * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).
 * Which makes it slightly more biased, less secure.
 * @deprecated use mapKeyToField instead
 */function(e,t,n=!1){e=(0,r.ensureBytes)("privateHash",e);let i=e.length,o=g(t).nByteLength+8;if(o<24||i<o||i>1024)throw Error(`hashToPrivateScalar: expected ${o}-1024 bytes of input, got ${i}`);let s=n?(0,r.bytesToNumberLE)(e):(0,r.bytesToNumberBE)(e);return u(s,t-a)+a},e.exports.getFieldBytesLength=v,e.exports.getMinHashLength=x,e.exports.mapHashToField=/**
 * "Constant-time" private key generation utility.
 * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
 * and convert them into private scalar, with the modulo bias being negligible.
 * Needs at least 48 bytes of input for 32-byte private key.
 * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
 * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
 * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
 * @param hash hash output from SHA3 or a similar function
 * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
 * @param isLE interpret hash bytes as LE num
 * @returns valid private scalar
 */function(e,t,n=!1){let i=e.length,o=v(t),s=x(t);// No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
if(i<16||i<s||i>1024)throw Error(`expected ${s}-1024 bytes of input, got ${i}`);let l=n?(0,r.bytesToNumberBE)(e):(0,r.bytesToNumberLE)(e),c=u(l,t-a)+a;return n?(0,r.numberToBytesLE)(c,o):(0,r.numberToBytesBE)(c,o)}}),D("j2PHb",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.validateObject=e.exports.createHmacDrbg=e.exports.bitMask=e.exports.bitSet=e.exports.bitGet=e.exports.bitLen=e.exports.utf8ToBytes=e.exports.equalBytes=e.exports.concatBytes=e.exports.ensureBytes=e.exports.numberToVarBytesBE=e.exports.numberToBytesLE=e.exports.numberToBytesBE=e.exports.bytesToNumberLE=e.exports.bytesToNumberBE=e.exports.hexToBytes=e.exports.hexToNumber=e.exports.numberToHexUnpadded=e.exports.bytesToHex=e.exports.isBytes=void 0;/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */// 100 lines of code in the file are duplicated from noble-hashes (utils).
// This is OK: `abstract` directory does not use noble-hashes.
// User may opt-in into using different hashing library. This way, noble-hashes
// won't be included into their bundle.
let r=BigInt(0),n=BigInt(1),a=BigInt(2);function i(e){return e instanceof Uint8Array||null!=e&&"object"==typeof e&&"Uint8Array"===e.constructor.name}e.exports.isBytes=i;// Array where index 0xf0 (240) is mapped to string 'f0'
let o=/* @__PURE__ */Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */function s(e){if(!i(e))throw Error("Uint8Array expected");// pre-caching improves the speed 6x
let t="";for(let r=0;r<e.length;r++)t+=o[e[r]];return t}function l(e){let t=e.toString(16);return 1&t.length?`0${t}`:t}function c(e){if("string"!=typeof e)throw Error("hex string expected, got "+typeof e);// Big Endian
return BigInt(""===e?"0":`0x${e}`)}e.exports.bytesToHex=s,e.exports.numberToHexUnpadded=l,e.exports.hexToNumber=c;// We use optimized technique to convert hex string to byte array
let u={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function d(e){return e>=u._0&&e<=u._9?e-u._0:e>=u._A&&e<=u._F?e-(u._A-10):e>=u._a&&e<=u._f?e-(u._a-10):void 0}/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */function f(e){if("string"!=typeof e)throw Error("hex string expected, got "+typeof e);let t=e.length,r=t/2;if(t%2)throw Error("padded hex string expected, got unpadded hex of length "+t);let n=new Uint8Array(r);for(let t=0,a=0;t<r;t++,a+=2){let r=d(e.charCodeAt(a)),i=d(e.charCodeAt(a+1));if(void 0===r||void 0===i){let t=e[a]+e[a+1];throw Error('hex string expected, got non-hex character "'+t+'" at index '+a)}n[t]=16*r+i}return n}function p(e,t){return f(e.toString(16).padStart(2*t,"0"))}/**
 * Copies several Uint8Arrays into one.
 */function h(...e){let t=0;for(let r=0;r<e.length;r++){let n=e[r];if(!i(n))throw Error("Uint8Array expected");t+=n.length}let r=new Uint8Array(t),n=0;for(let t=0;t<e.length;t++){let a=e[t];r.set(a,n),n+=a.length}return r}e.exports.hexToBytes=f,e.exports.bytesToNumberBE=// BE: Big Endian, LE: Little Endian
function(e){return c(s(e))},e.exports.bytesToNumberLE=function(e){if(!i(e))throw Error("Uint8Array expected");return c(s(Uint8Array.from(e).reverse()))},e.exports.numberToBytesBE=p,e.exports.numberToBytesLE=function(e,t){return p(e,t).reverse()},e.exports.numberToVarBytesBE=// Unpadded, rarely used
function(e){return f(l(e))},e.exports.ensureBytes=/**
 * Takes hex string or Uint8Array, converts to Uint8Array.
 * Validates output length.
 * Will throw error for other types.
 * @param title descriptive title for an error e.g. 'private key'
 * @param hex hex string or Uint8Array
 * @param expectedLength optional, will compare to result array's length
 * @returns
 */function(e,t,r){let n;if("string"==typeof t)try{n=f(t)}catch(r){throw Error(`${e} must be valid hex string, got "${t}". Cause: ${r}`)}else if(i(t))// is instance of Uint8Array, and its slice() creates **mutable** copy
n=Uint8Array.from(t);else throw Error(`${e} must be hex string or Uint8Array`);let a=n.length;if("number"==typeof r&&a!==r)throw Error(`${e} expected ${r} bytes, got ${a}`);return n},e.exports.concatBytes=h,e.exports.equalBytes=// Compares 2 u8a-s in kinda constant time
function(e,t){if(e.length!==t.length)return!1;let r=0;for(let n=0;n<e.length;n++)r|=e[n]^t[n];return 0===r},e.exports.utf8ToBytes=/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */function(e){if("string"!=typeof e)throw Error(`utf8ToBytes expected string, got ${typeof e}`);return new Uint8Array(new TextEncoder().encode(e));// https://bugzil.la/1681809
},e.exports.bitLen=// Bit operations
/**
 * Calculates amount of bits in a bigint.
 * Same as `n.toString(2).length`
 */function(e){let t;for(t=0;e>r;e>>=n,t+=1);return t},e.exports.bitGet=/**
 * Gets single bit at position.
 * NOTE: first bit position is 0 (same as arrays)
 * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
 */function(e,t){return e>>BigInt(t)&n},e.exports.bitSet=(e,t,a)=>e|(a?n:r)<<BigInt(t),e.exports.bitMask=e=>(a<<BigInt(e-1))-n;// DRBG
let b=e=>new Uint8Array(e),y=e=>Uint8Array.from(e);// creates Uint8Array
e.exports.createHmacDrbg=/**
 * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
 * @returns function that will call DRBG until 2nd arg returns something meaningful
 * @example
 *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
 *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
 */function(e,t,r){if("number"!=typeof e||e<2)throw Error("hashLen must be a number");if("number"!=typeof t||t<2)throw Error("qByteLen must be a number");if("function"!=typeof r)throw Error("hmacFn must be a function");// Step B, Step C: set hashLen to 8*ceil(hlen/8)
let n=b(e),a=b(e),i=0,o=()=>{n.fill(1),a.fill(0),i=0},s=(...e)=>r(a,n,...e),l=(e=b())=>{// HMAC-DRBG reseed() function. Steps D-G
a=s(y([0]),e),n=s(),0!==e.length&&(a=s(y([1]),e),n=s())},c=()=>{// HMAC-DRBG generate() function
if(i++>=1e3)throw Error("drbg: tried 1000 values");let e=0,r=[];for(;e<t;){n=s();let t=n.slice();r.push(t),e+=n.length}return h(...r)};// Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
return(e,t)=>{let r;for(o(),l(e);!(r=t(c()));)l();return o(),r}};// Validating curves and fields
let m={bigint:e=>"bigint"==typeof e,function:e=>"function"==typeof e,boolean:e=>"boolean"==typeof e,string:e=>"string"==typeof e,stringOrUint8Array:e=>"string"==typeof e||i(e),isSafeInteger:e=>Number.isSafeInteger(e),array:e=>Array.isArray(e),field:(e,t)=>t.Fp.isValid(e),hash:e=>"function"==typeof e&&Number.isSafeInteger(e.outputLen)};e.exports.validateObject=// type Record<K extends string | number | symbol, T> = { [P in K]: T; }
function(e,t,r={}){let n=(t,r,n)=>{let a=m[r];if("function"!=typeof a)throw Error(`Invalid validator "${r}", expected function`);let i=e[t];if((!n||void 0!==i)&&!a(i,e))throw Error(`Invalid param ${String(t)}=${i} (${typeof i}), expected ${r}`)};for(let[e,r]of Object.entries(t))n(e,r,!1);for(let[e,t]of Object.entries(r))n(e,t,!0);return e};// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
// // Should fail type-check
// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });
}),D("hSUrg",function(e,t){var r;e.exports,r=function(e){var t=/(^|@)\S+\:\d+/,r=/^\s*at .*(\S+\:\d+|\(native\))/m,n=/^(eval@)?(\[native code\])?$/;function a(e,t,r){if("function"==typeof Array.prototype.map)return e.map(t,r);for(var n=Array(e.length),a=0;a<e.length;a++)n[a]=t.call(r,e[a]);return n}function i(e,t,r){if("function"==typeof Array.prototype.filter)return e.filter(t,r);for(var n=[],a=0;a<e.length;a++)t.call(r,e[a])&&n.push(e[a]);return n}return{/**
         * Given an Error object, extract the most information from it.
         *
         * @param {Error} error object
         * @return {Array} of StackFrames
         */parse:function(e){if(void 0!==e.stacktrace||void 0!==e["opera#sourceloc"])return this.parseOpera(e);if(e.stack&&e.stack.match(r))return this.parseV8OrIE(e);if(e.stack)return this.parseFFOrSafari(e);throw Error("Cannot parse given Error object")},// Separate line and column numbers from a string of the form: (URI:Line:Column)
extractLocation:function(e){// Fail-fast but return locations like "(native)"
if(-1===e.indexOf(":"))return[e];var t=/(.+?)(?:\:(\d+))?(?:\:(\d+))?$/.exec(e.replace(/[\(\)]/g,""));return[t[1],t[2]||void 0,t[3]||void 0]},parseV8OrIE:function(t){return a(i(t.stack.split("\n"),function(e){return!!e.match(r)},this),function(t){t.indexOf("(eval ")>-1&&(t=t.replace(/eval code/g,"eval").replace(/(\(eval at [^\()]*)|(\)\,.*$)/g,""));var r=t.replace(/^\s+/,"").replace(/\(eval code/g,"(").split(/\s+/).slice(1),n=this.extractLocation(r.pop());return new e(r.join(" ")||void 0,void 0,function(e,t){if("function"==typeof Array.prototype.indexOf)return e.indexOf(t);for(var r=0;r<e.length;r++)if(e[r]===t)return r;return -1}(["eval","<anonymous>"],n[0])>-1?void 0:n[0],n[1],n[2],t)},this)},parseFFOrSafari:function(t){return a(i(t.stack.split("\n"),function(e){return!e.match(n)},this),function(t){if(t.indexOf(" > eval")>-1&&(t=t.replace(/ line (\d+)(?: > eval line \d+)* > eval\:\d+\:\d+/g,":$1")),-1===t.indexOf("@")&&-1===t.indexOf(":"))return new e(t);var r=t.split("@"),n=this.extractLocation(r.pop());return new e(r.join("@")||void 0,void 0,n[0],n[1],n[2],t)},this)},parseOpera:function(e){return!e.stacktrace||e.message.indexOf("\n")>-1&&e.message.split("\n").length>e.stacktrace.split("\n").length?this.parseOpera9(e):e.stack?this.parseOpera11(e):this.parseOpera10(e)},parseOpera9:function(t){for(var r=/Line (\d+).*script (?:in )?(\S+)/i,n=t.message.split("\n"),a=[],i=2,o=n.length;i<o;i+=2){var s=r.exec(n[i]);s&&a.push(new e(void 0,void 0,s[2],s[1],void 0,n[i]))}return a},parseOpera10:function(t){for(var r=/Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i,n=t.stacktrace.split("\n"),a=[],i=0,o=n.length;i<o;i+=2){var s=r.exec(n[i]);s&&a.push(new e(s[3]||void 0,void 0,s[2],s[1],void 0,n[i]))}return a},// Opera 10.65+ Error.stack very similar to FF/Safari
parseOpera11:function(r){return a(i(r.stack.split("\n"),function(e){return!!e.match(t)&&!e.match(/^Error created at/)},this),function(t){var r,n=t.split("@"),a=this.extractLocation(n.pop()),i=n.shift()||"",o=i.replace(/<anonymous function(: (\w+))?>/,"$2").replace(/\([^\)]*\)/g,"")||void 0;return i.match(/\(([^\)]*)\)/)&&(r=i.replace(/^[^\(]+\(([^\)]*)\)$/,"$1")),new e(o,void 0===r||"[arguments not available]"===r?void 0:r.split(","),a[0],a[1],a[2],t)},this)}}},"function"==typeof define&&define.amd?define("error-stack-parser",["stackframe"],r):e.exports=r(A("bNczT"))}),D("bNczT",function(e,t){var r;e.exports,r=function(){function e(e){return!isNaN(parseFloat(e))&&isFinite(e)}function t(e,t,r,n,a,i){void 0!==e&&this.setFunctionName(e),void 0!==t&&this.setArgs(t),void 0!==r&&this.setFileName(r),void 0!==n&&this.setLineNumber(n),void 0!==a&&this.setColumnNumber(a),void 0!==i&&this.setSource(i)}return t.prototype={getFunctionName:function(){return this.functionName},setFunctionName:function(e){this.functionName=String(e)},getArgs:function(){return this.args},setArgs:function(e){if("[object Array]"!==Object.prototype.toString.call(e))throw TypeError("Args must be an Array");this.args=e},// NOTE: Property name may be misleading as it includes the path,
// but it somewhat mirrors V8's JavaScriptStackTraceApi
// https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi and Gecko's
// http://mxr.mozilla.org/mozilla-central/source/xpcom/base/nsIException.idl#14
getFileName:function(){return this.fileName},setFileName:function(e){this.fileName=String(e)},getLineNumber:function(){return this.lineNumber},setLineNumber:function(t){if(!e(t))throw TypeError("Line Number must be a Number");this.lineNumber=Number(t)},getColumnNumber:function(){return this.columnNumber},setColumnNumber:function(t){if(!e(t))throw TypeError("Column Number must be a Number");this.columnNumber=Number(t)},getSource:function(){return this.source},setSource:function(e){this.source=String(e)},toString:function(){return(this.getFunctionName()||"{anonymous}")+"("+(this.getArgs()||[]).join(",")+")"+(this.getFileName()?"@"+this.getFileName():"")+(e(this.getLineNumber())?":"+this.getLineNumber():"")+(e(this.getColumnNumber())?":"+this.getColumnNumber():"")}},t},"function"==typeof define&&define.amd?define("stackframe",[],r):e.exports=r()}),D("frA9s",function(e,t){var r;e.exports,r=function(e){return{backtrace:function(t){var r=[],n=10;"object"==typeof t&&"number"==typeof t.maxStackSize&&(n=t.maxStackSize);for(var a=arguments.callee;a&&r.length<n;){for(var i=Array(a.arguments.length),o=0;o<i.length;++o)i[o]=a.arguments[o];/function(?:\s+([\w$]+))+\s*\(/.test(a.toString())?r.push(new e({functionName:RegExp.$1||void 0,args:i})):r.push(new e({args:i}));try{a=a.caller}catch(e){break}}return r}}},"function"==typeof define&&define.amd?define("stack-generator",["stackframe"],r):e.exports=r(A("6hKBG"))}),D("6hKBG",function(e,t){var r;e.exports,r=function(){function e(e){return e.charAt(0).toUpperCase()+e.substring(1)}function t(e){return function(){return this[e]}}var r=["isConstructor","isEval","isNative","isToplevel"],n=["columnNumber","lineNumber"],a=["fileName","functionName","source"],i=r.concat(n,a,["args"],["evalOrigin"]);function o(t){if(t)for(var r=0;r<i.length;r++)void 0!==t[i[r]]&&this["set"+e(i[r])](t[i[r]])}o.prototype={getArgs:function(){return this.args},setArgs:function(e){if("[object Array]"!==Object.prototype.toString.call(e))throw TypeError("Args must be an Array");this.args=e},getEvalOrigin:function(){return this.evalOrigin},setEvalOrigin:function(e){if(e instanceof o)this.evalOrigin=e;else if(e instanceof Object)this.evalOrigin=new o(e);else throw TypeError("Eval Origin must be an Object or StackFrame")},toString:function(){var e=this.getFileName()||"",t=this.getLineNumber()||"",r=this.getColumnNumber()||"",n=this.getFunctionName()||"";return this.getIsEval()?e?"[eval] ("+e+":"+t+":"+r+")":"[eval]:"+t+":"+r:n?n+" ("+e+":"+t+":"+r+")":e+":"+t+":"+r}},o.fromString=function(e){var t=e.indexOf("("),r=e.lastIndexOf(")"),n=e.substring(0,t),a=e.substring(t+1,r).split(","),i=e.substring(r+1);if(0===i.indexOf("@"))var s=/@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(i,""),l=s[1],c=s[2],u=s[3];return new o({functionName:n,args:a||void 0,fileName:l,lineNumber:c||void 0,columnNumber:u||void 0})};for(var s=0;s<r.length;s++)o.prototype["get"+e(r[s])]=t(r[s]),o.prototype["set"+e(r[s])]=function(e){return function(t){this[e]=!!t}}(r[s]);for(var l=0;l<n.length;l++)o.prototype["get"+e(n[l])]=t(n[l]),o.prototype["set"+e(n[l])]=function(e){return function(t){if(!(!isNaN(parseFloat(t))&&isFinite(t)))throw TypeError(e+" must be a Number");this[e]=Number(t)}}(n[l]);for(var c=0;c<a.length;c++)o.prototype["get"+e(a[c])]=t(a[c]),o.prototype["set"+e(a[c])]=function(e){return function(t){this[e]=String(t)}}(a[c]);return o},"function"==typeof define&&define.amd?define("stackframe",[],r):e.exports=r()}),D("bYcmg",function(e,t){var r;e.exports,r=function(e,t){/**
     * Make a X-Domain request to url and callback.
     *
     * @param {String} url
     * @returns {Promise} with response text if fulfilled
     */function r(e){return new Promise(function(t,r){var n=new XMLHttpRequest;n.open("get",e),n.onerror=r,n.onreadystatechange=function(){4===n.readyState&&(n.status>=200&&n.status<300?t(n.responseText):r(Error("HTTP status: "+n.status+" retrieving "+e)))},n.send()})}/**
     * Convert a Base64-encoded string into its original representation.
     * Used for inline sourcemaps.
     *
     * @param {String} b64str Base-64 encoded string
     * @returns {String} original representation of the base64-encoded string.
     */function n(e){if("undefined"!=typeof window&&window.atob)return window.atob(e);throw Error("You must supply a polyfill for window.atob in this environment")}function a(e){if("object"!=typeof e)throw TypeError("Given StackFrame is not an object");if("string"!=typeof e.fileName)throw TypeError("Given file name is not a String");if("number"!=typeof e.lineNumber||e.lineNumber%1!=0||e.lineNumber<1)throw TypeError("Given line number must be a positive integer");if("number"!=typeof e.columnNumber||e.columnNumber%1!=0||e.columnNumber<0)throw TypeError("Given column number must be a non-negative integer");return!0}/**
     * @constructor
     * @param {Object} opts
     *      opts.sourceCache = {url: "Source String"} => preload source cache
     *      opts.offline = True to prevent network requests.
     *              Best effort without sources or source maps.
     *      opts.ajax = Promise returning function to make X-Domain requests
     */return function i(o){if(!(this instanceof i))return new i(o);o=o||{},this.sourceCache=o.sourceCache||{},this.ajax=o.ajax||r,this._atob=o.atob||n,this._get=function(e){return new Promise((function(t,r){var n="data:"===e.substr(0,5);if(this.sourceCache[e])t(this.sourceCache[e]);else if(o.offline&&!n)r(Error("Cannot make network requests in offline mode"));else if(n){var a=e.match(/^data:application\/json;([\w=:"-]+;)*base64,/);if(a){var i=a[0].length,s=e.substr(i),l=this._atob(s);this.sourceCache[e]=l,t(l)}else r(Error("The encoding of the inline sourcemap is not supported"))}else{var c=this.ajax(e,{method:"get"});// Cache the Promise to prevent duplicate in-flight requests
this.sourceCache[e]=c,c.then(t,r)}}).bind(this))},/**
         * Given a StackFrame, enhance function name and use source maps for a
         * better StackFrame.
         *
         * @param {StackFrame} stackframe object
         * @returns {Promise} that resolves with with source-mapped StackFrame
         */this.pinpoint=function(e){return new Promise((function(t,r){this.getMappedLocation(e).then((function(e){function r(){t(e)}this.findFunctionName(e).then(t,r).catch(r)}).bind(this),r)}).bind(this))},/**
         * Given a StackFrame, guess function name from location information.
         *
         * @param {StackFrame} stackframe
         * @returns {Promise} that resolves with enhanced StackFrame.
         */this.findFunctionName=function(e){return new Promise((function(r,n){a(e),this._get(e.fileName).then(function(n){var a=e.lineNumber,i=e.columnNumber,o=function(e,t/*, columnNumber*/){for(var r,n=/function\s+([^(]*?)\s*\(([^)]*)\)/,a=/['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*function\b/,i=/['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*(?:eval|new Function)\b/,o=e.split("\n"),s="",l=Math.min(t,20),c=0;c<l;++c){// lineNo is 1-based, source[] is 0-based
var u=o[t-c-1],d=u.indexOf("//");if(d>=0&&(u=u.substr(0,d)),u&&(s=u+s,(r=a.exec(s))&&r[1]||(r=n.exec(s))&&r[1]||(r=i.exec(s))&&r[1]))return r[1]}}(n,a,i);// Only replace functionName if we found something
o?r(new t(o,e.args,e.fileName,a,i)):r(e)},n).catch(n)}).bind(this))},/**
         * Given a StackFrame, seek source-mapped location and return new enhanced StackFrame.
         *
         * @param {StackFrame} stackframe
         * @returns {Promise} that resolves with enhanced StackFrame.
         */this.getMappedLocation=function(r){return new Promise((function(n,i){(function(){if("function"!=typeof Object.defineProperty||"function"!=typeof Object.create)throw Error("Unable to consume source maps in older browsers")})(),a(r);var o=this.sourceCache,s=r.fileName;this._get(s).then((function(a){var l=function(e){var t=/\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/.exec(e);if(t&&t[1])return t[1];throw Error("sourceMappingURL not found")}(a),c="data:"===l.substr(0,5),u=s.substring(0,s.lastIndexOf("/")+1);"/"===l[0]||c||/^https?:\/\/|^\/\//i.test(l)||(l=u+l),this._get(l).then(function(a){var i;"string"==typeof a&&(a=function(e){if("undefined"!=typeof JSON&&JSON.parse)return JSON.parse(e);throw Error("You must supply a polyfill for JSON.parse in this environment")}(a.replace(/^\)\]\}'/,""))),void 0===a.sourceRoot&&(a.sourceRoot=u),(i=a,new Promise(function(n,a){var s=new e.SourceMapConsumer(i),l=s.originalPositionFor({line:r.lineNumber,column:r.columnNumber});if(l.source){var c=s.sourceContentFor(l.source);c&&(o[l.source]=c),n(new t(l.name||r.functionName,r.args,l.source,l.line,l.column))}else a(Error("Could not get original source for given stackframe and source map"))})).then(n).catch(function(){n(r)})},i).catch(i)}).bind(this),i).catch(i)}).bind(this))}}},"function"==typeof define&&define.amd?define("stacktrace-gps",["source-map","stackframe"],r):e.exports=r(A("3DjxD"),A("bNczT"))}),D("3DjxD",function(e,t){r(e.exports,"SourceMapConsumer",()=>n,e=>n=e),r(e.exports,"BasicSourceMapConsumer",()=>a,e=>a=e),r(e.exports,"IndexedSourceMapConsumer",()=>i,e=>i=e);var n,a,i,o=A("hvjlv"),s=A("4khg5"),l=A("7Tyww").ArraySet,c=A("jTqXJ"),u=A("db1rV").quickSort;function d(e){var t=e;return"string"==typeof e&&(t=JSON.parse(e.replace(/^\)\]\}'/,""))),null!=t.sections?new h(t):new f(t)}/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The only parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */function f(e){var t=e;"string"==typeof e&&(t=JSON.parse(e.replace(/^\)\]\}'/,"")));var r=o.getArg(t,"version"),n=o.getArg(t,"sources"),a=o.getArg(t,"names",[]),i=o.getArg(t,"sourceRoot",null),s=o.getArg(t,"sourcesContent",null),c=o.getArg(t,"mappings"),u=o.getArg(t,"file",null);// Once again, Sass deviates from the spec and supplies the version as a
// string rather than a number, so we use loose equality checking here.
if(r!=this._version)throw Error("Unsupported version: "+r);n=n.map(String)// Some source maps produce relative source paths like "./foo.js" instead of
// "foo.js".  Normalize these first so that future comparisons will succeed.
// See bugzil.la/1090768.
.map(o.normalize)// Always ensure that absolute sources are internally stored relative to
// the source root, if the source root is absolute. Not doing this would
// be particularly problematic when the source root is a prefix of the
// source (valid, but why??). See github issue #199 and bugzil.la/1188982.
.map(function(e){return i&&o.isAbsolute(i)&&o.isAbsolute(e)?o.relative(i,e):e}),// Pass `true` below to allow duplicate names and sources. While source maps
// are intended to be compressed and deduplicated, the TypeScript compiler
// sometimes generates source maps with duplicates in them. See Github issue
// #72 and bugzil.la/889492.
this._names=l.fromArray(a.map(String),!0),this._sources=l.fromArray(n,!0),this.sourceRoot=i,this.sourcesContent=s,this._mappings=c,this.file=u}/**
 * Provide the JIT with a nice shape / hidden class.
 */function p(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The only parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */function h(e){var t=e;"string"==typeof e&&(t=JSON.parse(e.replace(/^\)\]\}'/,"")));var r=o.getArg(t,"version"),n=o.getArg(t,"sections");if(r!=this._version)throw Error("Unsupported version: "+r);this._sources=new l,this._names=new l;var a={line:-1,column:0};this._sections=n.map(function(e){if(e.url)// See https://github.com/mozilla/source-map/issues/16
throw Error("Support for url field in sections not implemented.");var t=o.getArg(e,"offset"),r=o.getArg(t,"line"),n=o.getArg(t,"column");if(r<a.line||r===a.line&&n<a.column)throw Error("Section offsets must be ordered and non-overlapping.");return a=t,{generatedOffset:{// The offset fields are 0-based, but we use 1-based indices when
// encoding/decoding from VLQ.
generatedLine:r+1,generatedColumn:n+1},consumer:new d(o.getArg(e,"map"))}})}d.fromSourceMap=function(e){return f.fromSourceMap(e)},/**
 * The version of the source mapping spec that we are consuming.
 */d.prototype._version=3,// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.
d.prototype.__generatedMappings=null,Object.defineProperty(d.prototype,"_generatedMappings",{get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),d.prototype.__originalMappings=null,Object.defineProperty(d.prototype,"_originalMappings",{get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),d.prototype._charIsMappingSeparator=function(e,t){var r=e.charAt(t);return";"===r||","===r},/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */d.prototype._parseMappings=function(e,t){throw Error("Subclasses must implement _parseMappings")},d.GENERATED_ORDER=1,d.ORIGINAL_ORDER=2,d.GREATEST_LOWER_BOUND=1,d.LEAST_UPPER_BOUND=2,/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */d.prototype.eachMapping=function(e,t,r){var n,a=t||null;switch(r||d.GENERATED_ORDER){case d.GENERATED_ORDER:n=this._generatedMappings;break;case d.ORIGINAL_ORDER:n=this._originalMappings;break;default:throw Error("Unknown order of iteration.")}var i=this.sourceRoot;n.map(function(e){var t=null===e.source?null:this._sources.at(e.source);return null!=t&&null!=i&&(t=o.join(i,t)),{source:t,generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}},this).forEach(e,a)},/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.
 *   - column: Optional. the column number in the original source.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.
 *   - column: The column number in the generated source, or null.
 */d.prototype.allGeneratedPositionsFor=function(e){var t=o.getArg(e,"line"),r={source:o.getArg(e,"source"),originalLine:t,originalColumn:o.getArg(e,"column",0)};if(null!=this.sourceRoot&&(r.source=o.relative(this.sourceRoot,r.source)),!this._sources.has(r.source))return[];r.source=this._sources.indexOf(r.source);var n=[],a=this._findMapping(r,this._originalMappings,"originalLine","originalColumn",o.compareByOriginalPositions,s.LEAST_UPPER_BOUND);if(a>=0){var i=this._originalMappings[a];if(void 0===e.column)// Iterate until either we run out of mappings, or we run into
// a mapping for a different line than the one we found. Since
// mappings are sorted, this is guaranteed to find all mappings for
// the line we found.
for(var l=i.originalLine;i&&i.originalLine===l;)n.push({line:o.getArg(i,"generatedLine",null),column:o.getArg(i,"generatedColumn",null),lastColumn:o.getArg(i,"lastGeneratedColumn",null)}),i=this._originalMappings[++a];else // Iterate until either we run out of mappings, or we run into
// a mapping for a different line than the one we were searching for.
// Since mappings are sorted, this is guaranteed to find all mappings for
// the line we are searching for.
for(var c=i.originalColumn;i&&i.originalLine===t&&i.originalColumn==c;)n.push({line:o.getArg(i,"generatedLine",null),column:o.getArg(i,"generatedColumn",null),lastColumn:o.getArg(i,"lastGeneratedColumn",null)}),i=this._originalMappings[++a]}return n},n=d,f.prototype=Object.create(d.prototype),f.prototype.consumer=d,/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @returns BasicSourceMapConsumer
 */f.fromSourceMap=function(e){var t=Object.create(f.prototype),r=t._names=l.fromArray(e._names.toArray(),!0),n=t._sources=l.fromArray(e._sources.toArray(),!0);t.sourceRoot=e._sourceRoot,t.sourcesContent=e._generateSourcesContent(t._sources.toArray(),t.sourceRoot),t.file=e._file;for(var a=e._mappings.toArray().slice(),i=t.__generatedMappings=[],s=t.__originalMappings=[],c=0,d=a.length;c<d;c++){var h=a[c],b=new p;b.generatedLine=h.generatedLine,b.generatedColumn=h.generatedColumn,h.source&&(b.source=n.indexOf(h.source),b.originalLine=h.originalLine,b.originalColumn=h.originalColumn,h.name&&(b.name=r.indexOf(h.name)),s.push(b)),i.push(b)}return u(t.__originalMappings,o.compareByOriginalPositions),t},/**
 * The version of the source mapping spec that we are consuming.
 */f.prototype._version=3,/**
 * The list of original sources.
 */Object.defineProperty(f.prototype,"sources",{get:function(){return this._sources.toArray().map(function(e){return null!=this.sourceRoot?o.join(this.sourceRoot,e):e},this)}}),/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */f.prototype._parseMappings=function(e,t){for(var r,n,a,i,s,l=1,d=0,f=0,h=0,b=0,y=0,m=e.length,g=0,v={},x={},w=[],P=[];g<m;)if(";"===e.charAt(g))l++,g++,d=0;else if(","===e.charAt(g))g++;else{// Because each offset is encoded relative to the previous one,
// many segments often have the same encoding. We can exploit this
// fact by caching the parsed variable length fields of each segment,
// allowing us to avoid a second parse if we encounter the same
// segment again.
for((r=new p).generatedLine=l,i=g;i<m&&!this._charIsMappingSeparator(e,i);i++);if(a=v[n=e.slice(g,i)])g+=n.length;else{for(a=[];g<i;)c.decode(e,g,x),s=x.value,g=x.rest,a.push(s);if(2===a.length)throw Error("Found a source, but no line and column");if(3===a.length)throw Error("Found a source and line, but no column");v[n]=a}// Generated column.
r.generatedColumn=d+a[0],d=r.generatedColumn,a.length>1&&(// Original source.
r.source=b+a[1],b+=a[1],// Original line.
r.originalLine=f+a[2],f=r.originalLine,// Lines are stored 0-based
r.originalLine+=1,// Original column.
r.originalColumn=h+a[3],h=r.originalColumn,a.length>4&&(// Original name.
r.name=y+a[4],y+=a[4])),P.push(r),"number"==typeof r.originalLine&&w.push(r)}u(P,o.compareByGeneratedPositionsDeflated),this.__generatedMappings=P,u(w,o.compareByOriginalPositions),this.__originalMappings=w},/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */f.prototype._findMapping=function(e,t,r,n,a,i){// To return the position we are searching for, we must first find the
// mapping for the given position and then return the opposite position it
// points to. Because the mappings are sorted, we can use binary search to
// find the best mapping.
if(e[r]<=0)throw TypeError("Line must be greater than or equal to 1, got "+e[r]);if(e[n]<0)throw TypeError("Column must be greater than or equal to 0, got "+e[n]);return s.search(e,t,a,i)},/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */f.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];// Mappings do not contain a field for the last generated columnt. We
// can come up with an optimistic estimate, however, by assuming that
// mappings are contiguous (i.e. given two consecutive mappings, the
// first mapping ends where the second one starts).
if(e+1<this._generatedMappings.length){var r=this._generatedMappings[e+1];if(t.generatedLine===r.generatedLine){t.lastGeneratedColumn=r.generatedColumn-1;continue}}// The last mapping for each line spans the entire line.
t.lastGeneratedColumn=1/0}},/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.
 *   - column: The column number in the generated source.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.
 *   - column: The column number in the original source, or null.
 *   - name: The original identifier, or null.
 */f.prototype.originalPositionFor=function(e){var t={generatedLine:o.getArg(e,"line"),generatedColumn:o.getArg(e,"column")},r=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",o.compareByGeneratedPositionsDeflated,o.getArg(e,"bias",d.GREATEST_LOWER_BOUND));if(r>=0){var n=this._generatedMappings[r];if(n.generatedLine===t.generatedLine){var a=o.getArg(n,"source",null);null!==a&&(a=this._sources.at(a),null!=this.sourceRoot&&(a=o.join(this.sourceRoot,a)));var i=o.getArg(n,"name",null);return null!==i&&(i=this._names.at(i)),{source:a,line:o.getArg(n,"originalLine",null),column:o.getArg(n,"originalColumn",null),name:i}}}return{source:null,line:null,column:null,name:null}},/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */f.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some(function(e){return null==e})},/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */f.prototype.sourceContentFor=function(e,t){if(!this.sourcesContent)return null;if(null!=this.sourceRoot&&(e=o.relative(this.sourceRoot,e)),this._sources.has(e))return this.sourcesContent[this._sources.indexOf(e)];if(null!=this.sourceRoot&&(r=o.urlParse(this.sourceRoot))){// XXX: file:// URIs and absolute paths lead to unexpected behavior for
// many users. We can help them out when they expect file:// URIs to
// behave like it would if they were running a local HTTP server. See
// https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
var r,n=e.replace(/^file:\/\//,"");if("file"==r.scheme&&this._sources.has(n))return this.sourcesContent[this._sources.indexOf(n)];if((!r.path||"/"==r.path)&&this._sources.has("/"+e))return this.sourcesContent[this._sources.indexOf("/"+e)]}// This function is used recursively from
// IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
// don't want to throw if we can't find the source - we just want to
// return null, so we provide a flag to exit gracefully.
if(t)return null;throw Error('"'+e+'" is not in the SourceMap.')},/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.
 *   - column: The column number in the original source.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.
 *   - column: The column number in the generated source, or null.
 */f.prototype.generatedPositionFor=function(e){var t=o.getArg(e,"source");if(null!=this.sourceRoot&&(t=o.relative(this.sourceRoot,t)),!this._sources.has(t))return{line:null,column:null,lastColumn:null};var r={source:t=this._sources.indexOf(t),originalLine:o.getArg(e,"line"),originalColumn:o.getArg(e,"column")},n=this._findMapping(r,this._originalMappings,"originalLine","originalColumn",o.compareByOriginalPositions,o.getArg(e,"bias",d.GREATEST_LOWER_BOUND));if(n>=0){var a=this._originalMappings[n];if(a.source===r.source)return{line:o.getArg(a,"generatedLine",null),column:o.getArg(a,"generatedColumn",null),lastColumn:o.getArg(a,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},a=f,h.prototype=Object.create(d.prototype),h.prototype.constructor=d,/**
 * The version of the source mapping spec that we are consuming.
 */h.prototype._version=3,/**
 * The list of original sources.
 */Object.defineProperty(h.prototype,"sources",{get:function(){for(var e=[],t=0;t<this._sections.length;t++)for(var r=0;r<this._sections[t].consumer.sources.length;r++)e.push(this._sections[t].consumer.sources[r]);return e}}),/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.
 *   - column: The column number in the generated source.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.
 *   - column: The column number in the original source, or null.
 *   - name: The original identifier, or null.
 */h.prototype.originalPositionFor=function(e){var t={generatedLine:o.getArg(e,"line"),generatedColumn:o.getArg(e,"column")},r=s.search(t,this._sections,function(e,t){return e.generatedLine-t.generatedOffset.generatedLine||e.generatedColumn-t.generatedOffset.generatedColumn}),n=this._sections[r];return n?n.consumer.originalPositionFor({line:t.generatedLine-(n.generatedOffset.generatedLine-1),column:t.generatedColumn-(n.generatedOffset.generatedLine===t.generatedLine?n.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */h.prototype.hasContentsOfAllSources=function(){return this._sections.every(function(e){return e.consumer.hasContentsOfAllSources()})},/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */h.prototype.sourceContentFor=function(e,t){for(var r=0;r<this._sections.length;r++){var n=this._sections[r].consumer.sourceContentFor(e,!0);if(n)return n}if(t)return null;throw Error('"'+e+'" is not in the SourceMap.')},/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.
 *   - column: The column number in the original source.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.
 *   - column: The column number in the generated source, or null.
 */h.prototype.generatedPositionFor=function(e){for(var t=0;t<this._sections.length;t++){var r=this._sections[t];// Only consider this section if the requested source is in the list of
// sources of the consumer.
if(-1!==r.consumer.sources.indexOf(o.getArg(e,"source"))){var n=r.consumer.generatedPositionFor(e);if(n)return{line:n.line+(r.generatedOffset.generatedLine-1),column:n.column+(r.generatedOffset.generatedLine===n.line?r.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */h.prototype._parseMappings=function(e,t){this.__generatedMappings=[],this.__originalMappings=[];for(var r=0;r<this._sections.length;r++)for(var n=this._sections[r],a=n.consumer._generatedMappings,i=0;i<a.length;i++){var s=a[i],l=n.consumer._sources.at(s.source);null!==n.consumer.sourceRoot&&(l=o.join(n.consumer.sourceRoot,l)),this._sources.add(l),l=this._sources.indexOf(l);var c=n.consumer._names.at(s.name);this._names.add(c),c=this._names.indexOf(c);// The mappings coming from the consumer for the section have
// generated positions relative to the start of the section, so we
// need to offset them to be relative to the start of the concatenated
// generated file.
var d={source:l,generatedLine:s.generatedLine+(n.generatedOffset.generatedLine-1),generatedColumn:s.generatedColumn+(n.generatedOffset.generatedLine===s.generatedLine?n.generatedOffset.generatedColumn-1:0),originalLine:s.originalLine,originalColumn:s.originalColumn,name:c};this.__generatedMappings.push(d),"number"==typeof d.originalLine&&this.__originalMappings.push(d)}u(this.__generatedMappings,o.compareByGeneratedPositionsDeflated),u(this.__originalMappings,o.compareByOriginalPositions)},i=h}),D("hvjlv",function(e,t){r(e.exports,"getArg",()=>n,e=>n=e),r(e.exports,"urlParse",()=>a,e=>a=e),r(e.exports,"isAbsolute",()=>s,e=>s=e),r(e.exports,"normalize",()=>i,e=>i=e),r(e.exports,"join",()=>o,e=>o=e),r(e.exports,"relative",()=>l,e=>l=e),r(e.exports,"toSetString",()=>c,e=>c=e),r(e.exports,"compareByOriginalPositions",()=>u,e=>u=e),r(e.exports,"compareByGeneratedPositionsDeflated",()=>d,e=>d=e),n=function(e,t,r){if(t in e)return e[t];if(3==arguments.length)return r;throw Error('"'+t+'" is a required argument.')};var n,a,i,o,s,l,c,u,d,f=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/,p=/^data:.+\,.+$/;function h(e){var t=e.match(f);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function b(e){var t="";return e.scheme&&(t+=e.scheme+":"),t+="//",e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */function y(e){var t=e,r=h(e);if(r){if(!r.path)return e;t=r.path}for(var n,a=s(t),i=t.split(/\/+/),o=0,l=i.length-1;l>=0;l--)"."===(n=i[l])?i.splice(l,1):".."===n?o++:o>0&&(""===n?(// The first part is blank if the path is absolute. Trying to go
// above the root is a no-op. Therefore we can remove all '..' parts
// directly after the root.
i.splice(l+1,o),o=0):(i.splice(l,2),o--));return(""===(t=i.join("/"))&&(t=a?"/":"."),r)?(r.path=t,b(r)):t}a=h,i=y,o=/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */function(e,t){""===e&&(e="."),""===t&&(t=".");var r=h(t),n=h(e);// `join(foo, '//www.example.org')`
if(n&&(e=n.path||"/"),r&&!r.scheme)return n&&(r.scheme=n.scheme),b(r);if(r||t.match(p))return t;// `join('http://', 'www.example.com')`
if(n&&!n.host&&!n.path)return n.host=t,b(n);var a="/"===t.charAt(0)?t:y(e.replace(/\/+$/,"")+"/"+t);return n?(n.path=a,b(n)):a},s=function(e){return"/"===e.charAt(0)||!!e.match(f)},l=/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */function(e,t){""===e&&(e="."),e=e.replace(/\/$/,"");for(// It is possible for the path to be above the root. In this case, simply
// checking whether the root is a prefix of the path won't work. Instead, we
// need to remove components from the root one by one, until either we find
// a prefix that fits, or we run out of components to remove.
var r=0;0!==t.indexOf(e+"/");){var n=e.lastIndexOf("/");if(n<0||// If the only part of the root that is left is the scheme (i.e. http://,
// file:///, etc.), one or more slashes (/), or simply nothing at all, we
// have exhausted all components, so the path is not relative to the root.
(e=e.slice(0,n)).match(/^([^\/]+:\/)?\/*$/))return t;++r}// Make sure we add a "../" for each component we removed from the root.
return Array(r+1).join("../")+t.substr(e.length+1)},c="__proto__"in Object.create(null)?/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */function(e){return!function(e){if(!e)return!1;var t=e.length;if(t<9/* "__proto__".length */||95/* '_' */!==e.charCodeAt(t-1)||95/* '_' */!==e.charCodeAt(t-2)||111/* 'o' */!==e.charCodeAt(t-3)||116/* 't' */!==e.charCodeAt(t-4)||111/* 'o' */!==e.charCodeAt(t-5)||114/* 'r' */!==e.charCodeAt(t-6)||112/* 'p' */!==e.charCodeAt(t-7)||95/* '_' */!==e.charCodeAt(t-8)||95/* '_' */!==e.charCodeAt(t-9))return!1;for(var r=t-10;r>=0;r--)if(36/* '$' */!==e.charCodeAt(r))return!1;return!0}(e)?e:"$"+e}:function(e){return e},u=/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */function(e,t,r){var n=e.source-t.source;return 0!==n||0!=(n=e.originalLine-t.originalLine)||0!=(n=e.originalColumn-t.originalColumn)||r||0!=(n=e.generatedColumn-t.generatedColumn)||0!=(n=e.generatedLine-t.generatedLine)?n:e.name-t.name},d=/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */function(e,t,r){var n=e.generatedLine-t.generatedLine;return 0!==n||0!=(n=e.generatedColumn-t.generatedColumn)||r||0!=(n=e.source-t.source)||0!=(n=e.originalLine-t.originalLine)||0!=(n=e.originalColumn-t.originalColumn)?n:e.name-t.name}}),D("4khg5",function(e,t){var n,a,i;r(e.exports,"GREATEST_LOWER_BOUND",()=>n,e=>n=e),r(e.exports,"LEAST_UPPER_BOUND",()=>a,e=>a=e),r(e.exports,"search",()=>i,e=>i=e),n=1,a=2,i=function(e,t,r,i){if(0===t.length)return -1;var o=/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */function e(t,r,n,i,o,s){// This function terminates when one of the following is true:
//
//   1. We find the exact element we are looking for.
//
//   2. We did not find the exact element, but we can return the index of
//      the next-closest element.
//
//   3. We did not find the exact element, and there is no next-closest
//      element than the one we are searching for, so we return -1.
var l=Math.floor((r-t)/2)+t,c=o(n,i[l],!0);return 0===c?l:c>0?// Our needle is greater than aHaystack[mid].
r-l>1?e(l,r,n,i,o,s):s==a?r<i.length?r:-1:l:// Our needle is less than aHaystack[mid].
l-t>1?e(t,l,n,i,o,s):s==a?l:t<0?-1:t}(-1,t.length,e,t,r,i||n);if(o<0)return -1;// We have found either the exact element, or the next-closest element than
// the one we are searching for. However, there may be more than one such
// element. Make sure we always return the smallest of these.
for(;o-1>=0&&0===r(t[o],t[o-1],!0);)--o;return o}}),D("7Tyww",function(e,t){r(e.exports,"ArraySet",()=>n,e=>n=e);var n,a=A("hvjlv"),i=Object.prototype.hasOwnProperty;/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */function o(){this._array=[],this._set=Object.create(null)}/**
 * Static method for creating ArraySet instances from an existing array.
 */o.fromArray=function(e,t){for(var r=new o,n=0,a=e.length;n<a;n++)r.add(e[n],t);return r},/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */o.prototype.size=function(){return Object.getOwnPropertyNames(this._set).length},/**
 * Add the given string to this set.
 *
 * @param String aStr
 */o.prototype.add=function(e,t){var r=a.toSetString(e),n=i.call(this._set,r),o=this._array.length;(!n||t)&&this._array.push(e),n||(this._set[r]=o)},/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */o.prototype.has=function(e){var t=a.toSetString(e);return i.call(this._set,t)},/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */o.prototype.indexOf=function(e){var t=a.toSetString(e);if(i.call(this._set,t))return this._set[t];throw Error('"'+e+'" is not in the set.')},/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */o.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw Error("No element indexed by "+e)},/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */o.prototype.toArray=function(){return this._array.slice()},n=o}),D("jTqXJ",function(e,t){r(e.exports,"decode",()=>n,e=>n=e);var n,a=A("Q1Wfs");n=function(e,t,r){var n,i,o,s,l=e.length,c=0,u=0;do{if(t>=l)throw Error("Expected more digits in base 64 VLQ value.");if(-1===(s=a.decode(e.charCodeAt(t++))))throw Error("Invalid base64 digit: "+e.charAt(t-1));o=!!(32&s),s&=31,c+=s<<u,u+=5}while(o)r.value=(i=(n=c)>>1,(1&n)==1?-i:i),r.rest=t}}),D("Q1Wfs",function(e,t){r(e.exports,"encode",()=>n,e=>n=e),r(e.exports,"decode",()=>a,e=>a=e);var n,a,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");n=function(e){if(0<=e&&e<i.length)return i[e];throw TypeError("Must be between 0 and 63: "+e)},a=function(e){return(// 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
65<=e&&e<=90?e-65:97<=e&&e<=122?e-97+26:48<=e&&e<=57?e-48+52:43==e?62:47==e?63:-1)}}),D("db1rV",function(e,t){var n;function a(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}r(e.exports,"quickSort",()=>n,e=>n=e),n=function(e,t){!/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */function e(t,r,n,i){// If our lower bound is less than our upper bound, we (1) partition the
// array into two pieces and (2) recurse on each half. If it is not, this is
// the empty array and our base case.
if(n<i){// (1) Partitioning.
//
// The partitioning chooses a pivot between `p` and `r` and moves all
// elements that are less than or equal to the pivot to the before it, and
// all the elements that are greater than it after it. The effect is that
// once partition is done, the pivot is in the exact place it will be when
// the array is put in sorted order, and it will not need to be moved
// again. This runs in O(n) time.
// Always choose a random pivot so that an input array which is reverse
// sorted does not cause O(n^2) running time.
var o=Math.round(n+Math.random()*(i-n)),s=n-1;a(t,o,i);// Immediately after `j` is incremented in this loop, the following hold
// true:
//
//   * Every element in `ary[p .. i]` is less than or equal to the pivot.
//
//   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
for(var l=t[i],c=n;c<i;c++)0>=r(t[c],l)&&a(t,s+=1,c);a(t,s+1,c);var u=s+1;// (2) Recurse on each half.
e(t,r,n,u-1),e(t,r,u+1,i)}}(e,t,0,e.length-1)}}),D("alFpf",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0})}),D("26zXT",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0})}),D("8CGwX",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0})}),D("9Cxbq",function(e,t){var r,n=e.exports&&e.exports.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.JSONHelper=e.exports.JSONArray=e.exports.JSONObject=void 0;var a=A("cWKy2"),i=A("1Mugs"),o=/** @class */function(){function e(e){this._value=e}return e.prototype.getValue=function(){return this._value},e}(),s=/** @class */function(e){function t(t){return e.call(this,t)||this}return n(t,e),t}(o),l=/** @class */function(e){function t(t){return e.call(this,t)||this}return n(t,e),t}(o),c=/** @class */function(e){function t(t){return e.call(this,t)||this}return n(t,e),t.prototype.toString=function(){var e=this.getValue();return null!=e?JSON.stringify(e.toString()):"null"},t}(o),u=/** @class */function(e){function t(t){return e.call(this,t)||this}return n(t,e),t}(o),d=/** @class */function(e){function t(t){return e.call(this,t)||this}return n(t,e),t.prototype.toString=function(){var e=this.getValue();return null!=e?e.toString():"null"},t}(o),f=/** @class */function(e){function t(){return e.call(this,null)||this}return n(t,e),t.prototype.toString=function(){return"null"},t}(o),p=/** @class */function(){function e(){}return e.toJSONType=function(e){if(null===e)return new f;if("string"==typeof e)return new c(e);if("number"==typeof e)return new l(e);if("boolean"==typeof e)return new s(e);if(e instanceof h)return new u(e);throw Error("Type not supported for value: "+e)},e}(),h=/** @class */function(){function e(){this.values=new i.SimpleMap}return e.prototype.addBoolean=function(t,r){return this.checkName(t),e.checkValue(r),this.values.put(t,new s(r)),this},e.prototype.addNumber=function(t,r){return this.checkName(t),e.checkValue(r),this.values.put(t,new l(r)),this},e.prototype.addString=function(t,r){return this.checkName(t),e.checkValue(r),this.values.put(t,new c(r)),this},e.prototype.addNull=function(e){return this.checkName(e),this.values.put(e,new f),this},e.prototype.addArray=function(t,r){if(this.checkName(t),e.checkValue(r),null==r)throw Error("Cannot add array as null");return this.values.put(t,new d(r)),this},e.prototype.addObject=function(t,r){if(this.checkName(t),e.checkValue(r),null==r)throw Error("Cannot add object as null");return this.values.put(t,new u(r)),this},e.prototype.toString=function(e){var t=this;void 0===e&&(e=!1);var r=!1,n=new i.StringBuilder;return n.append("{"),this.values.keys().forEach(function(e){var a=t.values.get(e);null!=a&&(r&&n.append(","),n.append('"').append(e).append('":').append(a.toString()),r=!0)}),n.append("}"),n.toString()},e.prototype.checkName=function(e){if(null==e||void 0===e)throw Error("Name is null or undefined");if(this.values.exists(e))throw Error("Name "+e+" is already present for this object")},e.checkValue=function(e){if(void 0===e)throw Error("Value is undefined")},e}();e.exports.JSONObject=h;var b=/** @class */function(){function e(){this.objects=[]}return e.prototype.add=function(e){if(void 0===e)throw Error("Object is not allowed to be undefined");return this.objects.push(p.toJSONType(e)),this},e.prototype.toString=function(e){void 0===e&&(e=!1);var t=new i.StringBuilder;return t.append("["),this.objects.forEach(function(e,r){r>0&&t.append(","),t.append(e.toString())}),t.append("]"),t.toString()},e}();e.exports.JSONArray=b;/**
 * Utility class that helps us convert things to and from json (not for normal usage).
 */var y=/** @class */function(){function e(){}return e.categoryToJSON=function(t,r){/*
         {
         "categories":
         [
         { id=1,
         name: "x",
         parent: null,
         logLevel: "Error"
         },
         { id=2,
         name: "y",
         parent: 1,
         logLevel: "Error"
         }
         ]
         }
         */var n=new b;e._categoryToJSON(t,n,r);var a=new h;return a.addArray("categories",n),a},e._categoryToJSON=function(t,r,n){var i=new h;i.addNumber("id",t.id),i.addString("name",t.name),i.addString("logLevel",a.LogLevel[t.logLevel].toString()),null!=t.parent?i.addNumber("parent",t.parent.id):i.addNull("parent"),r.add(i),n&&t.children.forEach(function(t){e._categoryToJSON(t,r,n)})},e}();e.exports.JSONHelper=y}),D("cWKy2",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.CategoryLogFormat=e.exports.LogFormat=e.exports.DateFormat=e.exports.DateFormatEnum=e.exports.LoggerType=e.exports.LogLevel=void 0,(r=e.exports.LogLevel||(e.exports.LogLevel={}))[r.Trace=0]="Trace",r[r.Debug=1]="Debug",r[r.Info=2]="Info",r[r.Warn=3]="Warn",r[r.Error=4]="Error",r[r.Fatal=5]="Fatal",(n=e.exports.LogLevel||(e.exports.LogLevel={})).fromString=/**
     * Returns LogLevel based on string representation
     * @param val Value
     * @returns {LogLevel}, Error is thrown if invalid.
     */function(e){if(null==e)throw Error("Argument must be set");switch(e.toLowerCase()){case"trace":return n.Trace;case"debug":return n.Debug;case"info":return n.Info;case"warn":return n.Warn;case"error":return n.Error;case"fatal":return n.Fatal;default:throw Error("Unsupported value for conversion: "+e)}},(a=e.exports.LoggerType||(e.exports.LoggerType={}))[a.Console=0]="Console",a[a.MessageBuffer=1]="MessageBuffer",a[a.Custom=2]="Custom",/**
     * Displays as: year-month-day hour:minute:second,millis -> 1999-02-12 23:59:59,123
     * Note the date separator can be set separately.
     */(i=s=e.exports.DateFormatEnum||(e.exports.DateFormatEnum={}))[i.Default=0]="Default",/**
     * Displays as: year-month-day hour:minute:second -> 1999-02-12 23:59:59
     * Note the date separator can be set separately.
     */i[i.YearMonthDayTime=1]="YearMonthDayTime",/**
     * Displays as: year-day-month hour:minute:second,millis -> 1999-12-02 23:59:59,123
     * Note the date separator can be set separately.
     */i[i.YearDayMonthWithFullTime=2]="YearDayMonthWithFullTime",/**
     * Displays as: year-day-month hour:minute:second -> 1999-12-02 23:59:59
     * Note the date separator can be set separately.
     */i[i.YearDayMonthTime=3]="YearDayMonthTime",(o=s=e.exports.DateFormatEnum||(e.exports.DateFormatEnum={})).fromString=/**
     * Returns LogLevel based on string representation
     * @param val Value
     * @returns {LogLevel}, Error is thrown if invalid.
     */function(e){if(null==e)throw Error("Argument must be set");switch(e.toLowerCase()){case"default":return o.Default;case"yearmonthdayTime":return o.YearMonthDayTime;case"yeardaymonthwithfulltime":return o.YearDayMonthWithFullTime;case"yeardaymonthtime":return o.YearDayMonthTime;default:throw Error("Unsupported value for conversion: "+e)}};/* tslint:disable:enable-namespace *//**
 * DateFormat class, stores data on how to format a date.
 */var r,n,a,i,o,s,l=/** @class */function(){/**
     * Constructor to define the dateformat used for logging, can be called empty as it uses defaults.
     * @param formatEnum DateFormatEnum, use one of the constants from the enum. Defaults to DateFormatEnum.Default
     * @param dateSeparator Separator used between dates, defaults to -
     */function e(e,t){void 0===e&&(e=s.Default),void 0===t&&(t="-"),this._formatEnum=e,this._dateSeparator=t}return Object.defineProperty(e.prototype,"formatEnum",{get:function(){return this._formatEnum},set:function(e){this._formatEnum=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"dateSeparator",{get:function(){return this._dateSeparator},set:function(e){this._dateSeparator=e},enumerable:!1,configurable:!0}),e.prototype.copy=function(){return new e(this._formatEnum,this._dateSeparator)},e}();e.exports.DateFormat=l;/**
 * Information about the log format, what will a log line look like?
 */var c=/** @class */function(){/**
     * Constructor to create a LogFormat. Can be created without parameters where it will use sane defaults.
     * @param dateFormat DateFormat (what needs the date look like in the log line)
     * @param showTimeStamp Show date timestamp at all?
     * @param showLoggerName Show the logger name?
     */function e(e,t,r){void 0===e&&(e=new l),void 0===t&&(t=!0),void 0===r&&(r=!0),this._showTimeStamp=!0,this._showLoggerName=!0,this._dateFormat=e,this._showTimeStamp=t,this._showLoggerName=r}return Object.defineProperty(e.prototype,"dateFormat",{get:function(){return this._dateFormat},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"showTimeStamp",{get:function(){return this._showTimeStamp},set:function(e){this._showTimeStamp=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"showLoggerName",{get:function(){return this._showLoggerName},set:function(e){this._showLoggerName=e},enumerable:!1,configurable:!0}),e}();e.exports.LogFormat=c;/**
 * Information about the log format, what will a log line look like?
 */var u=/** @class */function(){/**
     * Create an instance defining the category log format used.
     * @param dateFormat Date format (uses default), for details see DateFormat class.
     * @param showTimeStamp True to show timestamp in the logging, defaults to true.
     * @param showCategoryName True to show category name in the logging, defaults to true.
     */function e(e,t,r){void 0===e&&(e=new l),void 0===t&&(t=!0),void 0===r&&(r=!0),this._dateFormat=e,this._showTimeStamp=t,this._showCategoryName=r}return Object.defineProperty(e.prototype,"dateFormat",{get:function(){return this._dateFormat},set:function(e){this._dateFormat=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"showTimeStamp",{get:function(){return this._showTimeStamp},set:function(e){this._showTimeStamp=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"showCategoryName",{get:function(){return this._showCategoryName},set:function(e){this._showCategoryName=e},enumerable:!1,configurable:!0}),e.prototype.copy=function(){return new e(this._dateFormat.copy(),this._showTimeStamp,this._showCategoryName)},e}();e.exports.CategoryLogFormat=u}),D("1Mugs",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.StringBuilder=e.exports.TuplePair=e.exports.SimpleMap=e.exports.LinkedList=void 0;var r=/** @class */function(){function e(e){this._previous=null,this._next=null,this._value=e}return Object.defineProperty(e.prototype,"previous",{get:function(){return this._previous},set:function(e){this._previous=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"next",{get:function(){return this._next},set:function(e){this._next=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this._value},enumerable:!1,configurable:!0}),e}(),n=/** @class */function(){function e(){this.head=null,this.size=0}return e.prototype.addHead=function(e){if(!this.createHeadIfNeeded(e)){if(null!=this.head){var t=this.head.next,n=new r(e);null!=t&&(t.previous=n,n.next=t),this.head=n}else throw Error("This should never happen, list implementation broken")}this.size++},e.prototype.addTail=function(e){if(!this.createHeadIfNeeded(e)){var t=this.getTailNode();if(null!=t){var n=new r(e);t.next=n,n.previous=t}else throw Error("List implementation broken")}this.size++},e.prototype.clear=function(){this.head=null,this.size=0},e.prototype.getHead=function(){return null!=this.head?this.head.value:null},e.prototype.removeHead=function(){if(null!=this.head){var e=this.head,t=e.value;return this.head=e.next,this.size--,t}return null},e.prototype.getTail=function(){var e=this.getTailNode();return null!=e?e.value:null},e.prototype.removeTail=function(){var e=this.getTailNode();if(null!=e){if(e===this.head)this.head=null;else{var t=e.previous;if(null!=t)t.next=null;else throw Error("List implementation is broken")}return this.size--,e.value}return null},e.prototype.getSize=function(){return this.size},e.prototype.filter=function(e){var t=function(e,r,n){e(r.value)&&n.push(r.value);var a=r.next;null!=a&&t(e,a,n)},r=[],n=this.head;return null!=n&&t(e,n,r),r},e.prototype.createHeadIfNeeded=function(e){return null==this.head&&(this.head=new r(e),!0)},e.prototype.getTailNode=function(){if(null==this.head)return null;for(var e=this.head;null!=e.next;)e=e.next;return e},e}();e.exports.LinkedList=n;/**
 * Map implementation keyed by string (always).
 */var a=/** @class */function(){function e(){this.array={}}return e.prototype.put=function(e,t){this.array[e]=t},e.prototype.get=function(e){return this.array[e]},e.prototype.exists=function(e){return void 0!==this.array[e]},e.prototype.remove=function(e){var t=this.array[e];return void 0!==t&&delete this.array[e],t},e.prototype.keys=function(){var e=[];for(var t in this.array)this.array.hasOwnProperty(t)&&e.push(t);return e},e.prototype.values=function(){var e=[];for(var t in this.array)this.array.hasOwnProperty(t)&&e.push(this.get(t));return e},e.prototype.size=function(){return this.keys().length},e.prototype.isEmpty=function(){return 0===this.size()},e.prototype.clear=function(){this.array={}},e.prototype.forEach=function(e){var t=0;for(var r in this.array)if(this.array.hasOwnProperty(r)){var n=this.array[r];e(r,n,t),t++}},e.prototype.forEachValue=function(e){var t=0;for(var r in this.array)this.array.hasOwnProperty(r)&&(e(this.array[r],t),t++)},e}();e.exports.SimpleMap=a;/**
 * Tuple to hold two values.
 */var i=/** @class */function(){function e(e,t){this._x=e,this._y=t}return Object.defineProperty(e.prototype,"x",{get:function(){return this._x},set:function(e){this._x=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this._y},set:function(e){this._y=e},enumerable:!1,configurable:!0}),e}();e.exports.TuplePair=i;/**
 * Utility class to build up a string.
 */var o=/** @class */function(){function e(){this.data=[]}return e.prototype.append=function(e){if(void 0===e||null==e)throw Error("String must be set, cannot append null or undefined");return this.data.push(e),this},e.prototype.appendLine=function(e){return this.data.push(e+"\n"),this},e.prototype.isEmpty=function(){return 0===this.data.length},e.prototype.clear=function(){this.data=[]},e.prototype.toString=function(e){return void 0===e&&(e=""),this.data.join(e)},e}();e.exports.StringBuilder=o}),D("7QuGE",function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.validateBasic=t.wNAF=void 0;var r=A("5As9X"),n=A("c4RgN");let a=BigInt(0),i=BigInt(1);t.wNAF=// Elliptic curve multiplication of Point by scalar. Fragile.
// Scalars should always be less than curve order: this should be checked inside of a curve itself.
// Creates precomputation tables for fast multiplication:
// - private scalar is split by fixed size windows of W bits
// - every window point is collected from window's table & added to accumulator
// - since windows are different, same point inside tables won't be accessed more than once per calc
// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
// - +1 window is neccessary for wNAF
// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
// windows to be in different memory locations
function(e,t){let r=(e,t)=>{let r=t.negate();return e?r:t},n=e=>{let r=Math.ceil(t/e)+1;// +1, because
return{windows:r,windowSize:2**(e-1)}};return{constTimeNegate:r,// non-const time multiplication ladder
unsafeLadder(t,r){let n=e.ZERO,o=t;for(;r>a;)r&i&&(n=n.add(o)),o=o.double(),r>>=i;return n},/**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */precomputeWindow(e,t){let{windows:r,windowSize:a}=n(t),i=[],o=e,s=o;for(let e=0;e<r;e++){s=o,i.push(s);// =1, because we skip zero
for(let e=1;e<a;e++)s=s.add(o),i.push(s);o=s.double()}return i},/**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */wNAF(t,a,o){// TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
// But need to carefully remove other checks before wNAF. ORDER == bits here
let{windows:s,windowSize:l}=n(t),c=e.ZERO,u=e.BASE,d=BigInt(2**t-1),f=2**t,p=BigInt(t);for(let e=0;e<s;e++){let t=e*l,n=Number(o&d);// Shift number by W bits.
o>>=p,n>l&&(n-=f,o+=i);let s=t+Math.abs(n)-1,h=e%2!=0,b=n<0;// -1 because we skip zero
0===n?u=u.add(r(h,a[t])):c=c.add(r(b,a[s]))}// JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
// Even if the variable is still unused, there are some checks which will
// throw an exception, so compiler needs to prove they won't happen, which is hard.
// At this point there is a way to F be infinity-point even if p is not,
// which makes it less const-time: around 1 bigint multiply.
return{p:c,f:u}},wNAFCached(e,t,r,n){// @ts-ignore
let a=e._WINDOW_SIZE||1,i=t.get(e);return i||(i=this.precomputeWindow(e,a),1!==a&&t.set(e,n(i))),this.wNAF(a,i,r)}}},t.validateBasic=function(e){// Set defaults
return(0,r.validateField)(e.Fp),(0,n.validateObject)(e,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...(0,r.nLength)(e.n,e.nBitLength),...e,p:e.Fp.ORDER})}}),D("5As9X",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.mapHashToField=e.exports.getMinHashLength=e.exports.getFieldBytesLength=e.exports.hashToPrivateScalar=e.exports.FpSqrtEven=e.exports.FpSqrtOdd=e.exports.Field=e.exports.nLength=e.exports.FpIsSquare=e.exports.FpDiv=e.exports.FpInvertBatch=e.exports.FpPow=e.exports.validateField=e.exports.isNegativeLE=e.exports.FpSqrt=e.exports.tonelliShanks=e.exports.invert=e.exports.pow2=e.exports.pow=e.exports.mod=void 0;var r=A("c4RgN");// prettier-ignore
let n=BigInt(0),a=BigInt(1),i=BigInt(2),o=BigInt(3),s=BigInt(4),l=BigInt(5),c=BigInt(8);// Calculates a modulo b
function u(e,t){let r=e%t;return r>=n?r:t+r}/**
 * Efficiently raise num to power and do modular division.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 * @example
 * pow(2n, 6n, 11n) // 64n % 11n == 9n
 */// TODO: use field version && remove
function d(e,t,r){if(r<=n||t<n)throw Error("Expected power/modulo > 0");if(r===a)return n;let i=a;for(;t>n;)t&a&&(i=i*e%r),e=e*e%r,t>>=a;return i}// Inverses number over modulo
function f(e,t){if(e===n||t<=n)throw Error(`invert: expected positive integers, got n=${e} mod=${t}`);// Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
// Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
let r=u(e,t),i=t,o=n,s=a,l=a,c=n;for(;r!==n;){// JIT applies optimization if those two lines follow each other
let e=i/r,t=i%r,n=o-l*e,a=s-c*e;// prettier-ignore
i=r,r=t,o=l,s=c,l=n,c=a}let d=i;if(d!==a)throw Error("invert: does not exist");return u(o,t)}/**
 * Tonelli-Shanks square root search algorithm.
 * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
 * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
 * Will start an infinite loop if field order P is not prime.
 * @param P field order
 * @returns function that takes field Fp (created from P) and number n
 */function p(e){let t,r,o;// Legendre constant: used to calculate Legendre symbol (a | p),
// which denotes the value of a^((p-1)/2) (mod p).
// (a | p) ≡ 1    if a is a square (mod p)
// (a | p) ≡ -1   if a is not a square (mod p)
// (a | p) ≡ 0    if a ≡ 0 (mod p)
let l=(e-a)/i;// Step 1: By factoring out powers of 2 from p - 1,
// find q and s such that p - 1 = q*(2^s) with q odd
for(t=e-a,r=0;t%i===n;t/=i,r++);// Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
for(o=i;o<e&&d(o,l,e)!==e-a;o++);// Fast-path
if(1===r){let t=(e+a)/s;return function(e,r){let n=e.pow(r,t);if(!e.eql(e.sqr(n),r))throw Error("Cannot find square root");return n}}// Slow-path
let c=(t+a)/i;return function(e,n){// Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
if(e.pow(n,l)===e.neg(e.ONE))throw Error("Cannot find square root");let i=r,s=e.pow(e.mul(e.ONE,o),t),u=e.pow(n,c),d=e.pow(n,t);for(;!e.eql(d,e.ONE);){if(e.eql(d,e.ZERO))return e.ZERO;// https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
// Find m such b^(2^m)==1
let t=1;for(let r=e.sqr(d);t<i&&!e.eql(r,e.ONE);t++)r=e.sqr(r);// t2 *= t2
// NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
let r=e.pow(s,a<<BigInt(i-t-1));// ge = 2^(r-m-1)
s=e.sqr(r),u=e.mul(u,r),d=e.mul(d,s),i=t}return u}}function h(e){// NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
// For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
// P ≡ 3 (mod 4)
// √n = n^((P+1)/4)
if(e%s===o){// Not all roots possible!
// const ORDER =
//   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
// const NUM = 72057594037927816n;
let t=(e+a)/s;return function(e,r){let n=e.pow(r,t);// Throw if root**2 != n
if(!e.eql(e.sqr(n),r))throw Error("Cannot find square root");return n}}// Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
if(e%c===l){let t=(e-l)/c;return function(e,r){let n=e.mul(r,i),a=e.pow(n,t),o=e.mul(r,a),s=e.mul(e.mul(o,i),a),l=e.mul(o,e.sub(s,e.ONE));if(!e.eql(e.sqr(l),r))throw Error("Cannot find square root");return l}}// Other cases: Tonelli-Shanks algorithm
return p(e)}BigInt(9),BigInt(16),e.exports.mod=u,e.exports.pow=d,e.exports.pow2=// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
function(e,t,r){let a=e;for(;t-- >n;)a*=a,a%=r;return a},e.exports.invert=f,e.exports.tonelliShanks=p,e.exports.FpSqrt=h,e.exports.isNegativeLE=(e,t)=>(u(e,t)&a)===a;// prettier-ignore
let b=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];// Generic field functions
/**
 * Same as `pow` but for Fp: non-constant-time.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 */function y(e,t,r){// Should have same speed as pow for bigints
// TODO: benchmark!
if(r<n)throw Error("Expected power > 0");if(r===n)return e.ONE;if(r===a)return t;let i=e.ONE,o=t;for(;r>n;)r&a&&(i=e.mul(i,o)),o=e.sqr(o),r>>=a;return i}/**
 * Efficiently invert an array of Field elements.
 * `inv(0)` will return `undefined` here: make sure to throw an error.
 */function m(e,t){let r=Array(t.length),n=t.reduce((t,n,a)=>e.is0(n)?t:(r[a]=t,e.mul(t,n)),e.ONE),a=e.inv(n);return(// Walk from last to first, multiply them by inverted each other MOD p
t.reduceRight((t,n,a)=>e.is0(n)?t:(r[a]=e.mul(t,r[a]),e.mul(t,n)),a),r)}// CURVE.n lengths
function g(e,t){// Bit size, byte size of CURVE.n
let r=void 0!==t?t:e.toString(2).length,n=Math.ceil(r/8);return{nBitLength:r,nByteLength:n}}/**
 * Returns total number of bytes consumed by the field element.
 * For example, 32 bytes for usual 256-bit weierstrass curve.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of field
 */function v(e){if("bigint"!=typeof e)throw Error("field order must be bigint");let t=e.toString(2).length;return Math.ceil(t/8)}/**
 * Returns minimal amount of bytes that can be safely reduced
 * by field order.
 * Should be 2^-128 for 128-bit curve such as P256.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of target hash
 */function x(e){let t=v(e);return t+Math.ceil(t/2)}e.exports.validateField=function(e){let t=b.reduce((e,t)=>(e[t]="function",e),{ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"});return(0,r.validateObject)(e,t)},e.exports.FpPow=y,e.exports.FpInvertBatch=m,e.exports.FpDiv=function(e,t,r){return e.mul(t,"bigint"==typeof r?f(r,e.ORDER):e.inv(r))},e.exports.FpIsSquare=// This function returns True whenever the value x is a square in the field F.
function(e){let t=(e.ORDER-a)/i;// Integer arithmetic
return r=>{let n=e.pow(r,t);return e.eql(n,e.ZERO)||e.eql(n,e.ONE)}},e.exports.nLength=g,e.exports.Field=/**
 * Initializes a finite field over prime. **Non-primes are not supported.**
 * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
 * Major performance optimizations:
 * * a) denormalized operations like mulN instead of mul
 * * b) same object shape: never add or remove keys
 * * c) Object.freeze
 * @param ORDER prime positive bigint
 * @param bitLen how many bits the field consumes
 * @param isLE (def: false) if encoding / decoding should be in little-endian
 * @param redef optional faster redefinitions of sqrt and other methods
 */function(e,t,i=!1,o={}){if(e<=n)throw Error(`Expected Field ORDER > 0, got ${e}`);let{nBitLength:s,nByteLength:l}=g(e,t);if(l>2048)throw Error("Field lengths over 2048 bytes are not supported");let c=h(e),d=Object.freeze({ORDER:e,BITS:s,BYTES:l,MASK:(0,r.bitMask)(s),ZERO:n,ONE:a,create:t=>u(t,e),isValid:t=>{if("bigint"!=typeof t)throw Error(`Invalid field element: expected bigint, got ${typeof t}`);return n<=t&&t<e;// 0 is valid element, but it's not invertible
},is0:e=>e===n,isOdd:e=>(e&a)===a,neg:t=>u(-t,e),eql:(e,t)=>e===t,sqr:t=>u(t*t,e),add:(t,r)=>u(t+r,e),sub:(t,r)=>u(t-r,e),mul:(t,r)=>u(t*r,e),pow:(e,t)=>y(d,e,t),div:(t,r)=>u(t*f(r,e),e),// Same as above, but doesn't normalize
sqrN:e=>e*e,addN:(e,t)=>e+t,subN:(e,t)=>e-t,mulN:(e,t)=>e*t,inv:t=>f(t,e),sqrt:o.sqrt||(e=>c(d,e)),invertBatch:e=>m(d,e),// TODO: do we really need constant cmov?
// We don't have const-time bigints anyway, so probably will be not very useful
cmov:(e,t,r)=>r?t:e,toBytes:e=>i?(0,r.numberToBytesLE)(e,l):(0,r.numberToBytesBE)(e,l),fromBytes:e=>{if(e.length!==l)throw Error(`Fp.fromBytes: expected ${l}, got ${e.length}`);return i?(0,r.bytesToNumberLE)(e):(0,r.bytesToNumberBE)(e)}});return Object.freeze(d)},e.exports.FpSqrtOdd=function(e,t){if(!e.isOdd)throw Error("Field doesn't have isOdd");let r=e.sqrt(t);return e.isOdd(r)?r:e.neg(r)},e.exports.FpSqrtEven=function(e,t){if(!e.isOdd)throw Error("Field doesn't have isOdd");let r=e.sqrt(t);return e.isOdd(r)?e.neg(r):r},e.exports.hashToPrivateScalar=/**
 * "Constant-time" private key generation utility.
 * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).
 * Which makes it slightly more biased, less secure.
 * @deprecated use mapKeyToField instead
 */function(e,t,n=!1){e=(0,r.ensureBytes)("privateHash",e);let i=e.length,o=g(t).nByteLength+8;if(o<24||i<o||i>1024)throw Error(`hashToPrivateScalar: expected ${o}-1024 bytes of input, got ${i}`);let s=n?(0,r.bytesToNumberLE)(e):(0,r.bytesToNumberBE)(e);return u(s,t-a)+a},e.exports.getFieldBytesLength=v,e.exports.getMinHashLength=x,e.exports.mapHashToField=/**
 * "Constant-time" private key generation utility.
 * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
 * and convert them into private scalar, with the modulo bias being negligible.
 * Needs at least 48 bytes of input for 32-byte private key.
 * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
 * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
 * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
 * @param hash hash output from SHA3 or a similar function
 * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
 * @param isLE interpret hash bytes as LE num
 * @returns valid private scalar
 */function(e,t,n=!1){let i=e.length,o=v(t),s=x(t);// No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
if(i<16||i<s||i>1024)throw Error(`expected ${s}-1024 bytes of input, got ${i}`);let l=n?(0,r.bytesToNumberBE)(e):(0,r.bytesToNumberLE)(e),c=u(l,t-a)+a;return n?(0,r.numberToBytesLE)(c,o):(0,r.numberToBytesBE)(c,o)}}),D("c4RgN",function(e,t){Object.defineProperty(e.exports,"__esModule",{value:!0}),e.exports.validateObject=e.exports.createHmacDrbg=e.exports.bitMask=e.exports.bitSet=e.exports.bitGet=e.exports.bitLen=e.exports.utf8ToBytes=e.exports.equalBytes=e.exports.concatBytes=e.exports.ensureBytes=e.exports.numberToVarBytesBE=e.exports.numberToBytesLE=e.exports.numberToBytesBE=e.exports.bytesToNumberLE=e.exports.bytesToNumberBE=e.exports.hexToBytes=e.exports.hexToNumber=e.exports.numberToHexUnpadded=e.exports.bytesToHex=e.exports.isBytes=void 0;/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */// 100 lines of code in the file are duplicated from noble-hashes (utils).
// This is OK: `abstract` directory does not use noble-hashes.
// User may opt-in into using different hashing library. This way, noble-hashes
// won't be included into their bundle.
let r=BigInt(0),n=BigInt(1),a=BigInt(2);function i(e){return e instanceof Uint8Array||null!=e&&"object"==typeof e&&"Uint8Array"===e.constructor.name}e.exports.isBytes=i;// Array where index 0xf0 (240) is mapped to string 'f0'
let o=/* @__PURE__ */Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */function s(e){if(!i(e))throw Error("Uint8Array expected");// pre-caching improves the speed 6x
let t="";for(let r=0;r<e.length;r++)t+=o[e[r]];return t}function l(e){let t=e.toString(16);return 1&t.length?`0${t}`:t}function c(e){if("string"!=typeof e)throw Error("hex string expected, got "+typeof e);// Big Endian
return BigInt(""===e?"0":`0x${e}`)}e.exports.bytesToHex=s,e.exports.numberToHexUnpadded=l,e.exports.hexToNumber=c;// We use optimized technique to convert hex string to byte array
let u={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function d(e){return e>=u._0&&e<=u._9?e-u._0:e>=u._A&&e<=u._F?e-(u._A-10):e>=u._a&&e<=u._f?e-(u._a-10):void 0}/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */function f(e){if("string"!=typeof e)throw Error("hex string expected, got "+typeof e);let t=e.length,r=t/2;if(t%2)throw Error("padded hex string expected, got unpadded hex of length "+t);let n=new Uint8Array(r);for(let t=0,a=0;t<r;t++,a+=2){let r=d(e.charCodeAt(a)),i=d(e.charCodeAt(a+1));if(void 0===r||void 0===i){let t=e[a]+e[a+1];throw Error('hex string expected, got non-hex character "'+t+'" at index '+a)}n[t]=16*r+i}return n}function p(e,t){return f(e.toString(16).padStart(2*t,"0"))}/**
 * Copies several Uint8Arrays into one.
 */function h(...e){let t=0;for(let r=0;r<e.length;r++){let n=e[r];if(!i(n))throw Error("Uint8Array expected");t+=n.length}let r=new Uint8Array(t),n=0;for(let t=0;t<e.length;t++){let a=e[t];r.set(a,n),n+=a.length}return r}e.exports.hexToBytes=f,e.exports.bytesToNumberBE=// BE: Big Endian, LE: Little Endian
function(e){return c(s(e))},e.exports.bytesToNumberLE=function(e){if(!i(e))throw Error("Uint8Array expected");return c(s(Uint8Array.from(e).reverse()))},e.exports.numberToBytesBE=p,e.exports.numberToBytesLE=function(e,t){return p(e,t).reverse()},e.exports.numberToVarBytesBE=// Unpadded, rarely used
function(e){return f(l(e))},e.exports.ensureBytes=/**
 * Takes hex string or Uint8Array, converts to Uint8Array.
 * Validates output length.
 * Will throw error for other types.
 * @param title descriptive title for an error e.g. 'private key'
 * @param hex hex string or Uint8Array
 * @param expectedLength optional, will compare to result array's length
 * @returns
 */function(e,t,r){let n;if("string"==typeof t)try{n=f(t)}catch(r){throw Error(`${e} must be valid hex string, got "${t}". Cause: ${r}`)}else if(i(t))// is instance of Uint8Array, and its slice() creates **mutable** copy
n=Uint8Array.from(t);else throw Error(`${e} must be hex string or Uint8Array`);let a=n.length;if("number"==typeof r&&a!==r)throw Error(`${e} expected ${r} bytes, got ${a}`);return n},e.exports.concatBytes=h,e.exports.equalBytes=// Compares 2 u8a-s in kinda constant time
function(e,t){if(e.length!==t.length)return!1;let r=0;for(let n=0;n<e.length;n++)r|=e[n]^t[n];return 0===r},e.exports.utf8ToBytes=/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */function(e){if("string"!=typeof e)throw Error(`utf8ToBytes expected string, got ${typeof e}`);return new Uint8Array(new TextEncoder().encode(e));// https://bugzil.la/1681809
},e.exports.bitLen=// Bit operations
/**
 * Calculates amount of bits in a bigint.
 * Same as `n.toString(2).length`
 */function(e){let t;for(t=0;e>r;e>>=n,t+=1);return t},e.exports.bitGet=/**
 * Gets single bit at position.
 * NOTE: first bit position is 0 (same as arrays)
 * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
 */function(e,t){return e>>BigInt(t)&n},e.exports.bitSet=(e,t,a)=>e|(a?n:r)<<BigInt(t),e.exports.bitMask=e=>(a<<BigInt(e-1))-n;// DRBG
let b=e=>new Uint8Array(e),y=e=>Uint8Array.from(e);// creates Uint8Array
e.exports.createHmacDrbg=/**
 * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
 * @returns function that will call DRBG until 2nd arg returns something meaningful
 * @example
 *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
 *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
 */function(e,t,r){if("number"!=typeof e||e<2)throw Error("hashLen must be a number");if("number"!=typeof t||t<2)throw Error("qByteLen must be a number");if("function"!=typeof r)throw Error("hmacFn must be a function");// Step B, Step C: set hashLen to 8*ceil(hlen/8)
let n=b(e),a=b(e),i=0,o=()=>{n.fill(1),a.fill(0),i=0},s=(...e)=>r(a,n,...e),l=(e=b())=>{// HMAC-DRBG reseed() function. Steps D-G
a=s(y([0]),e),n=s(),0!==e.length&&(a=s(y([1]),e),n=s())},c=()=>{// HMAC-DRBG generate() function
if(i++>=1e3)throw Error("drbg: tried 1000 values");let e=0,r=[];for(;e<t;){n=s();let t=n.slice();r.push(t),e+=n.length}return h(...r)};// Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
return(e,t)=>{let r;for(o(),l(e);!(r=t(c()));)l();return o(),r}};// Validating curves and fields
let m={bigint:e=>"bigint"==typeof e,function:e=>"function"==typeof e,boolean:e=>"boolean"==typeof e,string:e=>"string"==typeof e,stringOrUint8Array:e=>"string"==typeof e||i(e),isSafeInteger:e=>Number.isSafeInteger(e),array:e=>Array.isArray(e),field:(e,t)=>t.Fp.isValid(e),hash:e=>"function"==typeof e&&Number.isSafeInteger(e.outputLen)};e.exports.validateObject=// type Record<K extends string | number | symbol, T> = { [P in K]: T; }
function(e,t,r={}){let n=(t,r,n)=>{let a=m[r];if("function"!=typeof a)throw Error(`Invalid validator "${r}", expected function`);let i=e[t];if((!n||void 0!==i)&&!a(i,e))throw Error(`Invalid param ${String(t)}=${i} (${typeof i}), expected ${r}`)};for(let[e,r]of Object.entries(t))n(e,r,!1);for(let[e,t]of Object.entries(r))n(e,t,!0);return e};// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
// // Should fail type-check
// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });
});var C={};C=A("1b2ls");var F={};!// DCE check should happen before ReactDOM bundle executes so that
// DevTools can report bad minification during injection.
function e(){/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{// Verify that the code above has been dead code eliminated (DCE'd).
__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){// DevTools shouldn't crash React, no matter what.
// We should still report in case we break this code.
console.error(e)}}(),S=(F=A("Xw6Mv")).createRoot,F.hydrateRoot;var Z=A("acw62");/*! MIT License © Sindre Sorhus */// eslint-lint-disable-next-line @typescript-eslint/naming-convention
class q extends Error{constructor(e,t,r){let n=e.status||0===e.status?e.status:"",a=e.statusText||"",i=`${n} ${a}`.trim(),o=i?`status code ${i}`:"an unknown error";super(`Request failed with ${o}`),Object.defineProperty(this,"response",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"request",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"options",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.name="HTTPError",this.response=e,this.request=t,this.options=r}}class G extends Error{constructor(e){super("Request timed out"),Object.defineProperty(this,"request",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.name="TimeoutError",this.request=e}}// eslint-disable-next-line @typescript-eslint/ban-types
const W=e=>null!==e&&"object"==typeof e,Y=(...e)=>{for(let t of e)if((!W(t)||Array.isArray(t))&&void 0!==t)throw TypeError("The `options` argument must be an object");return J({},...e)},K=(e={},t={})=>{let r=new globalThis.Headers(e),n=t instanceof globalThis.Headers,a=new globalThis.Headers(t);for(let[e,t]of a.entries())n&&"undefined"===t||void 0===t?r.delete(e):r.set(e,t);return r},J=(...e)=>{let t={},r={};for(let n of e)if(Array.isArray(n))Array.isArray(t)||(t=[]),t=[...t,...n];else if(W(n)){for(let[e,r]of Object.entries(n))W(r)&&e in t&&(r=J(t[e],r)),t={...t,[e]:r};W(n.headers)&&(r=K(r,n.headers),t.headers=r)}return t},Q=(()=>{let e=!1,t=!1,r="function"==typeof globalThis.ReadableStream,n="function"==typeof globalThis.Request;return r&&n&&(t=new globalThis.Request("https://empty.invalid",{body:new globalThis.ReadableStream,method:"POST",// @ts-expect-error - Types are outdated.
get duplex(){return e=!0,"half"}}).headers.has("Content-Type")),e&&!t})(),_="function"==typeof globalThis.AbortController,$="function"==typeof globalThis.ReadableStream,ee="function"==typeof globalThis.FormData,et=["get","post","put","patch","head","delete"],er={json:"application/json",text:"text/*",formData:"multipart/form-data",arrayBuffer:"*/*",blob:"*/*"},en=Symbol("stop"),ea={json:!0,parseJson:!0,searchParams:!0,prefixUrl:!0,retry:!0,timeout:!0,hooks:!0,throwHttpErrors:!0,onDownloadProgress:!0,fetch:!0},ei=e=>et.includes(e)?e.toUpperCase():e,eo=[413,429,503],es={limit:2,methods:["get","put","head","delete","options","trace"],statusCodes:[408,413,429,500,502,503,504],afterStatusCodes:eo,maxRetryAfter:Number.POSITIVE_INFINITY,backoffLimit:Number.POSITIVE_INFINITY,delay:e=>.3*2**(e-1)*1e3},el=(e={})=>{if("number"==typeof e)return{...es,limit:e};if(e.methods&&!Array.isArray(e.methods))throw Error("retry.methods must be an array");if(e.statusCodes&&!Array.isArray(e.statusCodes))throw Error("retry.statusCodes must be an array");return{...es,...e,afterStatusCodes:eo}};async function ec(e,t,r,n){return new Promise((a,i)=>{let o=setTimeout(()=>{r&&r.abort(),i(new G(e))},n.timeout);n.fetch(e,t).then(a).catch(i).then(()=>{clearTimeout(o)})})}// https://github.com/sindresorhus/delay/tree/ab98ae8dfcb38e1593286c94d934e70d14a4e111
async function eu(e,{signal:t}){return new Promise((r,n)=>{function a(){clearTimeout(i),n(t.reason)}t&&(t.throwIfAborted(),t.addEventListener("abort",a,{once:!0}));let i=setTimeout(()=>{t?.removeEventListener("abort",a),r()},e)})}const ed=(e,t)=>{let r={};for(let n in t)n in ea||n in e||(r[n]=t[n]);return r};class ef{static create(e,t){let r=new ef(e,t),n=async()=>{if("number"==typeof r._options.timeout&&r._options.timeout>2147483647)throw RangeError("The `timeout` option cannot be greater than 2147483647");// Delay the fetch so that body method shortcuts can set the Accept header
await Promise.resolve();let e=await r._fetch();for(let t of r._options.hooks.afterResponse){// eslint-disable-next-line no-await-in-loop
let n=await t(r.request,r._options,r._decorateResponse(e.clone()));n instanceof globalThis.Response&&(e=n)}if(r._decorateResponse(e),!e.ok&&r._options.throwHttpErrors){let t=new q(e,r.request,r._options);for(let e of r._options.hooks.beforeError)t=await e(t);throw t}// If `onDownloadProgress` is passed, it uses the stream API internally
/* istanbul ignore next */if(r._options.onDownloadProgress){if("function"!=typeof r._options.onDownloadProgress)throw TypeError("The `onDownloadProgress` option must be a function");if(!$)throw Error("Streams are not supported in your environment. `ReadableStream` is missing.");return r._stream(e.clone(),r._options.onDownloadProgress)}return e},a=r._options.retry.methods.includes(r.request.method.toLowerCase()),i=a?r._retry(n):n();for(let[e,n]of Object.entries(er))i[e]=async()=>{// eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
r.request.headers.set("accept",r.request.headers.get("accept")||n);let a=await i,o=a.clone();if("json"===e){if(204===o.status)return"";let e=await o.clone().arrayBuffer(),r=e.byteLength;if(0===r)return"";if(t.parseJson)return t.parseJson(await o.text())}return o[e]()};return i}// eslint-disable-next-line complexity
constructor(e,t={}){if(Object.defineProperty(this,"request",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"abortController",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_retryCount",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,"_input",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"_options",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._input=e,this._options={// TODO: credentials can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208
credentials:this._input.credentials||"same-origin",...t,headers:K(this._input.headers,t.headers),hooks:J({beforeRequest:[],beforeRetry:[],beforeError:[],afterResponse:[]},t.hooks),method:ei(t.method??this._input.method),// eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
prefixUrl:String(t.prefixUrl||""),retry:el(t.retry),throwHttpErrors:!1!==t.throwHttpErrors,timeout:t.timeout??1e4,fetch:t.fetch??globalThis.fetch.bind(globalThis)},"string"!=typeof this._input&&!(this._input instanceof URL||this._input instanceof globalThis.Request))throw TypeError("`input` must be a string, URL, or Request");if(this._options.prefixUrl&&"string"==typeof this._input){if(this._input.startsWith("/"))throw Error("`input` must not begin with a slash when using `prefixUrl`");this._options.prefixUrl.endsWith("/")||(this._options.prefixUrl+="/"),this._input=this._options.prefixUrl+this._input}if(_){if(this.abortController=new globalThis.AbortController,this._options.signal){let e=this._options.signal;this._options.signal.addEventListener("abort",()=>{this.abortController.abort(e.reason)})}this._options.signal=this.abortController.signal}if(Q&&(this._options.duplex="half"),this.request=new globalThis.Request(this._input,this._options),this._options.searchParams){// eslint-disable-next-line unicorn/prevent-abbreviations
let e="string"==typeof this._options.searchParams?this._options.searchParams.replace(/^\?/,""):new URLSearchParams(this._options.searchParams).toString(),t=this.request.url.replace(/(?:\?.*?)?(?=#|$)/,"?"+e);(ee&&this._options.body instanceof globalThis.FormData||this._options.body instanceof URLSearchParams)&&!(this._options.headers&&this._options.headers["content-type"])&&this.request.headers.delete("content-type"),// The spread of `this.request` is required as otherwise it misses the `duplex` option for some reason and throws.
this.request=new globalThis.Request(new globalThis.Request(t,{...this.request}),this._options)}void 0!==this._options.json&&(this._options.body=JSON.stringify(this._options.json),this.request.headers.set("content-type",this._options.headers.get("content-type")??"application/json"),this.request=new globalThis.Request(this.request,{body:this._options.body}))}_calculateRetryDelay(e){if(this._retryCount++,this._retryCount<this._options.retry.limit&&!(e instanceof G)){if(e instanceof q){if(!this._options.retry.statusCodes.includes(e.response.status))return 0;let t=e.response.headers.get("Retry-After");if(t&&this._options.retry.afterStatusCodes.includes(e.response.status)){let e=Number(t);return(Number.isNaN(e)?e=Date.parse(t)-Date.now():e*=1e3,void 0!==this._options.retry.maxRetryAfter&&e>this._options.retry.maxRetryAfter)?0:e}if(413===e.response.status)return 0}let t=this._options.retry.delay(this._retryCount);return Math.min(this._options.retry.backoffLimit,t)}return 0}_decorateResponse(e){return this._options.parseJson&&(e.json=async()=>this._options.parseJson(await e.text())),e}async _retry(e){try{return await e()}catch(r){let t=Math.min(this._calculateRetryDelay(r),2147483647);if(0!==t&&this._retryCount>0){for(let e of(await eu(t,{signal:this._options.signal}),this._options.hooks.beforeRetry)){// eslint-disable-next-line no-await-in-loop
let t=await e({request:this.request,options:this._options,error:r,retryCount:this._retryCount});// If `stop` is returned from the hook, the retry process is stopped
if(t===en)return}return this._retry(e)}throw r}}async _fetch(){for(let e of this._options.hooks.beforeRequest){// eslint-disable-next-line no-await-in-loop
let t=await e(this.request,this._options);if(t instanceof Request){this.request=t;break}if(t instanceof Response)return t}let e=ed(this.request,this._options);return!1===this._options.timeout?this._options.fetch(this.request.clone(),e):ec(this.request.clone(),e,this.abortController,this._options)}/* istanbul ignore next */_stream(e,t){let r=Number(e.headers.get("content-length"))||0,n=0;return 204===e.status?(t&&t({percent:1,totalBytes:r,transferredBytes:n},new Uint8Array),new globalThis.Response(null,{status:e.status,statusText:e.statusText,headers:e.headers})):new globalThis.Response(new globalThis.ReadableStream({async start(a){let i=e.body.getReader();async function o(){let{done:e,value:s}=await i.read();if(e){a.close();return}if(t){n+=s.byteLength;let e=0===r?0:n/r;t({percent:e,transferredBytes:n,totalBytes:r},s)}a.enqueue(s),await o()}t&&t({percent:0,transferredBytes:0,totalBytes:r},new Uint8Array),await o()}}),{status:e.status,statusText:e.statusText,headers:e.headers})}}const ep=e=>{// eslint-disable-next-line @typescript-eslint/promise-function-async
let t=(t,r)=>ef.create(t,Y(e,r));for(let r of et)t[r]=(t,n)=>ef.create(t,Y(e,n,{method:r}));return t.create=e=>ep(Y(e)),t.extend=t=>ep(Y(e,t)),t.stop=en,t},eh=ep(),eb=eh.extend({prefixUrl:"/"}),ey=eh.extend({prefixUrl:"/api/v1/"});async function em(){try{let e=await ey.get("payment"),{address:t}=await e.json();return t}catch(e){if(200!==e.response.status)return}}async function eg(){try{let e=await ey.get("did"),{did:t}=await e.json();return t}catch(e){if(404===e.response.status)return;throw e}}async function ev(){try{let e=await ey.get("claim"),t=await e.json();return t.claim.contents}catch(e){if(404===e.response.status)return;throw console.error(e),e}}async function ex(){try{let e=await ey.get("credential",{timeout:!1}),t=await e.json();if(0===t.length)return[];return t}catch(e){if(404===e.response.status)return[];throw console.error(e),e}}async function ew(e){try{let t=await ey.post("claim",{json:e}),r=await t.json();return r.claim}catch(e){throw console.error(e),e}}async function eP(e){try{let t=await ey.post("use-case",{json:e,timeout:!1});return await t.json()}catch(e){throw console.error(e),e}}async function eO(){try{let e=await ey.get("use-case",{timeout:!1}),t=await e.json();return t.useCase}catch(e){if(404===e.response.status)return;throw console.error(e),e}}async function eT(){try{await eb.post(".well-known/did-configuration.json",{json:{url:window.location.origin}})}catch(e){throw console.error(e),e}}var ez={};ez=new URL("OLI.e2dfcaeb.png",import.meta.url).toString();var ek={};ek=new URL("built-on-kilt.1d35b87a.svg",import.meta.url).toString();var eL=function(){return/*#__PURE__*/(0,C.jsxs)("div",{children:[/*#__PURE__*/(0,C.jsx)("img",{src:/*@__PURE__*/n(ez),alt:"OLI logo",width:116,height:76,className:"oli"}),/*#__PURE__*/(0,C.jsx)("img",{src:/*@__PURE__*/n(ek),alt:"Built on KILT",width:142,height:28,className:"kilt"})]})},Z=A("acw62"),eE={};/**
 * Copyright (c) 2018-2023, Built on KILT.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */Object.defineProperty(eE,"__esModule",{value:!0}),eE.initializeKiltExtensionAPI=eE.watchExtensions=eE.getExtensions=void 0;var eN={};/**
 * Copyright (c) 2018-2023, Built on KILT.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */Object.defineProperty(eN,"__esModule",{value:!0}),eN.initializeKiltExtensionAPI=eN.watchExtensions=eN.getExtensions=void 0;// cross-environment reference to global object (aka 'window' in browser environments)
const eS=globalThis;/**
 * Get all extensions that are currently initialized and support the Credential API.
 *
 * Note that this method only returns the extensions that are initialized at the time when this function is called.
 * If an extension injects itself only after this function is called, it will not be contained in the returned extensions.
 *
 * @returns an array of extensions
 */function eM(){// Remove the meta object and return a list of extension objects
return Object.values(eS.kilt)}eN.getExtensions=eM,eN.watchExtensions=/**
 * @private
 * This function relies on API that is not part of the Credential API standard yet and might break at any point in time.
 *
 * Watch for new extensions that get injected.
 *
 * Each time an extension has injected itself, it will dispatch an event.
 * This function calls the provided callback with all available extensions when such an event is received.
 *
 * NOTE: Use the returned cleanup function to remove the event listener when the callback is not needed anymore.
 *
 * @param callback Callback that gets called each time a new extension is injected.
 * @returns Cleanup function which removes the listener for new extensions.
 */function(e){function t(){e(eM())}return window.addEventListener("kilt-extension#initialized",t),()=>{window.removeEventListener("kilt-extension#initialized",t)}},eN.initializeKiltExtensionAPI=/**
 * This function enables the communication with extensions supporting the Credential API.
 *
 * The `meta` property of `window.kilt` is set according to the Credential API.
 * After this is done an event is dispatched to notify all extensions that they should inject themselves now.
 */function(){eS.kilt=eS.kilt||{},Object.defineProperty(eS.kilt,"meta",{value:{versions:{credentials:"3.2"}},enumerable:!1}),eS.dispatchEvent(new CustomEvent("kilt-dapp#initialized"))},Object.defineProperty(eE,"getExtensions",{enumerable:!0,get:function(){return eN.getExtensions}}),Object.defineProperty(eE,"watchExtensions",{enumerable:!0,get:function(){return eN.watchExtensions}}),Object.defineProperty(eE,"initializeKiltExtensionAPI",{enumerable:!0,get:function(){return eN.initializeKiltExtensionAPI}});/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */var ej={};Object.defineProperty(ej,"__esModule",{value:!0,configurable:!0}),r(ej,"default",()=>eH),r(ej,"sort",()=>eB),r(ej,"sortObj",()=>eR),r(ej,"cleanJSON",()=>eI);/* eslint-disable */// @ts-nocheck
// Taken from https://github.com/ShivrajRath/jsonabc/blob/2ccf15f967f0e44e48fb7b163aebef43c0047166/index.js
// Copied here, because the package defines a browser compatible script, but doesn't create it,
// which leads to it failing in react-native. See https://github.com/ShivrajRath/jsonabc/issues/18
/*!
  JSON ABC | License: MIT.
*/var eH={sort:eB,sortObj:eR,cleanJSON:eI};function eR(e,t){t=t||!1;var r={};return"[object Array]"===Object.prototype.toString.call(e)?((r=t?e:e.sort()).forEach(function(e,n){r[n]=eR(e,t)}),t||(r=r.sort(function(e,t){return(e=JSON.stringify(e))<(t=JSON.stringify(t))?-1:e>t?1:0}))):"[object Object]"===Object.prototype.toString.call(e)?(r={},Object.keys(e).sort(function(e,t){return e.toLowerCase()<t.toLowerCase()?-1:e.toLowerCase()>t.toLowerCase()?1:0}).forEach(function(n){r[n]=eR(e[n],t)})):r=e,r}function eI(e){return e=(e=e.replace(/,[ \t\r\n]+}/g,"}")).replace(/,[ \t\r\n]+\]/g,"]")}function eB(e,t){var r,n,a;if(e)try{e=eI(e),n=JSON.parse(e),a=eR(n,t),r=JSON.stringify(a,null,4)}catch(e){throw console.error("jsonabc: Incorrect JSON object.",[],e),e}return r}// End.
var eV={};r(eV,"naclBoxPairFromSecret",()=>h5),r(eV,"coToUInt8",()=>h3),r(eV,"sign",()=>h8),r(eV,"signStr",()=>h9),r(eV,"verify",()=>h6),r(eV,"hash",()=>h4),r(eV,"hashStr",()=>h7),r(eV,"encodeObjectAsStr",()=>be),r(eV,"encryptAsymmetric",()=>bt),r(eV,"encryptAsymmetricAsStr",()=>br),r(eV,"decryptAsymmetric",()=>bn),r(eV,"decryptAsymmetricAsStr",()=>ba),r(eV,"saltedBlake2b256",()=>bi),r(eV,"hashStatements",()=>bo),r(eV,"makeKeypairFromSeed",()=>bs),r(eV,"makeKeypairFromUri",()=>bl),r(eV,"makeEncryptionKeypairFromSeed",()=>bc),r(eV,"mnemonicGenerate",()=>nD),r(eV,"mnemonicToMiniSecret",()=>nC),r(eV,"encodeAddress",()=>ni),r(eV,"decodeAddress",()=>na),r(eV,"u8aToHex",()=>r_),r(eV,"u8aConcat",()=>ti);/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Crypto provides KILT with the utility types and methods useful for cryptographic operations, such as signing/verifying, encrypting/decrypting and hashing.
 *
 * The utility types and methods are wrappers for existing Polkadot functions and imported throughout KILT's protocol for various cryptographic needs.
 *
 * @packageDocumentation
 */const eX=/^0x[\da-fA-F]+$/,eU=/^[\da-fA-F]+$/;function eA(e,t=-1,r){return"string"==typeof e&&("0x"===e||eX.test(e))&&(-1===t?r||e.length%2==0:e.length===2+Math.ceil(t/4))}/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */function eD(e){// here we defer the instanceof check which is actually slightly
// slower than just checking the constrctor (direct instances)
return(e&&e.constructor)===Uint8Array||e instanceof Uint8Array}const eC="0123456789abcdef",eF=new Uint8Array(256),eZ=new Uint8Array(65536);for(let e=0,t=eC.length;e<t;e++)eF[0|eC[e].charCodeAt(0)]=0|e,e>9&&(eF[0|eC[e].toUpperCase().charCodeAt(0)]=0|e);for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)eZ[t|r]=eF[e]<<4|eF[r]}const eq=/*#__PURE__*/"undefined"!=typeof globalThis?globalThis:void 0!==B?B:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this");function eG(e,t){// Not quite sure why this is here - snuck in with TS 4.7.2 with no real idea
// (as of now) as to why this looks like an "any" when we do cast it to a T
//
// eslint-disable-next-line @typescript-eslint/no-unsafe-return
return void 0===eq[e]?t:eq[e]}const eW=eG("BigInt",/**
 * @internal
 *
 * There are _still_ some older environments (specifically RN < 0.70), that does
 * not have proper BigInt support - a non-working fallback is provided for those.
 *
 * We detect availability of BigInt upon usage, so this is purely to allow functional
 * compilation & bundling. Since we have operators such as *+-/ top-level, a number-ish
 * result is used here.
 */function(){return Number.NaN}),eY="function"==typeof eW&&"function"==typeof eW.asIntN,eK="function"==typeof eq.Buffer&&"function"==typeof eq.Buffer.isBuffer;/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */function eJ(e){return"function"==typeof e}eq.process;var eQ={};Object.defineProperty(eQ,"__esModule",{value:!0}),eQ.TextEncoder=eQ.packageInfo=void 0;var e_={};Object.defineProperty(e_,"__esModule",{value:!0}),e_.TextEncoder=void 0,e_.TextEncoder=class{encode(e){let t=e.length,r=new Uint8Array(t);for(let n=0;n<t;n++)r[n]=e.charCodeAt(n);return r}};var e$={},e0="node_modules/@polkadot/x-textencoder/cjs";Object.defineProperty(e$,"__esModule",{value:!0}),e$.packageInfo=void 0,e$.packageInfo={name:"@polkadot/x-textencoder",path:"string"==typeof e0?e0:"auto",type:"cjs",version:"12.5.1"},Object.defineProperty(eQ,"packageInfo",{enumerable:!0,get:function(){return e$.packageInfo}}),eQ.TextEncoder=eG("TextEncoder",e_.TextEncoder);const e1=new eQ.TextEncoder;function e2(e){return e?e1.encode(e.toString()):new Uint8Array}function e5(e){return eD(e)?eK&&e&&eJ(e.readDoubleLE)&&eq.Buffer.isBuffer(e)?new Uint8Array(e):e:eA(e)?function(e,t=-1){if(!e)return new Uint8Array;let r=e.startsWith("0x")?2:0,n=Math.ceil((e.length-r)/2),a=Math.ceil(-1===t?n:t/8),i=new Uint8Array(a),o=a>n?a-n:0;for(let t=o;t<a;t++,r+=2)// HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
// same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
// also the faster operation by at least 2x with the character map above
i[t]=eZ[e.charCodeAt(r)<<8|e.charCodeAt(r+1)];return i}(e):Array.isArray(e)?new Uint8Array(e):e2(e)}/**
 * @__NO_SIDE_EFFECTS__
 */function e3(...e){// Wrap call in closure so JIT can inline calls
let t=(e,t)=>r=>e(t(r)),r=Array.from(e).reverse().reduce((e,r)=>e?t(e,r.encode):r.encode,void 0),n=e.reduce((e,r)=>e?t(e,r.decode):r.decode,void 0);return{encode:r,decode:n}}/**
 * Encodes integer radix representation to array of strings using alphabet and back
 * @__NO_SIDE_EFFECTS__
 */function e8(e){return{encode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw Error("alphabet.encode input should be an array of numbers");return t.map(t=>{if(t<0||t>=e.length)throw Error(`Digit index outside alphabet: ${t} (alphabet: ${e.length})`);return e[t]})},decode:t=>{if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw Error("alphabet.decode input should be array of strings");return t.map(t=>{if("string"!=typeof t)throw Error(`alphabet.decode: not string element=${t}`);let r=e.indexOf(t);if(-1===r)throw Error(`Unknown letter: "${t}". Allowed: ${e}`);return r})}}}/**
 * @__NO_SIDE_EFFECTS__
 */function e9(e=""){if("string"!=typeof e)throw Error("join separator should be string");return{encode:t=>{if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw Error("join.encode input should be array of strings");for(let e of t)if("string"!=typeof e)throw Error(`join.encode: non-string input=${e}`);return t.join(e)},decode:t=>{if("string"!=typeof t)throw Error("join.decode input should be string");return t.split(e)}}}/**
 * Slow: O(n^2) time complexity
 * @__NO_SIDE_EFFECTS__
 */function e6(e,t,r){// base 1 is impossible
if(t<2)throw Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);if(r<2)throw Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);if(!Array.isArray(e))throw Error("convertRadix: data should be array");if(!e.length)return[];let n=0,a=[],i=Array.from(e);for(i.forEach(e=>{if(e<0||e>=t)throw Error(`Wrong integer: ${e}`)});;){let e=0,o=!0;for(let a=n;a<i.length;a++){let s=i[a],l=t*e+s;if(!Number.isSafeInteger(l)||t*e/t!==e||l-s!=t*e)throw Error("convertRadix: carry overflow");e=l%r;let c=Math.floor(l/r);if(i[a]=c,!Number.isSafeInteger(c)||c*r+e!==l)throw Error("convertRadix: carry overflow");o&&(c?o=!1:n=a)}if(a.push(e),o)break}for(let t=0;t<e.length-1&&0===e[t];t++)a.push(0);return a.reverse()}const e4=/* @__NO_SIDE_EFFECTS__ */(e,t)=>t?e4(t,e%t):e,e7=e3({encode:e=>{if(!(e instanceof Uint8Array))throw Error("radix.encode input should be Uint8Array");return e6(Array.from(e),256,58)},decode:e=>{if(!Array.isArray(e)||e.length&&"number"!=typeof e[0])throw Error("radix.decode input should be array of strings");return Uint8Array.from(e6(e,58,256))}},e8("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),e9("")),te=[996825010,642813549,513874426,1027748829,705979059],tt={chars:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",coder:e7,ipfs:"z",type:"base58"},tr=function({chars:e,ipfs:t,type:r,withPadding:n}){return(a,i)=>{if("string"!=typeof a)throw Error(`Expected ${r} string input`);if(t&&i&&!a.startsWith(t))throw Error(`Expected ipfs-compatible ${r} to start with '${t}'`);for(let t=i?1:0,o=a.length;t<o;t++)if(e.includes(a[t]));else if(n&&"="===a[t]){if(t===o-1);else if("="===a[t+1]);else throw Error(`Invalid ${r} padding sequence "${a[t]}${a[t+1]}" at index ${t}`)}else throw Error(`Invalid ${r} character "${a[t]}" (0x${a.charCodeAt(t).toString(16)}) at index ${t}`);return!0}}(tt),tn=function({coder:e,ipfs:t},r){return(n,a)=>(r(n,a),e.decode(t&&a?n.substring(1):n))}(tt,tr),ta=function({coder:e,ipfs:t}){return(r,n)=>{let a=e.encode(e5(r));return t&&n?`${t}${a}`:a}}(tt);function ti(...e){let t=e.length,r=Array(t),n=0;for(let a=0;a<t;a++)r[a]=e5(e[a]),n+=r[a].length;return to(r,n)}function to(e,t=0){let r=e.length,n=0;if(!t)for(let n=0;n<r;n++)t+=e[n].length;let a=new Uint8Array(t);for(let t=0;t<r;t++)a.set(e[t],n),n+=e[t].length;return a}var ts={};Object.defineProperty(ts,"__esModule",{value:!0}),ts.blake2b=void 0;var tl={};Object.defineProperty(tl,"__esModule",{value:!0}),tl.BLAKE2=tl.SIGMA=void 0;var tc={};function tu(e){if(!Number.isSafeInteger(e)||e<0)throw Error(`Wrong positive integer: ${e}`)}function td(e){if("boolean"!=typeof e)throw Error(`Expected boolean, not ${e}`)}function tf(e,...t){if(!(e instanceof Uint8Array))throw Error("Expected Uint8Array");if(t.length>0&&!t.includes(e.length))throw Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`)}function tp(e){if("function"!=typeof e||"function"!=typeof e.create)throw Error("Hash should be wrapped by utils.wrapConstructor");tu(e.outputLen),tu(e.blockLen)}function th(e,t=!0){if(e.destroyed)throw Error("Hash instance has been destroyed");if(t&&e.finished)throw Error("Hash#digest() has already been called")}function tb(e,t){tf(e);let r=t.outputLen;if(e.length<r)throw Error(`digestInto() expects output buffer of length at least ${r}`)}Object.defineProperty(tc,"__esModule",{value:!0}),tc.output=tc.exists=tc.hash=tc.bytes=tc.bool=tc.number=void 0,tc.number=tu,tc.bool=td,tc.bytes=tf,tc.hash=tp,tc.exists=th,tc.output=tb,tc.default={number:tu,bool:td,bytes:tf,hash:tp,exists:th,output:tb};var ty={};/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */Object.defineProperty(ty,"__esModule",{value:!0}),ty.randomBytes=ty.wrapXOFConstructorWithOpts=ty.wrapConstructorWithOpts=ty.wrapConstructor=ty.checkOpts=ty.Hash=ty.concatBytes=ty.toBytes=ty.utf8ToBytes=ty.asyncLoop=ty.nextTick=ty.hexToBytes=ty.bytesToHex=ty.isLE=ty.rotr=ty.createView=ty.u32=ty.u8=void 0;var tm={};Object.defineProperty(tm,"__esModule",{value:!0}),tm.crypto=void 0,tm.crypto="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0;const tg=e=>e instanceof Uint8Array;if(ty.u8=e=>new Uint8Array(e.buffer,e.byteOffset,e.byteLength),ty.u32=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4)),ty.createView=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),ty.rotr=(e,t)=>e<<32-t|e>>>t,// big-endian hardware is rare. Just in case someone still decides to run hashes:
// early-throw an error because we don't support BE yet.
ty.isLE=68===new Uint8Array(new Uint32Array([287454020]).buffer)[0],!ty.isLE)throw Error("Non little-endian hardware is not supported");const tv=/* @__PURE__ */Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));ty.bytesToHex=/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */function(e){if(!tg(e))throw Error("Uint8Array expected");// pre-caching improves the speed 6x
let t="";for(let r=0;r<e.length;r++)t+=tv[e[r]];return t},ty.hexToBytes=/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */function(e){if("string"!=typeof e)throw Error("hex string expected, got "+typeof e);let t=e.length;if(t%2)throw Error("padded hex string expected, got unpadded hex of length "+t);let r=new Uint8Array(t/2);for(let t=0;t<r.length;t++){let n=2*t,a=e.slice(n,n+2),i=Number.parseInt(a,16);if(Number.isNaN(i)||i<0)throw Error("Invalid byte sequence");r[t]=i}return r};// There is no setImmediate in browser and setTimeout is slow.
// call of async fn will return Promise, which will be fullfiled only on
// next scheduler queue processing step and this is exactly what we need.
const tx=async()=>{};// Returns control to thread each 'tick' ms to avoid blocking
async function tw(e,t,r){let n=Date.now();for(let a=0;a<e;a++){r(a);// Date.now() is not monotonic, so in case if clock goes backwards we return return control too
let e=Date.now()-n;e>=0&&e<t||(await (0,ty.nextTick)(),n+=e)}}/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */function tP(e){if("string"!=typeof e)throw Error(`utf8ToBytes expected string, got ${typeof e}`);return new Uint8Array(new TextEncoder().encode(e));// https://bugzil.la/1681809
}/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */function tO(e){if("string"==typeof e&&(e=tP(e)),!tg(e))throw Error(`expected Uint8Array, got ${typeof e}`);return e}ty.nextTick=tx,ty.asyncLoop=tw,ty.utf8ToBytes=tP,ty.toBytes=tO,ty.concatBytes=/**
 * Copies several Uint8Arrays into one.
 */function(...e){let t=new Uint8Array(e.reduce((e,t)=>e+t.length,0)),r=0;return e.forEach(e=>{if(!tg(e))throw Error("Uint8Array expected");t.set(e,r),r+=e.length}),t},ty.Hash=// For runtime check if class implements interface
class{// Safe version that clones internal state
clone(){return this._cloneInto()}};const tT={}.toString;ty.checkOpts=function(e,t){if(void 0!==t&&"[object Object]"!==tT.call(t))throw Error("Options should be object or undefined");let r=Object.assign(e,t);return r},ty.wrapConstructor=function(e){let t=t=>e().update(tO(t)).digest(),r=e();return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=()=>e(),t},ty.wrapConstructorWithOpts=function(e){let t=(t,r)=>e(r).update(tO(t)).digest(),r=e({});return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=t=>e(t),t},ty.wrapXOFConstructorWithOpts=function(e){let t=(t,r)=>e(r).update(tO(t)).digest(),r=e({});return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=t=>e(t),t},ty.randomBytes=/**
 * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
 */function(e=32){if(tm.crypto&&"function"==typeof tm.crypto.getRandomValues)return tm.crypto.getRandomValues(new Uint8Array(e));throw Error("crypto.getRandomValues must be defined")},// Blake is based on ChaCha permutation.
// For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].
// prettier-ignore
tl.SIGMA=new Uint8Array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3]);class tz extends ty.Hash{constructor(e,t,r={},n,a,i){if(super(),this.blockLen=e,this.outputLen=t,this.length=0,this.pos=0,this.finished=!1,this.destroyed=!1,(0,tc.number)(e),(0,tc.number)(t),(0,tc.number)(n),t<0||t>n)throw Error("outputLen bigger than keyLen");if(void 0!==r.key&&(r.key.length<1||r.key.length>n))throw Error(`key must be up 1..${n} byte long or undefined`);if(void 0!==r.salt&&r.salt.length!==a)throw Error(`salt must be ${a} byte long or undefined`);if(void 0!==r.personalization&&r.personalization.length!==i)throw Error(`personalization must be ${i} byte long or undefined`);this.buffer32=(0,ty.u32)(this.buffer=new Uint8Array(e))}update(e){(0,tc.exists)(this);// Main difference with other hashes: there is flag for last block,
// so we cannot process current block before we know that there
// is the next one. This significantly complicates logic and reduces ability
// to do zero-copy processing
let{blockLen:t,buffer:r,buffer32:n}=this;e=(0,ty.toBytes)(e);let a=e.length,i=e.byteOffset,o=e.buffer;for(let s=0;s<a;){this.pos===t&&(this.compress(n,0,!1),this.pos=0);let l=Math.min(t-this.pos,a-s),c=i+s;// full block && aligned to 4 bytes && not last in input
if(l===t&&!(c%4)&&s+l<a){let e=new Uint32Array(o,c,Math.floor((a-s)/4));for(let r=0;s+t<a;r+=n.length,s+=t)this.length+=t,this.compress(e,r,!1);continue}r.set(e.subarray(s,s+l),this.pos),this.pos+=l,this.length+=l,s+=l}return this}digestInto(e){(0,tc.exists)(this),(0,tc.output)(e,this);let{pos:t,buffer32:r}=this;this.finished=!0,// Padding
this.buffer.subarray(t).fill(0),this.compress(r,0,!0);let n=(0,ty.u32)(e);this.get().forEach((e,t)=>n[t]=e)}digest(){let{buffer:e,outputLen:t}=this;this.digestInto(e);let r=e.slice(0,t);return this.destroy(),r}_cloneInto(e){let{buffer:t,length:r,finished:n,destroyed:a,outputLen:i,pos:o}=this;return e||(e=new this.constructor({dkLen:i})),e.set(...this.get()),e.length=r,e.finished=n,e.destroyed=a,e.outputLen=i,e.buffer.set(t),e.pos=o,e}}tl.BLAKE2=tz;var tk={};Object.defineProperty(tk,"__esModule",{value:!0}),tk.add5L=tk.add5H=tk.add4H=tk.add4L=tk.add3H=tk.add3L=tk.add=tk.rotlBL=tk.rotlBH=tk.rotlSL=tk.rotlSH=tk.rotr32L=tk.rotr32H=tk.rotrBL=tk.rotrBH=tk.rotrSL=tk.rotrSH=tk.shrSL=tk.shrSH=tk.toBig=tk.split=tk.fromBig=void 0;const tL=/* @__PURE__ */BigInt(4294967296-1),tE=/* @__PURE__ */BigInt(32);// We are not using BigUint64Array, because they are extremely slow as per 2022
function tN(e,t=!1){return t?{h:Number(e&tL),l:Number(e>>tE&tL)}:{h:0|Number(e>>tE&tL),l:0|Number(e&tL)}}function tS(e,t=!1){let r=new Uint32Array(e.length),n=new Uint32Array(e.length);for(let a=0;a<e.length;a++){let{h:i,l:o}=tN(e[a],t);[r[a],n[a]]=[i,o]}return[r,n]}tk.fromBig=tN,tk.split=tS;const tM=(e,t)=>BigInt(e>>>0)<<tE|BigInt(t>>>0);tk.toBig=tM;// for Shift in [0, 32)
const tj=(e,t,r)=>e>>>r;tk.shrSH=tj;const tH=(e,t,r)=>e<<32-r|t>>>r;tk.shrSL=tH;// Right rotate for Shift in [1, 32)
const tR=(e,t,r)=>e>>>r|t<<32-r;tk.rotrSH=tR;const tI=(e,t,r)=>e<<32-r|t>>>r;tk.rotrSL=tI;// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const tB=(e,t,r)=>e<<64-r|t>>>r-32;tk.rotrBH=tB;const tV=(e,t,r)=>e>>>r-32|t<<64-r;tk.rotrBL=tV;// Right rotate for shift===32 (just swaps l&h)
const tX=(e,t)=>t;tk.rotr32H=tX;const tU=(e,t)=>e;tk.rotr32L=tU;// Left rotate for Shift in [1, 32)
const tA=(e,t,r)=>e<<r|t>>>32-r;tk.rotlSH=tA;const tD=(e,t,r)=>t<<r|e>>>32-r;tk.rotlSL=tD;// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const tC=(e,t,r)=>t<<r-32|e>>>64-r;tk.rotlBH=tC;const tF=(e,t,r)=>e<<r-32|t>>>64-r;// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function tZ(e,t,r,n){let a=(t>>>0)+(n>>>0);return{h:e+r+(a/4294967296|0)|0,l:0|a}}tk.rotlBL=tF,tk.add=tZ;// Addition with more than 2 elements
const tq=(e,t,r)=>(e>>>0)+(t>>>0)+(r>>>0);tk.add3L=tq;const tG=(e,t,r,n)=>t+r+n+(e/4294967296|0)|0;tk.add3H=tG;const tW=(e,t,r,n)=>(e>>>0)+(t>>>0)+(r>>>0)+(n>>>0);tk.add4L=tW;const tY=(e,t,r,n,a)=>t+r+n+a+(e/4294967296|0)|0;tk.add4H=tY;const tK=(e,t,r,n,a)=>(e>>>0)+(t>>>0)+(r>>>0)+(n>>>0)+(a>>>0);tk.add5L=tK;const tJ=(e,t,r,n,a,i)=>t+r+n+a+i+(e/4294967296|0)|0;tk.add5H=tJ,tk.default={fromBig:tN,split:tS,toBig:tM,shrSH:tj,shrSL:tH,rotrSH:tR,rotrSL:tI,rotrBH:tB,rotrBL:tV,rotr32H:tX,rotr32L:tU,rotlSH:tA,rotlSL:tD,rotlBH:tC,rotlBL:tF,add:tZ,add3L:tq,add3H:tG,add4L:tW,add4H:tY,add5H:tJ,add5L:tK};// Same as SHA-512 but LE
// prettier-ignore
const tQ=/* @__PURE__ */new Uint32Array([4089235720,1779033703,2227873595,3144134277,4271175723,1013904242,1595750129,2773480762,2917565137,1359893119,725511199,2600822924,4215389547,528734635,327033209,1541459225]),t_=/* @__PURE__ */new Uint32Array(32);// Mixing function G splitted in two halfs
function t$(e,t,r,n,a,i){// NOTE: V is LE here
let o=a[i],s=a[i+1],l=t_[2*e],c=t_[2*e+1],u=t_[2*t],d=t_[2*t+1],f=t_[2*r],p=t_[2*r+1],h=t_[2*n],b=t_[2*n+1],y=tk.default.add3L(l,u,o);// prettier-ignore
c=tk.default.add3H(y,c,d,s),l=0|y,// v[d] = rotr(v[d] ^ v[a], 32)
({Dh:b,Dl:h}={Dh:b^c,Dl:h^l}),({Dh:b,Dl:h}={Dh:tk.default.rotr32H(b,h),Dl:tk.default.rotr32L(b,h)}),// v[c] = (v[c] + v[d]) | 0;
({h:p,l:f}=tk.default.add(p,f,b,h)),// v[b] = rotr(v[b] ^ v[c], 24)
({Bh:d,Bl:u}={Bh:d^p,Bl:u^f}),({Bh:d,Bl:u}={Bh:tk.default.rotrSH(d,u,24),Bl:tk.default.rotrSL(d,u,24)}),t_[2*e]=l,t_[2*e+1]=c,t_[2*t]=u,t_[2*t+1]=d,t_[2*r]=f,t_[2*r+1]=p,t_[2*n]=h,t_[2*n+1]=b}function t0(e,t,r,n,a,i){// NOTE: V is LE here
let o=a[i],s=a[i+1],l=t_[2*e],c=t_[2*e+1],u=t_[2*t],d=t_[2*t+1],f=t_[2*r],p=t_[2*r+1],h=t_[2*n],b=t_[2*n+1],y=tk.default.add3L(l,u,o);// prettier-ignore
c=tk.default.add3H(y,c,d,s),l=0|y,// v[d] = rotr(v[d] ^ v[a], 16)
({Dh:b,Dl:h}={Dh:b^c,Dl:h^l}),({Dh:b,Dl:h}={Dh:tk.default.rotrSH(b,h,16),Dl:tk.default.rotrSL(b,h,16)}),// v[c] = (v[c] + v[d]) | 0;
({h:p,l:f}=tk.default.add(p,f,b,h)),// v[b] = rotr(v[b] ^ v[c], 63)
({Bh:d,Bl:u}={Bh:d^p,Bl:u^f}),({Bh:d,Bl:u}={Bh:tk.default.rotrBH(d,u,63),Bl:tk.default.rotrBL(d,u,63)}),t_[2*e]=l,t_[2*e+1]=c,t_[2*t]=u,t_[2*t+1]=d,t_[2*r]=f,t_[2*r+1]=p,t_[2*n]=h,t_[2*n+1]=b}class t1 extends tl.BLAKE2{constructor(e={}){super(128,void 0===e.dkLen?64:e.dkLen,e,64,16,16),// Same as SHA-512, but LE
this.v0l=0|tQ[0],this.v0h=0|tQ[1],this.v1l=0|tQ[2],this.v1h=0|tQ[3],this.v2l=0|tQ[4],this.v2h=0|tQ[5],this.v3l=0|tQ[6],this.v3h=0|tQ[7],this.v4l=0|tQ[8],this.v4h=0|tQ[9],this.v5l=0|tQ[10],this.v5h=0|tQ[11],this.v6l=0|tQ[12],this.v6h=0|tQ[13],this.v7l=0|tQ[14],this.v7h=0|tQ[15];let t=e.key?e.key.length:0;if(this.v0l^=this.outputLen|t<<8|16842752,e.salt){let t=(0,ty.u32)((0,ty.toBytes)(e.salt));this.v4l^=t[0],this.v4h^=t[1],this.v5l^=t[2],this.v5h^=t[3]}if(e.personalization){let t=(0,ty.u32)((0,ty.toBytes)(e.personalization));this.v6l^=t[0],this.v6h^=t[1],this.v7l^=t[2],this.v7h^=t[3]}if(e.key){// Pad to blockLen and update
let t=new Uint8Array(this.blockLen);t.set((0,ty.toBytes)(e.key)),this.update(t)}}// prettier-ignore
get(){let{v0l:e,v0h:t,v1l:r,v1h:n,v2l:a,v2h:i,v3l:o,v3h:s,v4l:l,v4h:c,v5l:u,v5h:d,v6l:f,v6h:p,v7l:h,v7h:b}=this;return[e,t,r,n,a,i,o,s,l,c,u,d,f,p,h,b]}// prettier-ignore
set(e,t,r,n,a,i,o,s,l,c,u,d,f,p,h,b){this.v0l=0|e,this.v0h=0|t,this.v1l=0|r,this.v1h=0|n,this.v2l=0|a,this.v2h=0|i,this.v3l=0|o,this.v3h=0|s,this.v4l=0|l,this.v4h=0|c,this.v5l=0|u,this.v5h=0|d,this.v6l=0|f,this.v6h=0|p,this.v7l=0|h,this.v7h=0|b}compress(e,t,r){this.get().forEach((e,t)=>t_[t]=e),t_.set(tQ,16);let{h:n,l:a}=tk.default.fromBig(BigInt(this.length));t_[24]=tQ[8]^a,t_[25]=tQ[9]^n,r&&(t_[28]=~t_[28],t_[29]=~t_[29]);let i=0,o=tl.SIGMA;for(let r=0;r<12;r++)t$(0,4,8,12,e,t+2*o[i++]),t0(0,4,8,12,e,t+2*o[i++]),t$(1,5,9,13,e,t+2*o[i++]),t0(1,5,9,13,e,t+2*o[i++]),t$(2,6,10,14,e,t+2*o[i++]),t0(2,6,10,14,e,t+2*o[i++]),t$(3,7,11,15,e,t+2*o[i++]),t0(3,7,11,15,e,t+2*o[i++]),t$(0,5,10,15,e,t+2*o[i++]),t0(0,5,10,15,e,t+2*o[i++]),t$(1,6,11,12,e,t+2*o[i++]),t0(1,6,11,12,e,t+2*o[i++]),t$(2,7,8,13,e,t+2*o[i++]),t0(2,7,8,13,e,t+2*o[i++]),t$(3,4,9,14,e,t+2*o[i++]),t0(3,4,9,14,e,t+2*o[i++]);this.v0l^=t_[0]^t_[16],this.v0h^=t_[1]^t_[17],this.v1l^=t_[2]^t_[18],this.v1h^=t_[3]^t_[19],this.v2l^=t_[4]^t_[20],this.v2h^=t_[5]^t_[21],this.v3l^=t_[6]^t_[22],this.v3h^=t_[7]^t_[23],this.v4l^=t_[8]^t_[24],this.v4h^=t_[9]^t_[25],this.v5l^=t_[10]^t_[26],this.v5h^=t_[11]^t_[27],this.v6l^=t_[12]^t_[28],this.v6h^=t_[13]^t_[29],this.v7l^=t_[14]^t_[30],this.v7h^=t_[15]^t_[31],t_.fill(0)}destroy(){this.destroyed=!0,this.buffer32.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}/**
 * BLAKE2b - optimized for 64-bit platforms. JS doesn't have uint64, so it's slower than BLAKE2s.
 * @param msg - message that would be hashed
 * @param opts - dkLen, key, salt, personalization
 */ts.blake2b=(0,ty.wrapConstructorWithOpts)(e=>new t1(e));var t2={};Object.defineProperty(t2,"__esModule",{value:!0}),t2.TextDecoder=t2.packageInfo=void 0;var t5={};Object.defineProperty(t5,"__esModule",{value:!0}),t5.TextDecoder=void 0,t5.TextDecoder=class{constructor(e){this.__encoding=e}decode(e){let t="";for(let r=0,n=e.length;r<n;r++)t+=String.fromCharCode(e[r]);return t}};var t3={},t8="node_modules/@polkadot/x-textdecoder/cjs";Object.defineProperty(t3,"__esModule",{value:!0}),t3.packageInfo=void 0,t3.packageInfo={name:"@polkadot/x-textdecoder",path:"string"==typeof t8?t8:"auto",type:"cjs",version:"12.5.1"},Object.defineProperty(t2,"packageInfo",{enumerable:!0,get:function(){return t3.packageInfo}}),t2.TextDecoder=eG("TextDecoder",t5.TextDecoder);const t9=new t2.TextDecoder("utf-8");function t6(e){return e?t9.decode(e):""}var t4={};Object.defineProperty(t4,"__esModule",{value:!0}),t4.getRandomValues=t4.crypto=t4.packageInfo=void 0;var t7={},re="node_modules/@polkadot/x-randomvalues/cjs";Object.defineProperty(t7,"__esModule",{value:!0}),t7.packageInfo=void 0,t7.packageInfo={name:"@polkadot/x-randomvalues",path:"string"==typeof re?re:"auto",type:"cjs",version:"12.5.1"},Object.defineProperty(t4,"packageInfo",{enumerable:!0,get:function(){return t7.packageInfo}}),t4.crypto=eq.crypto,t4.getRandomValues=function(e){return t4.crypto.getRandomValues(e)};const rt={getRandomValues:t4.getRandomValues},rr={crypto:rt};class rn{constructor(e){/** @internal */this.abort=()=>{throw Error("abort")},/** @internal */this.__wbindgen_is_undefined=e=>void 0===this.__internal__bridge.getObject(e),/** @internal */this.__wbindgen_throw=(e,t)=>{throw Error(this.__internal__bridge.getString(e,t))},/** @internal */this.__wbg_self_1b7a39e3a92c949c=()=>this.__internal__bridge.addObject(rr),/** @internal */this.__wbg_require_604837428532a733=(e,t)=>{throw Error(`Unable to require ${this.__internal__bridge.getString(e,t)}`)},/** @internal */this.__wbg_crypto_968f1772287e2df0=e=>this.__internal__bridge.addObject(rt),/** @internal */this.__wbg_getRandomValues_a3d34b4fee3c2869=e=>this.__internal__bridge.addObject(rt.getRandomValues),/** @internal */this.__wbg_getRandomValues_f5e14ab7ac8e995d=(e,t,r)=>{rt.getRandomValues(this.__internal__bridge.getU8a(t,r))},/** @internal */this.__wbg_randomFillSync_d5bd2d655fdf256a=(e,t,r)=>{throw Error("randomFillsync is not available");// getObject(idx).randomFillSync(getU8a(ptr, len));
},/** @internal */this.__wbindgen_object_drop_ref=e=>{this.__internal__bridge.takeObject(e)},this.__internal__bridge=e}}var ra={};Object.defineProperty(ra,"__esModule",{value:!0}),ra.createWasm=ra.packageInfo=void 0;const ri="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",ro=Array(256);for(let e=0,t=ri.length;e<t;e++)ro[ri.charCodeAt(e)]=e;const rs=Uint8Array,rl=Uint16Array,rc=Uint32Array,ru=new rs([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),rd=new rs([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,/* unused */0,0,/* impossible */0]),rf=new rs([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,/* unused */0,0]),rp=(e,t)=>{let r=new rl(31);for(let n=0;n<31;++n)r[n]=t+=1<<e[n-1];// numbers here are at max 18 bits
let n=new rc(r[30]);for(let e=1;e<30;++e)for(let t=r[e];t<r[e+1];++t)n[t]=t-r[e]<<5|e;return[r,n]},[rh,rb]=rp(rd,2);rh[28]=258,rb[258]=28;const[ry]=rp(rf,0),rm=new rl(32768);for(let e=0;e<32768;++e){// reverse table algorithm from SO
let t=(43690&e)>>>1|(21845&e)<<1;t=(61680&(t=(52428&t)>>>2|(13107&t)<<2))>>>4|(3855&t)<<4,rm[e]=((65280&t)>>>8|(255&t)<<8)>>>1}const rg=(e,t,r)=>{let n;let a=e.length,i=0,o=new rl(t);// length of cd must be 288 (total # of codes)
for(;i<a;++i)++o[e[i]-1];// u16 "map": index -> minimum code for bit length = index
let s=new rl(t);for(i=0;i<t;++i)s[i]=s[i-1]+o[i-1]<<1;if(r){// u16 "map": index -> number of actual bits, symbol for code
n=new rl(1<<t);// bits to remove for reverser
let r=15-t;for(i=0;i<a;++i)if(e[i]){// num encoding both symbol and bits read
let a=i<<4|e[i],o=t-e[i],l=s[e[i]-1]++<<o;// m is end value
for(let e=l|(1<<o)-1;l<=e;++l)n[rm[l]>>>r]=a}}else for(i=0,n=new rl(a);i<a;++i)n[i]=rm[s[e[i]-1]++]>>>15-e[i];return n},rv=new rs(288);for(let e=0;e<144;++e)rv[e]=8;for(let e=144;e<256;++e)rv[e]=9;for(let e=256;e<280;++e)rv[e]=7;for(let e=280;e<288;++e)rv[e]=8;const rx=new rs(32);for(let e=0;e<32;++e)rx[e]=5;const rw=rg(rv,9,1),rP=rg(rx,5,1),rO=(e,t,r)=>{let n=t>>>3;return(e[n]|e[n+1]<<8)>>>(7&t)&r},rT=(e,t)=>{let r=t>>>3;return(e[r]|e[r+1]<<8|e[r+2]<<16)>>>(7&t)},rz=e=>(e>>>3)+(7&e&&1),rk=(e,t,r)=>{(null==t||t<0)&&(t=0),(null==r||r>e.length)&&(r=e.length);// can't use .constructor in case user-supplied
let n=new(e instanceof rl?rl:e instanceof rc?rc:rs)(r-t);return n.set(e.subarray(t,r)),n},rL=e=>{let t=e[0];for(let r=1,n=e.length;r<n;++r)e[r]>t&&(t=e[r]);return t},rE=(l=function(e,t){let r=0,n=0,a=-1;for(let i=0,o=t.length;a<o;i++)// each character represents 6 bits
r=r<<6|ro[e.charCodeAt(i)],(n+=6)>=8&&(t[++a]=r>>>(n-=8)&255);return t}("",new Uint8Array(171008)),c=new Uint8Array(339468),((e,t,r)=>{let n=!r||r.i;r||(r={});// source length
let a=e.length,i=!t||!n;// Assumes roughly 33% compression ratio average
t||(t=new rs(3*a));// ensure buffer can fit at least l elements
let o=e=>{let r=t.length;// need to increase size to fit
if(e>r){// Double or set to necessary, whichever is greater
let n=new rs(Math.max(r<<1,e));n.set(t),t=n}},s=r.f||0,l=r.p||0,c=r.b||0,u=r.l,d=r.d,f=r.m,p=r.n;if(s&&!u)return t;// total bits
let h=a<<3;do{if(!u){// BFINAL - this is only 1 when last chunk is next
r.f=s=rO(e,l,1);// type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
let b=rO(e,l+1,3);if(l+=3,b){if(1==b)u=rw,d=rP,f=9,p=5;else if(2==b){//  literal                            lengths
let t=rO(e,l,31)+257,r=rO(e,l+10,15)+4,a=t+rO(e,l+5,31)+1;l+=14;// length+distance tree
let i=new rs(a),o=new rs(19);for(let t=0;t<r;++t)o[ru[t]]=rO(e,l+3*t,7);l+=3*r;// code lengths bits
let s=rL(o),c=(1<<s)-1;if(!n&&l+a*(s+7)>h)break;// code lengths map
let b=rg(o,s,1);for(let t=0;t<a;){let r=b[rO(e,l,c)];// bits read
l+=15&r;// symbol
let n=r>>>4;// code length to copy
if(n<16)i[t++]=n;else{//  copy   count
let r=0,a=0;for(16==n?(a=3+rO(e,l,3),l+=2,r=i[t-1]):17==n?(a=3+rO(e,l,7),l+=3):18==n&&(a=11+rO(e,l,127),l+=7);a--;)i[t++]=r}}//    length tree                 distance tree
let y=i.subarray(0,t),m=i.subarray(t);// max length bits
f=rL(y),// max dist bits
p=rL(m),u=rg(y,f,1),d=rg(m,p,1)}else throw"invalid block type"}else{// go to end of byte boundary
let s=rz(l)+4,u=e[s-4]|e[s-3]<<8,d=s+u;if(d>a){if(n)throw"unexpected EOF";break}i&&o(c+u),// Copy over uncompressed data
t.set(e.subarray(s,d),c),// Get new bitpos, update byte count
r.b=c+=u,r.p=l=d<<3;continue}if(l>h)throw"unexpected EOF"}i&&o(c+131072);let b=(1<<f)-1,y=(1<<p)-1,m=f+p+18;for(;n||l+m<h;){// bits read, code
let r=u[rT(e,l)&b],n=r>>>4;if((l+=15&r)>h)throw"unexpected EOF";if(!r)throw"invalid length/literal";if(n<256)t[c++]=n;else if(256==n){u=void 0;break}else{let r=n-254;// no extra bits needed if less
if(n>264){// index
let t=n-257,a=rd[t];r=rO(e,l,(1<<a)-1)+rh[t],l+=a}// dist
let a=d[rT(e,l)&y],s=a>>>4;if(!a)throw"invalid distance";l+=15&a;let u=ry[s];if(s>3){let t=rf[s];u+=rT(e,l)&(1<<t)-1,l+=t}if(l>h)throw"unexpected EOF";i&&o(c+131072);let f=c+r;for(;c<f;c+=4)t[c]=t[c-u],t[c+1]=t[c+1-u],t[c+2]=t[c+2-u],t[c+3]=t[c+3-u];c=f}}r.l=u,r.p=l,r.b=c,u&&(s=1,r.m=f,r.d=d,r.n=p)}while(!s)return c==t.length?t:rk(t,0,c)})(((e=>{if((15&e[0])!=8||e[0]>>>4>7||(e[0]<<8|e[1])%31)throw"invalid zlib data";if(32&e[1])throw"invalid zlib data: preset dictionaries not supported"})(l),l.subarray(2,-4)),c));var rN={},rS="node_modules/@polkadot/wasm-crypto-init/cjs";Object.defineProperty(rN,"__esModule",{value:!0}),rN.packageInfo=void 0,rN.packageInfo={name:"@polkadot/wasm-crypto-init",path:"string"==typeof rS?rS:"auto",type:"cjs",version:"7.2.2"},Object.defineProperty(ra,"packageInfo",{enumerable:!0,get:function(){return rN.packageInfo}}),/**
 * @name createWasm
 * @description
 * Creates an interface using only WASM
 */ra.createWasm=async e=>{let t={error:null,type:"none",wasm:null};try{if(rE?.length){if("object"!=typeof WebAssembly||"function"!=typeof WebAssembly.instantiate)throw Error("WebAssembly is not available in your environment")}else throw Error("No WebAssembly provided for initialization");let r=await WebAssembly.instantiate(rE,{wbg:e});t.wasm=r.instance.exports,t.type="wasm"}catch(e){// if we have a valid supplied asm.js, return that
t.error=`FATAL: Unable to initialize @polkadot/wasm-crypto:: ${e.message}`,console.error(t.error)}return t};const rM=new class{constructor(e){this.__internal__createWasm=e,this.__internal__cachegetInt32=null,this.__internal__cachegetUint8=null,this.__internal__heap=Array(32).fill(void 0).concat(void 0,null,!0,!1),this.__internal__heapNext=this.__internal__heap.length,this.__internal__type="none",this.__internal__wasm=null,this.__internal__wasmError=null,this.__internal__wasmPromise=null,this.__internal__wbg={...new rn(this)}}/** @description Returns the init error */get error(){return this.__internal__wasmError}/** @description Returns the init type */get type(){return this.__internal__type}/** @description Returns the created wasm interface */get wasm(){return this.__internal__wasm}/** @description Performs the wasm initialization */async init(e){(!this.__internal__wasmPromise||e)&&(this.__internal__wasmPromise=(e||this.__internal__createWasm)(this.__internal__wbg));let{error:t,type:r,wasm:n}=await this.__internal__wasmPromise;return this.__internal__type=r,this.__internal__wasm=n,this.__internal__wasmError=t,this.__internal__wasm}/**
     * @internal
     * @description Gets an object from the heap
     */getObject(e){return this.__internal__heap[e]}/**
     * @internal
     * @description Removes an object from the heap
     */dropObject(e){e<36||(this.__internal__heap[e]=this.__internal__heapNext,this.__internal__heapNext=e)}/**
     * @internal
     * @description Retrieves and removes an object to the heap
     */takeObject(e){let t=this.getObject(e);return this.dropObject(e),t}/**
     * @internal
     * @description Adds an object to the heap
     */addObject(e){this.__internal__heapNext===this.__internal__heap.length&&this.__internal__heap.push(this.__internal__heap.length+1);let t=this.__internal__heapNext;return this.__internal__heapNext=this.__internal__heap[t],this.__internal__heap[t]=e,t}/**
     * @internal
     * @description Retrieve an Int32 in the WASM interface
     */getInt32(){return(null===this.__internal__cachegetInt32||this.__internal__cachegetInt32.buffer!==this.__internal__wasm.memory.buffer)&&(this.__internal__cachegetInt32=new Int32Array(this.__internal__wasm.memory.buffer)),this.__internal__cachegetInt32}/**
     * @internal
     * @description Retrieve an Uint8Array in the WASM interface
     */getUint8(){return(null===this.__internal__cachegetUint8||this.__internal__cachegetUint8.buffer!==this.__internal__wasm.memory.buffer)&&(this.__internal__cachegetUint8=new Uint8Array(this.__internal__wasm.memory.buffer)),this.__internal__cachegetUint8}/**
     * @internal
     * @description Retrieves an Uint8Array in the WASM interface
     */getU8a(e,t){return this.getUint8().subarray(e/1,e/1+t)}/**
     * @internal
     * @description Retrieves a string in the WASM interface
     */getString(e,t){return t6(this.getU8a(e,t))}/**
     * @internal
     * @description Allocates an Uint8Array in the WASM interface
     */allocU8a(e){let t=this.__internal__wasm.__wbindgen_malloc(1*e.length);return this.getUint8().set(e,t/1),[t,e.length]}/**
     * @internal
     * @description Allocates a string in the WASM interface
     */allocString(e){return this.allocU8a(e2(e))}/**
     * @internal
     * @description Retrieves an Uint8Array from the WASM interface
     */resultU8a(){let e=this.getInt32()[2],t=this.getInt32()[3],r=this.getU8a(e,t).slice();return this.__internal__wasm.__wbindgen_free(e,1*t),r}/**
     * @internal
     * @description Retrieve a string from the WASM interface
     */resultString(){return t6(this.resultU8a())}}(ra.createWasm);/**
 * @internal
 * @description
 * This create an extenal interface function from the signature, all the while checking
 * the actual bridge wasm interface to ensure it has been initialized.
 *
 * This means that we can call it
 *
 *   withWasm(wasm: WasmCryptoInstance, a: number, b: string) => Uint8Array
 *
 * and in this case it will create an interface function with the signarure
 *
 *   (a: number, b: string) => Uint8Array
 */function rj(e){return(...t)=>{if(!rM.wasm)throw Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");return e(rM.wasm,...t)}}const rH=/*#__PURE__*/rj((e,t)=>(e.ext_bip39_generate(8,t),rM.resultString())),rR=/*#__PURE__*/rj((e,t)=>(e.ext_bip39_to_entropy(8,...rM.allocString(t)),rM.resultU8a())),rI=/*#__PURE__*/rj((e,t,r)=>(e.ext_bip39_to_mini_secret(8,...rM.allocString(t),...rM.allocString(r)),rM.resultU8a())),rB=/*#__PURE__*/rj((e,t)=>{let r=e.ext_bip39_validate(...rM.allocString(t));return 0!==r}),rV=/*#__PURE__*/rj((e,t,r,n)=>{let a=e.ext_ed_verify(...rM.allocU8a(t),...rM.allocU8a(r),...rM.allocU8a(n));return 0!==a}),rX=/*#__PURE__*/rj((e,t)=>(e.ext_secp_pub_compress(8,...rM.allocU8a(t)),rM.resultU8a())),rU=/*#__PURE__*/rj((e,t)=>(e.ext_secp_pub_expand(8,...rM.allocU8a(t)),rM.resultU8a())),rA=/*#__PURE__*/rj((e,t,r,n)=>(e.ext_secp_recover(8,...rM.allocU8a(t),...rM.allocU8a(r),n),rM.resultU8a())),rD=/*#__PURE__*/rj((e,t,r,n)=>{let a=e.ext_sr_verify(...rM.allocU8a(t),...rM.allocU8a(r),...rM.allocU8a(n));return 0!==a}),rC=/*#__PURE__*/rj((e,t,r,n)=>(e.ext_blake2b(8,...rM.allocU8a(t),...rM.allocU8a(r),n),rM.resultU8a())),rF=/*#__PURE__*/rj((e,t)=>(e.ext_keccak256(8,...rM.allocU8a(t)),rM.resultU8a())),rZ=/*#__PURE__*/rj((e,t)=>(e.ext_keccak512(8,...rM.allocU8a(t)),rM.resultU8a())),rq=/*#__PURE__*/rj((e,t,r,n)=>(e.ext_pbkdf2(8,...rM.allocU8a(t),...rM.allocU8a(r),n),rM.resultU8a())),rG=/*#__PURE__*/rj((e,t)=>(e.ext_sha256(8,...rM.allocU8a(t)),rM.resultU8a())),rW=/*#__PURE__*/rj((e,t)=>(e.ext_sha512(8,...rM.allocU8a(t)),rM.resultU8a()));function rY(){return!!rM.wasm}const rK=Array(256),rJ=Array(65536);for(let e=0;e<256;e++)rK[e]=e.toString(16).padStart(2,"0");for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)rJ[t|r]=rK[e]+rK[r]}/** @internal */function rQ(e,t){let r=e.length%2|0,n=e.length-r|0;for(let r=0;r<n;r+=2)t+=rJ[e[r]<<8|e[r+1]];return r&&(t+=rK[0|e[n]]),t}function r_(e,t=-1,r=!0){// this is not 100% correct sinmce we support isPrefixed = false....
let n=r?"0x":"";if(!e?.length)return n;if(t>0){let r=Math.ceil(t/8);if(e.length>r)return`${rQ(e.subarray(0,r/2),n)}\u{2026}${rQ(e.subarray(e.length-r/2),"")}`}return rQ(e,n)}function r$(e,t){return(r,n=256,a)=>{let i=e5(r);return!eY||!a&&rY()?e[n](i):t[n](i)}}function r0(e,t=256,r,n){let a=Math.ceil(t/8),i=e5(e);return!eY||!n&&rY()?rC(i,e5(r),a):r?(0,ts.blake2b)(i,{dkLen:a,key:r}):(0,ts.blake2b)(i,{dkLen:a})}const r1=(...e)=>r_(r0(...e)),r2=e2("SS58PRE");function r5(e){return r0(ti(r2,e),512)}function r3(e){let t=64&e[0]?2:1,r=1===t?e[0]:(63&e[0])<<2|e[1]>>6|(63&e[1])<<8,n=[34+t,35+t].includes(e.length),a=e.length-(n?2:1),i=r5(e.subarray(0,a)),o=(128&e[0])==0&&![46,47].includes(e[0])&&(n?e[e.length-2]===i[0]&&e[e.length-1]===i[1]:e[e.length-1]===i[0]);return[o,a,t,r]}const r8={acala:["0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"],ajuna:["0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"],"aleph-node":["0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"],astar:["0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"],basilisk:["0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"],bifrost:["0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"],"bifrost-kusama":["0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"],bittensor:["0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"],centrifuge:["0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82","0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"],cere:["0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c"],composable:["0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"],darwinia:["0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"],"dock-mainnet":["0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae","0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"],edgeware:["0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"],enjin:["0xd8761d3c88f26dc12875c00d3165f7d67243d56fc85b4cf19937601a7916e5a9"],equilibrium:["0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"],genshiro:["0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"],hydradx:["0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d","0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc","0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9","0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047","0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"// Snakenet Gen1
],"interlay-parachain":["0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"],karura:["0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"],khala:["0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"],kulupu:["0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"],kusama:["0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe","0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636","0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"// Kusama CC1
],matrixchain:["0x3af4ff48ec76d2efc8476730f423ac07e25ad48f5f4c9dc39c778b164d808615"],nodle:["0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"],origintrail:["0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"],p3d:["0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"],parallel:["0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"],pendulum:["0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"],phala:["0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"],picasso:["0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc","0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"],polkadex:["0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"],polkadot:["0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"],polymesh:["0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"],rococo:["0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e","0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897","0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770","0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff","0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a","0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9","0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779","0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215","0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9","0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147","0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd","0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"],sora:["0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"],stafi:["0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"],statemine:["0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"],statemint:["0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"],subsocial:["0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"],ternoa:["0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"],unique:["0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"],vtb:["0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f","0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"],westend:["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"],xxnetwork:["0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"],zeitgeist:["0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060"]},r9={centrifuge:"polkadot",kusama:"polkadot",polkadot:"polkadot",sora:"polkadot",statemine:"polkadot",statemint:"polkadot",westmint:"polkadot"},r6={acala:787,ajuna:354,"aleph-node":643,astar:810,bifrost:788,"bifrost-kusama":788,centrifuge:747,composable:354,darwinia:354,"dock-mainnet":594,edgeware:523,enjin:1155,equilibrium:99999997,genshiro:99999996,hydradx:354,"interlay-parachain":354,karura:686,khala:434,kusama:434,matrixchain:1155,nodle:1003,origintrail:354,parallel:354,pendulum:354,phala:354,picasso:434,polkadex:799,polkadot:354,polymesh:595,sora:617,stafi:907,statemine:434,statemint:354,ternoa:995,unique:354,vtb:694,xxnetwork:1955,zeitgeist:354},r4={"":!0,"cess-testnet":!0,"dock-testnet":!0,jupiter:!0,"mathchain-testnet":!0,p3dt:!0,subspace_testnet:!0,"zero-alphaville":!0},r7=[0,2,42],ne=["testnet"],nt=[{prefix:0,network:"polkadot",displayName:"Polkadot Relay Chain",symbols:["DOT"],decimals:[10],standardAccount:"*25519",website:"https://polkadot.network"},{prefix:1,network:"BareSr25519",displayName:"Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",symbols:[],decimals:[],standardAccount:"Sr25519",website:null},{prefix:2,network:"kusama",displayName:"Kusama Relay Chain",symbols:["KSM"],decimals:[12],standardAccount:"*25519",website:"https://kusama.network"},{prefix:3,network:"BareEd25519",displayName:"Bare 32-bit Ed25519 public key.",symbols:[],decimals:[],standardAccount:"Ed25519",website:null},{prefix:4,network:"katalchain",displayName:"Katal Chain",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:5,network:"astar",displayName:"Astar Network",symbols:["ASTR"],decimals:[18],standardAccount:"*25519",website:"https://astar.network"},{prefix:6,network:"bifrost",displayName:"Bifrost",symbols:["BNC"],decimals:[12],standardAccount:"*25519",website:"https://bifrost.finance/"},{prefix:7,network:"edgeware",displayName:"Edgeware",symbols:["EDG"],decimals:[18],standardAccount:"*25519",website:"https://edgewa.re"},{prefix:8,network:"karura",displayName:"Karura",symbols:["KAR"],decimals:[12],standardAccount:"*25519",website:"https://karura.network/"},{prefix:9,network:"reynolds",displayName:"Laminar Reynolds Canary",symbols:["REY"],decimals:[18],standardAccount:"*25519",website:"http://laminar.network/"},{prefix:10,network:"acala",displayName:"Acala",symbols:["ACA"],decimals:[12],standardAccount:"*25519",website:"https://acala.network/"},{prefix:11,network:"laminar",displayName:"Laminar",symbols:["LAMI"],decimals:[18],standardAccount:"*25519",website:"http://laminar.network/"},{prefix:12,network:"polymesh",displayName:"Polymesh",symbols:["POLYX"],decimals:[6],standardAccount:"*25519",website:"https://polymath.network/"},{prefix:13,network:"integritee",displayName:"Integritee",symbols:["TEER"],decimals:[12],standardAccount:"*25519",website:"https://integritee.network"},{prefix:14,network:"totem",displayName:"Totem",symbols:["TOTEM"],decimals:[0],standardAccount:"*25519",website:"https://totemaccounting.com"},{prefix:15,network:"synesthesia",displayName:"Synesthesia",symbols:["SYN"],decimals:[12],standardAccount:"*25519",website:"https://synesthesia.network/"},{prefix:16,network:"kulupu",displayName:"Kulupu",symbols:["KLP"],decimals:[12],standardAccount:"*25519",website:"https://kulupu.network/"},{prefix:17,network:"dark",displayName:"Dark Mainnet",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:18,network:"darwinia",displayName:"Darwinia Network",symbols:["RING"],decimals:[18],standardAccount:"secp256k1",website:"https://darwinia.network"},{prefix:19,network:"watr",displayName:"Watr Protocol",symbols:["WATR"],decimals:[18],standardAccount:"*25519",website:"https://www.watr.org"},{prefix:20,network:"stafi",displayName:"Stafi",symbols:["FIS"],decimals:[12],standardAccount:"*25519",website:"https://stafi.io"},{prefix:21,network:"karmachain",displayName:"Karmacoin",symbols:["KCOIN"],decimals:[6],standardAccount:"*25519",website:"https://karmaco.in"},{prefix:22,network:"dock-pos-mainnet",displayName:"Dock Mainnet",symbols:["DCK"],decimals:[6],standardAccount:"*25519",website:"https://dock.io"},{prefix:23,network:"shift",displayName:"ShiftNrg",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:24,network:"zero",displayName:"ZERO",symbols:["ZERO"],decimals:[18],standardAccount:"*25519",website:"https://zero.io"},{prefix:25,network:"zero-alphaville",displayName:"ZERO Alphaville",symbols:["ZERO"],decimals:[18],standardAccount:"*25519",website:"https://zero.io"},{prefix:26,network:"jupiter",displayName:"Jupiter",symbols:["jDOT"],decimals:[10],standardAccount:"*25519",website:"https://jupiter.patract.io"},{prefix:27,network:"kabocha",displayName:"Kabocha",symbols:["KAB"],decimals:[12],standardAccount:"*25519",website:"https://kabocha.network"},{prefix:28,network:"subsocial",displayName:"Subsocial",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:29,network:"cord",displayName:"CORD Network",symbols:["DHI","WAY"],decimals:[12,12],standardAccount:"*25519",website:"https://cord.network/"},{prefix:30,network:"phala",displayName:"Phala Network",symbols:["PHA"],decimals:[12],standardAccount:"*25519",website:"https://phala.network"},{prefix:31,network:"litentry",displayName:"Litentry Network",symbols:["LIT"],decimals:[12],standardAccount:"*25519",website:"https://litentry.com/"},{prefix:32,network:"robonomics",displayName:"Robonomics",symbols:["XRT"],decimals:[9],standardAccount:"*25519",website:"https://robonomics.network"},{prefix:33,network:"datahighway",displayName:"DataHighway",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:34,network:"ares",displayName:"Ares Protocol",symbols:["ARES"],decimals:[12],standardAccount:"*25519",website:"https://www.aresprotocol.com/"},{prefix:35,network:"vln",displayName:"Valiu Liquidity Network",symbols:["USDv"],decimals:[15],standardAccount:"*25519",website:"https://valiu.com/"},{prefix:36,network:"centrifuge",displayName:"Centrifuge Chain",symbols:["CFG"],decimals:[18],standardAccount:"*25519",website:"https://centrifuge.io/"},{prefix:37,network:"nodle",displayName:"Nodle Chain",symbols:["NODL"],decimals:[11],standardAccount:"*25519",website:"https://nodle.io/"},{prefix:38,network:"kilt",displayName:"KILT Spiritnet",symbols:["KILT"],decimals:[15],standardAccount:"*25519",website:"https://kilt.io/"},{prefix:39,network:"mathchain",displayName:"MathChain mainnet",symbols:["MATH"],decimals:[18],standardAccount:"*25519",website:"https://mathwallet.org"},{prefix:40,network:"mathchain-testnet",displayName:"MathChain testnet",symbols:["MATH"],decimals:[18],standardAccount:"*25519",website:"https://mathwallet.org"},{prefix:41,network:"poli",displayName:"Polimec Chain",symbols:[],decimals:[],standardAccount:"*25519",website:"https://polimec.io/"},{prefix:42,network:"substrate",displayName:"Substrate",symbols:[],decimals:[],standardAccount:"*25519",website:"https://substrate.io/"},{prefix:43,network:"BareSecp256k1",displayName:"Bare 32-bit ECDSA SECP-256k1 public key.",symbols:[],decimals:[],standardAccount:"secp256k1",website:null},{prefix:44,network:"chainx",displayName:"ChainX",symbols:["PCX"],decimals:[8],standardAccount:"*25519",website:"https://chainx.org/"},{prefix:45,network:"uniarts",displayName:"UniArts Network",symbols:["UART","UINK"],decimals:[12,12],standardAccount:"*25519",website:"https://uniarts.me"},{prefix:46,network:"reserved46",displayName:"This prefix is reserved.",symbols:[],decimals:[],standardAccount:null,website:null},{prefix:47,network:"reserved47",displayName:"This prefix is reserved.",symbols:[],decimals:[],standardAccount:null,website:null},{prefix:48,network:"neatcoin",displayName:"Neatcoin Mainnet",symbols:["NEAT"],decimals:[12],standardAccount:"*25519",website:"https://neatcoin.org"},{prefix:49,network:"picasso",displayName:"Picasso",symbols:["PICA"],decimals:[12],standardAccount:"*25519",website:"https://picasso.composable.finance"},{prefix:50,network:"composable",displayName:"Composable Finance",symbols:["LAYR"],decimals:[12],standardAccount:"*25519",website:"https://composable.finance"},{prefix:51,network:"oak",displayName:"OAK Network",symbols:["OAK","TUR"],decimals:[10,10],standardAccount:"*25519",website:"https://oak.tech"},{prefix:52,network:"KICO",displayName:"KICO",symbols:["KICO"],decimals:[14],standardAccount:"*25519",website:"https://dico.io"},{prefix:53,network:"DICO",displayName:"DICO",symbols:["DICO"],decimals:[14],standardAccount:"*25519",website:"https://dico.io"},{prefix:54,network:"cere",displayName:"Cere Network",symbols:["CERE"],decimals:[10],standardAccount:"*25519",website:"https://cere.network"},{prefix:55,network:"xxnetwork",displayName:"xx network",symbols:["XX"],decimals:[9],standardAccount:"*25519",website:"https://xx.network"},{prefix:56,network:"pendulum",displayName:"Pendulum chain",symbols:["PEN"],decimals:[12],standardAccount:"*25519",website:"https://pendulumchain.org/"},{prefix:57,network:"amplitude",displayName:"Amplitude chain",symbols:["AMPE"],decimals:[12],standardAccount:"*25519",website:"https://pendulumchain.org/"},{prefix:63,network:"hydradx",displayName:"HydraDX",symbols:["HDX"],decimals:[12],standardAccount:"*25519",website:"https://hydradx.io"},{prefix:64,network:"ewx",displayName:"Energy Web X",symbols:["EWT"],decimals:[18],standardAccount:"*25519",website:"https://www.energyweb.org"},{prefix:65,network:"aventus",displayName:"Aventus Mainnet",symbols:["AVT"],decimals:[18],standardAccount:"*25519",website:"https://aventus.io"},{prefix:66,network:"crust",displayName:"Crust Network",symbols:["CRU"],decimals:[12],standardAccount:"*25519",website:"https://crust.network"},{prefix:67,network:"genshiro",displayName:"Genshiro Network",symbols:["GENS","EQD","LPT0"],decimals:[9,9,9],standardAccount:"*25519",website:"https://genshiro.equilibrium.io"},{prefix:68,network:"equilibrium",displayName:"Equilibrium Network",symbols:["EQ"],decimals:[9],standardAccount:"*25519",website:"https://equilibrium.io"},{prefix:69,network:"sora",displayName:"SORA Network",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:71,network:"p3d",displayName:"3DP network",symbols:["P3D"],decimals:[12],standardAccount:"*25519",website:"https://3dpass.org"},{prefix:72,network:"p3dt",displayName:"3DP test network",symbols:["P3Dt"],decimals:[12],standardAccount:"*25519",website:"https://3dpass.org"},{prefix:73,network:"zeitgeist",displayName:"Zeitgeist",symbols:["ZTG"],decimals:[10],standardAccount:"*25519",website:"https://zeitgeist.pm"},{prefix:77,network:"manta",displayName:"Manta network",symbols:["MANTA"],decimals:[18],standardAccount:"*25519",website:"https://manta.network"},{prefix:78,network:"calamari",displayName:"Calamari: Manta Canary Network",symbols:["KMA"],decimals:[12],standardAccount:"*25519",website:"https://manta.network"},{prefix:81,network:"sora_dot_para",displayName:"SORA Polkadot Parachain",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:88,network:"polkadex",displayName:"Polkadex Mainnet",symbols:["PDEX"],decimals:[12],standardAccount:"*25519",website:"https://polkadex.trade"},{prefix:89,network:"polkadexparachain",displayName:"Polkadex Parachain",symbols:["PDEX"],decimals:[12],standardAccount:"*25519",website:"https://polkadex.trade"},{prefix:90,network:"frequency",displayName:"Frequency",symbols:["FRQCY"],decimals:[8],standardAccount:"*25519",website:"https://www.frequency.xyz"},{prefix:92,network:"anmol",displayName:"Anmol Network",symbols:["ANML"],decimals:[18],standardAccount:"*25519",website:"https://anmol.network/"},{prefix:93,network:"fragnova",displayName:"Fragnova Network",symbols:["NOVA"],decimals:[12],standardAccount:"*25519",website:"https://fragnova.com"},{prefix:98,network:"polkasmith",displayName:"PolkaSmith Canary Network",symbols:["PKS"],decimals:[18],standardAccount:"*25519",website:"https://polkafoundry.com"},{prefix:99,network:"polkafoundry",displayName:"PolkaFoundry Network",symbols:["PKF"],decimals:[18],standardAccount:"*25519",website:"https://polkafoundry.com"},{prefix:100,network:"ibtida",displayName:"Anmol Network Ibtida Canary network",symbols:["IANML"],decimals:[18],standardAccount:"*25519",website:"https://anmol.network/"},{prefix:101,network:"origintrail-parachain",displayName:"OriginTrail Parachain",symbols:["OTP"],decimals:[12],standardAccount:"*25519",website:"https://parachain.origintrail.io/"},{prefix:105,network:"pontem-network",displayName:"Pontem Network",symbols:["PONT"],decimals:[10],standardAccount:"*25519",website:"https://pontem.network"},{prefix:110,network:"heiko",displayName:"Heiko",symbols:["HKO"],decimals:[12],standardAccount:"*25519",website:"https://parallel.fi/"},{prefix:113,network:"integritee-incognito",displayName:"Integritee Incognito",symbols:[],decimals:[],standardAccount:"*25519",website:"https://integritee.network"},{prefix:117,network:"tinker",displayName:"Tinker",symbols:["TNKR"],decimals:[12],standardAccount:"*25519",website:"https://invarch.network"},{prefix:126,network:"joystream",displayName:"Joystream",symbols:["JOY"],decimals:[10],standardAccount:"*25519",website:"https://www.joystream.org"},{prefix:128,network:"clover",displayName:"Clover Finance",symbols:["CLV"],decimals:[18],standardAccount:"*25519",website:"https://clover.finance"},{prefix:129,network:"dorafactory-polkadot",displayName:"Dorafactory Polkadot Network",symbols:["DORA"],decimals:[12],standardAccount:"*25519",website:"https://dorafactory.org"},{prefix:131,network:"litmus",displayName:"Litmus Network",symbols:["LIT"],decimals:[12],standardAccount:"*25519",website:"https://litentry.com/"},{prefix:136,network:"altair",displayName:"Altair",symbols:["AIR"],decimals:[18],standardAccount:"*25519",website:"https://centrifuge.io/"},{prefix:137,network:"vara",displayName:"Vara Network",symbols:["VARA"],decimals:[12],standardAccount:"*25519",website:"https://vara-network.io/"},{prefix:172,network:"parallel",displayName:"Parallel",symbols:["PARA"],decimals:[12],standardAccount:"*25519",website:"https://parallel.fi/"},{prefix:252,network:"social-network",displayName:"Social Network",symbols:["NET"],decimals:[18],standardAccount:"*25519",website:"https://social.network"},{prefix:255,network:"quartz_mainnet",displayName:"QUARTZ by UNIQUE",symbols:["QTZ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:268,network:"pioneer_network",displayName:"Pioneer Network by Bit.Country",symbols:["NEER"],decimals:[18],standardAccount:"*25519",website:"https://bit.country"},{prefix:420,network:"sora_kusama_para",displayName:"SORA Kusama Parachain",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:440,network:"allfeat_network",displayName:"Allfeat Network",symbols:["AFT"],decimals:[12],standardAccount:"*25519",website:"https://allfeat.network"},{prefix:666,network:"metaquity_network",displayName:"Metaquity Network",symbols:["MQTY"],decimals:[18],standardAccount:"*25519",website:"https://metaquity.xyz/"},{prefix:789,network:"geek",displayName:"GEEK Network",symbols:["GEEK"],decimals:[18],standardAccount:"*25519",website:"https://geek.gl"},{prefix:995,network:"ternoa",displayName:"Ternoa",symbols:["CAPS"],decimals:[18],standardAccount:"*25519",website:"https://www.ternoa.network"},{prefix:1110,network:"efinity",displayName:"Efinity",symbols:["EFI"],decimals:[18],standardAccount:"*25519",website:"https://efinity.io/"},{prefix:1221,network:"peaq",displayName:"Peaq Network",symbols:["PEAQ"],decimals:[18],standardAccount:"Sr25519",website:"https://www.peaq.network/"},{prefix:1222,network:"krest",displayName:"Krest Network",symbols:["KREST"],decimals:[18],standardAccount:"Sr25519",website:"https://www.peaq.network/"},{prefix:1284,network:"moonbeam",displayName:"Moonbeam",symbols:["GLMR"],decimals:[18],standardAccount:"secp256k1",website:"https://moonbeam.network"},{prefix:1285,network:"moonriver",displayName:"Moonriver",symbols:["MOVR"],decimals:[18],standardAccount:"secp256k1",website:"https://moonbeam.network"},{prefix:1328,network:"ajuna",displayName:"Ajuna Network",symbols:["AJUN"],decimals:[12],standardAccount:"*25519",website:"https://ajuna.io"},{prefix:1337,network:"bajun",displayName:"Bajun Network",symbols:["BAJU"],decimals:[12],standardAccount:"*25519",website:"https://ajuna.io"},{prefix:1516,network:"societal",displayName:"Societal",symbols:["SCTL"],decimals:[12],standardAccount:"*25519",website:"https://www.sctl.xyz"},{prefix:1985,network:"seals",displayName:"Seals Network",symbols:["SEAL"],decimals:[9],standardAccount:"*25519",website:"https://seals.app"},{prefix:2007,network:"kapex",displayName:"Kapex",symbols:["KAPEX"],decimals:[12],standardAccount:"*25519",website:"https://totemaccounting.com"},{prefix:2009,network:"cloudwalk_mainnet",displayName:"CloudWalk Network Mainnet",symbols:["CWN"],decimals:[18],standardAccount:"*25519",website:"https://explorer.mainnet.cloudwalk.io"},{prefix:2021,network:"logion",displayName:"logion network",symbols:["LGNT"],decimals:[18],standardAccount:"*25519",website:"https://logion.network"},{prefix:2032,network:"interlay",displayName:"Interlay",symbols:["INTR"],decimals:[10],standardAccount:"*25519",website:"https://interlay.io/"},{prefix:2092,network:"kintsugi",displayName:"Kintsugi",symbols:["KINT"],decimals:[12],standardAccount:"*25519",website:"https://interlay.io/"},{prefix:2106,network:"bitgreen",displayName:"Bitgreen",symbols:["BBB"],decimals:[18],standardAccount:"*25519",website:"https://bitgreen.org/"},{prefix:2112,network:"chainflip",displayName:"Chainflip",symbols:["FLIP"],decimals:[18],standardAccount:"*25519",website:"https://chainflip.io/"},{prefix:2199,network:"moonsama",displayName:"Moonsama",symbols:["SAMA"],decimals:[18],standardAccount:"secp256k1",website:"https://moonsama.com"},{prefix:2206,network:"ICE",displayName:"ICE Network",symbols:["ICY"],decimals:[18],standardAccount:"*25519",website:"https://icenetwork.io"},{prefix:2207,network:"SNOW",displayName:"SNOW: ICE Canary Network",symbols:["ICZ"],decimals:[18],standardAccount:"*25519",website:"https://icenetwork.io"},{prefix:2254,network:"subspace_testnet",displayName:"Subspace testnet",symbols:["tSSC"],decimals:[18],standardAccount:"*25519",website:"https://subspace.network"},{prefix:3333,network:"peerplays",displayName:"Peerplays",symbols:["PPY"],decimals:[18],standardAccount:"secp256k1",website:"https://www.peerplays.com/"},{prefix:4006,network:"tangle",displayName:"Tangle Network",symbols:["TNT"],decimals:[18],standardAccount:"*25519",website:"https://www.webb.tools/"},{prefix:4450,network:"g1",displayName:"Ğ1",symbols:["G1"],decimals:[2],standardAccount:"*25519",website:"https://duniter.org"},{prefix:5234,network:"humanode",displayName:"Humanode Network",symbols:["HMND"],decimals:[18],standardAccount:"*25519",website:"https://humanode.io"},{prefix:6094,network:"subspace",displayName:"Subspace",symbols:["SSC"],decimals:[18],standardAccount:"*25519",website:"https://subspace.network"},{prefix:7007,network:"tidefi",displayName:"Tidefi",symbols:["TDFY"],decimals:[12],standardAccount:"*25519",website:"https://tidefi.com"},{prefix:7013,network:"gm",displayName:"GM",symbols:["FREN","GM","GN"],decimals:[12,0,0],standardAccount:"*25519",website:"https://gmordie.com"},{prefix:7306,network:"krigan",displayName:"Krigan Network",symbols:["KRGN"],decimals:[9],standardAccount:"*25519",website:"https://krigan.network"},{prefix:7391,network:"unique_mainnet",displayName:"Unique Network",symbols:["UNQ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:8866,network:"golden_gate",displayName:"Golden Gate",symbols:["GGX"],decimals:[18],standardAccount:"*25519",website:"https://ggxchain.io/"},{prefix:8883,network:"sapphire_mainnet",displayName:"Sapphire by Unique",symbols:["QTZ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:8886,network:"golden_gate_sydney",displayName:"Golden Gate Sydney",symbols:["GGXT"],decimals:[18],standardAccount:"*25519",website:"https://ggxchain.io/"},{prefix:9072,network:"hashed",displayName:"Hashed Network",symbols:["HASH"],decimals:[18],standardAccount:"*25519",website:"https://hashed.network"},{prefix:9807,network:"dentnet",displayName:"DENTNet",symbols:["DENTX"],decimals:[18],standardAccount:"*25519",website:"https://www.dentnet.io"},{prefix:9935,network:"t3rn",displayName:"t3rn",symbols:["TRN"],decimals:[12],standardAccount:"*25519",website:"https://t3rn.io/"},{prefix:10041,network:"basilisk",displayName:"Basilisk",symbols:["BSX"],decimals:[12],standardAccount:"*25519",website:"https://bsx.fi"},{prefix:11330,network:"cess-testnet",displayName:"CESS Testnet",symbols:["TCESS"],decimals:[12],standardAccount:"*25519",website:"https://cess.cloud"},{prefix:11331,network:"cess",displayName:"CESS",symbols:["CESS"],decimals:[12],standardAccount:"*25519",website:"https://cess.cloud"},{prefix:11486,network:"luhn",displayName:"Luhn Network",symbols:["LUHN"],decimals:[18],standardAccount:"*25519",website:"https://luhn.network"},{prefix:11820,network:"contextfree",displayName:"Automata ContextFree",symbols:["CTX"],decimals:[18],standardAccount:"*25519",website:"https://ata.network"},{prefix:12155,network:"impact",displayName:"Impact Protocol Network",symbols:["BSTY"],decimals:[18],standardAccount:"*25519",website:"https://impactprotocol.network/"},{prefix:12191,network:"nftmart",displayName:"NFTMart",symbols:["NMT"],decimals:[12],standardAccount:"*25519",website:"https://nftmart.io"},{prefix:13116,network:"bittensor",displayName:"Bittensor",symbols:["TAO"],decimals:[9],standardAccount:"*25519",website:"https://bittensor.com"},{prefix:14697,network:"goro",displayName:"GORO Network",symbols:["GORO"],decimals:[9],standardAccount:"*25519",website:"https://goro.network"}].map(function(e){let t=e.network||"",r=t.replace(/_/g,"-").split("-");return(// ledger additions
e.slip44=r6[t],e.hasLedgerSupport=!!e.slip44,// general items
e.genesisHash=r8[t]||[],e.icon=r9[t]||"substrate",// filtering
e.isTestnet=!!r4[t]||ne.includes(r[r.length-1]),e.isIgnored=e.isTestnet||!(e.standardAccount&&e.decimals?.length&&e.symbols?.length)&&42!==e.prefix,e)}),nr=nt.filter(function(e){return!e.isIgnored&&!!e.network}).sort(function(e,t){let r=r7.includes(e.prefix),n=r7.includes(t.prefix);return r===n?r?0:e.displayName.localeCompare(t.displayName):r?-1:1});nr.filter(function({genesisHash:e,prefix:t}){return!!e.length||42===t});const nn={allowedDecodedLengths:[1,2,4,8,32,33],// publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
allowedEncodedLengths:[3,4,6,10,35,36,37,38],allowedPrefix:nr.map(({prefix:e})=>e),prefix:42};function na(e,t,r=-1){if(!e)throw Error("Invalid empty address passed");if(eD(e)||eA(e))return e5(e);try{let n=tn(e);if(!nn.allowedEncodedLengths.includes(n.length))throw Error("Invalid decoded address length");let[a,i,o,s]=r3(n);if(a||t){if(-1!==r&&r!==s)throw Error(`Expected ss58Format ${r}, received ${s}`)}else throw Error("Invalid decoded address checksum");return n.slice(o,i)}catch(t){throw Error(`Decoding ${e}: ${t.message}`)}}function ni(e,t=nn.prefix){// decode it, this means we can re-encode an address
let r=na(e);if(t<0||t>16383||[46,47].includes(t))throw Error("Out of range ss58Format specified");if(!nn.allowedDecodedLengths.includes(r.length))throw Error(`Expected a valid key to convert, with length ${nn.allowedDecodedLengths.join(", ")}`);let n=ti(t<64?[t]:[(252&t)>>2|64,t>>8|(3&t)<<6],r);return ta(ti(n,r5(n).subarray(0,[32,33].includes(r.length)?2:1)))}var no={};Object.defineProperty(no,"__esModule",{value:!0}),no.pbkdf2Async=no.pbkdf2=void 0;var ns={};Object.defineProperty(ns,"__esModule",{value:!0}),ns.hmac=ns.HMAC=void 0;// HMAC (RFC 2104)
class nl extends ty.Hash{constructor(e,t){super(),this.finished=!1,this.destroyed=!1,(0,tc.hash)(e);let r=(0,ty.toBytes)(t);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;let n=this.blockLen,a=new Uint8Array(n);// blockLen can be bigger than outputLen
a.set(r.length>n?e.create().update(r).digest():r);for(let e=0;e<a.length;e++)a[e]^=54;this.iHash.update(a),// By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
this.oHash=e.create();// Undo internal XOR && apply outer XOR
for(let e=0;e<a.length;e++)a[e]^=106;this.oHash.update(a),a.fill(0)}update(e){return(0,tc.exists)(this),this.iHash.update(e),this}digestInto(e){(0,tc.exists)(this),(0,tc.bytes)(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){let e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){// Create new instance without calling constructor since key already in state and we don't know it.
e||(e=Object.create(Object.getPrototypeOf(this),{}));let{oHash:t,iHash:r,finished:n,destroyed:a,blockLen:i,outputLen:o}=this;return e.finished=n,e.destroyed=a,e.blockLen=i,e.outputLen=o,e.oHash=t._cloneInto(e.oHash),e.iHash=r._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}// Common prologue and epilogue for sync/async functions
function nc(e,t,r,n){(0,tc.hash)(e);let a=(0,ty.checkOpts)({dkLen:32,asyncTick:10},n),{c:i,dkLen:o,asyncTick:s}=a;if((0,tc.number)(i),(0,tc.number)(o),(0,tc.number)(s),i<1)throw Error("PBKDF2: iterations (c) should be >= 1");let l=(0,ty.toBytes)(t),c=(0,ty.toBytes)(r),u=new Uint8Array(o),d=ns.hmac.create(e,l),f=d._cloneInto().update(c);return{c:i,dkLen:o,asyncTick:s,DK:u,PRF:d,PRFSalt:f}}function nu(e,t,r,n,a){return e.destroy(),t.destroy(),n&&n.destroy(),a.fill(0),r}async function nd(e,t,r,n){let a;let{c:i,dkLen:o,asyncTick:s,DK:l,PRF:c,PRFSalt:u}=nc(e,t,r,n),d=new Uint8Array(4),f=(0,ty.createView)(d),p=new Uint8Array(c.outputLen);// DK = T1 + T2 + ⋯ + Tdklen/hlen
for(let e=1,t=0;t<o;e++,t+=c.outputLen){// Ti = F(Password, Salt, c, i)
let r=l.subarray(t,t+c.outputLen);f.setInt32(0,e,!1),// F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
// U1 = PRF(Password, Salt + INT_32_BE(i))
(a=u._cloneInto(a)).update(d).digestInto(p),r.set(p.subarray(0,r.length)),await (0,ty.asyncLoop)(i-1,s,()=>{// Uc = PRF(Password, Uc−1)
c._cloneInto(a).update(p).digestInto(p);for(let e=0;e<r.length;e++)r[e]^=p[e]})}return nu(c,u,l,a,p)}ns.HMAC=nl,ns.hmac=(e,t,r)=>new nl(e,t).update(r).digest(),ns.hmac.create=(e,t)=>new nl(e,t),no.pbkdf2=/**
 * PBKDF2-HMAC: RFC 2898 key derivation function
 * @param hash - hash function that would be used e.g. sha256
 * @param password - password from which a derived key is generated
 * @param salt - cryptographic salt
 * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
 */function(e,t,r,n){let a;let{c:i,dkLen:o,DK:s,PRF:l,PRFSalt:c}=nc(e,t,r,n),u=new Uint8Array(4),d=(0,ty.createView)(u),f=new Uint8Array(l.outputLen);// DK = T1 + T2 + ⋯ + Tdklen/hlen
for(let e=1,t=0;t<o;e++,t+=l.outputLen){// Ti = F(Password, Salt, c, i)
let r=s.subarray(t,t+l.outputLen);d.setInt32(0,e,!1),// F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
// U1 = PRF(Password, Salt + INT_32_BE(i))
(a=c._cloneInto(a)).update(u).digestInto(f),r.set(f.subarray(0,r.length));for(let e=1;e<i;e++){// Uc = PRF(Password, Uc−1)
l._cloneInto(a).update(f).digestInto(f);for(let e=0;e<r.length;e++)r[e]^=f[e]}}return nu(l,c,s,a,f)},no.pbkdf2Async=nd;var nf={};Object.defineProperty(nf,"__esModule",{value:!0}),nf.sha384=nf.sha512_256=nf.sha512_224=nf.sha512=nf.SHA512=void 0;var np={};Object.defineProperty(np,"__esModule",{value:!0}),np.SHA2=void 0;// Base SHA2 class (RFC 6234)
class nh extends ty.Hash{constructor(e,t,r,n){super(),this.blockLen=e,this.outputLen=t,this.padOffset=r,this.isLE=n,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=(0,ty.createView)(this.buffer)}update(e){(0,tc.exists)(this);let{view:t,buffer:r,blockLen:n}=this;e=(0,ty.toBytes)(e);let a=e.length;for(let i=0;i<a;){let o=Math.min(n-this.pos,a-i);// Fast path: we have at least one block in input, cast it to view and process
if(o===n){let t=(0,ty.createView)(e);for(;n<=a-i;i+=n)this.process(t,i);continue}r.set(e.subarray(i,i+o),this.pos),this.pos+=o,i+=o,this.pos===n&&(this.process(t,0),this.pos=0)}return this.length+=e.length,this.roundClean(),this}digestInto(e){(0,tc.exists)(this),(0,tc.output)(e,this),this.finished=!0;// Padding
// We can avoid allocation of buffer for padding completely if it
// was previously not allocated here. But it won't change performance.
let{buffer:t,view:r,blockLen:n,isLE:a}=this,{pos:i}=this;// append the bit '1' to the message
t[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>n-i&&(this.process(r,0),i=0);// Pad until full block byte with zeros
for(let e=i;e<n;e++)t[e]=0;!// Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
// You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
// So we just write lowest 64 bits of that value.
// Polyfill for Safari 14
function(e,t,r,n){if("function"==typeof e.setBigUint64)return e.setBigUint64(t,r,n);let a=BigInt(32),i=BigInt(4294967295),o=Number(r>>a&i),s=Number(r&i),l=n?4:0,c=n?0:4;e.setUint32(t+l,o,n),e.setUint32(t+c,s,n)}(r,n-8,BigInt(8*this.length),a),this.process(r,0);let o=(0,ty.createView)(e),s=this.outputLen;// NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
if(s%4)throw Error("_sha2: outputLen should be aligned to 32bit");let l=s/4,c=this.get();if(l>c.length)throw Error("_sha2: outputLen bigger than state");for(let e=0;e<l;e++)o.setUint32(4*e,c[e],a)}digest(){let{buffer:e,outputLen:t}=this;this.digestInto(e);let r=e.slice(0,t);return this.destroy(),r}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());let{blockLen:t,buffer:r,length:n,finished:a,destroyed:i,pos:o}=this;return e.length=n,e.pos=o,e.finished=a,e.destroyed=i,n%t&&e.buffer.set(r),e}}np.SHA2=nh;// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
// prettier-ignore
const[nb,ny]=tk.default.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map(e=>BigInt(e))),nm=/* @__PURE__ */new Uint32Array(80),ng=/* @__PURE__ */new Uint32Array(80);class nv extends np.SHA2{constructor(){super(128,64,16,!1),// We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
// Also looks cleaner and easier to verify with spec.
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// h -- high 32 bits, l -- low 32 bits
this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}// prettier-ignore
get(){let{Ah:e,Al:t,Bh:r,Bl:n,Ch:a,Cl:i,Dh:o,Dl:s,Eh:l,El:c,Fh:u,Fl:d,Gh:f,Gl:p,Hh:h,Hl:b}=this;return[e,t,r,n,a,i,o,s,l,c,u,d,f,p,h,b]}// prettier-ignore
set(e,t,r,n,a,i,o,s,l,c,u,d,f,p,h,b){this.Ah=0|e,this.Al=0|t,this.Bh=0|r,this.Bl=0|n,this.Ch=0|a,this.Cl=0|i,this.Dh=0|o,this.Dl=0|s,this.Eh=0|l,this.El=0|c,this.Fh=0|u,this.Fl=0|d,this.Gh=0|f,this.Gl=0|p,this.Hh=0|h,this.Hl=0|b}process(e,t){// Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
for(let r=0;r<16;r++,t+=4)nm[r]=e.getUint32(t),ng[r]=e.getUint32(t+=4);for(let e=16;e<80;e++){// s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
let t=0|nm[e-15],r=0|ng[e-15],n=tk.default.rotrSH(t,r,1)^tk.default.rotrSH(t,r,8)^tk.default.shrSH(t,r,7),a=tk.default.rotrSL(t,r,1)^tk.default.rotrSL(t,r,8)^tk.default.shrSL(t,r,7),i=0|nm[e-2],o=0|ng[e-2],s=tk.default.rotrSH(i,o,19)^tk.default.rotrBH(i,o,61)^tk.default.shrSH(i,o,6),l=tk.default.rotrSL(i,o,19)^tk.default.rotrBL(i,o,61)^tk.default.shrSL(i,o,6),c=tk.default.add4L(a,l,ng[e-7],ng[e-16]),u=tk.default.add4H(c,n,s,nm[e-7],nm[e-16]);nm[e]=0|u,ng[e]=0|c}let{Ah:r,Al:n,Bh:a,Bl:i,Ch:o,Cl:s,Dh:l,Dl:c,Eh:u,El:d,Fh:f,Fl:p,Gh:h,Gl:b,Hh:y,Hl:m}=this;// Compression function main loop, 80 rounds
for(let e=0;e<80;e++){// S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
let t=tk.default.rotrSH(u,d,14)^tk.default.rotrSH(u,d,18)^tk.default.rotrBH(u,d,41),g=tk.default.rotrSL(u,d,14)^tk.default.rotrSL(u,d,18)^tk.default.rotrBL(u,d,41),v=u&f^~u&h,x=d&p^~d&b,w=tk.default.add5L(m,g,x,ny[e],ng[e]),P=tk.default.add5H(w,y,t,v,nb[e],nm[e]),O=0|w,T=tk.default.rotrSH(r,n,28)^tk.default.rotrBH(r,n,34)^tk.default.rotrBH(r,n,39),z=tk.default.rotrSL(r,n,28)^tk.default.rotrBL(r,n,34)^tk.default.rotrBL(r,n,39),k=r&a^r&o^a&o,L=n&i^n&s^i&s;y=0|h,m=0|b,h=0|f,b=0|p,f=0|u,p=0|d,({h:u,l:d}=tk.default.add(0|l,0|c,0|P,0|O)),l=0|o,c=0|s,o=0|a,s=0|i,a=0|r,i=0|n;let E=tk.default.add3L(O,z,L);r=tk.default.add3H(E,P,T,k),n=0|E}// Add the compressed chunk to the current hash value
({h:r,l:n}=tk.default.add(0|this.Ah,0|this.Al,0|r,0|n)),({h:a,l:i}=tk.default.add(0|this.Bh,0|this.Bl,0|a,0|i)),({h:o,l:s}=tk.default.add(0|this.Ch,0|this.Cl,0|o,0|s)),({h:l,l:c}=tk.default.add(0|this.Dh,0|this.Dl,0|l,0|c)),({h:u,l:d}=tk.default.add(0|this.Eh,0|this.El,0|u,0|d)),({h:f,l:p}=tk.default.add(0|this.Fh,0|this.Fl,0|f,0|p)),({h:h,l:b}=tk.default.add(0|this.Gh,0|this.Gl,0|h,0|b)),({h:y,l:m}=tk.default.add(0|this.Hh,0|this.Hl,0|y,0|m)),this.set(r,n,a,i,o,s,l,c,u,d,f,p,h,b,y,m)}roundClean(){nm.fill(0),ng.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}nf.SHA512=nv;class nx extends nv{constructor(){super(),// h -- high 32 bits, l -- low 32 bits
this.Ah=-1942145080,this.Al=424955298,this.Bh=1944164710,this.Bl=-1982016298,this.Ch=502970286,this.Cl=855612546,this.Dh=1738396948,this.Dl=1479516111,this.Eh=258812777,this.El=2077511080,this.Fh=2011393907,this.Fl=79989058,this.Gh=1067287976,this.Gl=1780299464,this.Hh=286451373,this.Hl=-1848208735,this.outputLen=28}}class nw extends nv{constructor(){super(),// h -- high 32 bits, l -- low 32 bits
this.Ah=573645204,this.Al=-64227540,this.Bh=-1621794909,this.Bl=-934517566,this.Ch=596883563,this.Cl=1867755857,this.Dh=-1774684391,this.Dl=1497426621,this.Eh=-1775747358,this.El=-1467023389,this.Fh=-1101128155,this.Fl=1401305490,this.Gh=721525244,this.Gl=746961066,this.Hh=246885852,this.Hl=-2117784414,this.outputLen=32}}class nP extends nv{constructor(){super(),// h -- high 32 bits, l -- low 32 bits
this.Ah=-876896931,this.Al=-1056596264,this.Bh=1654270250,this.Bl=914150663,this.Ch=-1856437926,this.Cl=812702999,this.Dh=355462360,this.Dl=-150054599,this.Eh=1731405415,this.El=-4191439,this.Fh=-1900787065,this.Fl=1750603025,this.Gh=-619958771,this.Gl=1694076839,this.Hh=1203062813,this.Hl=-1090891868,this.outputLen=48}}function nO(e=32){return(0,t4.getRandomValues)(new Uint8Array(e))}nf.sha512=(0,ty.wrapConstructor)(()=>new nv),nf.sha512_224=(0,ty.wrapConstructor)(()=>new nx),nf.sha512_256=(0,ty.wrapConstructor)(()=>new nw),nf.sha384=(0,ty.wrapConstructor)(()=>new nP);var nT={};Object.defineProperty(nT,"__esModule",{value:!0}),nT.sha224=nT.sha256=void 0;// SHA2-256 need to try 2^128 hashes to execute birthday attack.
// BTC network is doing 2^67 hashes/sec as per early 2023.
// Choice: a ? b : c
const nz=(e,t,r)=>e&t^~e&r,nk=(e,t,r)=>e&t^e&r^t&r,nL=/* @__PURE__ */new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),nE=/* @__PURE__ */new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),nN=/* @__PURE__ */new Uint32Array(64);class nS extends np.SHA2{constructor(){super(64,32,8,!1),// We cannot use array here since array allows indexing by variable
// which means optimizer/compiler cannot use registers.
this.A=0|nE[0],this.B=0|nE[1],this.C=0|nE[2],this.D=0|nE[3],this.E=0|nE[4],this.F=0|nE[5],this.G=0|nE[6],this.H=0|nE[7]}get(){let{A:e,B:t,C:r,D:n,E:a,F:i,G:o,H:s}=this;return[e,t,r,n,a,i,o,s]}// prettier-ignore
set(e,t,r,n,a,i,o,s){this.A=0|e,this.B=0|t,this.C=0|r,this.D=0|n,this.E=0|a,this.F=0|i,this.G=0|o,this.H=0|s}process(e,t){// Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
for(let r=0;r<16;r++,t+=4)nN[r]=e.getUint32(t,!1);for(let e=16;e<64;e++){let t=nN[e-15],r=nN[e-2],n=(0,ty.rotr)(t,7)^(0,ty.rotr)(t,18)^t>>>3,a=(0,ty.rotr)(r,17)^(0,ty.rotr)(r,19)^r>>>10;nN[e]=a+nN[e-7]+n+nN[e-16]|0}// Compression function main loop, 64 rounds
let{A:r,B:n,C:a,D:i,E:o,F:s,G:l,H:c}=this;for(let e=0;e<64;e++){let t=(0,ty.rotr)(o,6)^(0,ty.rotr)(o,11)^(0,ty.rotr)(o,25),u=c+t+nz(o,s,l)+nL[e]+nN[e]|0,d=(0,ty.rotr)(r,2)^(0,ty.rotr)(r,13)^(0,ty.rotr)(r,22),f=d+nk(r,n,a)|0;c=l,l=s,s=o,o=i+u|0,i=a,a=n,n=r,r=u+f|0}// Add the compressed chunk to the current hash value
r=r+this.A|0,n=n+this.B|0,a=a+this.C|0,i=i+this.D|0,o=o+this.E|0,s=s+this.F|0,l=l+this.G|0,c=c+this.H|0,this.set(r,n,a,i,o,s,l,c)}roundClean(){nN.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
class nM extends nS{constructor(){super(),this.A=-1056596264,this.B=914150663,this.C=812702999,this.D=-150054599,this.E=-4191439,this.F=1750603025,this.G=1694076839,this.H=-1090891868,this.outputLen=28}}/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */nT.sha256=(0,ty.wrapConstructor)(()=>new nS),nT.sha224=(0,ty.wrapConstructor)(()=>new nM);const nj=r$({256:rG,512:rW},{256:nT.sha256,512:nf.sha512}),nH=(e,t)=>nj(e,256,t);var nR="abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo".split("|");const nI="Invalid mnemonic",nB="Invalid entropy";/** @internal */function nV(e){return parseInt(e,2)}/** @internal */function nX(e){return e.map(e=>e.toString(2).padStart(8,"0")).join("")}/** @internal */function nU(e){return nX(Array.from(nH(e))).slice(0,8*e.length/32)}function nA(e,t=nR){let r=(e||"").normalize("NFKD").split(" ");if(r.length%3!=0)throw Error(nI);// convert word indices to 11 bit binary strings
let n=r.map(e=>{let r=t.indexOf(e);if(-1===r)throw Error(nI);return r.toString(2).padStart(11,"0")}).join(""),a=32*Math.floor(n.length/33),i=n.slice(0,a),o=n.slice(a),s=i.match(/(.{1,8})/g),l=s?.map(nV);if(!l||l.length%4!=0||l.length<16||l.length>32)throw Error(nB);let c=e5(l);if(nU(c)!==o)throw Error("Invalid mnemonic checksum");return c}function nD(e=12,t,r){return!eY||!t&&!r&&rY()?rH(e):function(e,t=nR){// 128 <= ENT <= 256
if(e.length%4!=0||e.length<16||e.length>32)throw Error(nB);let r=`${nX(Array.from(e))}${nU(e)}`.match(/(.{1,11})/g),n=r?.map(e=>t[nV(e)]);if(!n||n.length<12)throw Error("Unable to map entropy to mnemonic");return n.join(" ")}(nO(e/3*4),t)}function nC(e,t="",r,n){if(!eY||!r&&!n&&rY()?rB(e):function(e,t){try{nA(e,t)}catch{return!1}return!0}(e,r)){if(!r&&!n&&rY())return rI(e,t)}else throw Error("Invalid bip39 mnemonic specified");let a=!eY||!r&&rY()?rR(e):nA(e,r),i=e2(`mnemonic${t}`);// return the first 32 bytes as the seed
return(function(e,t=nO(),r=2048,n){let a=e5(e),i=e5(t);return{password:!eY||rY()?rq(a,i,r):(0,no.pbkdf2)(nf.sha512,a,i,{c:r,dkLen:64}),rounds:r,salt:t}})(a,i).password.slice(0,32)}function nF(e,t){let r=e5(e),n=e5(t);if(r.length===n.length){let e=new DataView(r.buffer,r.byteOffset),t=new DataView(n.buffer,n.byteOffset),a=r.length%4|0,i=r.length-a|0;for(let r=0;r<i;r+=4)if(e.getUint32(r)!==t.getUint32(r))return!1;for(let e=i,t=r.length;e<t;e++)if(r[e]!==n[e])return!1;return!0}return!1}const nZ=e5("\x19Ethereum Signed Message:\n"),nq=e5("<Bytes>"),nG=e5("</Bytes>"),nW=nq.length+nG.length;function nY(e,t){return e.length>=nW&&nF(e.subarray(0,nq.length),nq)&&nF(e.slice(-nG.length),nG)||t&&e.length>=nZ.length&&nF(e.subarray(0,nZ.length),nZ)}var nK={};Object.defineProperty(nK,"__esModule",{value:!0}),nK.hash_to_ristretto255=nK.hashToRistretto255=nK.RistrettoPoint=nK.encodeToCurve=nK.hashToCurve=nK.edwardsToMontgomeryPriv=nK.edwardsToMontgomery=nK.edwardsToMontgomeryPub=nK.x25519=nK.ed25519ph=nK.ed25519ctx=nK.ed25519=nK.ED25519_TORSION_SUBGROUP=void 0;var nJ={};Object.defineProperty(nJ,"__esModule",{value:!0}),nJ.sha384=nJ.sha512_256=nJ.sha512_224=nJ.sha512=nJ.SHA512=void 0;var nQ={};Object.defineProperty(nQ,"__esModule",{value:!0}),nQ.SHA2=void 0;var n_={};function n$(e){if(!Number.isSafeInteger(e)||e<0)throw Error(`Wrong positive integer: ${e}`)}function n0(e){if("boolean"!=typeof e)throw Error(`Expected boolean, not ${e}`)}function n1(e,...t){if(!(e instanceof Uint8Array))throw Error("Expected Uint8Array");if(t.length>0&&!t.includes(e.length))throw Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`)}function n2(e){if("function"!=typeof e||"function"!=typeof e.create)throw Error("Hash should be wrapped by utils.wrapConstructor");n$(e.outputLen),n$(e.blockLen)}function n5(e,t=!0){if(e.destroyed)throw Error("Hash instance has been destroyed");if(t&&e.finished)throw Error("Hash#digest() has already been called")}function n3(e,t){n1(e);let r=t.outputLen;if(e.length<r)throw Error(`digestInto() expects output buffer of length at least ${r}`)}Object.defineProperty(n_,"__esModule",{value:!0}),n_.output=n_.exists=n_.hash=n_.bytes=n_.bool=n_.number=void 0,n_.number=n$,n_.bool=n0,n_.bytes=n1,n_.hash=n2,n_.exists=n5,n_.output=n3,n_.default={number:n$,bool:n0,bytes:n1,hash:n2,exists:n5,output:n3};var n8={};/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */Object.defineProperty(n8,"__esModule",{value:!0}),n8.randomBytes=n8.wrapXOFConstructorWithOpts=n8.wrapConstructorWithOpts=n8.wrapConstructor=n8.checkOpts=n8.Hash=n8.concatBytes=n8.toBytes=n8.utf8ToBytes=n8.asyncLoop=n8.nextTick=n8.hexToBytes=n8.bytesToHex=n8.isLE=n8.rotr=n8.createView=n8.u32=n8.u8=void 0;var n9={};Object.defineProperty(n9,"__esModule",{value:!0}),n9.crypto=void 0,n9.crypto="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0;const n6=e=>e instanceof Uint8Array;if(n8.u8=e=>new Uint8Array(e.buffer,e.byteOffset,e.byteLength),n8.u32=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4)),n8.createView=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),n8.rotr=(e,t)=>e<<32-t|e>>>t,// big-endian hardware is rare. Just in case someone still decides to run hashes:
// early-throw an error because we don't support BE yet.
n8.isLE=68===new Uint8Array(new Uint32Array([287454020]).buffer)[0],!n8.isLE)throw Error("Non little-endian hardware is not supported");const n4=/* @__PURE__ */Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));n8.bytesToHex=/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */function(e){if(!n6(e))throw Error("Uint8Array expected");// pre-caching improves the speed 6x
let t="";for(let r=0;r<e.length;r++)t+=n4[e[r]];return t},n8.hexToBytes=/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */function(e){if("string"!=typeof e)throw Error("hex string expected, got "+typeof e);let t=e.length;if(t%2)throw Error("padded hex string expected, got unpadded hex of length "+t);let r=new Uint8Array(t/2);for(let t=0;t<r.length;t++){let n=2*t,a=e.slice(n,n+2),i=Number.parseInt(a,16);if(Number.isNaN(i)||i<0)throw Error("Invalid byte sequence");r[t]=i}return r};// There is no setImmediate in browser and setTimeout is slow.
// call of async fn will return Promise, which will be fullfiled only on
// next scheduler queue processing step and this is exactly what we need.
const n7=async()=>{};// Returns control to thread each 'tick' ms to avoid blocking
async function ae(e,t,r){let n=Date.now();for(let a=0;a<e;a++){r(a);// Date.now() is not monotonic, so in case if clock goes backwards we return return control too
let e=Date.now()-n;e>=0&&e<t||(await (0,n8.nextTick)(),n+=e)}}/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */function at(e){if("string"!=typeof e)throw Error(`utf8ToBytes expected string, got ${typeof e}`);return new Uint8Array(new TextEncoder().encode(e));// https://bugzil.la/1681809
}/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */function ar(e){if("string"==typeof e&&(e=at(e)),!n6(e))throw Error(`expected Uint8Array, got ${typeof e}`);return e}n8.nextTick=n7,n8.asyncLoop=ae,n8.utf8ToBytes=at,n8.toBytes=ar,n8.concatBytes=/**
 * Copies several Uint8Arrays into one.
 */function(...e){let t=new Uint8Array(e.reduce((e,t)=>e+t.length,0)),r=0;return e.forEach(e=>{if(!n6(e))throw Error("Uint8Array expected");t.set(e,r),r+=e.length}),t},n8.Hash=// For runtime check if class implements interface
class{// Safe version that clones internal state
clone(){return this._cloneInto()}};const an={}.toString;n8.checkOpts=function(e,t){if(void 0!==t&&"[object Object]"!==an.call(t))throw Error("Options should be object or undefined");let r=Object.assign(e,t);return r},n8.wrapConstructor=function(e){let t=t=>e().update(ar(t)).digest(),r=e();return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=()=>e(),t},n8.wrapConstructorWithOpts=function(e){let t=(t,r)=>e(r).update(ar(t)).digest(),r=e({});return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=t=>e(t),t},n8.wrapXOFConstructorWithOpts=function(e){let t=(t,r)=>e(r).update(ar(t)).digest(),r=e({});return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=t=>e(t),t},n8.randomBytes=/**
 * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
 */function(e=32){if(n9.crypto&&"function"==typeof n9.crypto.getRandomValues)return n9.crypto.getRandomValues(new Uint8Array(e));throw Error("crypto.getRandomValues must be defined")};// Base SHA2 class (RFC 6234)
class aa extends n8.Hash{constructor(e,t,r,n){super(),this.blockLen=e,this.outputLen=t,this.padOffset=r,this.isLE=n,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=(0,n8.createView)(this.buffer)}update(e){(0,n_.exists)(this);let{view:t,buffer:r,blockLen:n}=this;e=(0,n8.toBytes)(e);let a=e.length;for(let i=0;i<a;){let o=Math.min(n-this.pos,a-i);// Fast path: we have at least one block in input, cast it to view and process
if(o===n){let t=(0,n8.createView)(e);for(;n<=a-i;i+=n)this.process(t,i);continue}r.set(e.subarray(i,i+o),this.pos),this.pos+=o,i+=o,this.pos===n&&(this.process(t,0),this.pos=0)}return this.length+=e.length,this.roundClean(),this}digestInto(e){(0,n_.exists)(this),(0,n_.output)(e,this),this.finished=!0;// Padding
// We can avoid allocation of buffer for padding completely if it
// was previously not allocated here. But it won't change performance.
let{buffer:t,view:r,blockLen:n,isLE:a}=this,{pos:i}=this;// append the bit '1' to the message
t[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>n-i&&(this.process(r,0),i=0);// Pad until full block byte with zeros
for(let e=i;e<n;e++)t[e]=0;!// Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
// You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
// So we just write lowest 64 bits of that value.
// Polyfill for Safari 14
function(e,t,r,n){if("function"==typeof e.setBigUint64)return e.setBigUint64(t,r,n);let a=BigInt(32),i=BigInt(4294967295),o=Number(r>>a&i),s=Number(r&i),l=n?4:0,c=n?0:4;e.setUint32(t+l,o,n),e.setUint32(t+c,s,n)}(r,n-8,BigInt(8*this.length),a),this.process(r,0);let o=(0,n8.createView)(e),s=this.outputLen;// NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
if(s%4)throw Error("_sha2: outputLen should be aligned to 32bit");let l=s/4,c=this.get();if(l>c.length)throw Error("_sha2: outputLen bigger than state");for(let e=0;e<l;e++)o.setUint32(4*e,c[e],a)}digest(){let{buffer:e,outputLen:t}=this;this.digestInto(e);let r=e.slice(0,t);return this.destroy(),r}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());let{blockLen:t,buffer:r,length:n,finished:a,destroyed:i,pos:o}=this;return e.length=n,e.pos=o,e.finished=a,e.destroyed=i,n%t&&e.buffer.set(r),e}}nQ.SHA2=aa;var ai={};Object.defineProperty(ai,"__esModule",{value:!0}),ai.add5L=ai.add5H=ai.add4H=ai.add4L=ai.add3H=ai.add3L=ai.add=ai.rotlBL=ai.rotlBH=ai.rotlSL=ai.rotlSH=ai.rotr32L=ai.rotr32H=ai.rotrBL=ai.rotrBH=ai.rotrSL=ai.rotrSH=ai.shrSL=ai.shrSH=ai.toBig=ai.split=ai.fromBig=void 0;const ao=/* @__PURE__ */BigInt(4294967296-1),as=/* @__PURE__ */BigInt(32);// We are not using BigUint64Array, because they are extremely slow as per 2022
function al(e,t=!1){return t?{h:Number(e&ao),l:Number(e>>as&ao)}:{h:0|Number(e>>as&ao),l:0|Number(e&ao)}}function ac(e,t=!1){let r=new Uint32Array(e.length),n=new Uint32Array(e.length);for(let a=0;a<e.length;a++){let{h:i,l:o}=al(e[a],t);[r[a],n[a]]=[i,o]}return[r,n]}ai.fromBig=al,ai.split=ac;const au=(e,t)=>BigInt(e>>>0)<<as|BigInt(t>>>0);ai.toBig=au;// for Shift in [0, 32)
const ad=(e,t,r)=>e>>>r;ai.shrSH=ad;const af=(e,t,r)=>e<<32-r|t>>>r;ai.shrSL=af;// Right rotate for Shift in [1, 32)
const ap=(e,t,r)=>e>>>r|t<<32-r;ai.rotrSH=ap;const ah=(e,t,r)=>e<<32-r|t>>>r;ai.rotrSL=ah;// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const ab=(e,t,r)=>e<<64-r|t>>>r-32;ai.rotrBH=ab;const ay=(e,t,r)=>e>>>r-32|t<<64-r;ai.rotrBL=ay;// Right rotate for shift===32 (just swaps l&h)
const am=(e,t)=>t;ai.rotr32H=am;const ag=(e,t)=>e;ai.rotr32L=ag;// Left rotate for Shift in [1, 32)
const av=(e,t,r)=>e<<r|t>>>32-r;ai.rotlSH=av;const ax=(e,t,r)=>t<<r|e>>>32-r;ai.rotlSL=ax;// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const aw=(e,t,r)=>t<<r-32|e>>>64-r;ai.rotlBH=aw;const aP=(e,t,r)=>e<<r-32|t>>>64-r;// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function aO(e,t,r,n){let a=(t>>>0)+(n>>>0);return{h:e+r+(a/4294967296|0)|0,l:0|a}}ai.rotlBL=aP,ai.add=aO;// Addition with more than 2 elements
const aT=(e,t,r)=>(e>>>0)+(t>>>0)+(r>>>0);ai.add3L=aT;const az=(e,t,r,n)=>t+r+n+(e/4294967296|0)|0;ai.add3H=az;const ak=(e,t,r,n)=>(e>>>0)+(t>>>0)+(r>>>0)+(n>>>0);ai.add4L=ak;const aL=(e,t,r,n,a)=>t+r+n+a+(e/4294967296|0)|0;ai.add4H=aL;const aE=(e,t,r,n,a)=>(e>>>0)+(t>>>0)+(r>>>0)+(n>>>0)+(a>>>0);ai.add5L=aE;const aN=(e,t,r,n,a,i)=>t+r+n+a+i+(e/4294967296|0)|0;ai.add5H=aN,ai.default={fromBig:al,split:ac,toBig:au,shrSH:ad,shrSL:af,rotrSH:ap,rotrSL:ah,rotrBH:ab,rotrBL:ay,rotr32H:am,rotr32L:ag,rotlSH:av,rotlSL:ax,rotlBH:aw,rotlBL:aP,add:aO,add3L:aT,add3H:az,add4L:ak,add4H:aL,add5H:aN,add5L:aE};// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
// prettier-ignore
const[aS,aM]=ai.default.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map(e=>BigInt(e))),aj=/* @__PURE__ */new Uint32Array(80),aH=/* @__PURE__ */new Uint32Array(80);class aR extends nQ.SHA2{constructor(){super(128,64,16,!1),// We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
// Also looks cleaner and easier to verify with spec.
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// h -- high 32 bits, l -- low 32 bits
this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}// prettier-ignore
get(){let{Ah:e,Al:t,Bh:r,Bl:n,Ch:a,Cl:i,Dh:o,Dl:s,Eh:l,El:c,Fh:u,Fl:d,Gh:f,Gl:p,Hh:h,Hl:b}=this;return[e,t,r,n,a,i,o,s,l,c,u,d,f,p,h,b]}// prettier-ignore
set(e,t,r,n,a,i,o,s,l,c,u,d,f,p,h,b){this.Ah=0|e,this.Al=0|t,this.Bh=0|r,this.Bl=0|n,this.Ch=0|a,this.Cl=0|i,this.Dh=0|o,this.Dl=0|s,this.Eh=0|l,this.El=0|c,this.Fh=0|u,this.Fl=0|d,this.Gh=0|f,this.Gl=0|p,this.Hh=0|h,this.Hl=0|b}process(e,t){// Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
for(let r=0;r<16;r++,t+=4)aj[r]=e.getUint32(t),aH[r]=e.getUint32(t+=4);for(let e=16;e<80;e++){// s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
let t=0|aj[e-15],r=0|aH[e-15],n=ai.default.rotrSH(t,r,1)^ai.default.rotrSH(t,r,8)^ai.default.shrSH(t,r,7),a=ai.default.rotrSL(t,r,1)^ai.default.rotrSL(t,r,8)^ai.default.shrSL(t,r,7),i=0|aj[e-2],o=0|aH[e-2],s=ai.default.rotrSH(i,o,19)^ai.default.rotrBH(i,o,61)^ai.default.shrSH(i,o,6),l=ai.default.rotrSL(i,o,19)^ai.default.rotrBL(i,o,61)^ai.default.shrSL(i,o,6),c=ai.default.add4L(a,l,aH[e-7],aH[e-16]),u=ai.default.add4H(c,n,s,aj[e-7],aj[e-16]);aj[e]=0|u,aH[e]=0|c}let{Ah:r,Al:n,Bh:a,Bl:i,Ch:o,Cl:s,Dh:l,Dl:c,Eh:u,El:d,Fh:f,Fl:p,Gh:h,Gl:b,Hh:y,Hl:m}=this;// Compression function main loop, 80 rounds
for(let e=0;e<80;e++){// S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
let t=ai.default.rotrSH(u,d,14)^ai.default.rotrSH(u,d,18)^ai.default.rotrBH(u,d,41),g=ai.default.rotrSL(u,d,14)^ai.default.rotrSL(u,d,18)^ai.default.rotrBL(u,d,41),v=u&f^~u&h,x=d&p^~d&b,w=ai.default.add5L(m,g,x,aM[e],aH[e]),P=ai.default.add5H(w,y,t,v,aS[e],aj[e]),O=0|w,T=ai.default.rotrSH(r,n,28)^ai.default.rotrBH(r,n,34)^ai.default.rotrBH(r,n,39),z=ai.default.rotrSL(r,n,28)^ai.default.rotrBL(r,n,34)^ai.default.rotrBL(r,n,39),k=r&a^r&o^a&o,L=n&i^n&s^i&s;y=0|h,m=0|b,h=0|f,b=0|p,f=0|u,p=0|d,({h:u,l:d}=ai.default.add(0|l,0|c,0|P,0|O)),l=0|o,c=0|s,o=0|a,s=0|i,a=0|r,i=0|n;let E=ai.default.add3L(O,z,L);r=ai.default.add3H(E,P,T,k),n=0|E}// Add the compressed chunk to the current hash value
({h:r,l:n}=ai.default.add(0|this.Ah,0|this.Al,0|r,0|n)),({h:a,l:i}=ai.default.add(0|this.Bh,0|this.Bl,0|a,0|i)),({h:o,l:s}=ai.default.add(0|this.Ch,0|this.Cl,0|o,0|s)),({h:l,l:c}=ai.default.add(0|this.Dh,0|this.Dl,0|l,0|c)),({h:u,l:d}=ai.default.add(0|this.Eh,0|this.El,0|u,0|d)),({h:f,l:p}=ai.default.add(0|this.Fh,0|this.Fl,0|f,0|p)),({h:h,l:b}=ai.default.add(0|this.Gh,0|this.Gl,0|h,0|b)),({h:y,l:m}=ai.default.add(0|this.Hh,0|this.Hl,0|y,0|m)),this.set(r,n,a,i,o,s,l,c,u,d,f,p,h,b,y,m)}roundClean(){aj.fill(0),aH.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}nJ.SHA512=aR;class aI extends aR{constructor(){super(),// h -- high 32 bits, l -- low 32 bits
this.Ah=-1942145080,this.Al=424955298,this.Bh=1944164710,this.Bl=-1982016298,this.Ch=502970286,this.Cl=855612546,this.Dh=1738396948,this.Dl=1479516111,this.Eh=258812777,this.El=2077511080,this.Fh=2011393907,this.Fl=79989058,this.Gh=1067287976,this.Gl=1780299464,this.Hh=286451373,this.Hl=-1848208735,this.outputLen=28}}class aB extends aR{constructor(){super(),// h -- high 32 bits, l -- low 32 bits
this.Ah=573645204,this.Al=-64227540,this.Bh=-1621794909,this.Bl=-934517566,this.Ch=596883563,this.Cl=1867755857,this.Dh=-1774684391,this.Dl=1497426621,this.Eh=-1775747358,this.El=-1467023389,this.Fh=-1101128155,this.Fl=1401305490,this.Gh=721525244,this.Gl=746961066,this.Hh=246885852,this.Hl=-2117784414,this.outputLen=32}}class aV extends aR{constructor(){super(),// h -- high 32 bits, l -- low 32 bits
this.Ah=-876896931,this.Al=-1056596264,this.Bh=1654270250,this.Bl=914150663,this.Ch=-1856437926,this.Cl=812702999,this.Dh=355462360,this.Dl=-150054599,this.Eh=1731405415,this.El=-4191439,this.Fh=-1900787065,this.Fl=1750603025,this.Gh=-619958771,this.Gl=1694076839,this.Hh=1203062813,this.Hl=-1090891868,this.outputLen=48}}nJ.sha512=(0,n8.wrapConstructor)(()=>new aR),nJ.sha512_224=(0,n8.wrapConstructor)(()=>new aI),nJ.sha512_256=(0,n8.wrapConstructor)(()=>new aB),nJ.sha384=(0,n8.wrapConstructor)(()=>new aV);var aX={};Object.defineProperty(aX,"__esModule",{value:!0}),aX.twistedEdwards=void 0;var aU=A("2D9sF"),aA=(A("esaJO"),A("esaJO")),aD=A("lkFCe");// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const aC=BigInt(0),aF=BigInt(1),aZ=BigInt(2),aq=BigInt(8),aG={zip215:!0};aX.twistedEdwards=// It is not generic twisted curve for now, but ed25519/ed448 generic implementation
function(e){let t=function(e){let t=(0,aD.validateBasic)(e);// Set defaults
return aA.validateObject(e,{hash:"function",a:"bigint",d:"bigint",randomBytes:"function"},{adjustScalarBytes:"function",domain:"function",uvRatio:"function",mapToCurve:"function"}),Object.freeze({...t})}(e),{Fp:r,n:n,prehash:a,hash:i,randomBytes:o,nByteLength:s,h:l}=t,c=aZ<<BigInt(8*s)-aF,u=r.create,d=t.uvRatio||((e,t)=>{try{return{isValid:!0,value:r.sqrt(e*r.inv(t))}}catch(e){return{isValid:!1,value:aC}}}),f=t.adjustScalarBytes||(e=>e),p=t.domain||((e,t,r)=>{if(t.length||r)throw Error("Contexts/pre-hash are not supported");return e}),h=e=>"bigint"==typeof e&&aC<e,b=(e,t)=>h(e)&&h(t)&&e<t,y=e=>e===aC||b(e,c);function m(e,t){// n in [1..max-1]
if(b(e,t))return e;throw Error(`Expected valid scalar < ${t}, got ${typeof e} ${e}`)}function g(e){// n in [0..CURVE_ORDER-1]
return e===aC?e:m(e,n);// GE = prime subgroup, not full group
}let v=new Map;function x(e){if(!(e instanceof w))throw Error("ExtendedPoint expected")}// Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).
// https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates
class w{constructor(e,t,r,n){if(this.ex=e,this.ey=t,this.ez=r,this.et=n,!y(e))throw Error("x required");if(!y(t))throw Error("y required");if(!y(r))throw Error("z required");if(!y(n))throw Error("t required")}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static fromAffine(e){if(e instanceof w)throw Error("extended point not allowed");let{x:t,y:r}=e||{};if(!y(t)||!y(r))throw Error("invalid affine point");return new w(t,r,aF,u(t*r))}static normalizeZ(e){let t=r.invertBatch(e.map(e=>e.ez));return e.map((e,r)=>e.toAffine(t[r])).map(w.fromAffine)}// "Private method", don't use it directly
_setWindowSize(e){this._WINDOW_SIZE=e,v.delete(this)}// Not required for fromHex(), which always creates valid points.
// Could be useful for fromAffine().
assertValidity(){let{a:e,d:r}=t;if(this.is0())throw Error("bad point: ZERO");// TODO: optimize, with vars below?
// Equation in affine coordinates: ax² + y² = 1 + dx²y²
// Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²
let{ex:n,ey:a,ez:i,et:o}=this,s=u(n*n),l=u(a*a),c=u(i*i),d=u(c*c),f=u(s*e),p=u(c*u(f+l)),h=u(d+u(r*u(s*l)));if(p!==h)throw Error("bad point: equation left != right (1)");// In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T
let b=u(n*a),y=u(i*o);if(b!==y)throw Error("bad point: equation left != right (2)")}// Compare one point to another.
equals(e){x(e);let{ex:t,ey:r,ez:n}=this,{ex:a,ey:i,ez:o}=e,s=u(t*o),l=u(a*n),c=u(r*o),d=u(i*n);return s===l&&c===d}is0(){return this.equals(w.ZERO)}negate(){// Flips point sign to a negative one (-x, y in affine coords)
return new w(u(-this.ex),this.ey,this.ez,u(-this.et))}// Fast algo for doubling Extended Point.
// https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
// Cost: 4M + 4S + 1*a + 6add + 1*2.
double(){let{a:e}=t,{ex:r,ey:n,ez:a}=this,i=u(r*r),o=u(n*n),s=u(aZ*u(a*a)),l=u(e*i),c=r+n,d=u(u(c*c)-i-o),f=l+o,p=f-s,h=l-o,b=u(d*p),y=u(f*h),m=u(d*h),g=u(p*f);return new w(b,y,g,m)}// Fast algo for adding 2 Extended Points.
// https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
// Cost: 9M + 1*a + 1*d + 7add.
add(e){x(e);let{a:r,d:n}=t,{ex:a,ey:i,ez:o,et:s}=this,{ex:l,ey:c,ez:d,et:f}=e;// Faster algo for adding 2 Extended Points when curve's a=-1.
// http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4
// Cost: 8M + 8add + 2*2.
// Note: It does not check whether the `other` point is valid.
if(r===BigInt(-1)){let e=u((i-a)*(c+l)),t=u((i+a)*(c-l)),r=u(t-e);if(r===aC)return this.double();// Same point. Tests say it doesn't affect timing
let n=u(o*aZ*f),p=u(s*aZ*d),h=p+n,b=t+e,y=p-n,m=u(h*r),g=u(b*y),v=u(h*y),x=u(r*b);return new w(m,g,x,v)}let p=u(a*l),h=u(i*c),b=u(s*n*f),y=u(o*d),m=u((a+i)*(l+c)-p-h),g=y-b,v=y+b,P=u(h-r*p),O=u(m*g),T=u(v*P),z=u(m*P),k=u(g*v);// A = X1*X2
return new w(O,T,k,z)}subtract(e){return this.add(e.negate())}wNAF(e){return T.wNAFCached(this,v,e,w.normalizeZ)}// Constant-time multiplication.
multiply(e){let{p:t,f:r}=this.wNAF(m(e,n));return w.normalizeZ([t,r])[0]}// Non-constant-time multiplication. Uses double-and-add algorithm.
// It's faster, but should only be used when you don't care about
// an exposed private key e.g. sig verification.
// Does NOT allow scalars higher than CURVE.n.
multiplyUnsafe(e){let t=g(e);// 0 <= scalar < CURVE.n
return t===aC?O:this.equals(O)||t===aF?this:this.equals(P)?this.wNAF(t).p:T.unsafeLadder(this,t)}// Checks if point is of small order.
// If you add something to small order point, you will have "dirty"
// point with torsion component.
// Multiplies point by cofactor and checks if the result is 0.
isSmallOrder(){return this.multiplyUnsafe(l).is0()}// Multiplies point by curve order and checks if the result is 0.
// Returns `false` is the point is dirty.
isTorsionFree(){return T.unsafeLadder(this,n).is0()}// Converts Extended point to default (x, y) coordinates.
// Can accept precomputed Z^-1 - for example, from invertBatch.
toAffine(e){let{ex:t,ey:n,ez:a}=this,i=this.is0();null==e&&(e=i?aq:r.inv(a));// 8 was chosen arbitrarily
let o=u(t*e),s=u(n*e),l=u(a*e);if(i)return{x:aC,y:aF};if(l!==aF)throw Error("invZ was invalid");return{x:o,y:s}}clearCofactor(){let{h:e}=t;return e===aF?this:this.multiplyUnsafe(e)}// Converts hash string or Uint8Array to Point.
// Uses algo from RFC8032 5.1.3.
static fromHex(e,n=!1){let{d:a,a:i}=t,o=r.BYTES;e=(0,aA.ensureBytes)("pointHex",e,o);let s=e.slice(),l=e[o-1];// copy again, we'll manipulate it
s[o-1]=-129&l;let f=aA.bytesToNumberLE(s);f===aC||(n?m(f,c):m(f,r.ORDER));// Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:
// ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)
let p=u(f*f),h=u(p-aF),b=u(a*p-i),{isValid:y,value:g}=d(h,b);// denominator is always non-0 mod p.
if(!y)throw Error("Point.fromHex: invalid y coordinate");let v=(g&aF)===aF,x=(128&l)!=0;// There are 2 square roots. Use x_0 bit to select proper
if(!n&&g===aC&&x)throw Error("Point.fromHex: x=0 and x_0=1");return x!==v&&(g=u(-g)),w.fromAffine({x:g,y:f})}static fromPrivateKey(e){return L(e).point}toRawBytes(){let{x:e,y:t}=this.toAffine(),n=aA.numberToBytesLE(t,r.BYTES);return n[n.length-1]|=e&aF?128:0,n;// and use the last byte to encode sign of x
}toHex(){return aA.bytesToHex(this.toRawBytes());// Same as toRawBytes, but returns string.
}}w.BASE=new w(t.Gx,t.Gy,aF,u(t.Gx*t.Gy)),w.ZERO=new w(aC,aF,aF,aC);let{BASE:P,ZERO:O}=w,T=(0,aD.wNAF)(w,8*s);function z(e){return(0,aU.mod)(e,n)}// Little-endian SHA512 with modulo n
function k(e){return z(aA.bytesToNumberLE(e))}/** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */function L(e){e=(0,aA.ensureBytes)("private key",e,s);// Hash private key with curve's hash function to produce uniformingly random input
// Check byte lengths: ensure(64, h(ensure(32, key)))
let t=(0,aA.ensureBytes)("hashed private key",i(e),2*s),r=f(t.slice(0,s)),n=t.slice(s,2*s),a=k(r),o=P.multiply(a),l=o.toRawBytes();return{head:r,prefix:n,scalar:a,point:o,pointBytes:l}}// int('LE', SHA512(dom2(F, C) || msgs)) mod N
function E(e=new Uint8Array,...t){let r=aA.concatBytes(...t);return k(i(p(r,(0,aA.ensureBytes)("context",e),!!a)))}return P._setWindowSize(8),{CURVE:t,getPublicKey:// Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared
function(e){return L(e).pointBytes},sign:/** Signs message with privateKey. RFC8032 5.1.6 */function(e,t,n={}){e=(0,aA.ensureBytes)("message",e),a&&(e=a(e));let{prefix:i,scalar:o,pointBytes:l}=L(t),c=E(n.context,i,e),u=P.multiply(c).toRawBytes(),d=E(n.context,u,l,e),f=z(c+d*o);g(f);let p=aA.concatBytes(u,aA.numberToBytesLE(f,r.BYTES));return(0,aA.ensureBytes)("result",p,2*s);// 64-byte signature
},verify:function(e,t,n,i=aG){let o,s,l;let{context:c,zip215:u}=i,d=r.BYTES;e=(0,aA.ensureBytes)("signature",e,2*d),t=(0,aA.ensureBytes)("message",t),a&&(t=a(t));let f=aA.bytesToNumberLE(e.slice(d,2*d));try{o=w.fromHex(n,u),s=w.fromHex(e.slice(0,d),u),l=P.multiplyUnsafe(f)}catch(e){return!1}if(!u&&o.isSmallOrder())return!1;let p=E(c,s.toRawBytes(),o.toRawBytes(),t),h=s.add(o.multiplyUnsafe(p));// [8][S]B = [8]R + [8][k]A'
return h.subtract(l).clearCofactor().equals(w.ZERO)},ExtendedPoint:w,utils:{getExtendedPublicKey:L,// ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
randomPrivateKey:()=>o(r.BYTES),/**
         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
         * values. This slows down first getPublicKey() by milliseconds (see Speed section),
         * but allows to speed-up subsequent getPublicKey() calls up to 20x.
         * @param windowSize 2, 4, 8, 16
         */precompute:(e=8,t=w.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)}}};var aW={};Object.defineProperty(aW,"__esModule",{value:!0}),aW.montgomery=void 0;var aU=A("2D9sF"),aA=A("esaJO");const aY=BigInt(0),aK=BigInt(1);aW.montgomery=// NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)
// Uses only one coordinate instead of two
function(e){let t=((0,aA.validateObject)(e,{a:"bigint"},{montgomeryBits:"isSafeInteger",nByteLength:"isSafeInteger",adjustScalarBytes:"function",domain:"function",powPminus2:"function",Gu:"bigint"}),Object.freeze({...e})),{P:r}=t,n=e=>(0,aU.mod)(e,r),a=t.montgomeryBits,i=Math.ceil(a/8),o=t.nByteLength,s=t.adjustScalarBytes||(e=>e),l=t.powPminus2||(e=>(0,aU.pow)(e,r-BigInt(2),r));// cswap from RFC7748. But it is not from RFC7748!
/*
      cswap(swap, x_2, x_3):
           dummy = mask(swap) AND (x_2 XOR x_3)
           x_2 = x_2 XOR dummy
           x_3 = x_3 XOR dummy
           Return (x_2, x_3)
    Where mask(swap) is the all-1 or all-0 word of the same length as x_2
     and x_3, computed, e.g., as mask(swap) = 0 - swap.
    */function c(e,t,r){let a=n(e*(t-r));return[t=n(t-a),r=n(r+a)]}// Accepts 0 as well
function u(e){if("bigint"==typeof e&&aY<=e&&e<r)return e;throw Error("Expected valid scalar 0 < scalar < CURVE.P")}// x25519 from 4
// The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519
let d=(t.a-BigInt(2))/BigInt(4);function f(e){return(0,aA.numberToBytesLE)(n(e),i)}function p(e,t){let r=function(e){// Section 5: When receiving such an array, implementations of X25519
// MUST mask the most significant bit in the final byte.
// This is very ugly way, but it works because fieldLen-1 is outside of bounds for X448, so this becomes NOOP
// fieldLen - scalaryBytes = 1 for X448 and = 0 for X25519
let t=(0,aA.ensureBytes)("u coordinate",e,i);return o===i&&(t[o-1]&=127),(0,aA.bytesToNumberLE)(t)}(t),p=function(e){let t=(0,aA.ensureBytes)("scalar",e);if(t.length!==i&&t.length!==o)throw Error(`Expected ${i} or ${o} bytes, got ${t.length}`);return(0,aA.bytesToNumberLE)(s(t))}(e),h=/**
     *
     * @param pointU u coordinate (x) on Montgomery Curve 25519
     * @param scalar by which the point would be multiplied
     * @returns new Point on Montgomery curve
     */function(e,t){let r;let i=u(e),o=u(t),s=aK,f=aY,p=i,h=aK,b=aY;for(let e=BigInt(a-1);e>=aY;e--){let t=o>>e&aK;b^=t,s=(r=c(b,s,p))[0],p=r[1],f=(r=c(b,f,h))[0],h=r[1],b=t;let a=s+f,l=n(a*a),u=s-f,y=n(u*u),m=l-y,g=p+h,v=p-h,x=n(v*a),w=n(g*u),P=x+w,O=x-w;p=n(P*P),h=n(i*n(O*O)),s=n(l*y),f=n(m*(l+n(d*m)))}s=// (x_2, x_3) = cswap(swap, x_2, x_3)
(r=c(b,s,p))[0],p=r[1],f=// (z_2, z_3) = cswap(swap, z_2, z_3)
(r=c(b,f,h))[0],h=r[1];// z_2^(p - 2)
let y=l(f);// Return x_2 * (z_2^(p - 2))
return n(s*y)}(r,p);// The result was not contributory
// https://cr.yp.to/ecdh.html#validate
if(h===aY)throw Error("Invalid private or public key received");return f(h)}// Computes public key from private. By doing scalar multiplication of base point.
let h=f(t.Gu);function b(e){return p(e,h)}return{scalarMult:p,scalarMultBase:b,getSharedSecret:(e,t)=>p(e,t),getPublicKey:e=>b(e),utils:{randomPrivateKey:()=>t.randomBytes(t.nByteLength)},GuBytes:h}};var aU=A("2D9sF"),aA=A("esaJO"),aJ={};Object.defineProperty(aJ,"__esModule",{value:!0}),aJ.createHasher=aJ.isogenyMap=aJ.hash_to_field=aJ.expand_message_xof=aJ.expand_message_xmd=void 0;var aU=A("2D9sF"),aA=A("esaJO");// Octet Stream to Integer. "spec" implementation of os2ip is 2.5x slower vs bytesToNumberBE.
const aQ=aA.bytesToNumberBE;// Integer to Octet Stream (numberToBytesBE)
function a_(e,t){if(e<0||e>=1<<8*t)throw Error(`bad I2OSP call: value=${e} length=${t}`);let r=Array.from({length:t}).fill(0);for(let n=t-1;n>=0;n--)r[n]=255&e,e>>>=8;return new Uint8Array(r)}function a$(e){if(!(e instanceof Uint8Array))throw Error("Uint8Array expected")}function a0(e){if(!Number.isSafeInteger(e))throw Error("number expected")}// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits
// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1
function a1(e,t,r,n){a$(e),a$(t),a0(r),t.length>255&&(t=n((0,aA.concatBytes)((0,aA.utf8ToBytes)("H2C-OVERSIZE-DST-"),t)));let{outputLen:a,blockLen:i}=n,o=Math.ceil(r/a);if(o>255)throw Error("Invalid xmd length");let s=(0,aA.concatBytes)(t,a_(t.length,1)),l=a_(0,i),c=a_(r,2),u=Array(o),d=n((0,aA.concatBytes)(l,e,c,a_(0,1),s));u[0]=n((0,aA.concatBytes)(d,a_(1,1),s));for(let e=1;e<=o;e++){let t=[function(e,t){let r=new Uint8Array(e.length);for(let n=0;n<e.length;n++)r[n]=e[n]^t[n];return r}(d,u[e-1]),a_(e+1,1),s];u[e]=n((0,aA.concatBytes)(...t))}let f=(0,aA.concatBytes)(...u);return f.slice(0,r)}// Produces a uniformly random byte string using an extendable-output function (XOF) H.
// 1. The collision resistance of H MUST be at least k bits.
// 2. H MUST be an XOF that has been proved indifferentiable from
//    a random oracle under a reasonable cryptographic assumption.
// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2
function a2(e,t,r,n,a){// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
// DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));
if(a$(e),a$(t),a0(r),t.length>255){let e=Math.ceil(2*n/8);t=a.create({dkLen:e}).update((0,aA.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(t).digest()}if(r>65535||t.length>255)throw Error("expand_message_xof: invalid lenInBytes");return a.create({dkLen:r}).update(e).update(a_(r,2))// 2. DST_prime = DST || I2OSP(len(DST), 1)
.update(t).update(a_(t.length,1)).digest()}/**
 * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F
 * https://www.rfc-editor.org/rfc/rfc9380#section-5.2
 * @param msg a byte string containing the message to hash
 * @param count the number of elements of F to output
 * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above
 * @returns [u_0, ..., u_(count - 1)], a list of field elements.
 */function a5(e,t,r){let n;(0,aA.validateObject)(r,{DST:"stringOrUint8Array",p:"bigint",m:"isSafeInteger",k:"isSafeInteger",hash:"hash"});let{p:a,k:i,m:o,hash:s,expand:l,DST:c}=r;a$(e),a0(t);let u=function(e){if(e instanceof Uint8Array)return e;if("string"==typeof e)return(0,aA.utf8ToBytes)(e);throw Error("DST must be Uint8Array or string")}(c),d=a.toString(2).length,f=Math.ceil((d+i)/8),p=t*o*f;if("xmd"===l)n=a1(e,u,p,s);else if("xof"===l)n=a2(e,u,p,i,s);else if("_internal_pass"===l)n=e;else throw Error('expand must be "xmd" or "xof"');let h=Array(t);for(let e=0;e<t;e++){let t=Array(o);for(let r=0;r<o;r++){let i=f*(r+e*o),s=n.subarray(i,i+f);t[r]=(0,aU.mod)(aQ(s),a)}h[e]=t}return h}aJ.expand_message_xmd=a1,aJ.expand_message_xof=a2,aJ.hash_to_field=a5,aJ.isogenyMap=function(e,t){// Make same order as in spec
let r=t.map(e=>Array.from(e).reverse());return(t,n)=>{let[a,i,o,s]=r.map(r=>r.reduce((r,n)=>e.add(e.mul(r,t),n)));return t=e.div(a,i),n=e.mul(n,e.div(o,s)),{x:t,y:n}}},aJ.createHasher=function(e,t,r){if("function"!=typeof t)throw Error("mapToCurve() must be defined");return{// Encodes byte string to elliptic curve.
// hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
hashToCurve(n,a){let i=a5(n,2,{...r,DST:r.DST,...a}),o=e.fromAffine(t(i[0])),s=e.fromAffine(t(i[1])),l=o.add(s).clearCofactor();return l.assertValidity(),l},// Encodes byte string to elliptic curve.
// encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
encodeToCurve(n,a){let i=a5(n,1,{...r,DST:r.encodeDST,...a}),o=e.fromAffine(t(i[0])).clearCofactor();return o.assertValidity(),o}}};/**
 * ed25519 Twisted Edwards curve with following addons:
 * - X25519 ECDH
 * - Ristretto cofactor elimination
 * - Elligator hash-to-group / point indistinguishability
 */const a3=BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949"),a8=BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752"),a9=BigInt(0),a6=BigInt(1),a4=BigInt(2),a7=BigInt(5),ie=BigInt(10),it=BigInt(20),ir=BigInt(40),ia=BigInt(80);function ii(e){let t=e*e%a3,r=t*e%a3,n=(0,aU.pow2)(r,a4,a3)*r%a3,a=(0,aU.pow2)(n,a6,a3)*e%a3,i=(0,aU.pow2)(a,a7,a3)*a%a3,o=(0,aU.pow2)(i,ie,a3)*i%a3,s=(0,aU.pow2)(o,it,a3)*o%a3,l=(0,aU.pow2)(s,ir,a3)*s%a3,c=(0,aU.pow2)(l,ia,a3)*l%a3,u=(0,aU.pow2)(c,ia,a3)*l%a3,d=(0,aU.pow2)(u,ie,a3)*i%a3,f=(0,aU.pow2)(d,a4,a3)*e%a3;// ^ To pow to (p+3)/8, multiply it by x.
return{pow_p_5_8:f,b2:r}}function io(e){return(// Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,
// set the three least significant bits of the first byte
e[0]&=248,// and the most significant bit of the last to zero,
e[31]&=127,// set the second most significant bit of the last byte to 1
e[31]|=64,e)}// sqrt(u/v)
function is(e,t){let r=(0,aU.mod)(t*t*t,a3),n=(0,aU.mod)(r*r*t,a3),a=ii(e*n).pow_p_5_8,i=(0,aU.mod)(e*r*a,a3),o=(0,aU.mod)(t*i*i,a3),s=i,l=(0,aU.mod)(i*a8,a3),c=o===e,u=o===(0,aU.mod)(-e,a3),d=o===(0,aU.mod)(-e*a8,a3);// v³
return c&&(i=s),(u||d)&&(i=l),(0,aU.isNegativeLE)(i,a3)&&(i=(0,aU.mod)(-i,a3)),{isValid:c||u,value:i}}// Just in case
nK.ED25519_TORSION_SUBGROUP=["0100000000000000000000000000000000000000000000000000000000000000","c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a","0000000000000000000000000000000000000000000000000000000000000080","26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05","ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f","26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85","0000000000000000000000000000000000000000000000000000000000000000","c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa"];const il=(0,aU.Field)(a3,void 0,!0),ic={// Param: a
a:BigInt(-1),// d is equal to -121665/121666 over finite field.
// Negative number is P - number, and division is invert(number, P)
d:BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),Fp:il,// Subgroup order: how many points curve has
// 2n**252n + 27742317777372353535851937790883648493n;
n:BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),// Cofactor
h:BigInt(8),// Base point (x, y) aka generator point
Gx:BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),Gy:BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),hash:nJ.sha512,randomBytes:n8.randomBytes,adjustScalarBytes:io,uvRatio:// Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
// Constant-time, u/√v
is};function iu(e,t,r){if(t.length>255)throw Error("Context is too big");return(0,n8.concatBytes)((0,n8.utf8ToBytes)("SigEd25519 no Ed25519 collisions"),new Uint8Array([r?1:0,t.length]),t,e)}/**
 * Converts ed25519 public key to x25519 public key. Uses formula:
 * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`
 * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`
 * @example
 *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());
 *   const aPriv = x25519.utils.randomPrivateKey();
 *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))
 */function id(e){let{y:t}=nK.ed25519.ExtendedPoint.fromHex(e),r=BigInt(1);return il.toBytes(il.create((r+t)*il.inv(r-t)))}nK.ed25519=(0,aX.twistedEdwards)(ic),nK.ed25519ctx=(0,aX.twistedEdwards)({...ic,domain:iu}),nK.ed25519ph=(0,aX.twistedEdwards)({...ic,domain:iu,prehash:nJ.sha512}),nK.x25519=(0,aW.montgomery)({P:a3,a:BigInt(486662),montgomeryBits:255,nByteLength:32,Gu:BigInt(9),powPminus2:e=>{// x^(p-2) aka x^(2^255-21)
let{pow_p_5_8:t,b2:r}=ii(e);return(0,aU.mod)((0,aU.pow2)(t,BigInt(3),a3)*r,a3)},adjustScalarBytes:io,randomBytes:n8.randomBytes}),nK.edwardsToMontgomeryPub=id,nK.edwardsToMontgomery=id,nK.edwardsToMontgomeryPriv=/**
 * Converts ed25519 secret key to x25519 secret key.
 * @example
 *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());
 *   const aPriv = ed25519.utils.randomPrivateKey();
 *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)
 */function(e){let t=ic.hash(e.subarray(0,32));return ic.adjustScalarBytes(t).subarray(0,32)};// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)
// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since
// SageMath returns different root first and everything falls apart
const ip=(il.ORDER+BigInt(3))/BigInt(8),ih=il.pow(a4,ip),ib=il.sqrt(il.neg(il.ONE)),iy=(il.ORDER-BigInt(5))/BigInt(8),im=BigInt(486662),ig=(0,aU.FpSqrtEven)(il,il.neg(BigInt(486664))),iv=(0,aJ.createHasher)(nK.ed25519.ExtendedPoint,e=>(function(e){let t,r,n,a,i,o,s,l,c,u,d,f,p,h,b,y,m,g,v,x,w;let{xMn:P,xMd:O,yMn:T,yMd:z}=(t=il.sqr(e),t=il.mul(t,a4),r=il.add(t,il.ONE),n=il.neg(im),a=il.sqr(r),i=il.mul(a,r),o=il.mul(t,im),o=il.mul(o,n),o=il.add(o,a),o=il.mul(o,n),s=il.sqr(i),a=il.sqr(s),s=il.mul(s,i),s=il.mul(s,o),a=il.mul(a,s),l=il.pow(a,iy),l=il.mul(l,s),c=il.mul(l,ib),a=il.sqr(l),a=il.mul(a,i),u=il.eql(a,o),d=il.cmov(c,l,u),f=il.mul(n,t),p=il.mul(l,e),p=il.mul(p,ih),h=il.mul(p,ib),b=il.mul(o,t),a=il.sqr(p),a=il.mul(a,i),y=il.eql(a,b),m=il.cmov(h,p,y),a=il.sqr(d),a=il.mul(a,i),g=il.eql(a,o),v=il.cmov(f,n,g),x=il.cmov(m,d,g),w=il.isOdd(x),{xMn:v,xMd:r,yMn:x=il.cmov(x,il.neg(x),g!==w),yMd:a6}),k=il.mul(P,z);//  1.  (xMn, xMd, yMn, yMd) =
    k=il.mul(k,ig);let L=il.mul(O,T),E=il.sub(P,O),N=il.add(P,O),S=il.mul(L,N),M=il.eql(S,il.ZERO);//  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM
    k=il.cmov(k,il.ZERO,M),L=il.cmov(L,il.ONE,M),E=il.cmov(E,il.ONE,M),N=il.cmov(N,il.ONE,M);let j=il.invertBatch([L,N]);// batch division
    return{x:il.mul(k,j[0]),y:il.mul(E,j[1])};//  13. return (xn, xd, yn, yd)
    })(e[0]),{DST:"edwards25519_XMD:SHA-512_ELL2_RO_",encodeDST:"edwards25519_XMD:SHA-512_ELL2_NU_",p:il.ORDER,m:1,k:128,expand:"xmd",hash:nJ.sha512});// 1. c1 = (q + 3) / 8       # Integer arithmetic
function ix(e){if(!(e instanceof iN))throw Error("RistrettoPoint expected")}nK.hashToCurve=iv.hashToCurve,nK.encodeToCurve=iv.encodeToCurve;// √(ad - 1)
const iw=BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235"),iP=BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578"),iO=BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838"),iT=BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952"),iz=e=>is(a6,e),ik=BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),iL=e=>nK.ed25519.CURVE.Fp.create((0,aA.bytesToNumberLE)(e)&ik);// Computes Elligator map for Ristretto
// https://ristretto.group/formulas/elligator.html
function iE(e){let{d:t}=nK.ed25519.CURVE,r=nK.ed25519.CURVE.Fp.ORDER,n=nK.ed25519.CURVE.Fp.create,a=n(a8*e*e),i=n((a+a6)*iO),o=BigInt(-1),s=n((o-t*a)*n(a+t)),{isValid:l,value:c}=is(i,s),u=n(c*e);(0,aU.isNegativeLE)(u,r)||(u=n(-u)),l||(c=u),l||(o=a);let d=n(o*(a-a6)*iT-s),f=c*c,p=n((c+c)*s),h=n(d*iw),b=n(a6-f),y=n(a6+f);// 9
return new nK.ed25519.ExtendedPoint(n(p*y),n(b*h),n(h*y),n(p*b))}/**
 * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be
 * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.
 * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,
 * but it should work in its own namespace: do not combine those two.
 * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448
 */class iN{// Private property to discourage combining ExtendedPoint + RistrettoPoint
// Always use Ristretto encoding/decoding instead.
constructor(e){this.ep=e}static fromAffine(e){return new iN(nK.ed25519.ExtendedPoint.fromAffine(e))}/**
     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.
     * The hash-to-group operation applies Elligator twice and adds the results.
     * **Note:** this is one-way map, there is no conversion from point to hash.
     * https://ristretto.group/formulas/elligator.html
     * @param hex 64-byte output of a hash function
     */static hashToCurve(e){e=(0,aA.ensureBytes)("ristrettoHash",e,64);let t=iL(e.slice(0,32)),r=iE(t),n=iL(e.slice(32,64)),a=iE(n);return new iN(r.add(a))}/**
     * Converts ristretto-encoded string to ristretto point.
     * https://ristretto.group/formulas/decoding.html
     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
     */static fromHex(e){e=(0,aA.ensureBytes)("ristrettoHex",e,32);let{a:t,d:r}=nK.ed25519.CURVE,n=nK.ed25519.CURVE.Fp.ORDER,a=nK.ed25519.CURVE.Fp.create,i="RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint",o=iL(e);// 1. Check that s_bytes is the canonical encoding of a field element, or else abort.
// 3. Check that s is non-negative, or else abort
if(!(0,aA.equalBytes)((0,aA.numberToBytesLE)(o,32),e)||(0,aU.isNegativeLE)(o,n))throw Error(i);let s=a(o*o),l=a(a6+t*s),c=a(a6-t*s),u=a(l*l),d=a(c*c),f=a(t*r*u-d),{isValid:p,value:h}=iz(a(f*d)),b=a(h*c),y=a(h*b*f),m=a((o+o)*b);(0,aU.isNegativeLE)(m,n)&&(m=a(-m));// 10
let g=a(l*y),v=a(m*g);// 11
if(!p||(0,aU.isNegativeLE)(v,n)||g===a9)throw Error(i);return new iN(new nK.ed25519.ExtendedPoint(m,g,a6,v))}/**
     * Encodes ristretto point to Uint8Array.
     * https://ristretto.group/formulas/encoding.html
     */toRawBytes(){let e,{ex:t,ey:r,ez:n,et:a}=this.ep,i=nK.ed25519.CURVE.Fp.ORDER,o=nK.ed25519.CURVE.Fp.create,s=o(o(n+r)*o(n-r)),l=o(t*r),c=o(l*l),{value:u}=iz(o(s*c)),d=o(u*s),f=o(u*l),p=o(d*f*a);if((0,aU.isNegativeLE)(a*p,i)){let n=o(r*a8),a=o(t*a8);t=n,r=a,e=o(d*iP)}else e=f;// 8
(0,aU.isNegativeLE)(t*p,i)&&(r=o(-r));let h=o((n-r)*e);// 10 (check footer's note, no sqrt(-a))
return(0,aU.isNegativeLE)(h,i)&&(h=o(-h)),(0,aA.numberToBytesLE)(h,32);// 11
}toHex(){return(0,aA.bytesToHex)(this.toRawBytes())}toString(){return this.toHex()}// Compare one point to another.
equals(e){ix(e);let{ex:t,ey:r}=this.ep,{ex:n,ey:a}=e.ep,i=nK.ed25519.CURVE.Fp.create,o=i(t*a)===i(r*n),s=i(r*a)===i(t*n);return o||s}add(e){return ix(e),new iN(this.ep.add(e.ep))}subtract(e){return ix(e),new iN(this.ep.subtract(e.ep))}multiply(e){return new iN(this.ep.multiply(e))}multiplyUnsafe(e){return new iN(this.ep.multiplyUnsafe(e))}}function iS(e,t,r,n){let a=e5(e),i=e5(r),o=e5(t);if(32!==i.length)throw Error(`Invalid publicKey, received ${i.length}, expected 32`);if(64!==o.length)throw Error(`Invalid signature, received ${o.length} bytes, expected 64`);try{return!eY||!n&&rY()?rV(o,a,i):(0,nK.ed25519).verify(o,a,i)}catch{return!1}}nK.RistrettoPoint=(iN.BASE||(iN.BASE=new iN(nK.ed25519.ExtendedPoint.BASE)),iN.ZERO||(iN.ZERO=new iN(nK.ed25519.ExtendedPoint.ZERO)),iN),nK.hashToRistretto255=(e,t)=>{let r=t.DST,n="string"==typeof r?(0,n8.utf8ToBytes)(r):r,a=(0,aJ.expand_message_xmd)(e,n,64,nJ.sha512),i=iN.hashToCurve(a);return i},nK.hash_to_ristretto255=nK.hashToRistretto255;var iM={};Object.defineProperty(iM,"__esModule",{value:!0}),iM.shake256=iM.shake128=iM.keccak_512=iM.keccak_384=iM.keccak_256=iM.keccak_224=iM.sha3_512=iM.sha3_384=iM.sha3_256=iM.sha3_224=iM.Keccak=iM.keccakP=void 0;// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.
// It's called a sponge function.
// Various per round constants calculations
const[ij,iH,iR]=[[],[],[]],iI=/* @__PURE__ */BigInt(0),iB=/* @__PURE__ */BigInt(1),iV=/* @__PURE__ */BigInt(2),iX=/* @__PURE__ */BigInt(7),iU=/* @__PURE__ */BigInt(256),iA=/* @__PURE__ */BigInt(113);for(let e=0,t=iB,r=1,n=0;e<24;e++){// Pi
[r,n]=[n,(2*r+3*n)%5],ij.push(2*(5*n+r)),// Rotational
iH.push((e+1)*(e+2)/2%64);// Iota
let a=iI;for(let e=0;e<7;e++)(t=(t<<iB^(t>>iX)*iA)%iU)&iV&&(a^=iB<<(iB<</* @__PURE__ */BigInt(e))-iB);iR.push(a)}const[iD,iC]=/* @__PURE__ */(0,tk.split)(iR,!0),iF=(e,t,r)=>r>32?(0,tk.rotlBH)(e,t,r):(0,tk.rotlSH)(e,t,r),iZ=(e,t,r)=>r>32?(0,tk.rotlBL)(e,t,r):(0,tk.rotlSL)(e,t,r);// Same as keccakf1600, but allows to skip some rounds
function iq(e,t=24){let r=new Uint32Array(10);// NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
for(let n=24-t;n<24;n++){// Theta θ
for(let t=0;t<10;t++)r[t]=e[t]^e[t+10]^e[t+20]^e[t+30]^e[t+40];for(let t=0;t<10;t+=2){let n=(t+8)%10,a=(t+2)%10,i=r[a],o=r[a+1],s=iF(i,o,1)^r[n],l=iZ(i,o,1)^r[n+1];for(let r=0;r<50;r+=10)e[t+r]^=s,e[t+r+1]^=l}// Rho (ρ) and Pi (π)
let t=e[2],a=e[3];for(let r=0;r<24;r++){let n=iH[r],i=iF(t,a,n),o=iZ(t,a,n),s=ij[r];t=e[s],a=e[s+1],e[s]=i,e[s+1]=o}// Chi (χ)
for(let t=0;t<50;t+=10){for(let n=0;n<10;n++)r[n]=e[t+n];for(let n=0;n<10;n++)e[t+n]^=~r[(n+2)%10]&r[(n+4)%10]}// Iota (ι)
e[0]^=iD[n],e[1]^=iC[n]}r.fill(0)}iM.keccakP=iq;class iG extends ty.Hash{// NOTE: we accept arguments in bytes instead of bits here.
constructor(e,t,r,n=!1,a=24){// 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
if(super(),this.blockLen=e,this.suffix=t,this.outputLen=r,this.enableXOF=n,this.rounds=a,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,// Can be passed from user as dkLen
(0,tc.number)(r),0>=this.blockLen||this.blockLen>=200)throw Error("Sha3 supports only keccak-f1600 function");this.state=new Uint8Array(200),this.state32=(0,ty.u32)(this.state)}keccak(){iq(this.state32,this.rounds),this.posOut=0,this.pos=0}update(e){(0,tc.exists)(this);let{blockLen:t,state:r}=this;e=(0,ty.toBytes)(e);let n=e.length;for(let a=0;a<n;){let i=Math.min(t-this.pos,n-a);for(let t=0;t<i;t++)r[this.pos++]^=e[a++];this.pos===t&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;let{state:e,suffix:t,pos:r,blockLen:n}=this;// Do the padding
e[r]^=t,(128&t)!=0&&r===n-1&&this.keccak(),e[n-1]^=128,this.keccak()}writeInto(e){(0,tc.exists)(this,!1),(0,tc.bytes)(e),this.finish();let t=this.state,{blockLen:r}=this;for(let n=0,a=e.length;n<a;){this.posOut>=r&&this.keccak();let i=Math.min(r-this.posOut,a-n);e.set(t.subarray(this.posOut,this.posOut+i),n),this.posOut+=i,n+=i}return e}xofInto(e){// Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
if(!this.enableXOF)throw Error("XOF is not possible for this instance");return this.writeInto(e)}xof(e){return(0,tc.number)(e),this.xofInto(new Uint8Array(e))}digestInto(e){if((0,tc.output)(e,this),this.finished)throw Error("digest() was already called");return this.writeInto(e),this.destroy(),e}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(e){let{blockLen:t,suffix:r,outputLen:n,rounds:a,enableXOF:i}=this;return e||(e=new iG(t,r,n,i,a)),e.state32.set(this.state32),e.pos=this.pos,e.posOut=this.posOut,e.finished=this.finished,e.rounds=a,// Suffix can change in cSHAKE
e.suffix=r,e.outputLen=n,e.enableXOF=i,e.destroyed=this.destroyed,e}}iM.Keccak=iG;const iW=(e,t,r)=>(0,ty.wrapConstructor)(()=>new iG(t,e,r));iM.sha3_224=iW(6,144,28),/**
 * SHA3-256 hash function
 * @param message - that would be hashed
 */iM.sha3_256=iW(6,136,32),iM.sha3_384=iW(6,104,48),iM.sha3_512=iW(6,72,64),iM.keccak_224=iW(1,144,28),/**
 * keccak-256 hash function. Different from SHA3-256.
 * @param message - that would be hashed
 */iM.keccak_256=iW(1,136,32),iM.keccak_384=iW(1,104,48),iM.keccak_512=iW(1,72,64);const iY=(e,t,r)=>(0,ty.wrapXOFConstructorWithOpts)((n={})=>new iG(t,e,void 0===n.dkLen?r:n.dkLen,!0));iM.shake128=iY(31,168,16),iM.shake256=iY(31,136,32);const iK=r$({256:rF,512:rZ},{256:iM.keccak_256,512:iM.keccak_512});function iJ(e,t,r){return"keccak"===e?iK(t,void 0,r):r0(t,void 0,void 0,r)}var iQ={};Object.defineProperty(iQ,"__esModule",{value:!0}),iQ.encodeToCurve=iQ.hashToCurve=iQ.schnorr=iQ.secp256k1=void 0;var i_={};Object.defineProperty(i_,"__esModule",{value:!0}),i_.sha224=i_.sha256=void 0;// SHA2-256 need to try 2^128 hashes to execute birthday attack.
// BTC network is doing 2^67 hashes/sec as per early 2023.
// Choice: a ? b : c
const i$=(e,t,r)=>e&t^~e&r,i0=(e,t,r)=>e&t^e&r^t&r,i1=/* @__PURE__ */new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),i2=/* @__PURE__ */new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),i5=/* @__PURE__ */new Uint32Array(64);class i3 extends nQ.SHA2{constructor(){super(64,32,8,!1),// We cannot use array here since array allows indexing by variable
// which means optimizer/compiler cannot use registers.
this.A=0|i2[0],this.B=0|i2[1],this.C=0|i2[2],this.D=0|i2[3],this.E=0|i2[4],this.F=0|i2[5],this.G=0|i2[6],this.H=0|i2[7]}get(){let{A:e,B:t,C:r,D:n,E:a,F:i,G:o,H:s}=this;return[e,t,r,n,a,i,o,s]}// prettier-ignore
set(e,t,r,n,a,i,o,s){this.A=0|e,this.B=0|t,this.C=0|r,this.D=0|n,this.E=0|a,this.F=0|i,this.G=0|o,this.H=0|s}process(e,t){// Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
for(let r=0;r<16;r++,t+=4)i5[r]=e.getUint32(t,!1);for(let e=16;e<64;e++){let t=i5[e-15],r=i5[e-2],n=(0,n8.rotr)(t,7)^(0,n8.rotr)(t,18)^t>>>3,a=(0,n8.rotr)(r,17)^(0,n8.rotr)(r,19)^r>>>10;i5[e]=a+i5[e-7]+n+i5[e-16]|0}// Compression function main loop, 64 rounds
let{A:r,B:n,C:a,D:i,E:o,F:s,G:l,H:c}=this;for(let e=0;e<64;e++){let t=(0,n8.rotr)(o,6)^(0,n8.rotr)(o,11)^(0,n8.rotr)(o,25),u=c+t+i$(o,s,l)+i1[e]+i5[e]|0,d=(0,n8.rotr)(r,2)^(0,n8.rotr)(r,13)^(0,n8.rotr)(r,22),f=d+i0(r,n,a)|0;c=l,l=s,s=o,o=i+u|0,i=a,a=n,n=r,r=u+f|0}// Add the compressed chunk to the current hash value
r=r+this.A|0,n=n+this.B|0,a=a+this.C|0,i=i+this.D|0,o=o+this.E|0,s=s+this.F|0,l=l+this.G|0,c=c+this.H|0,this.set(r,n,a,i,o,s,l,c)}roundClean(){i5.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
class i8 extends i3{constructor(){super(),this.A=-1056596264,this.B=914150663,this.C=812702999,this.D=-150054599,this.E=-4191439,this.F=1750603025,this.G=1694076839,this.H=-1090891868,this.outputLen=28}}/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */i_.sha256=(0,n8.wrapConstructor)(()=>new i3),i_.sha224=(0,n8.wrapConstructor)(()=>new i8);var aU=A("2D9sF"),i9={};Object.defineProperty(i9,"__esModule",{value:!0}),i9.mapToCurveSimpleSWU=i9.SWUFpSqrtRatio=i9.weierstrass=i9.weierstrassPoints=i9.DER=void 0;var aU=A("2D9sF"),aA=(A("esaJO"),A("esaJO")),aD=A("lkFCe");// ASN.1 DER encoding utilities
const{bytesToNumberBE:i6,hexToBytes:i4}=aA;i9.DER={// asn.1 DER encoding utils
Err:class extends Error{constructor(e=""){super(e)}},_parseInt(e){let{Err:t}=i9.DER;if(e.length<2||2!==e[0])throw new t("Invalid signature integer tag");let r=e[1],n=e.subarray(2,r+2);if(!r||n.length!==r)throw new t("Invalid signature integer: wrong length");// https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
// since we always use positive integers here. It must always be empty:
// - add zero byte if exists
// - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
if(128&n[0])throw new t("Invalid signature integer: negative");if(0===n[0]&&!(128&n[1]))throw new t("Invalid signature integer: unnecessary leading zero");return{d:i6(n),l:e.subarray(r+2)};// d is data, l is left
},toSig(e){// parse DER signature
let{Err:t}=i9.DER,r="string"==typeof e?i4(e):e;if(!(r instanceof Uint8Array))throw Error("ui8a expected");let n=r.length;if(n<2||48!=r[0])throw new t("Invalid signature tag");if(r[1]!==n-2)throw new t("Invalid signature: incorrect length");let{d:a,l:i}=i9.DER._parseInt(r.subarray(2)),{d:o,l:s}=i9.DER._parseInt(i);if(s.length)throw new t("Invalid signature: left bytes after parsing");return{r:a,s:o}},hexFromSig(e){// Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
let t=e=>8&Number.parseInt(e[0],16)?"00"+e:e,r=e=>{let t=e.toString(16);return 1&t.length?`0${t}`:t},n=t(r(e.s)),a=t(r(e.r)),i=n.length/2,o=a.length/2,s=r(i),l=r(o);return`30${r(o+i+4)}02${l}${a}02${s}${n}`}};// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const i7=BigInt(0),oe=BigInt(1),ot=BigInt(2),or=BigInt(3),on=BigInt(4);function oa(e){let t=function(e){let t=(0,aD.validateBasic)(e);aA.validateObject(t,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});let{endo:r,Fp:n,a:a}=t;if(r){if(!n.eql(a,n.ZERO))throw Error("Endomorphism can only be defined for Koblitz curves that have a=0");if("object"!=typeof r||"bigint"!=typeof r.beta||"function"!=typeof r.splitScalar)throw Error("Expected endomorphism with beta: bigint and splitScalar: function")}return Object.freeze({...t})}(e),{Fp:r}=t,n=t.toBytes||((e,t,n)=>{let a=t.toAffine();return aA.concatBytes(Uint8Array.from([4]),r.toBytes(a.x),r.toBytes(a.y))}),a=t.fromBytes||(e=>{// const head = bytes[0];
let t=e.subarray(1),n=r.fromBytes(t.subarray(0,r.BYTES)),a=r.fromBytes(t.subarray(r.BYTES,2*r.BYTES));return{x:n,y:a}});/**
     * y² = x³ + ax + b: Short weierstrass curve formula
     * @returns y²
     */function i(e){let{a:n,b:a}=t,i=r.sqr(e),o=r.mul(i,e);return r.add(r.add(o,r.mul(e,n)),a);// x3 + a * x + b
}// Validate whether the passed curve params are valid.
// We check if curve equation works for generator point.
// `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
// ProjectivePoint class has not been initialized yet.
if(!r.eql(r.sqr(t.Gy),i(t.Gx)))throw Error("bad generator point: equation left != right");// Valid group elements reside in range 1..n-1
function o(e){return"bigint"==typeof e&&i7<e&&e<t.n}function s(e){if(!o(e))throw Error("Expected valid bigint: 0 < bigint < curve.n")}// Validates if priv key is valid and converts it to bigint.
// Supports options allowedPrivateKeyLengths and wrapPrivateKey.
function l(e){let r;let{allowedPrivateKeyLengths:n,nByteLength:a,wrapPrivateKey:i,n:o}=t;if(n&&"bigint"!=typeof e){// Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
if(e instanceof Uint8Array&&(e=aA.bytesToHex(e)),"string"!=typeof e||!n.includes(e.length))throw Error("Invalid key");e=e.padStart(2*a,"0")}try{r="bigint"==typeof e?e:aA.bytesToNumberBE((0,aA.ensureBytes)("private key",e,a))}catch(t){throw Error(`private key must be ${a} bytes, hex or bigint, not ${typeof e}`)}return i&&(r=aU.mod(r,o)),s(r),r}let c=new Map;function u(e){if(!(e instanceof d))throw Error("ProjectivePoint expected")}/**
     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
     * Default Point works in 2d / affine coordinates: (x, y)
     * We're doing calculations in projective, because its operations don't require costly inversion.
     */class d{constructor(e,t,n){if(this.px=e,this.py=t,this.pz=n,null==e||!r.isValid(e))throw Error("x required");if(null==t||!r.isValid(t))throw Error("y required");if(null==n||!r.isValid(n))throw Error("z required")}// Does not validate if the point is on-curve.
// Use fromHex instead, or call assertValidity() later.
static fromAffine(e){let{x:t,y:n}=e||{};if(!e||!r.isValid(t)||!r.isValid(n))throw Error("invalid affine point");if(e instanceof d)throw Error("projective point not allowed");let a=e=>r.eql(e,r.ZERO);return(// fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
a(t)&&a(n)?d.ZERO:new d(t,n,r.ONE))}get x(){return this.toAffine().x}get y(){return this.toAffine().y}/**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */static normalizeZ(e){let t=r.invertBatch(e.map(e=>e.pz));return e.map((e,r)=>e.toAffine(t[r])).map(d.fromAffine)}/**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */static fromHex(e){let t=d.fromAffine(a((0,aA.ensureBytes)("pointHex",e)));return t.assertValidity(),t}// Multiplies generator point by privateKey.
static fromPrivateKey(e){return d.BASE.multiply(l(e))}// "Private method", don't use it directly
_setWindowSize(e){this._WINDOW_SIZE=e,c.delete(this)}// A point on curve is valid if it conforms to equation.
assertValidity(){if(this.is0()){// (0, 1, 0) aka ZERO is invalid in most contexts.
// In BLS, ZERO can be serialized, so we allow it.
// (0, 0, 0) is wrong representation of ZERO and is always invalid.
if(t.allowInfinityPoint&&!r.is0(this.py))return;throw Error("bad point: ZERO")}// Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
let{x:e,y:n}=this.toAffine();// Check if x, y are valid field elements
if(!r.isValid(e)||!r.isValid(n))throw Error("bad point: x or y not FE");let a=r.sqr(n),o=i(e);// y²
if(!r.eql(a,o))throw Error("bad point: equation left != right");if(!this.isTorsionFree())throw Error("bad point: not in prime-order subgroup")}hasEvenY(){let{y:e}=this.toAffine();if(r.isOdd)return!r.isOdd(e);throw Error("Field doesn't support isOdd")}/**
         * Compare one point to another.
         */equals(e){u(e);let{px:t,py:n,pz:a}=this,{px:i,py:o,pz:s}=e,l=r.eql(r.mul(t,s),r.mul(i,a)),c=r.eql(r.mul(n,s),r.mul(o,a));return l&&c}/**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */negate(){return new d(this.px,r.neg(this.py),this.pz)}// Renes-Costello-Batina exception-free doubling formula.
// There is 30% faster Jacobian formula, but it is not complete.
// https://eprint.iacr.org/2015/1060, algorithm 3
// Cost: 8M + 3S + 3*a + 2*b3 + 15add.
double(){let{a:e,b:n}=t,a=r.mul(n,or),{px:i,py:o,pz:s}=this,l=r.ZERO,c=r.ZERO,u=r.ZERO,f=r.mul(i,i),p=r.mul(o,o),h=r.mul(s,s),b=r.mul(i,o);return b=r.add(b,b),u=r.mul(i,s),u=r.add(u,u),l=r.mul(e,u),c=r.mul(a,h),c=r.add(l,c),l=r.sub(p,c),c=r.add(p,c),c=r.mul(l,c),l=r.mul(b,l),u=r.mul(a,u),h=r.mul(e,h),b=r.sub(f,h),b=r.mul(e,b),b=r.add(b,u),u=r.add(f,f),f=r.add(u,f),f=r.add(f,h),f=r.mul(f,b),c=r.add(c,f),h=r.mul(o,s),h=r.add(h,h),f=r.mul(h,b),l=r.sub(l,f),u=r.mul(h,p),u=r.add(u,u),new d(l,c,u=r.add(u,u))}// Renes-Costello-Batina exception-free addition formula.
// There is 30% faster Jacobian formula, but it is not complete.
// https://eprint.iacr.org/2015/1060, algorithm 1
// Cost: 12M + 0S + 3*a + 3*b3 + 23add.
add(e){u(e);let{px:n,py:a,pz:i}=this,{px:o,py:s,pz:l}=e,c=r.ZERO,f=r.ZERO,p=r.ZERO,h=t.a,b=r.mul(t.b,or),y=r.mul(n,o),m=r.mul(a,s),g=r.mul(i,l),v=r.add(n,a),x=r.add(o,s);v=r.mul(v,x),x=r.add(y,m),v=r.sub(v,x),x=r.add(n,i);let w=r.add(o,l);// step 10
return x=r.mul(x,w),w=r.add(y,g),x=r.sub(x,w),w=r.add(a,i),c=r.add(s,l),w=r.mul(w,c),c=r.add(m,g),w=r.sub(w,c),p=r.mul(h,x),c=r.mul(b,g),p=r.add(c,p),c=r.sub(m,p),p=r.add(m,p),f=r.mul(c,p),m=r.add(y,y),m=r.add(m,y),g=r.mul(h,g),x=r.mul(b,x),m=r.add(m,g),g=r.sub(y,g),g=r.mul(h,g),x=r.add(x,g),y=r.mul(m,x),f=r.add(f,y),y=r.mul(w,x),c=r.mul(v,c),c=r.sub(c,y),y=r.mul(v,m),p=r.mul(w,p),new d(c,f,p=r.add(p,y))}subtract(e){return this.add(e.negate())}is0(){return this.equals(d.ZERO)}wNAF(e){return p.wNAFCached(this,c,e,e=>{let t=r.invertBatch(e.map(e=>e.pz));return e.map((e,r)=>e.toAffine(t[r])).map(d.fromAffine)})}/**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */multiplyUnsafe(e){let n=d.ZERO;if(e===i7)return n;if(s(e),e===oe)return this;let{endo:a}=t;if(!a)return p.unsafeLadder(this,e);// Apply endomorphism
let{k1neg:i,k1:o,k2neg:l,k2:c}=a.splitScalar(e),u=n,f=n,h=this;for(;o>i7||c>i7;)o&oe&&(u=u.add(h)),c&oe&&(f=f.add(h)),h=h.double(),o>>=oe,c>>=oe;return i&&(u=u.negate()),l&&(f=f.negate()),f=new d(r.mul(f.px,a.beta),f.py,f.pz),u.add(f)}/**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */multiply(e){let n,a;s(e);let{endo:i}=t;if(i){let{k1neg:t,k1:o,k2neg:s,k2:l}=i.splitScalar(e),{p:c,f:u}=this.wNAF(o),{p:f,f:h}=this.wNAF(l);c=p.constTimeNegate(t,c),f=p.constTimeNegate(s,f),f=new d(r.mul(f.px,i.beta),f.py,f.pz),n=c.add(f),a=u.add(h)}else{let{p:t,f:r}=this.wNAF(e);n=t,a=r}// Normalize `z` for both points, but return only real one
return d.normalizeZ([n,a])[0]}/**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */multiplyAndAddUnsafe(e,t,r){let n=d.BASE,a=(e,t// Select faster multiply() method
)=>t!==i7&&t!==oe&&e.equals(n)?e.multiply(t):e.multiplyUnsafe(t),i=a(this,t).add(a(e,r));// No Strauss-Shamir trick: we have 10% faster G precomputes
return i.is0()?void 0:i}// Converts Projective point to affine (x, y) coordinates.
// Can accept precomputed Z^-1 - for example, from invertBatch.
// (x, y, z) ∋ (x=x/z, y=y/z)
toAffine(e){let{px:t,py:n,pz:a}=this,i=this.is0();// If invZ was 0, we return zero point. However we still want to execute
// all operations, so we replace invZ with a random number, 1.
null==e&&(e=i?r.ONE:r.inv(a));let o=r.mul(t,e),s=r.mul(n,e),l=r.mul(a,e);if(i)return{x:r.ZERO,y:r.ZERO};if(!r.eql(l,r.ONE))throw Error("invZ was invalid");return{x:o,y:s}}isTorsionFree(){let{h:e,isTorsionFree:r}=t;if(e===oe)return!0;// No subgroups, always torsion-free
if(r)return r(d,this);throw Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){let{h:e,clearCofactor:r}=t;return e===oe?this:r?r(d,this):this.multiplyUnsafe(t.h)// Fast-path
}toRawBytes(e=!0){return this.assertValidity(),n(d,this,e)}toHex(e=!0){return aA.bytesToHex(this.toRawBytes(e))}}d.BASE=new d(t.Gx,t.Gy,r.ONE),d.ZERO=new d(r.ZERO,r.ONE,r.ZERO);let f=t.nBitLength,p=(0,aD.wNAF)(d,t.endo?Math.ceil(f/2):f);// Validate if generator point is on curve
return{CURVE:t,ProjectivePoint:d,normPrivateKeyToScalar:l,weierstrassEquation:i,isWithinCurveOrder:o}}/**
 * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.
 * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.
 * b = True and y = sqrt(u / v) if (u / v) is square in F, and
 * b = False and y = sqrt(Z * (u / v)) otherwise.
 * @param Fp
 * @param Z
 * @returns
 */function oi(e,t){// Generic implementation
let r=e.ORDER,n=i7;for(let e=r-oe;e%ot===i7;e/=ot)n+=oe;let a=n,i=ot<<a-oe-oe,o=i*ot,s=(r-oe)/o,l=(s-oe)/ot,c=o-oe,u=e.pow(t,s),d=e.pow(t,(s+oe)/ot),f=(t,r)=>{let n=u,o=e.pow(r,c),s=e.sqr(o);// 1. tv1 = c6
s=e.mul(s,r);let f=e.mul(t,s);// 5. tv5 = u * tv3
f=e.pow(f,l),f=e.mul(f,o),o=e.mul(f,r),s=e.mul(f,t);let p=e.mul(s,o);// 10. tv4 = tv3 * tv2
f=e.pow(p,i);let h=e.eql(f,e.ONE);// 12. isQR = tv5 == 1
o=e.mul(s,d),f=e.mul(p,n),s=e.cmov(o,s,h),p=e.cmov(f,p,h);// 17. for i in (c1, c1 - 1, ..., 2):
for(let t=a;t>oe;t--){let r=t-ot;// 18.    tv5 = i - 2
r=ot<<r-oe;let a=e.pow(p,r),i=e.eql(a,e.ONE);// 20.    tv5 = tv4^tv5
o=e.mul(s,n),n=e.mul(n,n),a=e.mul(p,n),s=e.cmov(o,s,i),p=e.cmov(a,p,i)}return{isValid:h,value:s}};// 1. c1, the largest integer such that 2^c1 divides q - 1.
if(e.ORDER%on===or){// sqrt_ratio_3mod4(u, v)
let r=(e.ORDER-or)/on,n=e.sqrt(e.neg(t));// 1. c1 = (q - 3) / 4     # Integer arithmetic
f=(t,a)=>{let i=e.sqr(a),o=e.mul(t,a);// 1. tv1 = v^2
i=e.mul(i,o);// 3. tv1 = tv1 * tv2
let s=e.pow(i,r);// 4. y1 = tv1^c1
s=e.mul(s,o);// 5. y1 = y1 * tv2
let l=e.mul(s,n),c=e.mul(e.sqr(s),a),u=e.eql(c,t),d=e.cmov(l,s,u);// 6. y2 = y1 * c2
return{isValid:u,value:d};// 11. return (isQR, y) isQR ? y : y*c2
}}// No curves uses that
// if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8
return f}i9.weierstrassPoints=oa,i9.weierstrass=function(e){let t=function(e){let t=(0,aD.validateBasic)(e);return aA.validateObject(t,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...t})}(e),{Fp:r,n:n}=t,a=r.BYTES+1,i=2*r.BYTES+1;function o(e){return aU.mod(e,n)}function s(e){return aU.invert(e,n)}let{ProjectivePoint:l,normPrivateKeyToScalar:c,weierstrassEquation:u,isWithinCurveOrder:d}=oa({...t,toBytes(e,t,n){let a=t.toAffine(),i=r.toBytes(a.x),o=aA.concatBytes;return n?o(Uint8Array.from([t.hasEvenY()?2:3]),i):o(Uint8Array.from([4]),i,r.toBytes(a.y))},fromBytes(e){let t=e.length,n=e[0],o=e.subarray(1);// this.assertValidity() is done inside of fromHex
if(t===a&&(2===n||3===n)){let e=aA.bytesToNumberBE(o);if(!(i7<e&&e<r.ORDER))throw Error("Point is not on curve");let t=u(e),a=r.sqrt(t),i=(a&oe)===oe;// y² = x³ + ax + b
return(1&n)==1!==i&&(a=r.neg(a)),{x:e,y:a}}if(t===i&&4===n){let e=r.fromBytes(o.subarray(0,r.BYTES)),t=r.fromBytes(o.subarray(r.BYTES,2*r.BYTES));return{x:e,y:t}}throw Error(`Point of length ${t} was invalid. Expected ${a} compressed bytes or ${i} uncompressed bytes`)}}),f=e=>aA.bytesToHex(aA.numberToBytesBE(e,t.nByteLength));function p(e){let t=n>>oe;return e>t}// slice bytes num
let h=(e,t,r)=>aA.bytesToNumberBE(e.slice(t,r));/**
     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
     */class b{constructor(e,t,r){this.r=e,this.s=t,this.recovery=r,this.assertValidity()}// pair (bytes of r, bytes of s)
static fromCompact(e){let r=t.nByteLength;return new b(h(e=(0,aA.ensureBytes)("compactSignature",e,2*r),0,r),h(e,r,2*r))}// DER encoded ECDSA signature
// https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
static fromDER(e){let{r:t,s:r}=i9.DER.toSig((0,aA.ensureBytes)("DER",e));return new b(t,r)}assertValidity(){// can use assertGE here
if(!d(this.r))throw Error("r must be 0 < r < CURVE.n");if(!d(this.s))throw Error("s must be 0 < s < CURVE.n")}addRecoveryBit(e){return new b(this.r,this.s,e)}recoverPublicKey(e){let{r:n,s:a,recovery:i}=this,c=g((0,aA.ensureBytes)("msgHash",e));if(null==i||![0,1,2,3].includes(i))throw Error("recovery id invalid");let u=2===i||3===i?n+t.n:n;if(u>=r.ORDER)throw Error("recovery id 2 or 3 invalid");let d=(1&i)==0?"02":"03",p=l.fromHex(d+f(u)),h=s(u),b=o(-c*h),y=o(a*h),m=l.BASE.multiplyAndAddUnsafe(p,b,y);if(!m)throw Error("point at infinify");// unsafe is fine: no priv data leaked
return m.assertValidity(),m}// Signatures should be low-s, to prevent malleability.
hasHighS(){return p(this.s)}normalizeS(){return this.hasHighS()?new b(this.r,o(-this.s),this.recovery):this}// DER-encoded
toDERRawBytes(){return aA.hexToBytes(this.toDERHex())}toDERHex(){return i9.DER.hexFromSig({r:this.r,s:this.s})}// padded bytes of r, then padded bytes of s
toCompactRawBytes(){return aA.hexToBytes(this.toCompactHex())}toCompactHex(){return f(this.r)+f(this.s)}}/**
     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
     */function y(e){let t=e instanceof Uint8Array,r="string"==typeof e,n=(t||r)&&e.length;return t?n===a||n===i:r?n===2*a||n===2*i:e instanceof l}// RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
// FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
// bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
// int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
let m=t.bits2int||function(e){// For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
// for some cases, since bytes.length * 8 is not actual bitLength.
let r=aA.bytesToNumberBE(e),n=8*e.length-t.nBitLength;// check for == u8 done here
return n>0?r>>BigInt(n):r},g=t.bits2int_modN||function(e){return o(m(e));// can't use bytesToNumberBE here
},v=aA.bitMask(t.nBitLength);/**
     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
     */function x(e){if("bigint"!=typeof e)throw Error("bigint expected");if(!(i7<=e&&e<v))throw Error(`bigint expected < 2^${t.nBitLength}`);// works with order, can have different size than numToField!
return aA.numberToBytesBE(e,t.nByteLength)}let w={lowS:t.lowS,prehash:!1},P={lowS:t.lowS,prehash:!1};return(// Enable precomputes. Slows down first publicKey computation by 20ms.
l.BASE._setWindowSize(8),{CURVE:t,getPublicKey:/**
     * Computes public key for a private key. Checks for validity of the private key.
     * @param privateKey private key
     * @param isCompressed whether to return compact (default), or full key
     * @returns Public key, full when isCompressed=false; short when isCompressed=true
     */function(e,t=!0){return l.fromPrivateKey(e).toRawBytes(t)},getSharedSecret:/**
     * ECDH (Elliptic Curve Diffie Hellman).
     * Computes shared public key from private key and public key.
     * Checks: 1) private key validity 2) shared key is on-curve.
     * Does NOT hash the result.
     * @param privateA private key
     * @param publicB different public key
     * @param isCompressed whether to return compact (default), or full key
     * @returns shared public key
     */function(e,t,r=!0){if(y(e))throw Error("first arg must be private key");if(!y(t))throw Error("second arg must be public key");let n=l.fromHex(t);// check for being on-curve
return n.multiply(c(e)).toRawBytes(r)},sign:/**
     * Signs message hash with a private key.
     * ```
     * sign(m, d, k) where
     *   (x, y) = G × k
     *   r = x mod n
     *   s = (m + dr)/k mod n
     * ```
     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
     * @param privKey private key
     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
     * @returns signature with recovery param
     */function(e,n,a=w){let{seed:i,k2sig:u}=// Steps A, D of RFC6979 3.2
// Creates RFC6979 seed; converts msg/privKey to numbers.
// Used only in sign, not in verify.
// NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
// Also it can be bigger for P224 + SHA256
function(e,n,a=w){if(["recovered","canonical"].some(e=>e in a))throw Error("sign() legacy options not supported");let{hash:i,randomBytes:u}=t,{lowS:f,prehash:h,extraEntropy:y}=a;null==f&&(f=!0),e=(0,aA.ensureBytes)("msgHash",e),h&&(e=(0,aA.ensureBytes)("prehashed msgHash",i(e)));// We can't later call bits2octets, since nested bits2int is broken for curves
// with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
// const bits2octets = (bits) => int2octets(bits2int_modN(bits))
let v=g(e),P=c(n),O=[x(P),x(v)];// extraEntropy. RFC6979 3.6: additional k' (optional).
if(null!=y){// K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
let e=!0===y?u(r.BYTES):y;// generate random bytes OR pass as-is
O.push((0,aA.ensureBytes)("extraEntropy",e));// check for being bytes
}let T=aA.concatBytes(...O);// Step D of RFC6979 3.2
return{seed:T,k2sig:// Converts signature params into point w r/s, checks result for validity.
function(e){// RFC 6979 Section 3.2, step 3: k = bits2int(T)
let t=m(e);// Cannot use fields methods, since it is group element
if(!d(t))return;// Important: all mod() calls here must be done over N
let r=s(t),n=l.BASE.multiply(t).toAffine(),a=o(n.x);// k^-1 mod n
if(a===i7)return;// Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
// https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
// a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
let i=o(r*o(v+a*P));// Not using blinding here
if(i===i7)return;let c=(n.x===a?0:2)|Number(n.y&oe),u=i;// recovery bit (2 or 3, when q.x > n)
return f&&p(i)&&(u=p(i)?o(-i):i,c^=1),new b(a,u,c);// use normS, not s
}}}(e,n,a),f=aA.createHmacDrbg(t.hash.outputLen,t.nByteLength,t.hmac);// Steps A, D of RFC6979 3.2.
return f(i,u);// Steps B, C, D, E, F, G
},verify:// utils.precompute(8, ProjectivePoint.BASE)
/**
     * Verifies a signature against message hash and public key.
     * Rejects lowS signatures by default: to override,
     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
     *
     * ```
     * verify(r, s, h, P) where
     *   U1 = hs^-1 mod n
     *   U2 = rs^-1 mod n
     *   R = U1⋅G - U2⋅P
     *   mod(R.x, n) == r
     * ```
     */function(e,r,n,a=P){let i,c;if(r=(0,aA.ensureBytes)("msgHash",r),n=(0,aA.ensureBytes)("publicKey",n),"strict"in a)throw Error("options.strict was renamed to lowS");let{lowS:u,prehash:d}=a;try{if("string"==typeof e||e instanceof Uint8Array)// Since DER can also be 2*nByteLength bytes, we check for it first.
try{c=b.fromDER(e)}catch(t){if(!(t instanceof i9.DER.Err))throw t;c=b.fromCompact(e)}else if("object"==typeof e&&"bigint"==typeof e.r&&"bigint"==typeof e.s){let{r:t,s:r}=e;c=new b(t,r)}else throw Error("PARSE");i=l.fromHex(n)}catch(e){if("PARSE"===e.message)throw Error("signature must be Signature instance, Uint8Array or hex string");return!1}if(u&&c.hasHighS())return!1;d&&(r=t.hash(r));let{r:f,s:p}=c,h=g(r),y=s(p),m=o(h*y),v=o(f*y),x=l.BASE.multiplyAndAddUnsafe(i,m,v)?.toAffine();if(!x)return!1;let w=o(x.x);return w===f},ProjectivePoint:l,Signature:b,utils:{isValidPrivateKey(e){try{return c(e),!0}catch(e){return!1}},normPrivateKeyToScalar:c,/**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */randomPrivateKey:()=>{let e=aU.getMinHashLength(t.n);return aU.mapHashToField(t.randomBytes(e),t.n)},/**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */precompute:(e=8,t=l.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)}})},i9.SWUFpSqrtRatio=oi,i9.mapToCurveSimpleSWU=/**
 * Simplified Shallue-van de Woestijne-Ulas Method
 * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2
 */function(e,t){if(aU.validateField(e),!e.isValid(t.A)||!e.isValid(t.B)||!e.isValid(t.Z))throw Error("mapToCurveSimpleSWU: invalid opts");let r=oi(e,t.Z);if(!e.isOdd)throw Error("Fp.isOdd is not implemented!");// Input: u, an element of F.
// Output: (x, y), a point on E.
return n=>{let a,i,o,s,l,c,u,d;a=e.sqr(n),a=e.mul(a,t.Z),i=e.sqr(a),i=e.add(i,a),o=e.add(i,e.ONE),o=e.mul(o,t.B),s=e.cmov(t.Z,e.neg(i),!e.eql(i,e.ZERO)),s=e.mul(s,t.A),i=e.sqr(o),c=e.sqr(s),l=e.mul(c,t.A),i=e.add(i,l),i=e.mul(i,o),c=e.mul(c,s),l=e.mul(c,t.B),i=e.add(i,l),u=e.mul(a,o);let{isValid:f,value:p}=r(i,c);// 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)
d=e.mul(a,n),d=e.mul(d,p),u=e.cmov(u,o,f),d=e.cmov(d,p,f);let h=e.isOdd(n)===e.isOdd(d);// 23.  e1 = sgn0(u) == sgn0(y)
return d=e.cmov(e.neg(d),d,h),{x:u=e.div(u,s),y:d}}};var aA=A("esaJO"),oo={};Object.defineProperty(oo,"__esModule",{value:!0}),oo.createCurve=oo.getHash=void 0;var os={};Object.defineProperty(os,"__esModule",{value:!0}),os.hmac=os.HMAC=void 0;// HMAC (RFC 2104)
class ol extends n8.Hash{constructor(e,t){super(),this.finished=!1,this.destroyed=!1,(0,n_.hash)(e);let r=(0,n8.toBytes)(t);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;let n=this.blockLen,a=new Uint8Array(n);// blockLen can be bigger than outputLen
a.set(r.length>n?e.create().update(r).digest():r);for(let e=0;e<a.length;e++)a[e]^=54;this.iHash.update(a),// By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
this.oHash=e.create();// Undo internal XOR && apply outer XOR
for(let e=0;e<a.length;e++)a[e]^=106;this.oHash.update(a),a.fill(0)}update(e){return(0,n_.exists)(this),this.iHash.update(e),this}digestInto(e){(0,n_.exists)(this),(0,n_.bytes)(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){let e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){// Create new instance without calling constructor since key already in state and we don't know it.
e||(e=Object.create(Object.getPrototypeOf(this),{}));let{oHash:t,iHash:r,finished:n,destroyed:a,blockLen:i,outputLen:o}=this;return e.finished=n,e.destroyed=a,e.blockLen=i,e.outputLen=o,e.oHash=t._cloneInto(e.oHash),e.iHash=r._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}// connects noble-curves to noble-hashes
function oc(e){return{hash:e,hmac:(t,...r)=>(0,os.hmac)(e,t,(0,n8.concatBytes)(...r)),randomBytes:n8.randomBytes}}os.HMAC=ol,os.hmac=(e,t,r)=>new ol(e,t).update(r).digest(),os.hmac.create=(e,t)=>new ol(e,t),oo.getHash=oc,oo.createCurve=function(e,t){let r=t=>(0,i9.weierstrass)({...e,...oc(t)});return Object.freeze({...r(t),create:r})};const ou=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),od=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),of=BigInt(1),op=BigInt(2),oh=(e,t)=>(e+t/op)/t;/**
 * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
 * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
 */function ob(e){// prettier-ignore
let t=BigInt(3),r=BigInt(6),n=BigInt(11),a=BigInt(22),i=BigInt(23),o=BigInt(44),s=BigInt(88),l=e*e*e%ou,c=l*l*e%ou,u=(0,aU.pow2)(c,t,ou)*c%ou,d=(0,aU.pow2)(u,t,ou)*c%ou,f=(0,aU.pow2)(d,op,ou)*l%ou,p=(0,aU.pow2)(f,n,ou)*f%ou,h=(0,aU.pow2)(p,a,ou)*p%ou,b=(0,aU.pow2)(h,o,ou)*h%ou,y=(0,aU.pow2)(b,s,ou)*b%ou,m=(0,aU.pow2)(y,o,ou)*h%ou,g=(0,aU.pow2)(m,t,ou)*c%ou,v=(0,aU.pow2)(g,i,ou)*p%ou,x=(0,aU.pow2)(v,r,ou)*l%ou,w=(0,aU.pow2)(x,op,ou);if(!oy.eql(oy.sqr(w),e))throw Error("Cannot find square root");return w}const oy=(0,aU.Field)(ou,void 0,void 0,{sqrt:ob});iQ.secp256k1=(0,oo.createCurve)({a:BigInt(0),b:BigInt(7),Fp:oy,n:od,// Base point (x, y) aka generator point
Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,/**
     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
     */endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:e=>{let t=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-of*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),n=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),a=BigInt("0x100000000000000000000000000000000"),i=oh(t*e,od),o=oh(-r*e,od),s=(0,aU.mod)(e-i*t-o*n,od),l=(0,aU.mod)(-i*r-o*t,od),c=s>a,u=l>a;if(c&&(s=od-s),u&&(l=od-l),s>a||l>a)throw Error("splitScalar: Endomorphism failed, k="+e);return{k1neg:c,k1:s,k2neg:u,k2:l}}}},i_.sha256);// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
const om=BigInt(0),og=e=>"bigint"==typeof e&&om<e&&e<ou,ov=e=>"bigint"==typeof e&&om<e&&e<od,ox={};function ow(e,...t){let r=ox[e];if(void 0===r){let t=(0,i_.sha256)(Uint8Array.from(e,e=>e.charCodeAt(0)));r=(0,aA.concatBytes)(t,t),ox[e]=r}return(0,i_.sha256)((0,aA.concatBytes)(r,...t))}// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03
const oP=e=>e.toRawBytes(!0).slice(1),oO=e=>(0,aA.numberToBytesBE)(e,32),oT=e=>(0,aU.mod)(e,ou),oz=e=>(0,aU.mod)(e,od),ok=iQ.secp256k1.ProjectivePoint,oL=(e,t,r)=>ok.BASE.multiplyAndAddUnsafe(e,t,r);// Calculate point, scalar and bytes
function oE(e){let t=iQ.secp256k1.utils.normPrivateKeyToScalar(e),r=ok.fromPrivateKey(t),n=r.hasEvenY()?t:oz(-t);// same method executed in fromPrivateKey
return{scalar:n,bytes:oP(r)}}/**
 * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.
 * @returns valid point checked for being on-curve
 */function oN(e){if(!og(e))throw Error("bad x: need 0 < x < p");// Fail if x ≥ p.
let t=oT(e*e),r=oT(t*e+BigInt(7)),n=ob(r);n%op!==om&&(n=oT(-n));let a=new ok(e,n,of);// y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.
return a.assertValidity(),a}/**
 * Create tagged hash, convert it to bigint, reduce modulo-n.
 */function oS(...e){return oz((0,aA.bytesToNumberBE)(ow("BIP0340/challenge",...e)))}/**
 * Verifies Schnorr signature.
 * Will swallow errors & return false except for initial type validation of arguments.
 */function oM(e,t,r){let n=(0,aA.ensureBytes)("signature",e,64),a=(0,aA.ensureBytes)("message",t),i=(0,aA.ensureBytes)("publicKey",r,32);try{let e=oN((0,aA.bytesToNumberBE)(i)),t=(0,aA.bytesToNumberBE)(n.subarray(0,32));// P = lift_x(int(pk)); fail if that fails
if(!og(t))return!1;let r=(0,aA.bytesToNumberBE)(n.subarray(32,64));// Let s = int(sig[32:64]); fail if s ≥ n.
if(!ov(r))return!1;let o=oS(oO(t),oP(e),a),s=oL(e,r,oz(-o));// int(challenge(bytes(r)||bytes(P)||m))%n
if(!s||!s.hasEvenY()||s.toAffine().x!==t)return!1;// -eP == (n-e)P
return!0;// Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.
}catch(e){return!1}}iQ.schnorr={getPublicKey:/**
 * Schnorr public key is just `x` coordinate of Point as per BIP340.
 */function(e){return oE(e).bytes;// d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)
},sign:/**
 * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.
 * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.
 */function(e,t,r=(0,n8.randomBytes)(32)){let n=(0,aA.ensureBytes)("message",e),{bytes:a,scalar:i}=oE(t),o=(0,aA.ensureBytes)("auxRand",r,32),s=oO(i^(0,aA.bytesToNumberBE)(ow("BIP0340/aux",o))),l=ow("BIP0340/nonce",s,a,n),c=oz((0,aA.bytesToNumberBE)(l));if(c===om)throw Error("sign failed: k is zero");// Fail if k' = 0.
let{bytes:u,scalar:d}=oE(c),f=oS(u,a,n),p=new Uint8Array(64);// Let R = k'⋅G.
// If Verify(bytes(P), m, sig) (see below) returns failure, abort
if(p.set(u,0),p.set(oO(oz(d+f*i)),32),!oM(p,n,a))throw Error("sign: Invalid signature produced");return p},verify:oM,utils:{randomPrivateKey:iQ.secp256k1.utils.randomPrivateKey,lift_x:oN,pointToBytes:oP,numberToBytesBE:aA.numberToBytesBE,bytesToNumberBE:aA.bytesToNumberBE,taggedHash:ow,mod:aU.mod}};const oj=(0,aJ.isogenyMap)(oy,[// xNum
["0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7","0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581","0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262","0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"],// xDen
["0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b","0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14","0x0000000000000000000000000000000000000000000000000000000000000001"],// yNum
["0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c","0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3","0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931","0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"],// yDen
["0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b","0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573","0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f","0x0000000000000000000000000000000000000000000000000000000000000001"]].map(e=>e.map(e=>BigInt(e)))),oH=(0,i9.mapToCurveSimpleSWU)(oy,{A:BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),B:BigInt("1771"),Z:oy.create(BigInt("-11"))}),oR=(0,aJ.createHasher)(iQ.secp256k1.ProjectivePoint,e=>{let{x:t,y:r}=oH(oy.create(e[0]));return oj(t,r)},{DST:"secp256k1_XMD:SHA-256_SSWU_RO_",encodeDST:"secp256k1_XMD:SHA-256_SSWU_NU_",p:oy.ORDER,m:1,k:128,expand:"xmd",hash:i_.sha256});iQ.hashToCurve=oR.hashToCurve,iQ.encodeToCurve=oR.encodeToCurve;var oI=A("dEXSZ");function oB(e,{isLe:t=!1,isNegative:r=!1}={}){if(!e||"0x"===e)return new/*@__PURE__*/(n(oI))(0);let a=function(e){if(!e||"0x"===e)return"";if(eX.test(e))return e.substring(2);if(eU.test(e))return e;throw Error(`Expected hex value to convert, found '${e}'`)}(e),i=new/*@__PURE__*/(n(oI))(a,16,t?"le":"be");// fromTwos takes as parameter the number of bits, which is the hex length
// multiplied by 4 (2 bytes being 8 bits)
return r?i.fromTwos(4*a.length):i}function oV(...e){return t=>(!!t&&"object"==typeof t||eJ(t))&&e.every(e=>eJ(t[e]))}const oX=oV("toBigInt"),oU=oV("toBn");var oI=A("dEXSZ");function oA(e){return e?/*@__PURE__*/n(oI).isBN(e)?e:eA(e)?oB(e.toString()):"bigint"==typeof e?new/*@__PURE__*/(n(oI))(e.toString()):oU(e)?e.toBn():new/*@__PURE__*/(n(oI))(oX(e)?e.toBigInt().toString():e):new/*@__PURE__*/(n(oI))(0)}const oD={bitLength:-1,isLe:!0,isNegative:!1};function oC(e,{bitLength:t=-1,isLe:r=!0,isNegative:n=!1}=oD){let a=oA(e),i=-1===t?Math.ceil(a.bitLength()/8):Math.ceil((t||0)/8);if(!e)return new Uint8Array(-1===t?1:i);let o=new Uint8Array(i),s=n?a.toTwos(8*i):a;return o.set(s.toArray(r?"le":"be",i),0),o}const oF={bitLength:256,isLe:!1};function oZ(e,t){if(![33,65].includes(e.length))throw Error(`Invalid publicKey provided, received ${e.length} bytes input`);if(65===e.length)return e.subarray(1);if(!eY||!t&&rY())return rU(e).subarray(1);let{px:r,py:n}=(0,iQ.secp256k1).ProjectivePoint.fromHex(e);return ti(oC(r,oF),oC(n,oF))}function oq(e,t,r){let n=e5(r),a=e5(t);if(32!==n.length)throw Error(`Invalid publicKey, received ${n.length} bytes, expected 32`);if(64!==a.length)throw Error(`Invalid signature, received ${a.length} bytes, expected 64`);return rD(a,e5(e),n)}const oG=e=>(t,r,n)=>(function(e,t,r,n="blake2",a){let i=e5(t);if(65!==i.length)throw Error(`Expected signature with 65 bytes, ${i.length} found instead`);let o=function(e,t,r,n="blake2",a){let i=e5(t).subarray(0,64),o=e5(e),s=!eY||!a&&rY()?rA(o,i,r):(0,iQ.secp256k1).Signature.fromCompact(i).addRecoveryBit(r).recoverPublicKey(o).toRawBytes();if(!s)throw Error("Unable to recover publicKey from signature");return"keccak"===n?oZ(s,a):function(e,t){if(![33,65].includes(e.length))throw Error(`Invalid publicKey provided, received ${e.length} bytes input`);return 33===e.length?e:!eY||!t&&rY()?rX(e):(0,iQ.secp256k1).ProjectivePoint.fromHex(e).toRawBytes(!0)}(s,a)}(iJ(n,e),i,i[64],n,a),s=iJ(n,o,a),l=e5(r);// for Ethereum (keccak) the last 20 bytes is the address
        return nF(o,l)||("keccak"===n?nF(s.slice(-20),l.slice(-20)):nF(s,l))})(t,r,n,e),oW=[["ecdsa",oG("blake2")],["ethereum",oG("keccak")]],oY=[["ed25519",iS],["sr25519",oq],...oW],oK=["ed25519","sr25519","ecdsa"];function oJ(e,{message:t,publicKey:r,signature:n},a=oY){return e.isValid=a.some(([a,i])=>{try{if(i(t,n,r))return e.crypto=a,!0}catch{// do nothing, result.isValid still set to false
}return!1}),e}function oQ(e,{message:t,publicKey:r,signature:n}){if(![0,1,2].includes(n[0]))throw Error(`Unknown crypto type, expected signature prefix [0..2], found ${n[0]}`);let a=oK[n[0]]||"none";e.crypto=a;try{e.isValid=({ecdsa:()=>oJ(e,{message:t,publicKey:r,signature:n.subarray(1)},oW).isValid,ed25519:()=>iS(t,n.subarray(1),r),none:()=>{throw Error("no verify for `none` crypto type")},sr25519:()=>oq(t,n.subarray(1),r)})[a]()}catch{// ignore, result.isValid still set to false
}return e}const o_="0123456789abcdef",o$=new Uint8Array(256),o0=new Uint8Array(65536);for(let e=0,t=o_.length;e<t;e++)o$[0|o_[e].charCodeAt(0)]=0|e,e>9&&(o$[0|o_[e].toUpperCase().charCodeAt(0)]=0|e);for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)o0[t|r]=o$[e]<<4|o$[r]}function o1(e,t=-1){if(!e)return new Uint8Array;let r=e.startsWith("0x")?2:0,n=Math.ceil((e.length-r)/2),a=Math.ceil(-1===t?n:t/8),i=new Uint8Array(a),o=a>n?a-n:0;for(let t=o;t<a;t++,r+=2)// HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
// same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
// also the faster operation by at least 2x with the character map above
i[t]=o0[e.charCodeAt(r)<<8|e.charCodeAt(r+1)];return i}const o2=/^0x[\da-fA-F]+$/,o5=/^[\da-fA-F]+$/;function o3(e,t=-1,r){return"string"==typeof e&&("0x"===e||o2.test(e))&&(-1===t?r||e.length%2==0:e.length===2+Math.ceil(t/4))}var o8={};Object.defineProperty(o8,"__esModule",{value:!0}),o8.TextEncoder=o8.packageInfo=void 0;const o9=/*#__PURE__*/"undefined"!=typeof globalThis?globalThis:void 0!==B?B:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this");function o6(e,t){// Not quite sure why this is here - snuck in with TS 4.7.2 with no real idea
// (as of now) as to why this looks like an "any" when we do cast it to a T
//
// eslint-disable-next-line @typescript-eslint/no-unsafe-return
return void 0===o9[e]?t:o9[e]}var o4={};Object.defineProperty(o4,"__esModule",{value:!0}),o4.TextEncoder=void 0,o4.TextEncoder=class{encode(e){let t=e.length,r=new Uint8Array(t);for(let n=0;n<t;n++)r[n]=e.charCodeAt(n);return r}};var o7={},se="node_modules/@kiltprotocol/core/node_modules/@polkadot/x-textencoder/cjs";Object.defineProperty(o7,"__esModule",{value:!0}),o7.packageInfo=void 0,o7.packageInfo={name:"@polkadot/x-textencoder",path:"string"==typeof se?se:"auto",type:"cjs",version:"12.6.2"},Object.defineProperty(o8,"packageInfo",{enumerable:!0,get:function(){return o7.packageInfo}}),o8.TextEncoder=o6("TextEncoder",o4.TextEncoder);const st=new o8.TextEncoder;function sr(e){return e?st.encode(e.toString()):new Uint8Array}function sn(e){return e instanceof Uint8Array||null!=e&&"object"==typeof e&&"Uint8Array"===e.constructor.name}/**
 * @__NO_SIDE_EFFECTS__
 */function sa(...e){let t=e=>e,r=(e,t)=>r=>e(t(r)),n=e.map(e=>e.encode).reduceRight(r,t),a=e.map(e=>e.decode).reduce(r,t);return{encode:n,decode:a}}/**
 * Encodes integer radix representation to array of strings using alphabet and back
 * @__NO_SIDE_EFFECTS__
 */function si(e){return{encode:t=>{if(!Array.isArray(t)||t.length&&"number"!=typeof t[0])throw Error("alphabet.encode input should be an array of numbers");return t.map(t=>{if(t<0||t>=e.length)throw Error(`Digit index outside alphabet: ${t} (alphabet: ${e.length})`);return e[t]})},decode:t=>{if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw Error("alphabet.decode input should be array of strings");return t.map(t=>{if("string"!=typeof t)throw Error(`alphabet.decode: not string element=${t}`);let r=e.indexOf(t);if(-1===r)throw Error(`Unknown letter: "${t}". Allowed: ${e}`);return r})}}}/**
 * @__NO_SIDE_EFFECTS__
 */function so(e=""){if("string"!=typeof e)throw Error("join separator should be string");return{encode:t=>{if(!Array.isArray(t)||t.length&&"string"!=typeof t[0])throw Error("join.encode input should be array of strings");for(let e of t)if("string"!=typeof e)throw Error(`join.encode: non-string input=${e}`);return t.join(e)},decode:t=>{if("string"!=typeof t)throw Error("join.decode input should be string");return t.split(e)}}}/**
 * Slow: O(n^2) time complexity
 * @__NO_SIDE_EFFECTS__
 */function ss(e,t,r){// base 1 is impossible
if(t<2)throw Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);if(r<2)throw Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);if(!Array.isArray(e))throw Error("convertRadix: data should be array");if(!e.length)return[];let n=0,a=[],i=Array.from(e);for(i.forEach(e=>{if(e<0||e>=t)throw Error(`Wrong integer: ${e}`)});;){let e=0,o=!0;for(let a=n;a<i.length;a++){let s=i[a],l=t*e+s;if(!Number.isSafeInteger(l)||t*e/t!==e||l-s!=t*e)throw Error("convertRadix: carry overflow");e=l%r;let c=Math.floor(l/r);if(i[a]=c,!Number.isSafeInteger(c)||c*r+e!==l)throw Error("convertRadix: carry overflow");o&&(c?o=!1:n=a)}if(a.push(e),o)break}for(let t=0;t<e.length-1&&0===e[t];t++)a.push(0);return a.reverse()}const sl=/* @__NO_SIDE_EFFECTS__ */(e,t)=>t?sl(t,e%t):e,sc=/*@__NO_SIDE_EFFECTS__ */(e,t)=>e+(t-sl(e,t));/**
 * Implemented with numbers, because BigInt is 5x slower
 * @__NO_SIDE_EFFECTS__
 */function su(e,t,r,n){if(!Array.isArray(e))throw Error("convertRadix2: data should be array");if(t<=0||t>32)throw Error(`convertRadix2: wrong from=${t}`);if(r<=0||r>32)throw Error(`convertRadix2: wrong to=${r}`);if(sc(t,r)>32)throw Error(`convertRadix2: carry overflow from=${t} to=${r} carryBits=${sc(t,r)}`);let a=0,i=0,o=2**r-1,s=[];for(let n of e){if(n>=2**t)throw Error(`convertRadix2: invalid data word=${n} from=${t}`);if(a=a<<t|n,i+t>32)throw Error(`convertRadix2: carry overflow pos=${i} from=${t}`);for(i+=t;i>=r;i-=r)s.push((a>>i-r&o)>>>0);a&=2**i-1}if(a=a<<r-i&o,!n&&i>=t)throw Error("Excess padding");if(!n&&a)throw Error(`Non-zero padding: ${a}`);return n&&i>0&&s.push(a>>>0),s}const sd=/* @__PURE__ */sa(/**
 * If both bases are power of same number (like `2**8 <-> 2**64`),
 * there is a linear algorithm. For now we have implementation for power-of-two bases only.
 * @__NO_SIDE_EFFECTS__
 */function(e,t=!1){if(e<=0||e>32)throw Error("radix2: bits should be in (0..32]");if(sc(8,e)>32||sc(e,8)>32)throw Error("radix2: carry overflow");return{encode:r=>{if(!sn(r))throw Error("radix2.encode input should be Uint8Array");return su(Array.from(r),8,e,!t)},decode:r=>{if(!Array.isArray(r)||r.length&&"number"!=typeof r[0])throw Error("radix2.decode input should be array of numbers");return Uint8Array.from(su(r,e,8,t))}}}(6),si("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),/**
 * Pad strings array so it has integer number of bits
 * @__NO_SIDE_EFFECTS__
 */function(e,t="="){if("string"!=typeof t)throw Error("padding chr should be string");return{encode(r){if(!Array.isArray(r)||r.length&&"string"!=typeof r[0])throw Error("padding.encode input should be array of strings");for(let e of r)if("string"!=typeof e)throw Error(`padding.encode: non-string input=${e}`);for(;r.length*e%8;)r.push(t);return r},decode(r){if(!Array.isArray(r)||r.length&&"string"!=typeof r[0])throw Error("padding.encode input should be array of strings");for(let e of r)if("string"!=typeof e)throw Error(`padding.decode: non-string input=${e}`);let n=r.length;if(n*e%8)throw Error("Invalid padding: string should have whole number of bytes");for(;n>0&&r[n-1]===t;n--)if(!((n-1)*e%8))throw Error("Invalid padding: string has too much padding");return r.slice(0,n)}}}(6),so("")),sf=sa({encode:e=>{if(!sn(e))throw Error("radix.encode input should be Uint8Array");return ss(Array.from(e),256,58)},decode:e=>{if(!Array.isArray(e)||e.length&&"number"!=typeof e[0])throw Error("radix.decode input should be array of numbers");return Uint8Array.from(ss(e,58,256))}},si("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"),so("")),sp=[996825010,642813549,513874426,1027748829,705979059],sh=o6("BigInt",/**
 * @internal
 *
 * There are _still_ some older environments (specifically RN < 0.70), that does
 * not have proper BigInt support - a non-working fallback is provided for those.
 *
 * We detect availability of BigInt upon usage, so this is purely to allow functional
 * compilation & bundling. Since we have operators such as *+-/ top-level, a number-ish
 * result is used here.
 */function(){return Number.NaN}),sb="function"==typeof sh&&"function"==typeof sh.asIntN,sy="function"==typeof o9.Buffer&&"function"==typeof o9.Buffer.isBuffer;/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */function sm(e){return"function"==typeof e}function sg(e){// we do check a function first, since it is slightly faster than isBuffer itself
return sy&&!!e&&sm(e.readDoubleLE)&&o9.Buffer.isBuffer(e)}/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */function sv(e){// here we defer the instanceof check which is actually slightly
// slower than just checking the constrctor (direct instances)
return(e&&e.constructor)===Uint8Array||e instanceof Uint8Array}function sx(e){return sv(e)?sg(e)?new Uint8Array(e):e:o3(e)?o1(e):Array.isArray(e)?new Uint8Array(e):sr(e)}function sw({coder:e,ipfs:t},r){return(n,a)=>(r(n,a),e.decode(t&&a?n.substring(1):n))}function sP({coder:e,ipfs:t}){return(r,n)=>{let a=e.encode(sx(r));return t&&n?`${t}${a}`:a}}function sO({chars:e,ipfs:t,type:r,withPadding:n}){return(a,i)=>{if("string"!=typeof a)throw Error(`Expected ${r} string input`);if(t&&i&&!a.startsWith(t))throw Error(`Expected ipfs-compatible ${r} to start with '${t}'`);for(let t=i?1:0,o=a.length;t<o;t++)if(e.includes(a[t]));else if(n&&"="===a[t]){if(t===o-1);else if("="===a[t+1]);else throw Error(`Invalid ${r} padding sequence "${a[t]}${a[t+1]}" at index ${t}`)}else throw Error(`Invalid ${r} character "${a[t]}" (0x${a.charCodeAt(t).toString(16)}) at index ${t}`);return!0}}o9.process;const sT={chars:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",coder:sd,type:"base64",withPadding:!0},sz=sO(sT),sk=sw(sT,sz),sL=sP(sT),sE={chars:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",coder:sf,ipfs:"z",type:"base58"},sN=sO(sE),sS=sw(sE,sN),sM=sP(sE);function sj(...e){let t=e.length,r=Array(t),n=0;for(let a=0;a<t;a++)r[a]=sx(e[a]),n+=r[a].length;return sH(r,n)}function sH(e,t=0){let r=e.length,n=0;if(!t)for(let n=0;n<r;n++)t+=e[n].length;let a=new Uint8Array(t);for(let t=0;t<r;t++)a.set(e[t],n),n+=e[t].length;return a}var sR={};Object.defineProperty(sR,"__esModule",{value:!0}),sR.blake2b=void 0;var sI={};Object.defineProperty(sI,"__esModule",{value:!0}),sI.BLAKE2=sI.SIGMA=void 0;var sB={};function sV(e){if(!Number.isSafeInteger(e)||e<0)throw Error(`Wrong positive integer: ${e}`)}function sX(e){if("boolean"!=typeof e)throw Error(`Expected boolean, not ${e}`)}function sU(e,...t){if(!(e instanceof Uint8Array||null!=e&&"object"==typeof e&&"Uint8Array"===e.constructor.name))throw Error("Expected Uint8Array");if(t.length>0&&!t.includes(e.length))throw Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`)}function sA(e){if("function"!=typeof e||"function"!=typeof e.create)throw Error("Hash should be wrapped by utils.wrapConstructor");sV(e.outputLen),sV(e.blockLen)}function sD(e,t=!0){if(e.destroyed)throw Error("Hash instance has been destroyed");if(t&&e.finished)throw Error("Hash#digest() has already been called")}function sC(e,t){sU(e);let r=t.outputLen;if(e.length<r)throw Error(`digestInto() expects output buffer of length at least ${r}`)}Object.defineProperty(sB,"__esModule",{value:!0}),sB.output=sB.exists=sB.hash=sB.bytes=sB.bool=sB.number=void 0,sB.number=sV,sB.bool=sX,sB.bytes=sU,sB.hash=sA,sB.exists=sD,sB.output=sC,sB.default={number:sV,bool:sX,bytes:sU,hash:sA,exists:sD,output:sC};var sF={};/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */Object.defineProperty(sF,"__esModule",{value:!0}),sF.randomBytes=sF.wrapXOFConstructorWithOpts=sF.wrapConstructorWithOpts=sF.wrapConstructor=sF.checkOpts=sF.Hash=sF.concatBytes=sF.toBytes=sF.utf8ToBytes=sF.asyncLoop=sF.nextTick=sF.hexToBytes=sF.bytesToHex=sF.isLE=sF.rotr=sF.createView=sF.u32=sF.u8=void 0;var sZ={};function sq(e){return e instanceof Uint8Array||null!=e&&"object"==typeof e&&"Uint8Array"===e.constructor.name}if(Object.defineProperty(sZ,"__esModule",{value:!0}),sZ.crypto=void 0,sZ.crypto="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0,sF.u8=e=>new Uint8Array(e.buffer,e.byteOffset,e.byteLength),sF.u32=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4)),sF.createView=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),sF.rotr=(e,t)=>e<<32-t|e>>>t,// big-endian hardware is rare. Just in case someone still decides to run hashes:
// early-throw an error because we don't support BE yet.
// Other libraries would silently corrupt the data instead of throwing an error,
// when they don't support it.
sF.isLE=68===new Uint8Array(new Uint32Array([287454020]).buffer)[0],!sF.isLE)throw Error("Non little-endian hardware is not supported");// Array where index 0xf0 (240) is mapped to string 'f0'
const sG=/* @__PURE__ */Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));sF.bytesToHex=/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */function(e){if(!sq(e))throw Error("Uint8Array expected");// pre-caching improves the speed 6x
let t="";for(let r=0;r<e.length;r++)t+=sG[e[r]];return t};// We use optimized technique to convert hex string to byte array
const sW={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function sY(e){return e>=sW._0&&e<=sW._9?e-sW._0:e>=sW._A&&e<=sW._F?e-(sW._A-10):e>=sW._a&&e<=sW._f?e-(sW._a-10):void 0}sF.hexToBytes=/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */function(e){if("string"!=typeof e)throw Error("hex string expected, got "+typeof e);let t=e.length,r=t/2;if(t%2)throw Error("padded hex string expected, got unpadded hex of length "+t);let n=new Uint8Array(r);for(let t=0,a=0;t<r;t++,a+=2){let r=sY(e.charCodeAt(a)),i=sY(e.charCodeAt(a+1));if(void 0===r||void 0===i){let t=e[a]+e[a+1];throw Error('hex string expected, got non-hex character "'+t+'" at index '+a)}n[t]=16*r+i}return n};// There is no setImmediate in browser and setTimeout is slow.
// call of async fn will return Promise, which will be fullfiled only on
// next scheduler queue processing step and this is exactly what we need.
const sK=async()=>{};// Returns control to thread each 'tick' ms to avoid blocking
async function sJ(e,t,r){let n=Date.now();for(let a=0;a<e;a++){r(a);// Date.now() is not monotonic, so in case if clock goes backwards we return return control too
let e=Date.now()-n;e>=0&&e<t||(await (0,sF.nextTick)(),n+=e)}}/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */function sQ(e){if("string"!=typeof e)throw Error(`utf8ToBytes expected string, got ${typeof e}`);return new Uint8Array(new TextEncoder().encode(e));// https://bugzil.la/1681809
}/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */function s_(e){if("string"==typeof e&&(e=sQ(e)),!sq(e))throw Error(`expected Uint8Array, got ${typeof e}`);return e}sF.nextTick=sK,sF.asyncLoop=sJ,sF.utf8ToBytes=sQ,sF.toBytes=s_,sF.concatBytes=/**
 * Copies several Uint8Arrays into one.
 */function(...e){let t=0;for(let r=0;r<e.length;r++){let n=e[r];if(!sq(n))throw Error("Uint8Array expected");t+=n.length}let r=new Uint8Array(t);for(let t=0,n=0;t<e.length;t++){let a=e[t];r.set(a,n),n+=a.length}return r},sF.Hash=// For runtime check if class implements interface
class{// Safe version that clones internal state
clone(){return this._cloneInto()}};const s$={}.toString;sF.checkOpts=function(e,t){if(void 0!==t&&"[object Object]"!==s$.call(t))throw Error("Options should be object or undefined");let r=Object.assign(e,t);return r},sF.wrapConstructor=function(e){let t=t=>e().update(s_(t)).digest(),r=e();return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=()=>e(),t},sF.wrapConstructorWithOpts=function(e){let t=(t,r)=>e(r).update(s_(t)).digest(),r=e({});return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=t=>e(t),t},sF.wrapXOFConstructorWithOpts=function(e){let t=(t,r)=>e(r).update(s_(t)).digest(),r=e({});return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=t=>e(t),t},sF.randomBytes=/**
 * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
 */function(e=32){if(sZ.crypto&&"function"==typeof sZ.crypto.getRandomValues)return sZ.crypto.getRandomValues(new Uint8Array(e));throw Error("crypto.getRandomValues must be defined")},// Blake is based on ChaCha permutation.
// For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].
// prettier-ignore
sI.SIGMA=new Uint8Array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3]);class s0 extends sF.Hash{constructor(e,t,r={},n,a,i){if(super(),this.blockLen=e,this.outputLen=t,this.length=0,this.pos=0,this.finished=!1,this.destroyed=!1,(0,sB.number)(e),(0,sB.number)(t),(0,sB.number)(n),t<0||t>n)throw Error("outputLen bigger than keyLen");if(void 0!==r.key&&(r.key.length<1||r.key.length>n))throw Error(`key must be up 1..${n} byte long or undefined`);if(void 0!==r.salt&&r.salt.length!==a)throw Error(`salt must be ${a} byte long or undefined`);if(void 0!==r.personalization&&r.personalization.length!==i)throw Error(`personalization must be ${i} byte long or undefined`);this.buffer32=(0,sF.u32)(this.buffer=new Uint8Array(e))}update(e){(0,sB.exists)(this);// Main difference with other hashes: there is flag for last block,
// so we cannot process current block before we know that there
// is the next one. This significantly complicates logic and reduces ability
// to do zero-copy processing
let{blockLen:t,buffer:r,buffer32:n}=this;e=(0,sF.toBytes)(e);let a=e.length,i=e.byteOffset,o=e.buffer;for(let s=0;s<a;){this.pos===t&&(this.compress(n,0,!1),this.pos=0);let l=Math.min(t-this.pos,a-s),c=i+s;// full block && aligned to 4 bytes && not last in input
if(l===t&&!(c%4)&&s+l<a){let e=new Uint32Array(o,c,Math.floor((a-s)/4));for(let r=0;s+t<a;r+=n.length,s+=t)this.length+=t,this.compress(e,r,!1);continue}r.set(e.subarray(s,s+l),this.pos),this.pos+=l,this.length+=l,s+=l}return this}digestInto(e){(0,sB.exists)(this),(0,sB.output)(e,this);let{pos:t,buffer32:r}=this;this.finished=!0,// Padding
this.buffer.subarray(t).fill(0),this.compress(r,0,!0);let n=(0,sF.u32)(e);this.get().forEach((e,t)=>n[t]=e)}digest(){let{buffer:e,outputLen:t}=this;this.digestInto(e);let r=e.slice(0,t);return this.destroy(),r}_cloneInto(e){let{buffer:t,length:r,finished:n,destroyed:a,outputLen:i,pos:o}=this;return e||(e=new this.constructor({dkLen:i})),e.set(...this.get()),e.length=r,e.finished=n,e.destroyed=a,e.outputLen=i,e.buffer.set(t),e.pos=o,e}}sI.BLAKE2=s0;var s1={};Object.defineProperty(s1,"__esModule",{value:!0}),s1.add5L=s1.add5H=s1.add4H=s1.add4L=s1.add3H=s1.add3L=s1.add=s1.rotlBL=s1.rotlBH=s1.rotlSL=s1.rotlSH=s1.rotr32L=s1.rotr32H=s1.rotrBL=s1.rotrBH=s1.rotrSL=s1.rotrSH=s1.shrSL=s1.shrSH=s1.toBig=s1.split=s1.fromBig=void 0;const s2=/* @__PURE__ */BigInt(4294967296-1),s5=/* @__PURE__ */BigInt(32);// We are not using BigUint64Array, because they are extremely slow as per 2022
function s3(e,t=!1){return t?{h:Number(e&s2),l:Number(e>>s5&s2)}:{h:0|Number(e>>s5&s2),l:0|Number(e&s2)}}function s8(e,t=!1){let r=new Uint32Array(e.length),n=new Uint32Array(e.length);for(let a=0;a<e.length;a++){let{h:i,l:o}=s3(e[a],t);[r[a],n[a]]=[i,o]}return[r,n]}s1.fromBig=s3,s1.split=s8;const s9=(e,t)=>BigInt(e>>>0)<<s5|BigInt(t>>>0);s1.toBig=s9;// for Shift in [0, 32)
const s6=(e,t,r)=>e>>>r;s1.shrSH=s6;const s4=(e,t,r)=>e<<32-r|t>>>r;s1.shrSL=s4;// Right rotate for Shift in [1, 32)
const s7=(e,t,r)=>e>>>r|t<<32-r;s1.rotrSH=s7;const le=(e,t,r)=>e<<32-r|t>>>r;s1.rotrSL=le;// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const lt=(e,t,r)=>e<<64-r|t>>>r-32;s1.rotrBH=lt;const lr=(e,t,r)=>e>>>r-32|t<<64-r;s1.rotrBL=lr;// Right rotate for shift===32 (just swaps l&h)
const ln=(e,t)=>t;s1.rotr32H=ln;const la=(e,t)=>e;s1.rotr32L=la;// Left rotate for Shift in [1, 32)
const li=(e,t,r)=>e<<r|t>>>32-r;s1.rotlSH=li;const lo=(e,t,r)=>t<<r|e>>>32-r;s1.rotlSL=lo;// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const ls=(e,t,r)=>t<<r-32|e>>>64-r;s1.rotlBH=ls;const ll=(e,t,r)=>e<<r-32|t>>>64-r;// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function lc(e,t,r,n){let a=(t>>>0)+(n>>>0);return{h:e+r+(a/4294967296|0)|0,l:0|a}}s1.rotlBL=ll,s1.add=lc;// Addition with more than 2 elements
const lu=(e,t,r)=>(e>>>0)+(t>>>0)+(r>>>0);s1.add3L=lu;const ld=(e,t,r,n)=>t+r+n+(e/4294967296|0)|0;s1.add3H=ld;const lf=(e,t,r,n)=>(e>>>0)+(t>>>0)+(r>>>0)+(n>>>0);s1.add4L=lf;const lp=(e,t,r,n,a)=>t+r+n+a+(e/4294967296|0)|0;s1.add4H=lp;const lh=(e,t,r,n,a)=>(e>>>0)+(t>>>0)+(r>>>0)+(n>>>0)+(a>>>0);s1.add5L=lh;const lb=(e,t,r,n,a,i)=>t+r+n+a+i+(e/4294967296|0)|0;s1.add5H=lb,s1.default={fromBig:s3,split:s8,toBig:s9,shrSH:s6,shrSL:s4,rotrSH:s7,rotrSL:le,rotrBH:lt,rotrBL:lr,rotr32H:ln,rotr32L:la,rotlSH:li,rotlSL:lo,rotlBH:ls,rotlBL:ll,add:lc,add3L:lu,add3H:ld,add4L:lf,add4H:lp,add5H:lb,add5L:lh};// Same as SHA-512 but LE
// prettier-ignore
const ly=/* @__PURE__ */new Uint32Array([4089235720,1779033703,2227873595,3144134277,4271175723,1013904242,1595750129,2773480762,2917565137,1359893119,725511199,2600822924,4215389547,528734635,327033209,1541459225]),lm=/* @__PURE__ */new Uint32Array(32);// Mixing function G splitted in two halfs
function lg(e,t,r,n,a,i){// NOTE: V is LE here
let o=a[i],s=a[i+1],l=lm[2*e],c=lm[2*e+1],u=lm[2*t],d=lm[2*t+1],f=lm[2*r],p=lm[2*r+1],h=lm[2*n],b=lm[2*n+1],y=s1.default.add3L(l,u,o);// prettier-ignore
c=s1.default.add3H(y,c,d,s),l=0|y,// v[d] = rotr(v[d] ^ v[a], 32)
({Dh:b,Dl:h}={Dh:b^c,Dl:h^l}),({Dh:b,Dl:h}={Dh:s1.default.rotr32H(b,h),Dl:s1.default.rotr32L(b,h)}),// v[c] = (v[c] + v[d]) | 0;
({h:p,l:f}=s1.default.add(p,f,b,h)),// v[b] = rotr(v[b] ^ v[c], 24)
({Bh:d,Bl:u}={Bh:d^p,Bl:u^f}),({Bh:d,Bl:u}={Bh:s1.default.rotrSH(d,u,24),Bl:s1.default.rotrSL(d,u,24)}),lm[2*e]=l,lm[2*e+1]=c,lm[2*t]=u,lm[2*t+1]=d,lm[2*r]=f,lm[2*r+1]=p,lm[2*n]=h,lm[2*n+1]=b}function lv(e,t,r,n,a,i){// NOTE: V is LE here
let o=a[i],s=a[i+1],l=lm[2*e],c=lm[2*e+1],u=lm[2*t],d=lm[2*t+1],f=lm[2*r],p=lm[2*r+1],h=lm[2*n],b=lm[2*n+1],y=s1.default.add3L(l,u,o);// prettier-ignore
c=s1.default.add3H(y,c,d,s),l=0|y,// v[d] = rotr(v[d] ^ v[a], 16)
({Dh:b,Dl:h}={Dh:b^c,Dl:h^l}),({Dh:b,Dl:h}={Dh:s1.default.rotrSH(b,h,16),Dl:s1.default.rotrSL(b,h,16)}),// v[c] = (v[c] + v[d]) | 0;
({h:p,l:f}=s1.default.add(p,f,b,h)),// v[b] = rotr(v[b] ^ v[c], 63)
({Bh:d,Bl:u}={Bh:d^p,Bl:u^f}),({Bh:d,Bl:u}={Bh:s1.default.rotrBH(d,u,63),Bl:s1.default.rotrBL(d,u,63)}),lm[2*e]=l,lm[2*e+1]=c,lm[2*t]=u,lm[2*t+1]=d,lm[2*r]=f,lm[2*r+1]=p,lm[2*n]=h,lm[2*n+1]=b}class lx extends sI.BLAKE2{constructor(e={}){super(128,void 0===e.dkLen?64:e.dkLen,e,64,16,16),// Same as SHA-512, but LE
this.v0l=0|ly[0],this.v0h=0|ly[1],this.v1l=0|ly[2],this.v1h=0|ly[3],this.v2l=0|ly[4],this.v2h=0|ly[5],this.v3l=0|ly[6],this.v3h=0|ly[7],this.v4l=0|ly[8],this.v4h=0|ly[9],this.v5l=0|ly[10],this.v5h=0|ly[11],this.v6l=0|ly[12],this.v6h=0|ly[13],this.v7l=0|ly[14],this.v7h=0|ly[15];let t=e.key?e.key.length:0;if(this.v0l^=this.outputLen|t<<8|16842752,e.salt){let t=(0,sF.u32)((0,sF.toBytes)(e.salt));this.v4l^=t[0],this.v4h^=t[1],this.v5l^=t[2],this.v5h^=t[3]}if(e.personalization){let t=(0,sF.u32)((0,sF.toBytes)(e.personalization));this.v6l^=t[0],this.v6h^=t[1],this.v7l^=t[2],this.v7h^=t[3]}if(e.key){// Pad to blockLen and update
let t=new Uint8Array(this.blockLen);t.set((0,sF.toBytes)(e.key)),this.update(t)}}// prettier-ignore
get(){let{v0l:e,v0h:t,v1l:r,v1h:n,v2l:a,v2h:i,v3l:o,v3h:s,v4l:l,v4h:c,v5l:u,v5h:d,v6l:f,v6h:p,v7l:h,v7h:b}=this;return[e,t,r,n,a,i,o,s,l,c,u,d,f,p,h,b]}// prettier-ignore
set(e,t,r,n,a,i,o,s,l,c,u,d,f,p,h,b){this.v0l=0|e,this.v0h=0|t,this.v1l=0|r,this.v1h=0|n,this.v2l=0|a,this.v2h=0|i,this.v3l=0|o,this.v3h=0|s,this.v4l=0|l,this.v4h=0|c,this.v5l=0|u,this.v5h=0|d,this.v6l=0|f,this.v6h=0|p,this.v7l=0|h,this.v7h=0|b}compress(e,t,r){this.get().forEach((e,t)=>lm[t]=e),lm.set(ly,16);let{h:n,l:a}=s1.default.fromBig(BigInt(this.length));lm[24]=ly[8]^a,lm[25]=ly[9]^n,r&&(lm[28]=~lm[28],lm[29]=~lm[29]);let i=0,o=sI.SIGMA;for(let r=0;r<12;r++)lg(0,4,8,12,e,t+2*o[i++]),lv(0,4,8,12,e,t+2*o[i++]),lg(1,5,9,13,e,t+2*o[i++]),lv(1,5,9,13,e,t+2*o[i++]),lg(2,6,10,14,e,t+2*o[i++]),lv(2,6,10,14,e,t+2*o[i++]),lg(3,7,11,15,e,t+2*o[i++]),lv(3,7,11,15,e,t+2*o[i++]),lg(0,5,10,15,e,t+2*o[i++]),lv(0,5,10,15,e,t+2*o[i++]),lg(1,6,11,12,e,t+2*o[i++]),lv(1,6,11,12,e,t+2*o[i++]),lg(2,7,8,13,e,t+2*o[i++]),lv(2,7,8,13,e,t+2*o[i++]),lg(3,4,9,14,e,t+2*o[i++]),lv(3,4,9,14,e,t+2*o[i++]);this.v0l^=lm[0]^lm[16],this.v0h^=lm[1]^lm[17],this.v1l^=lm[2]^lm[18],this.v1h^=lm[3]^lm[19],this.v2l^=lm[4]^lm[20],this.v2h^=lm[5]^lm[21],this.v3l^=lm[6]^lm[22],this.v3h^=lm[7]^lm[23],this.v4l^=lm[8]^lm[24],this.v4h^=lm[9]^lm[25],this.v5l^=lm[10]^lm[26],this.v5h^=lm[11]^lm[27],this.v6l^=lm[12]^lm[28],this.v6h^=lm[13]^lm[29],this.v7l^=lm[14]^lm[30],this.v7h^=lm[15]^lm[31],lm.fill(0)}destroy(){this.destroyed=!0,this.buffer32.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}/**
 * BLAKE2b - optimized for 64-bit platforms. JS doesn't have uint64, so it's slower than BLAKE2s.
 * @param msg - message that would be hashed
 * @param opts - dkLen, key, salt, personalization
 */sR.blake2b=(0,sF.wrapConstructorWithOpts)(e=>new lx(e));var lw={};Object.defineProperty(lw,"__esModule",{value:!0}),lw.TextDecoder=lw.packageInfo=void 0;var lP={};Object.defineProperty(lP,"__esModule",{value:!0}),lP.TextDecoder=void 0,lP.TextDecoder=class{__encoding;constructor(e){this.__encoding=e}decode(e){let t="";for(let r=0,n=e.length;r<n;r++)t+=String.fromCharCode(e[r]);return t}};var lO={},lT="node_modules/@kiltprotocol/core/node_modules/@polkadot/x-textdecoder/cjs";Object.defineProperty(lO,"__esModule",{value:!0}),lO.packageInfo=void 0,lO.packageInfo={name:"@polkadot/x-textdecoder",path:"string"==typeof lT?lT:"auto",type:"cjs",version:"12.6.2"},Object.defineProperty(lw,"packageInfo",{enumerable:!0,get:function(){return lO.packageInfo}}),lw.TextDecoder=o6("TextDecoder",lP.TextDecoder);const lz=new lw.TextDecoder("utf-8");function lk(e){return e?lz.decode(e):""}var lL={};Object.defineProperty(lL,"__esModule",{value:!0}),lL.getRandomValues=lL.crypto=lL.packageInfo=void 0;var lE={},lN="node_modules/@kiltprotocol/core/node_modules/@polkadot/api/node_modules/@polkadot/x-randomvalues/cjs";Object.defineProperty(lE,"__esModule",{value:!0}),lE.packageInfo=void 0,lE.packageInfo={name:"@polkadot/x-randomvalues",path:"string"==typeof lN?lN:"auto",type:"cjs",version:"12.6.2"},Object.defineProperty(lL,"packageInfo",{enumerable:!0,get:function(){return lE.packageInfo}}),lL.crypto=o9.crypto,lL.getRandomValues=function(e){return lL.crypto.getRandomValues(e)};const lS={getRandomValues:lL.getRandomValues},lM={crypto:lS};class lj{__internal__bridge;constructor(e){this.__internal__bridge=e}/** @internal */abort=()=>{throw Error("abort")};/** @internal */__wbindgen_is_undefined=e=>void 0===this.__internal__bridge.getObject(e);/** @internal */__wbindgen_throw=(e,t)=>{throw Error(this.__internal__bridge.getString(e,t))};/** @internal */__wbg_self_1b7a39e3a92c949c=()=>this.__internal__bridge.addObject(lM);/** @internal */__wbg_require_604837428532a733=(e,t)=>{throw Error(`Unable to require ${this.__internal__bridge.getString(e,t)}`)};/** @internal */__wbg_crypto_968f1772287e2df0=e=>this.__internal__bridge.addObject(lS);/** @internal */__wbg_getRandomValues_a3d34b4fee3c2869=e=>this.__internal__bridge.addObject(lS.getRandomValues);/** @internal */__wbg_getRandomValues_f5e14ab7ac8e995d=(e,t,r)=>{lS.getRandomValues(this.__internal__bridge.getU8a(t,r))};/** @internal */__wbg_randomFillSync_d5bd2d655fdf256a=(e,t,r)=>{throw Error("randomFillsync is not available");// getObject(idx).randomFillSync(getU8a(ptr, len));
};/** @internal */__wbindgen_object_drop_ref=e=>{this.__internal__bridge.takeObject(e)}}var lH={};Object.defineProperty(lH,"__esModule",{value:!0}),lH.createWasm=lH.packageInfo=void 0;const lR="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",lI=Array(256);for(let e=0,t=lR.length;e<t;e++)lI[lR.charCodeAt(e)]=e;const lB=Uint8Array,lV=Uint16Array,lX=Uint32Array,lU=new lB([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),lA=new lB([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,/* unused */0,0,/* impossible */0]),lD=new lB([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,/* unused */0,0]),lC=(e,t)=>{let r=new lV(31);for(let n=0;n<31;++n)r[n]=t+=1<<e[n-1];// numbers here are at max 18 bits
let n=new lX(r[30]);for(let e=1;e<30;++e)for(let t=r[e];t<r[e+1];++t)n[t]=t-r[e]<<5|e;return[r,n]},[lF,lZ]=lC(lA,2);lF[28]=258,lZ[258]=28;const[lq]=lC(lD,0),lG=new lV(32768);for(let e=0;e<32768;++e){// reverse table algorithm from SO
let t=(43690&e)>>>1|(21845&e)<<1;t=(61680&(t=(52428&t)>>>2|(13107&t)<<2))>>>4|(3855&t)<<4,lG[e]=((65280&t)>>>8|(255&t)<<8)>>>1}const lW=(e,t,r)=>{let n;let a=e.length,i=0,o=new lV(t);// length of cd must be 288 (total # of codes)
for(;i<a;++i)e[i]&&++o[e[i]-1];// u16 "map": index -> minimum code for bit length = index
let s=new lV(t);for(i=1;i<t;++i)s[i]=s[i-1]+o[i-1]<<1;if(r){// u16 "map": index -> number of actual bits, symbol for code
n=new lV(1<<t);// bits to remove for reverser
let r=15-t;for(i=0;i<a;++i)if(e[i]){// num encoding both symbol and bits read
let a=i<<4|e[i],o=t-e[i],l=s[e[i]-1]++<<o;// m is end value
for(let e=l|(1<<o)-1;l<=e;++l)n[lG[l]>>r]=a}}else for(i=0,n=new lV(a);i<a;++i)e[i]&&(n[i]=lG[s[e[i]-1]++]>>15-e[i]);return n},lY=new lB(288);for(let e=0;e<144;++e)lY[e]=8;for(let e=144;e<256;++e)lY[e]=9;for(let e=256;e<280;++e)lY[e]=7;for(let e=280;e<288;++e)lY[e]=8;const lK=new lB(32);for(let e=0;e<32;++e)lK[e]=5;const lJ=lW(lY,9,1),lQ=lW(lK,5,1),l_=(e,t,r)=>{let n=t>>>3;return(e[n]|e[n+1]<<8)>>>(7&t)&r},l$=(e,t)=>{let r=t>>>3;return(e[r]|e[r+1]<<8|e[r+2]<<16)>>>(7&t)},l0=e=>(e>>>3)+(7&e&&1),l1=(e,t,r)=>{(null==t||t<0)&&(t=0),(null==r||r>e.length)&&(r=e.length);// can't use .constructor in case user-supplied
let n=new(e instanceof lV?lV:e instanceof lX?lX:lB)(r-t);return n.set(e.subarray(t,r)),n},l2=e=>{let t=e[0];for(let r=1,n=e.length;r<n;++r)e[r]>t&&(t=e[r]);return t},l5=(u=function(e,t){let r=0,n=0,a=-1;for(let i=0,o=t.length-1;a!==o;i++)// each character represents 6 bits
r=r<<6|lI[e.charCodeAt(i)],(n+=6)>=8&&(t[++a]=r>>>(n-=8)&255);return t}("",new Uint8Array(171008)),d=new Uint8Array(339468),((e,t,r)=>{let n=!r||r.i;r||(r={});// source length
let a=e.length,i=!t||!n;// Assumes roughly 33% compression ratio average
t||(t=new lB(3*a));// ensure buffer can fit at least l elements
let o=e=>{let r=t.length;// need to increase size to fit
if(e>r){// Double or set to necessary, whichever is greater
let n=new lB(Math.max(r<<1,e));n.set(t),t=n}},s=r.f||0,l=r.p||0,c=r.b||0,u=r.l,d=r.d,f=r.m,p=r.n;if(s&&!u)return t;// total bits
let h=a<<3;do{if(!u){// BFINAL - this is only 1 when last chunk is next
r.f=s=l_(e,l,1);// type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
let b=l_(e,l+1,3);if(l+=3,b){if(1==b)u=lJ,d=lQ,f=9,p=5;else if(2==b){//  literal                            lengths
let t=l_(e,l,31)+257,r=l_(e,l+10,15)+4,a=t+l_(e,l+5,31)+1;l+=14;// length+distance tree
let i=new lB(a),o=new lB(19);for(let t=0;t<r;++t)o[lU[t]]=l_(e,l+3*t,7);l+=3*r;// code lengths bits
let s=l2(o),c=(1<<s)-1;if(!n&&l+a*(s+7)>h)break;// code lengths map
let b=lW(o,s,1);for(let t=0;t<a;){let r=b[l_(e,l,c)];// bits read
l+=15&r;// symbol
let n=r>>>4;// code length to copy
if(n<16)i[t++]=n;else{//  copy   count
let r=0,a=0;for(16==n?(a=3+l_(e,l,3),l+=2,r=i[t-1]):17==n?(a=3+l_(e,l,7),l+=3):18==n&&(a=11+l_(e,l,127),l+=7);a--;)i[t++]=r}}//    length tree                 distance tree
let y=i.subarray(0,t),m=i.subarray(t);// max length bits
f=l2(y),// max dist bits
p=l2(m),u=lW(y,f,1),d=lW(m,p,1)}else throw"invalid block type"}else{// go to end of byte boundary
let s=l0(l)+4,u=e[s-4]|e[s-3]<<8,d=s+u;if(d>a){if(n)throw"unexpected EOF";break}i&&o(c+u),// Copy over uncompressed data
t.set(e.subarray(s,d),c),// Get new bitpos, update byte count
r.b=c+=u,r.p=l=d<<3;continue}if(l>h)throw"unexpected EOF"}i&&o(c+131072);let b=(1<<f)-1,y=(1<<p)-1,m=f+p+18;for(;n||l+m<h;){// bits read, code
let r=u[l$(e,l)&b],n=r>>>4;if((l+=15&r)>h)throw"unexpected EOF";if(!r)throw"invalid length/literal";if(n<256)t[c++]=n;else if(256==n){u=void 0;break}else{let r=n-254;// no extra bits needed if less
if(n>264){// index
let t=n-257,a=lA[t];r=l_(e,l,(1<<a)-1)+lF[t],l+=a}// dist
let a=d[l$(e,l)&y],s=a>>>4;if(!a)throw"invalid distance";l+=15&a;let u=lq[s];if(s>3){let t=lD[s];u+=l$(e,l)&(1<<t)-1,l+=t}if(l>h)throw"unexpected EOF";i&&o(c+131072);let f=c+r;for(;c<f;c+=4)t[c]=t[c-u],t[c+1]=t[c+1-u],t[c+2]=t[c+2-u],t[c+3]=t[c+3-u];c=f}}r.l=u,r.p=l,r.b=c,u&&(s=1,r.m=f,r.d=d,r.n=p)}while(!s)return c==t.length?t:l1(t,0,c)})(((e=>{if((15&e[0])!=8||e[0]>>>4>7||(e[0]<<8|e[1])%31)throw"invalid zlib data";if(32&e[1])throw"invalid zlib data: preset dictionaries not supported"})(u),u.subarray(2,-4)),d));var l3={},l8="node_modules/@kiltprotocol/core/node_modules/@polkadot/api/node_modules/@polkadot/wasm-crypto-init/cjs";Object.defineProperty(l3,"__esModule",{value:!0}),l3.packageInfo=void 0,l3.packageInfo={name:"@polkadot/wasm-crypto-init",path:"string"==typeof l8?l8:"auto",type:"cjs",version:"7.3.2"},Object.defineProperty(lH,"packageInfo",{enumerable:!0,get:function(){return l3.packageInfo}}),/**
 * @name createWasm
 * @description
 * Creates an interface using only WASM
 */lH.createWasm=async e=>{let t={error:null,type:"none",wasm:null};try{if(l5?.length){if("object"!=typeof WebAssembly||"function"!=typeof WebAssembly.instantiate)throw Error("WebAssembly is not available in your environment")}else throw Error("No WebAssembly provided for initialization");let r=await WebAssembly.instantiate(l5,{wbg:e});t.wasm=r.instance.exports,t.type="wasm"}catch(e){// if we have a valid supplied asm.js, return that
t.error=`FATAL: Unable to initialize @polkadot/wasm-crypto:: ${e.message}`,console.error(t.error)}return t};const l9=new class{__internal__createWasm;__internal__heap;__internal__wbg;__internal__cachegetInt32;__internal__cachegetUint8;__internal__heapNext;__internal__wasm;__internal__wasmError;__internal__wasmPromise;__internal__type;constructor(e){this.__internal__createWasm=e,this.__internal__cachegetInt32=null,this.__internal__cachegetUint8=null,this.__internal__heap=Array(32).fill(void 0).concat(void 0,null,!0,!1),this.__internal__heapNext=this.__internal__heap.length,this.__internal__type="none",this.__internal__wasm=null,this.__internal__wasmError=null,this.__internal__wasmPromise=null,this.__internal__wbg={...new lj(this)}}/** @description Returns the init error */get error(){return this.__internal__wasmError}/** @description Returns the init type */get type(){return this.__internal__type}/** @description Returns the created wasm interface */get wasm(){return this.__internal__wasm}/** @description Performs the wasm initialization */async init(e){(!this.__internal__wasmPromise||e)&&(this.__internal__wasmPromise=(e||this.__internal__createWasm)(this.__internal__wbg));let{error:t,type:r,wasm:n}=await this.__internal__wasmPromise;return this.__internal__type=r,this.__internal__wasm=n,this.__internal__wasmError=t,this.__internal__wasm}/**
     * @internal
     * @description Gets an object from the heap
     */getObject(e){return this.__internal__heap[e]}/**
     * @internal
     * @description Removes an object from the heap
     */dropObject(e){e<36||(this.__internal__heap[e]=this.__internal__heapNext,this.__internal__heapNext=e)}/**
     * @internal
     * @description Retrieves and removes an object to the heap
     */takeObject(e){let t=this.getObject(e);return this.dropObject(e),t}/**
     * @internal
     * @description Adds an object to the heap
     */addObject(e){this.__internal__heapNext===this.__internal__heap.length&&this.__internal__heap.push(this.__internal__heap.length+1);let t=this.__internal__heapNext;return this.__internal__heapNext=this.__internal__heap[t],this.__internal__heap[t]=e,t}/**
     * @internal
     * @description Retrieve an Int32 in the WASM interface
     */getInt32(){return(null===this.__internal__cachegetInt32||this.__internal__cachegetInt32.buffer!==this.__internal__wasm.memory.buffer)&&(this.__internal__cachegetInt32=new Int32Array(this.__internal__wasm.memory.buffer)),this.__internal__cachegetInt32}/**
     * @internal
     * @description Retrieve an Uint8Array in the WASM interface
     */getUint8(){return(null===this.__internal__cachegetUint8||this.__internal__cachegetUint8.buffer!==this.__internal__wasm.memory.buffer)&&(this.__internal__cachegetUint8=new Uint8Array(this.__internal__wasm.memory.buffer)),this.__internal__cachegetUint8}/**
     * @internal
     * @description Retrieves an Uint8Array in the WASM interface
     */getU8a(e,t){return this.getUint8().subarray(e/1,e/1+t)}/**
     * @internal
     * @description Retrieves a string in the WASM interface
     */getString(e,t){return lk(this.getU8a(e,t))}/**
     * @internal
     * @description Allocates an Uint8Array in the WASM interface
     */allocU8a(e){let t=this.__internal__wasm.__wbindgen_malloc(1*e.length);return this.getUint8().set(e,t/1),[t,e.length]}/**
     * @internal
     * @description Allocates a string in the WASM interface
     */allocString(e){return this.allocU8a(sr(e))}/**
     * @internal
     * @description Retrieves an Uint8Array from the WASM interface
     */resultU8a(){let e=this.getInt32()[2],t=this.getInt32()[3],r=this.getU8a(e,t).slice();return this.__internal__wasm.__wbindgen_free(e,1*t),r}/**
     * @internal
     * @description Retrieve a string from the WASM interface
     */resultString(){return lk(this.resultU8a())}}(lH.createWasm);/**
 * @internal
 * @description
 * This create an extenal interface function from the signature, all the while checking
 * the actual bridge wasm interface to ensure it has been initialized.
 *
 * This means that we can call it
 *
 *   withWasm(wasm: WasmCryptoInstance, a: number, b: string) => Uint8Array
 *
 * and in this case it will create an interface function with the signarure
 *
 *   (a: number, b: string) => Uint8Array
 */function l6(e){return(...t)=>{if(!l9.wasm)throw Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");return e(l9.wasm,...t)}}const l4=/*#__PURE__*/l6((e,t)=>(e.ext_bip39_to_entropy(8,...l9.allocString(t)),l9.resultU8a())),l7=/*#__PURE__*/l6((e,t,r)=>(e.ext_bip39_to_mini_secret(8,...l9.allocString(t),...l9.allocString(r)),l9.resultU8a())),ce=/*#__PURE__*/l6((e,t,r)=>(e.ext_bip39_to_seed(8,...l9.allocString(t),...l9.allocString(r)),l9.resultU8a())),ct=/*#__PURE__*/l6((e,t)=>{let r=e.ext_bip39_validate(...l9.allocString(t));return 0!==r}),cr=/*#__PURE__*/l6((e,t)=>(e.ext_ed_from_seed(8,...l9.allocU8a(t)),l9.resultU8a())),cn=/*#__PURE__*/l6((e,t,r,n)=>(e.ext_ed_sign(8,...l9.allocU8a(t),...l9.allocU8a(r),...l9.allocU8a(n)),l9.resultU8a())),ca=/*#__PURE__*/l6((e,t,r,n)=>{let a=e.ext_ed_verify(...l9.allocU8a(t),...l9.allocU8a(r),...l9.allocU8a(n));return 0!==a}),ci=/*#__PURE__*/l6((e,t)=>(e.ext_secp_from_seed(8,...l9.allocU8a(t)),l9.resultU8a())),co=/*#__PURE__*/l6((e,t)=>(e.ext_secp_pub_compress(8,...l9.allocU8a(t)),l9.resultU8a())),cs=/*#__PURE__*/l6((e,t)=>(e.ext_secp_pub_expand(8,...l9.allocU8a(t)),l9.resultU8a())),cl=/*#__PURE__*/l6((e,t,r,n)=>(e.ext_secp_recover(8,...l9.allocU8a(t),...l9.allocU8a(r),n),l9.resultU8a())),cc=/*#__PURE__*/l6((e,t,r)=>(e.ext_secp_sign(8,...l9.allocU8a(t),...l9.allocU8a(r)),l9.resultU8a())),cu=/*#__PURE__*/l6((e,t,r)=>(e.ext_sr_derive_keypair_hard(8,...l9.allocU8a(t),...l9.allocU8a(r)),l9.resultU8a())),cd=/*#__PURE__*/l6((e,t,r)=>(e.ext_sr_derive_keypair_soft(8,...l9.allocU8a(t),...l9.allocU8a(r)),l9.resultU8a())),cf=/*#__PURE__*/l6((e,t)=>(e.ext_sr_from_seed(8,...l9.allocU8a(t)),l9.resultU8a())),cp=/*#__PURE__*/l6((e,t,r,n)=>(e.ext_sr_sign(8,...l9.allocU8a(t),...l9.allocU8a(r),...l9.allocU8a(n)),l9.resultU8a())),ch=/*#__PURE__*/l6((e,t,r,n)=>{let a=e.ext_sr_verify(...l9.allocU8a(t),...l9.allocU8a(r),...l9.allocU8a(n));return 0!==a}),cb=/*#__PURE__*/l6((e,t,r,n,a)=>(e.ext_vrf_sign(8,...l9.allocU8a(t),...l9.allocU8a(r),...l9.allocU8a(n),...l9.allocU8a(a)),l9.resultU8a())),cy=/*#__PURE__*/l6((e,t,r,n,a,i)=>{let o=e.ext_vrf_verify(...l9.allocU8a(t),...l9.allocU8a(r),...l9.allocU8a(n),...l9.allocU8a(a),...l9.allocU8a(i));return 0!==o}),cm=/*#__PURE__*/l6((e,t,r,n)=>(e.ext_blake2b(8,...l9.allocU8a(t),...l9.allocU8a(r),n),l9.resultU8a())),cg=/*#__PURE__*/l6((e,t,r)=>(e.ext_hmac_sha256(8,...l9.allocU8a(t),...l9.allocU8a(r)),l9.resultU8a())),cv=/*#__PURE__*/l6((e,t,r)=>(e.ext_hmac_sha512(8,...l9.allocU8a(t),...l9.allocU8a(r)),l9.resultU8a())),cx=/*#__PURE__*/l6((e,t)=>(e.ext_keccak256(8,...l9.allocU8a(t)),l9.resultU8a())),cw=/*#__PURE__*/l6((e,t)=>(e.ext_keccak512(8,...l9.allocU8a(t)),l9.resultU8a())),cP=/*#__PURE__*/l6((e,t,r,n)=>(e.ext_pbkdf2(8,...l9.allocU8a(t),...l9.allocU8a(r),n),l9.resultU8a())),cO=/*#__PURE__*/l6((e,t,r,n,a,i)=>(e.ext_scrypt(8,...l9.allocU8a(t),...l9.allocU8a(r),n,a,i),l9.resultU8a())),cT=/*#__PURE__*/l6((e,t)=>(e.ext_sha256(8,...l9.allocU8a(t)),l9.resultU8a())),cz=/*#__PURE__*/l6((e,t)=>(e.ext_sha512(8,...l9.allocU8a(t)),l9.resultU8a()));function ck(){return!!l9.wasm}const cL=Array(256),cE=Array(65536);for(let e=0;e<256;e++)cL[e]=e.toString(16).padStart(2,"0");for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)cE[t|r]=cL[e]+cL[r]}/** @internal */function cN(e,t){let r=e.length%2|0,n=e.length-r|0;for(let r=0;r<n;r+=2)t+=cE[e[r]<<8|e[r+1]];return r&&(t+=cL[0|e[n]]),t}function cS(e,t=-1,r=!0){// this is not 100% correct sinmce we support isPrefixed = false....
let n=r?"0x":"";if(!e?.length)return n;if(t>0){let r=Math.ceil(t/8);if(e.length>r)return`${cN(e.subarray(0,r/2),n)}\u{2026}${cN(e.subarray(e.length-r/2),"")}`}return cN(e,n)}function cM(e,t){return(r,n=256,a)=>{let i=sx(r);return!sb||!a&&ck()?e[n](i):t[n](i)}}function cj(e,t=256,r,n){let a=Math.ceil(t/8),i=sx(e);return!sb||!n&&ck()?cm(i,sx(r),a):r?(0,sR.blake2b)(i,{dkLen:a,key:r}):(0,sR.blake2b)(i,{dkLen:a})}const cH=sr("SS58PRE");function cR(e){return cj(sj(cH,e),512)}const cI={acala:["0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"],ajuna:["0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"],"aleph-node":["0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"],astar:["0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"],basilisk:["0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"],bifrost:["0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"],"bifrost-kusama":["0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"],bittensor:["0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"],centrifuge:["0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82","0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"],cere:["0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c"],composable:["0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"],darwinia:["0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"],"dock-mainnet":["0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae","0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"],edgeware:["0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"],enjin:["0xd8761d3c88f26dc12875c00d3165f7d67243d56fc85b4cf19937601a7916e5a9"],equilibrium:["0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"],genshiro:["0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"],hydradx:["0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d","0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc","0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9","0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047","0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"// Snakenet Gen1
],"interlay-parachain":["0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"],karura:["0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"],khala:["0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"],kulupu:["0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"],kusama:["0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe","0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636","0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"// Kusama CC1
],matrixchain:["0x3af4ff48ec76d2efc8476730f423ac07e25ad48f5f4c9dc39c778b164d808615"],nodle:["0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"],origintrail:["0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"],p3d:["0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"],parallel:["0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"],pendulum:["0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"],phala:["0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"],picasso:["0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc","0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"],polkadex:["0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"],polkadot:["0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"],polymesh:["0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"],quartz:["0xcd4d732201ebe5d6b014edda071c4203e16867305332301dc8d092044b28e554"],rococo:["0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e","0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897","0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770","0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff","0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a","0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9","0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779","0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215","0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9","0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147","0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd","0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"],sora:["0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"],stafi:["0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"],statemine:["0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"],statemint:["0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"],subsocial:["0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"],ternoa:["0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"],unique:["0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"],vtb:["0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f","0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"],westend:["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"],xxnetwork:["0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"],zeitgeist:["0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060"]},cB={centrifuge:"polkadot",kusama:"polkadot",polkadot:"polkadot",sora:"polkadot",statemine:"polkadot",statemint:"polkadot",westmint:"polkadot"},cV={acala:787,ajuna:354,"aleph-node":643,astar:810,bifrost:788,"bifrost-kusama":788,centrifuge:747,composable:354,darwinia:354,"dock-mainnet":594,edgeware:523,enjin:1155,equilibrium:99999997,genshiro:99999996,hydradx:354,"interlay-parachain":354,karura:686,khala:434,kusama:434,matrixchain:1155,nodle:1003,origintrail:354,parallel:354,pendulum:354,phala:354,picasso:434,polkadex:799,polkadot:354,polymesh:595,quartz:631,sora:617,stafi:907,statemine:434,statemint:354,ternoa:995,unique:661,vtb:694,xxnetwork:1955,zeitgeist:354},cX={"":!0,"cess-testnet":!0,"dock-testnet":!0,jupiter:!0,"mathchain-testnet":!0,p3dt:!0,subspace_testnet:!0,"zero-alphaville":!0},cU=[0,2,42],cA=["testnet"],cD=[{prefix:0,network:"polkadot",displayName:"Polkadot Relay Chain",symbols:["DOT"],decimals:[10],standardAccount:"*25519",website:"https://polkadot.network"},{prefix:1,network:"BareSr25519",displayName:"Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",symbols:[],decimals:[],standardAccount:"Sr25519",website:null},{prefix:2,network:"kusama",displayName:"Kusama Relay Chain",symbols:["KSM"],decimals:[12],standardAccount:"*25519",website:"https://kusama.network"},{prefix:3,network:"BareEd25519",displayName:"Bare 32-bit Ed25519 public key.",symbols:[],decimals:[],standardAccount:"Ed25519",website:null},{prefix:4,network:"katalchain",displayName:"Katal Chain",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:5,network:"astar",displayName:"Astar Network",symbols:["ASTR"],decimals:[18],standardAccount:"*25519",website:"https://astar.network"},{prefix:6,network:"bifrost",displayName:"Bifrost",symbols:["BNC"],decimals:[12],standardAccount:"*25519",website:"https://bifrost.finance/"},{prefix:7,network:"edgeware",displayName:"Edgeware",symbols:["EDG"],decimals:[18],standardAccount:"*25519",website:"https://edgewa.re"},{prefix:8,network:"karura",displayName:"Karura",symbols:["KAR"],decimals:[12],standardAccount:"*25519",website:"https://karura.network/"},{prefix:9,network:"reynolds",displayName:"Laminar Reynolds Canary",symbols:["REY"],decimals:[18],standardAccount:"*25519",website:"http://laminar.network/"},{prefix:10,network:"acala",displayName:"Acala",symbols:["ACA"],decimals:[12],standardAccount:"*25519",website:"https://acala.network/"},{prefix:11,network:"laminar",displayName:"Laminar",symbols:["LAMI"],decimals:[18],standardAccount:"*25519",website:"http://laminar.network/"},{prefix:12,network:"polymesh",displayName:"Polymesh",symbols:["POLYX"],decimals:[6],standardAccount:"*25519",website:"https://polymath.network/"},{prefix:13,network:"integritee",displayName:"Integritee",symbols:["TEER"],decimals:[12],standardAccount:"*25519",website:"https://integritee.network"},{prefix:14,network:"totem",displayName:"Totem",symbols:["TOTEM"],decimals:[0],standardAccount:"*25519",website:"https://totemaccounting.com"},{prefix:15,network:"synesthesia",displayName:"Synesthesia",symbols:["SYN"],decimals:[12],standardAccount:"*25519",website:"https://synesthesia.network/"},{prefix:16,network:"kulupu",displayName:"Kulupu",symbols:["KLP"],decimals:[12],standardAccount:"*25519",website:"https://kulupu.network/"},{prefix:17,network:"dark",displayName:"Dark Mainnet",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:18,network:"darwinia",displayName:"Darwinia Network",symbols:["RING"],decimals:[18],standardAccount:"secp256k1",website:"https://darwinia.network"},{prefix:19,network:"watr",displayName:"Watr Protocol",symbols:["WATR"],decimals:[18],standardAccount:"*25519",website:"https://www.watr.org"},{prefix:20,network:"stafi",displayName:"Stafi",symbols:["FIS"],decimals:[12],standardAccount:"*25519",website:"https://stafi.io"},{prefix:21,network:"karmachain",displayName:"Karmacoin",symbols:["KCOIN"],decimals:[6],standardAccount:"*25519",website:"https://karmaco.in"},{prefix:22,network:"dock-pos-mainnet",displayName:"Dock Mainnet",symbols:["DCK"],decimals:[6],standardAccount:"*25519",website:"https://dock.io"},{prefix:23,network:"shift",displayName:"ShiftNrg",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:24,network:"zero",displayName:"ZERO",symbols:["ZERO"],decimals:[18],standardAccount:"*25519",website:"https://zero.io"},{prefix:25,network:"zero-alphaville",displayName:"ZERO Alphaville",symbols:["ZERO"],decimals:[18],standardAccount:"*25519",website:"https://zero.io"},{prefix:26,network:"jupiter",displayName:"Jupiter",symbols:["jDOT"],decimals:[10],standardAccount:"*25519",website:"https://jupiter.patract.io"},{prefix:27,network:"kabocha",displayName:"Kabocha",symbols:["KAB"],decimals:[12],standardAccount:"*25519",website:"https://kabocha.network"},{prefix:28,network:"subsocial",displayName:"Subsocial",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:29,network:"cord",displayName:"CORD Network",symbols:["DHI","WAY"],decimals:[12,12],standardAccount:"*25519",website:"https://cord.network/"},{prefix:30,network:"phala",displayName:"Phala Network",symbols:["PHA"],decimals:[12],standardAccount:"*25519",website:"https://phala.network"},{prefix:31,network:"litentry",displayName:"Litentry Network",symbols:["LIT"],decimals:[12],standardAccount:"*25519",website:"https://litentry.com/"},{prefix:32,network:"robonomics",displayName:"Robonomics",symbols:["XRT"],decimals:[9],standardAccount:"*25519",website:"https://robonomics.network"},{prefix:33,network:"datahighway",displayName:"DataHighway",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:34,network:"ares",displayName:"Ares Protocol",symbols:["ARES"],decimals:[12],standardAccount:"*25519",website:"https://www.aresprotocol.com/"},{prefix:35,network:"vln",displayName:"Valiu Liquidity Network",symbols:["USDv"],decimals:[15],standardAccount:"*25519",website:"https://valiu.com/"},{prefix:36,network:"centrifuge",displayName:"Centrifuge Chain",symbols:["CFG"],decimals:[18],standardAccount:"*25519",website:"https://centrifuge.io/"},{prefix:37,network:"nodle",displayName:"Nodle Chain",symbols:["NODL"],decimals:[11],standardAccount:"*25519",website:"https://nodle.io/"},{prefix:38,network:"kilt",displayName:"KILT Spiritnet",symbols:["KILT"],decimals:[15],standardAccount:"*25519",website:"https://kilt.io/"},{prefix:39,network:"mathchain",displayName:"MathChain mainnet",symbols:["MATH"],decimals:[18],standardAccount:"*25519",website:"https://mathwallet.org"},{prefix:40,network:"mathchain-testnet",displayName:"MathChain testnet",symbols:["MATH"],decimals:[18],standardAccount:"*25519",website:"https://mathwallet.org"},{prefix:41,network:"polimec",displayName:"Polimec Protocol",symbols:["PLMC"],decimals:[10],standardAccount:"*25519",website:"https://www.polimec.org/"},{prefix:42,network:"substrate",displayName:"Substrate",symbols:[],decimals:[],standardAccount:"*25519",website:"https://substrate.io/"},{prefix:43,network:"BareSecp256k1",displayName:"Bare 32-bit ECDSA SECP-256k1 public key.",symbols:[],decimals:[],standardAccount:"secp256k1",website:null},{prefix:44,network:"chainx",displayName:"ChainX",symbols:["PCX"],decimals:[8],standardAccount:"*25519",website:"https://chainx.org/"},{prefix:45,network:"uniarts",displayName:"UniArts Network",symbols:["UART","UINK"],decimals:[12,12],standardAccount:"*25519",website:"https://uniarts.me"},{prefix:46,network:"reserved46",displayName:"This prefix is reserved.",symbols:[],decimals:[],standardAccount:null,website:null},{prefix:47,network:"reserved47",displayName:"This prefix is reserved.",symbols:[],decimals:[],standardAccount:null,website:null},{prefix:48,network:"neatcoin",displayName:"Neatcoin Mainnet",symbols:["NEAT"],decimals:[12],standardAccount:"*25519",website:"https://neatcoin.org"},{prefix:49,network:"picasso",displayName:"Picasso",symbols:["PICA"],decimals:[12],standardAccount:"*25519",website:"https://picasso.composable.finance"},{prefix:50,network:"composable",displayName:"Composable Finance",symbols:["LAYR"],decimals:[12],standardAccount:"*25519",website:"https://composable.finance"},{prefix:51,network:"oak",displayName:"OAK Network",symbols:["OAK","TUR"],decimals:[10,10],standardAccount:"*25519",website:"https://oak.tech"},{prefix:52,network:"KICO",displayName:"KICO",symbols:["KICO"],decimals:[14],standardAccount:"*25519",website:"https://dico.io"},{prefix:53,network:"DICO",displayName:"DICO",symbols:["DICO"],decimals:[14],standardAccount:"*25519",website:"https://dico.io"},{prefix:54,network:"cere",displayName:"Cere Network",symbols:["CERE"],decimals:[10],standardAccount:"*25519",website:"https://cere.network"},{prefix:55,network:"xxnetwork",displayName:"xx network",symbols:["XX"],decimals:[9],standardAccount:"*25519",website:"https://xx.network"},{prefix:56,network:"pendulum",displayName:"Pendulum chain",symbols:["PEN"],decimals:[12],standardAccount:"*25519",website:"https://pendulumchain.org/"},{prefix:57,network:"amplitude",displayName:"Amplitude chain",symbols:["AMPE"],decimals:[12],standardAccount:"*25519",website:"https://pendulumchain.org/"},{prefix:58,network:"eternal-civilization",displayName:"Eternal Civilization",symbols:["ECC"],decimals:[12],standardAccount:"*25519",website:"http://www.ysknfr.cn/"},{prefix:63,network:"hydradx",displayName:"HydraDX",symbols:["HDX"],decimals:[12],standardAccount:"*25519",website:"https://hydradx.io"},{prefix:65,network:"aventus",displayName:"Aventus Mainnet",symbols:["AVT"],decimals:[18],standardAccount:"*25519",website:"https://aventus.io"},{prefix:66,network:"crust",displayName:"Crust Network",symbols:["CRU"],decimals:[12],standardAccount:"*25519",website:"https://crust.network"},{prefix:67,network:"genshiro",displayName:"Genshiro Network",symbols:["GENS","EQD","LPT0"],decimals:[9,9,9],standardAccount:"*25519",website:"https://genshiro.equilibrium.io"},{prefix:68,network:"equilibrium",displayName:"Equilibrium Network",symbols:["EQ"],decimals:[9],standardAccount:"*25519",website:"https://equilibrium.io"},{prefix:69,network:"sora",displayName:"SORA Network",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:71,network:"p3d",displayName:"3DP network",symbols:["P3D"],decimals:[12],standardAccount:"*25519",website:"https://3dpass.org"},{prefix:72,network:"p3dt",displayName:"3DP test network",symbols:["P3Dt"],decimals:[12],standardAccount:"*25519",website:"https://3dpass.org"},{prefix:73,network:"zeitgeist",displayName:"Zeitgeist",symbols:["ZTG"],decimals:[10],standardAccount:"*25519",website:"https://zeitgeist.pm"},{prefix:77,network:"manta",displayName:"Manta network",symbols:["MANTA"],decimals:[18],standardAccount:"*25519",website:"https://manta.network"},{prefix:78,network:"calamari",displayName:"Calamari: Manta Canary Network",symbols:["KMA"],decimals:[12],standardAccount:"*25519",website:"https://manta.network"},{prefix:81,network:"sora_dot_para",displayName:"SORA Polkadot Parachain",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:88,network:"polkadex",displayName:"Polkadex Mainnet",symbols:["PDEX"],decimals:[12],standardAccount:"*25519",website:"https://polkadex.trade"},{prefix:89,network:"polkadexparachain",displayName:"Polkadex Parachain",symbols:["PDEX"],decimals:[12],standardAccount:"*25519",website:"https://polkadex.trade"},{prefix:90,network:"frequency",displayName:"Frequency",symbols:["FRQCY"],decimals:[8],standardAccount:"*25519",website:"https://www.frequency.xyz"},{prefix:92,network:"anmol",displayName:"Anmol Network",symbols:["ANML"],decimals:[18],standardAccount:"*25519",website:"https://anmol.network/"},{prefix:93,network:"fragnova",displayName:"Fragnova Network",symbols:["NOVA"],decimals:[12],standardAccount:"*25519",website:"https://fragnova.com"},{prefix:98,network:"polkasmith",displayName:"PolkaSmith Canary Network",symbols:["PKS"],decimals:[18],standardAccount:"*25519",website:"https://polkafoundry.com"},{prefix:99,network:"polkafoundry",displayName:"PolkaFoundry Network",symbols:["PKF"],decimals:[18],standardAccount:"*25519",website:"https://polkafoundry.com"},{prefix:100,network:"ibtida",displayName:"Anmol Network Ibtida Canary network",symbols:["IANML"],decimals:[18],standardAccount:"*25519",website:"https://anmol.network/"},{prefix:101,network:"origintrail-parachain",displayName:"OriginTrail Parachain",symbols:["OTP"],decimals:[12],standardAccount:"*25519",website:"https://parachain.origintrail.io/"},{prefix:105,network:"pontem-network",displayName:"Pontem Network",symbols:["PONT"],decimals:[10],standardAccount:"*25519",website:"https://pontem.network"},{prefix:110,network:"heiko",displayName:"Heiko",symbols:["HKO"],decimals:[12],standardAccount:"*25519",website:"https://parallel.fi/"},{prefix:113,network:"integritee-incognito",displayName:"Integritee Incognito",symbols:[],decimals:[],standardAccount:"*25519",website:"https://integritee.network"},{prefix:117,network:"tinker",displayName:"Tinker",symbols:["TNKR"],decimals:[12],standardAccount:"*25519",website:"https://invarch.network"},{prefix:126,network:"joystream",displayName:"Joystream",symbols:["JOY"],decimals:[10],standardAccount:"*25519",website:"https://www.joystream.org"},{prefix:128,network:"clover",displayName:"Clover Finance",symbols:["CLV"],decimals:[18],standardAccount:"*25519",website:"https://clover.finance"},{prefix:129,network:"dorafactory-polkadot",displayName:"Dorafactory Polkadot Network",symbols:["DORA"],decimals:[12],standardAccount:"*25519",website:"https://dorafactory.org"},{prefix:131,network:"litmus",displayName:"Litmus Network",symbols:["LIT"],decimals:[12],standardAccount:"*25519",website:"https://litentry.com/"},{prefix:136,network:"altair",displayName:"Altair",symbols:["AIR"],decimals:[18],standardAccount:"*25519",website:"https://centrifuge.io/"},{prefix:137,network:"vara",displayName:"Vara Network",symbols:["VARA"],decimals:[12],standardAccount:"*25519",website:"https://vara.network/"},{prefix:172,network:"parallel",displayName:"Parallel",symbols:["PARA"],decimals:[12],standardAccount:"*25519",website:"https://parallel.fi/"},{prefix:252,network:"social-network",displayName:"Social Network",symbols:["NET"],decimals:[18],standardAccount:"*25519",website:"https://social.network"},{prefix:255,network:"quartz_mainnet",displayName:"QUARTZ by UNIQUE",symbols:["QTZ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:268,network:"pioneer_network",displayName:"Pioneer Network by Bit.Country",symbols:["NEER"],decimals:[18],standardAccount:"*25519",website:"https://bit.country"},{prefix:420,network:"sora_kusama_para",displayName:"SORA Kusama Parachain",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:440,network:"allfeat_network",displayName:"Allfeat Network",symbols:["AFT"],decimals:[12],standardAccount:"*25519",website:"https://allfeat.network"},{prefix:666,network:"metaquity_network",displayName:"Metaquity Network",symbols:["MQTY"],decimals:[18],standardAccount:"*25519",website:"https://metaquity.xyz/"},{prefix:777,network:"curio",displayName:"Curio",symbols:["CGT"],decimals:[18],standardAccount:"*25519",website:"https://parachain.capitaldex.exchange/"},{prefix:789,network:"geek",displayName:"GEEK Network",symbols:["GEEK"],decimals:[18],standardAccount:"*25519",website:"https://geek.gl"},{prefix:995,network:"ternoa",displayName:"Ternoa",symbols:["CAPS"],decimals:[18],standardAccount:"*25519",website:"https://www.ternoa.network"},{prefix:1110,network:"efinity",displayName:"Efinity",symbols:["EFI"],decimals:[18],standardAccount:"*25519",website:"https://efinity.io/"},{prefix:1221,network:"peaq",displayName:"Peaq Network",symbols:["PEAQ"],decimals:[18],standardAccount:"Sr25519",website:"https://www.peaq.network/"},{prefix:1222,network:"krest",displayName:"Krest Network",symbols:["KREST"],decimals:[18],standardAccount:"Sr25519",website:"https://www.peaq.network/"},{prefix:1284,network:"moonbeam",displayName:"Moonbeam",symbols:["GLMR"],decimals:[18],standardAccount:"secp256k1",website:"https://moonbeam.network"},{prefix:1285,network:"moonriver",displayName:"Moonriver",symbols:["MOVR"],decimals:[18],standardAccount:"secp256k1",website:"https://moonbeam.network"},{prefix:1328,network:"ajuna",displayName:"Ajuna Network",symbols:["AJUN"],decimals:[12],standardAccount:"*25519",website:"https://ajuna.io"},{prefix:1337,network:"bajun",displayName:"Bajun Network",symbols:["BAJU"],decimals:[12],standardAccount:"*25519",website:"https://ajuna.io"},{prefix:1516,network:"societal",displayName:"Societal",symbols:["SCTL"],decimals:[12],standardAccount:"*25519",website:"https://www.sctl.xyz"},{prefix:1985,network:"seals",displayName:"Seals Network",symbols:["SEAL"],decimals:[9],standardAccount:"*25519",website:"https://seals.app"},{prefix:2007,network:"kapex",displayName:"Kapex",symbols:["KAPEX"],decimals:[12],standardAccount:"*25519",website:"https://totemaccounting.com"},{prefix:2009,network:"cloudwalk_mainnet",displayName:"CloudWalk Network Mainnet",symbols:["CWN"],decimals:[18],standardAccount:"*25519",website:"https://explorer.mainnet.cloudwalk.io"},{prefix:2021,network:"logion",displayName:"logion network",symbols:["LGNT"],decimals:[18],standardAccount:"*25519",website:"https://logion.network"},{prefix:2032,network:"interlay",displayName:"Interlay",symbols:["INTR"],decimals:[10],standardAccount:"*25519",website:"https://interlay.io/"},{prefix:2092,network:"kintsugi",displayName:"Kintsugi",symbols:["KINT"],decimals:[12],standardAccount:"*25519",website:"https://interlay.io/"},{prefix:2106,network:"bitgreen",displayName:"Bitgreen",symbols:["BBB"],decimals:[18],standardAccount:"*25519",website:"https://bitgreen.org/"},{prefix:2112,network:"chainflip",displayName:"Chainflip",symbols:["FLIP"],decimals:[18],standardAccount:"*25519",website:"https://chainflip.io/"},{prefix:2199,network:"moonsama",displayName:"Moonsama",symbols:["SAMA"],decimals:[18],standardAccount:"secp256k1",website:"https://moonsama.com"},{prefix:2206,network:"ICE",displayName:"ICE Network",symbols:["ICY"],decimals:[18],standardAccount:"*25519",website:"https://icenetwork.io"},{prefix:2207,network:"SNOW",displayName:"SNOW: ICE Canary Network",symbols:["ICZ"],decimals:[18],standardAccount:"*25519",website:"https://icenetwork.io"},{prefix:2254,network:"subspace_testnet",displayName:"Subspace testnet",symbols:["tSSC"],decimals:[18],standardAccount:"*25519",website:"https://subspace.network"},{prefix:3333,network:"peerplays",displayName:"Peerplays",symbols:["PPY"],decimals:[18],standardAccount:"secp256k1",website:"https://www.peerplays.com/"},{prefix:4450,network:"g1",displayName:"Ğ1",symbols:["G1"],decimals:[2],standardAccount:"*25519",website:"https://duniter.org"},{prefix:5234,network:"humanode",displayName:"Humanode Network",symbols:["HMND"],decimals:[18],standardAccount:"*25519",website:"https://humanode.io"},{prefix:5845,network:"tangle",displayName:"Tangle Network",symbols:["TNT"],decimals:[18],standardAccount:"*25519",website:"https://www.tangle.tools/"},{prefix:6094,network:"subspace",displayName:"Subspace",symbols:["SSC"],decimals:[18],standardAccount:"*25519",website:"https://subspace.network"},{prefix:7007,network:"tidefi",displayName:"Tidefi",symbols:["TDFY"],decimals:[12],standardAccount:"*25519",website:"https://tidefi.com"},{prefix:7013,network:"gm",displayName:"GM",symbols:["FREN","GM","GN"],decimals:[12,0,0],standardAccount:"*25519",website:"https://gmordie.com"},{prefix:7306,network:"krigan",displayName:"Krigan Network",symbols:["KRGN"],decimals:[9],standardAccount:"*25519",website:"https://krigan.network"},{prefix:7391,network:"unique_mainnet",displayName:"Unique Network",symbols:["UNQ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:8866,network:"golden_gate",displayName:"Golden Gate",symbols:["GGX"],decimals:[18],standardAccount:"*25519",website:"https://ggxchain.io/"},{prefix:8883,network:"sapphire_mainnet",displayName:"Sapphire by Unique",symbols:["QTZ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:8886,network:"golden_gate_sydney",displayName:"Golden Gate Sydney",symbols:["GGXT"],decimals:[18],standardAccount:"*25519",website:"https://ggxchain.io/"},{prefix:9072,network:"hashed",displayName:"Hashed Network",symbols:["HASH"],decimals:[18],standardAccount:"*25519",website:"https://hashed.network"},{prefix:9807,network:"dentnet",displayName:"DENTNet",symbols:["DENTX"],decimals:[18],standardAccount:"*25519",website:"https://www.dentnet.io"},{prefix:9935,network:"t3rn",displayName:"t3rn",symbols:["TRN"],decimals:[12],standardAccount:"*25519",website:"https://t3rn.io/"},{prefix:10041,network:"basilisk",displayName:"Basilisk",symbols:["BSX"],decimals:[12],standardAccount:"*25519",website:"https://bsx.fi"},{prefix:11330,network:"cess-testnet",displayName:"CESS Testnet",symbols:["TCESS"],decimals:[12],standardAccount:"*25519",website:"https://cess.cloud"},{prefix:11331,network:"cess",displayName:"CESS",symbols:["CESS"],decimals:[12],standardAccount:"*25519",website:"https://cess.cloud"},{prefix:11486,network:"luhn",displayName:"Luhn Network",symbols:["LUHN"],decimals:[18],standardAccount:"*25519",website:"https://luhn.network"},{prefix:11820,network:"contextfree",displayName:"Automata ContextFree",symbols:["CTX"],decimals:[18],standardAccount:"*25519",website:"https://ata.network"},{prefix:12155,network:"impact",displayName:"Impact Protocol Network",symbols:["BSTY"],decimals:[18],standardAccount:"*25519",website:"https://impactprotocol.network/"},{prefix:12191,network:"nftmart",displayName:"NFTMart",symbols:["NMT"],decimals:[12],standardAccount:"*25519",website:"https://nftmart.io"},{prefix:13116,network:"bittensor",displayName:"Bittensor",symbols:["TAO"],decimals:[9],standardAccount:"*25519",website:"https://bittensor.com"},{prefix:14697,network:"goro",displayName:"GORO Network",symbols:["GORO"],decimals:[9],standardAccount:"*25519",website:"https://goro.network"}].map(function(e){let t=e.network||"",r=t.replace(/_/g,"-").split("-");return(// ledger additions
e.slip44=cV[t],e.hasLedgerSupport=!!e.slip44,// general items
e.genesisHash=cI[t]||[],e.icon=cB[t]||"substrate",// filtering
e.isTestnet=!!cX[t]||cA.includes(r[r.length-1]),e.isIgnored=e.isTestnet||!(e.standardAccount&&e.decimals?.length&&e.symbols?.length)&&42!==e.prefix,e)}),cC=cD.filter(function(e){return!e.isIgnored&&!!e.network}).sort(function(e,t){let r=cU.includes(e.prefix),n=cU.includes(t.prefix);return r===n?r?0:e.displayName.localeCompare(t.displayName):r?-1:1}),cF=cC.filter(function({genesisHash:e,prefix:t}){return!!e.length||42===t}),cZ={allowedDecodedLengths:[1,2,4,8,32,33],// publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
allowedEncodedLengths:[3,4,6,10,35,36,37,38],allowedPrefix:cC.map(({prefix:e})=>e),prefix:42};function cq(e,t,r=-1){if(!e)throw Error("Invalid empty address passed");if(sv(e)||o3(e))return sx(e);try{let n=sS(e);if(!cZ.allowedEncodedLengths.includes(n.length))throw Error("Invalid decoded address length");let[a,i,o,s]=function(e){let t=64&e[0]?2:1,r=1===t?e[0]:(63&e[0])<<2|e[1]>>6|(63&e[1])<<8,n=[34+t,35+t].includes(e.length),a=e.length-(n?2:1),i=cR(e.subarray(0,a)),o=(128&e[0])==0&&![46,47].includes(e[0])&&(n?e[e.length-2]===i[0]&&e[e.length-1]===i[1]:e[e.length-1]===i[0]);return[o,a,t,r]}(n);if(a||t){if(-1!==r&&r!==s)throw Error(`Expected ss58Format ${r}, received ${s}`)}else throw Error("Invalid decoded address checksum");return n.slice(o,i)}catch(t){throw Error(`Decoding ${e}: ${t.message}`)}}var cG={};Object.defineProperty(cG,"__esModule",{value:!0}),cG.hash_to_ristretto255=cG.hashToRistretto255=cG.RistrettoPoint=cG.encodeToCurve=cG.hashToCurve=cG.edwardsToMontgomeryPriv=cG.edwardsToMontgomery=cG.edwardsToMontgomeryPub=cG.x25519=cG.ed25519ph=cG.ed25519ctx=cG.ed25519=cG.ED25519_TORSION_SUBGROUP=void 0;var cW={};Object.defineProperty(cW,"__esModule",{value:!0}),cW.sha384=cW.sha512_256=cW.sha512_224=cW.sha512=cW.SHA512=void 0;var cY={};Object.defineProperty(cY,"__esModule",{value:!0}),cY.SHA2=void 0;// Base SHA2 class (RFC 6234)
class cK extends sF.Hash{constructor(e,t,r,n){super(),this.blockLen=e,this.outputLen=t,this.padOffset=r,this.isLE=n,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=(0,sF.createView)(this.buffer)}update(e){(0,sB.exists)(this);let{view:t,buffer:r,blockLen:n}=this;e=(0,sF.toBytes)(e);let a=e.length;for(let i=0;i<a;){let o=Math.min(n-this.pos,a-i);// Fast path: we have at least one block in input, cast it to view and process
if(o===n){let t=(0,sF.createView)(e);for(;n<=a-i;i+=n)this.process(t,i);continue}r.set(e.subarray(i,i+o),this.pos),this.pos+=o,i+=o,this.pos===n&&(this.process(t,0),this.pos=0)}return this.length+=e.length,this.roundClean(),this}digestInto(e){(0,sB.exists)(this),(0,sB.output)(e,this),this.finished=!0;// Padding
// We can avoid allocation of buffer for padding completely if it
// was previously not allocated here. But it won't change performance.
let{buffer:t,view:r,blockLen:n,isLE:a}=this,{pos:i}=this;// append the bit '1' to the message
t[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>n-i&&(this.process(r,0),i=0);// Pad until full block byte with zeros
for(let e=i;e<n;e++)t[e]=0;!// Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
// You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
// So we just write lowest 64 bits of that value.
// Polyfill for Safari 14
function(e,t,r,n){if("function"==typeof e.setBigUint64)return e.setBigUint64(t,r,n);let a=BigInt(32),i=BigInt(4294967295),o=Number(r>>a&i),s=Number(r&i),l=n?4:0,c=n?0:4;e.setUint32(t+l,o,n),e.setUint32(t+c,s,n)}(r,n-8,BigInt(8*this.length),a),this.process(r,0);let o=(0,sF.createView)(e),s=this.outputLen;// NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
if(s%4)throw Error("_sha2: outputLen should be aligned to 32bit");let l=s/4,c=this.get();if(l>c.length)throw Error("_sha2: outputLen bigger than state");for(let e=0;e<l;e++)o.setUint32(4*e,c[e],a)}digest(){let{buffer:e,outputLen:t}=this;this.digestInto(e);let r=e.slice(0,t);return this.destroy(),r}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());let{blockLen:t,buffer:r,length:n,finished:a,destroyed:i,pos:o}=this;return e.length=n,e.pos=o,e.finished=a,e.destroyed=i,n%t&&e.buffer.set(r),e}}cY.SHA2=cK;// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
// prettier-ignore
const[cJ,cQ]=s1.default.split(["0x428a2f98d728ae22","0x7137449123ef65cd","0xb5c0fbcfec4d3b2f","0xe9b5dba58189dbbc","0x3956c25bf348b538","0x59f111f1b605d019","0x923f82a4af194f9b","0xab1c5ed5da6d8118","0xd807aa98a3030242","0x12835b0145706fbe","0x243185be4ee4b28c","0x550c7dc3d5ffb4e2","0x72be5d74f27b896f","0x80deb1fe3b1696b1","0x9bdc06a725c71235","0xc19bf174cf692694","0xe49b69c19ef14ad2","0xefbe4786384f25e3","0x0fc19dc68b8cd5b5","0x240ca1cc77ac9c65","0x2de92c6f592b0275","0x4a7484aa6ea6e483","0x5cb0a9dcbd41fbd4","0x76f988da831153b5","0x983e5152ee66dfab","0xa831c66d2db43210","0xb00327c898fb213f","0xbf597fc7beef0ee4","0xc6e00bf33da88fc2","0xd5a79147930aa725","0x06ca6351e003826f","0x142929670a0e6e70","0x27b70a8546d22ffc","0x2e1b21385c26c926","0x4d2c6dfc5ac42aed","0x53380d139d95b3df","0x650a73548baf63de","0x766a0abb3c77b2a8","0x81c2c92e47edaee6","0x92722c851482353b","0xa2bfe8a14cf10364","0xa81a664bbc423001","0xc24b8b70d0f89791","0xc76c51a30654be30","0xd192e819d6ef5218","0xd69906245565a910","0xf40e35855771202a","0x106aa07032bbd1b8","0x19a4c116b8d2d0c8","0x1e376c085141ab53","0x2748774cdf8eeb99","0x34b0bcb5e19b48a8","0x391c0cb3c5c95a63","0x4ed8aa4ae3418acb","0x5b9cca4f7763e373","0x682e6ff3d6b2b8a3","0x748f82ee5defb2fc","0x78a5636f43172f60","0x84c87814a1f0ab72","0x8cc702081a6439ec","0x90befffa23631e28","0xa4506cebde82bde9","0xbef9a3f7b2c67915","0xc67178f2e372532b","0xca273eceea26619c","0xd186b8c721c0c207","0xeada7dd6cde0eb1e","0xf57d4f7fee6ed178","0x06f067aa72176fba","0x0a637dc5a2c898a6","0x113f9804bef90dae","0x1b710b35131c471b","0x28db77f523047d84","0x32caab7b40c72493","0x3c9ebe0a15c9bebc","0x431d67c49c100d4c","0x4cc5d4becb3e42b6","0x597f299cfc657e2a","0x5fcb6fab3ad6faec","0x6c44198c4a475817"].map(e=>BigInt(e))),c_=/* @__PURE__ */new Uint32Array(80),c$=/* @__PURE__ */new Uint32Array(80);class c0 extends cY.SHA2{constructor(){super(128,64,16,!1),// We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
// Also looks cleaner and easier to verify with spec.
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// h -- high 32 bits, l -- low 32 bits
this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}// prettier-ignore
get(){let{Ah:e,Al:t,Bh:r,Bl:n,Ch:a,Cl:i,Dh:o,Dl:s,Eh:l,El:c,Fh:u,Fl:d,Gh:f,Gl:p,Hh:h,Hl:b}=this;return[e,t,r,n,a,i,o,s,l,c,u,d,f,p,h,b]}// prettier-ignore
set(e,t,r,n,a,i,o,s,l,c,u,d,f,p,h,b){this.Ah=0|e,this.Al=0|t,this.Bh=0|r,this.Bl=0|n,this.Ch=0|a,this.Cl=0|i,this.Dh=0|o,this.Dl=0|s,this.Eh=0|l,this.El=0|c,this.Fh=0|u,this.Fl=0|d,this.Gh=0|f,this.Gl=0|p,this.Hh=0|h,this.Hl=0|b}process(e,t){// Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
for(let r=0;r<16;r++,t+=4)c_[r]=e.getUint32(t),c$[r]=e.getUint32(t+=4);for(let e=16;e<80;e++){// s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
let t=0|c_[e-15],r=0|c$[e-15],n=s1.default.rotrSH(t,r,1)^s1.default.rotrSH(t,r,8)^s1.default.shrSH(t,r,7),a=s1.default.rotrSL(t,r,1)^s1.default.rotrSL(t,r,8)^s1.default.shrSL(t,r,7),i=0|c_[e-2],o=0|c$[e-2],s=s1.default.rotrSH(i,o,19)^s1.default.rotrBH(i,o,61)^s1.default.shrSH(i,o,6),l=s1.default.rotrSL(i,o,19)^s1.default.rotrBL(i,o,61)^s1.default.shrSL(i,o,6),c=s1.default.add4L(a,l,c$[e-7],c$[e-16]),u=s1.default.add4H(c,n,s,c_[e-7],c_[e-16]);c_[e]=0|u,c$[e]=0|c}let{Ah:r,Al:n,Bh:a,Bl:i,Ch:o,Cl:s,Dh:l,Dl:c,Eh:u,El:d,Fh:f,Fl:p,Gh:h,Gl:b,Hh:y,Hl:m}=this;// Compression function main loop, 80 rounds
for(let e=0;e<80;e++){// S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
let t=s1.default.rotrSH(u,d,14)^s1.default.rotrSH(u,d,18)^s1.default.rotrBH(u,d,41),g=s1.default.rotrSL(u,d,14)^s1.default.rotrSL(u,d,18)^s1.default.rotrBL(u,d,41),v=u&f^~u&h,x=d&p^~d&b,w=s1.default.add5L(m,g,x,cQ[e],c$[e]),P=s1.default.add5H(w,y,t,v,cJ[e],c_[e]),O=0|w,T=s1.default.rotrSH(r,n,28)^s1.default.rotrBH(r,n,34)^s1.default.rotrBH(r,n,39),z=s1.default.rotrSL(r,n,28)^s1.default.rotrBL(r,n,34)^s1.default.rotrBL(r,n,39),k=r&a^r&o^a&o,L=n&i^n&s^i&s;y=0|h,m=0|b,h=0|f,b=0|p,f=0|u,p=0|d,({h:u,l:d}=s1.default.add(0|l,0|c,0|P,0|O)),l=0|o,c=0|s,o=0|a,s=0|i,a=0|r,i=0|n;let E=s1.default.add3L(O,z,L);r=s1.default.add3H(E,P,T,k),n=0|E}// Add the compressed chunk to the current hash value
({h:r,l:n}=s1.default.add(0|this.Ah,0|this.Al,0|r,0|n)),({h:a,l:i}=s1.default.add(0|this.Bh,0|this.Bl,0|a,0|i)),({h:o,l:s}=s1.default.add(0|this.Ch,0|this.Cl,0|o,0|s)),({h:l,l:c}=s1.default.add(0|this.Dh,0|this.Dl,0|l,0|c)),({h:u,l:d}=s1.default.add(0|this.Eh,0|this.El,0|u,0|d)),({h:f,l:p}=s1.default.add(0|this.Fh,0|this.Fl,0|f,0|p)),({h:h,l:b}=s1.default.add(0|this.Gh,0|this.Gl,0|h,0|b)),({h:y,l:m}=s1.default.add(0|this.Hh,0|this.Hl,0|y,0|m)),this.set(r,n,a,i,o,s,l,c,u,d,f,p,h,b,y,m)}roundClean(){c_.fill(0),c$.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}cW.SHA512=c0;class c1 extends c0{constructor(){super(),// h -- high 32 bits, l -- low 32 bits
this.Ah=-1942145080,this.Al=424955298,this.Bh=1944164710,this.Bl=-1982016298,this.Ch=502970286,this.Cl=855612546,this.Dh=1738396948,this.Dl=1479516111,this.Eh=258812777,this.El=2077511080,this.Fh=2011393907,this.Fl=79989058,this.Gh=1067287976,this.Gl=1780299464,this.Hh=286451373,this.Hl=-1848208735,this.outputLen=28}}class c2 extends c0{constructor(){super(),// h -- high 32 bits, l -- low 32 bits
this.Ah=573645204,this.Al=-64227540,this.Bh=-1621794909,this.Bl=-934517566,this.Ch=596883563,this.Cl=1867755857,this.Dh=-1774684391,this.Dl=1497426621,this.Eh=-1775747358,this.El=-1467023389,this.Fh=-1101128155,this.Fl=1401305490,this.Gh=721525244,this.Gl=746961066,this.Hh=246885852,this.Hl=-2117784414,this.outputLen=32}}class c5 extends c0{constructor(){super(),// h -- high 32 bits, l -- low 32 bits
this.Ah=-876896931,this.Al=-1056596264,this.Bh=1654270250,this.Bl=914150663,this.Ch=-1856437926,this.Cl=812702999,this.Dh=355462360,this.Dl=-150054599,this.Eh=1731405415,this.El=-4191439,this.Fh=-1900787065,this.Fl=1750603025,this.Gh=-619958771,this.Gl=1694076839,this.Hh=1203062813,this.Hl=-1090891868,this.outputLen=48}}cW.sha512=(0,sF.wrapConstructor)(()=>new c0),cW.sha512_224=(0,sF.wrapConstructor)(()=>new c1),cW.sha512_256=(0,sF.wrapConstructor)(()=>new c2),cW.sha384=(0,sF.wrapConstructor)(()=>new c5);var c3={};Object.defineProperty(c3,"__esModule",{value:!0}),c3.twistedEdwards=void 0;var c8=A("jfV5v"),c9=(A("j2PHb"),A("j2PHb")),c6=A("lr2C3");// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const c4=BigInt(0),c7=BigInt(1),ue=BigInt(2),ut=BigInt(8),ur={zip215:!0};c3.twistedEdwards=// It is not generic twisted curve for now, but ed25519/ed448 generic implementation
function(e){let t=function(e){let t=(0,c6.validateBasic)(e);// Set defaults
return c9.validateObject(e,{hash:"function",a:"bigint",d:"bigint",randomBytes:"function"},{adjustScalarBytes:"function",domain:"function",uvRatio:"function",mapToCurve:"function"}),Object.freeze({...t})}(e),{Fp:r,n:n,prehash:a,hash:i,randomBytes:o,nByteLength:s,h:l}=t,c=ue<<BigInt(8*s)-c7,u=r.create,d=t.uvRatio||((e,t)=>{try{return{isValid:!0,value:r.sqrt(e*r.inv(t))}}catch(e){return{isValid:!1,value:c4}}}),f=t.adjustScalarBytes||(e=>e),p=t.domain||((e,t,r)=>{if(t.length||r)throw Error("Contexts/pre-hash are not supported");return e}),h=e=>"bigint"==typeof e&&c4<e,b=(e,t)=>h(e)&&h(t)&&e<t,y=e=>e===c4||b(e,c);function m(e,t){// n in [1..max-1]
if(b(e,t))return e;throw Error(`Expected valid scalar < ${t}, got ${typeof e} ${e}`)}function g(e){// n in [0..CURVE_ORDER-1]
return e===c4?e:m(e,n);// GE = prime subgroup, not full group
}let v=new Map;function x(e){if(!(e instanceof w))throw Error("ExtendedPoint expected")}// Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).
// https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates
class w{constructor(e,t,r,n){if(this.ex=e,this.ey=t,this.ez=r,this.et=n,!y(e))throw Error("x required");if(!y(t))throw Error("y required");if(!y(r))throw Error("z required");if(!y(n))throw Error("t required")}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static fromAffine(e){if(e instanceof w)throw Error("extended point not allowed");let{x:t,y:r}=e||{};if(!y(t)||!y(r))throw Error("invalid affine point");return new w(t,r,c7,u(t*r))}static normalizeZ(e){let t=r.invertBatch(e.map(e=>e.ez));return e.map((e,r)=>e.toAffine(t[r])).map(w.fromAffine)}// "Private method", don't use it directly
_setWindowSize(e){this._WINDOW_SIZE=e,v.delete(this)}// Not required for fromHex(), which always creates valid points.
// Could be useful for fromAffine().
assertValidity(){let{a:e,d:r}=t;if(this.is0())throw Error("bad point: ZERO");// TODO: optimize, with vars below?
// Equation in affine coordinates: ax² + y² = 1 + dx²y²
// Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²
let{ex:n,ey:a,ez:i,et:o}=this,s=u(n*n),l=u(a*a),c=u(i*i),d=u(c*c),f=u(s*e),p=u(c*u(f+l)),h=u(d+u(r*u(s*l)));if(p!==h)throw Error("bad point: equation left != right (1)");// In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T
let b=u(n*a),y=u(i*o);if(b!==y)throw Error("bad point: equation left != right (2)")}// Compare one point to another.
equals(e){x(e);let{ex:t,ey:r,ez:n}=this,{ex:a,ey:i,ez:o}=e,s=u(t*o),l=u(a*n),c=u(r*o),d=u(i*n);return s===l&&c===d}is0(){return this.equals(w.ZERO)}negate(){// Flips point sign to a negative one (-x, y in affine coords)
return new w(u(-this.ex),this.ey,this.ez,u(-this.et))}// Fast algo for doubling Extended Point.
// https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
// Cost: 4M + 4S + 1*a + 6add + 1*2.
double(){let{a:e}=t,{ex:r,ey:n,ez:a}=this,i=u(r*r),o=u(n*n),s=u(ue*u(a*a)),l=u(e*i),c=r+n,d=u(u(c*c)-i-o),f=l+o,p=f-s,h=l-o,b=u(d*p),y=u(f*h),m=u(d*h),g=u(p*f);return new w(b,y,g,m)}// Fast algo for adding 2 Extended Points.
// https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
// Cost: 9M + 1*a + 1*d + 7add.
add(e){x(e);let{a:r,d:n}=t,{ex:a,ey:i,ez:o,et:s}=this,{ex:l,ey:c,ez:d,et:f}=e;// Faster algo for adding 2 Extended Points when curve's a=-1.
// http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4
// Cost: 8M + 8add + 2*2.
// Note: It does not check whether the `other` point is valid.
if(r===BigInt(-1)){let e=u((i-a)*(c+l)),t=u((i+a)*(c-l)),r=u(t-e);if(r===c4)return this.double();// Same point. Tests say it doesn't affect timing
let n=u(o*ue*f),p=u(s*ue*d),h=p+n,b=t+e,y=p-n,m=u(h*r),g=u(b*y),v=u(h*y),x=u(r*b);return new w(m,g,x,v)}let p=u(a*l),h=u(i*c),b=u(s*n*f),y=u(o*d),m=u((a+i)*(l+c)-p-h),g=y-b,v=y+b,P=u(h-r*p),O=u(m*g),T=u(v*P),z=u(m*P),k=u(g*v);// A = X1*X2
return new w(O,T,k,z)}subtract(e){return this.add(e.negate())}wNAF(e){return T.wNAFCached(this,v,e,w.normalizeZ)}// Constant-time multiplication.
multiply(e){let{p:t,f:r}=this.wNAF(m(e,n));return w.normalizeZ([t,r])[0]}// Non-constant-time multiplication. Uses double-and-add algorithm.
// It's faster, but should only be used when you don't care about
// an exposed private key e.g. sig verification.
// Does NOT allow scalars higher than CURVE.n.
multiplyUnsafe(e){let t=g(e);// 0 <= scalar < CURVE.n
return t===c4?O:this.equals(O)||t===c7?this:this.equals(P)?this.wNAF(t).p:T.unsafeLadder(this,t)}// Checks if point is of small order.
// If you add something to small order point, you will have "dirty"
// point with torsion component.
// Multiplies point by cofactor and checks if the result is 0.
isSmallOrder(){return this.multiplyUnsafe(l).is0()}// Multiplies point by curve order and checks if the result is 0.
// Returns `false` is the point is dirty.
isTorsionFree(){return T.unsafeLadder(this,n).is0()}// Converts Extended point to default (x, y) coordinates.
// Can accept precomputed Z^-1 - for example, from invertBatch.
toAffine(e){let{ex:t,ey:n,ez:a}=this,i=this.is0();null==e&&(e=i?ut:r.inv(a));// 8 was chosen arbitrarily
let o=u(t*e),s=u(n*e),l=u(a*e);if(i)return{x:c4,y:c7};if(l!==c7)throw Error("invZ was invalid");return{x:o,y:s}}clearCofactor(){let{h:e}=t;return e===c7?this:this.multiplyUnsafe(e)}// Converts hash string or Uint8Array to Point.
// Uses algo from RFC8032 5.1.3.
static fromHex(e,n=!1){let{d:a,a:i}=t,o=r.BYTES;e=(0,c9.ensureBytes)("pointHex",e,o);let s=e.slice(),l=e[o-1];// copy again, we'll manipulate it
s[o-1]=-129&l;let f=c9.bytesToNumberLE(s);f===c4||(n?m(f,c):m(f,r.ORDER));// Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:
// ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)
let p=u(f*f),h=u(p-c7),b=u(a*p-i),{isValid:y,value:g}=d(h,b);// denominator is always non-0 mod p.
if(!y)throw Error("Point.fromHex: invalid y coordinate");let v=(g&c7)===c7,x=(128&l)!=0;// There are 2 square roots. Use x_0 bit to select proper
if(!n&&g===c4&&x)throw Error("Point.fromHex: x=0 and x_0=1");return x!==v&&(g=u(-g)),w.fromAffine({x:g,y:f})}static fromPrivateKey(e){return L(e).point}toRawBytes(){let{x:e,y:t}=this.toAffine(),n=c9.numberToBytesLE(t,r.BYTES);return n[n.length-1]|=e&c7?128:0,n;// and use the last byte to encode sign of x
}toHex(){return c9.bytesToHex(this.toRawBytes());// Same as toRawBytes, but returns string.
}}w.BASE=new w(t.Gx,t.Gy,c7,u(t.Gx*t.Gy)),w.ZERO=new w(c4,c7,c7,c4);let{BASE:P,ZERO:O}=w,T=(0,c6.wNAF)(w,8*s);function z(e){return(0,c8.mod)(e,n)}// Little-endian SHA512 with modulo n
function k(e){return z(c9.bytesToNumberLE(e))}/** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */function L(e){e=(0,c9.ensureBytes)("private key",e,s);// Hash private key with curve's hash function to produce uniformingly random input
// Check byte lengths: ensure(64, h(ensure(32, key)))
let t=(0,c9.ensureBytes)("hashed private key",i(e),2*s),r=f(t.slice(0,s)),n=t.slice(s,2*s),a=k(r),o=P.multiply(a),l=o.toRawBytes();return{head:r,prefix:n,scalar:a,point:o,pointBytes:l}}// int('LE', SHA512(dom2(F, C) || msgs)) mod N
function E(e=new Uint8Array,...t){let r=c9.concatBytes(...t);return k(i(p(r,(0,c9.ensureBytes)("context",e),!!a)))}return P._setWindowSize(8),{CURVE:t,getPublicKey:// Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared
function(e){return L(e).pointBytes},sign:/** Signs message with privateKey. RFC8032 5.1.6 */function(e,t,n={}){e=(0,c9.ensureBytes)("message",e),a&&(e=a(e));let{prefix:i,scalar:o,pointBytes:l}=L(t),c=E(n.context,i,e),u=P.multiply(c).toRawBytes(),d=E(n.context,u,l,e),f=z(c+d*o);g(f);let p=c9.concatBytes(u,c9.numberToBytesLE(f,r.BYTES));return(0,c9.ensureBytes)("result",p,2*s);// 64-byte signature
},verify:function(e,t,n,i=ur){let o,s,l;let{context:c,zip215:u}=i,d=r.BYTES;e=(0,c9.ensureBytes)("signature",e,2*d),t=(0,c9.ensureBytes)("message",t),a&&(t=a(t));let f=c9.bytesToNumberLE(e.slice(d,2*d));try{o=w.fromHex(n,u),s=w.fromHex(e.slice(0,d),u),l=P.multiplyUnsafe(f)}catch(e){return!1}if(!u&&o.isSmallOrder())return!1;let p=E(c,s.toRawBytes(),o.toRawBytes(),t),h=s.add(o.multiplyUnsafe(p));// [8][S]B = [8]R + [8][k]A'
return h.subtract(l).clearCofactor().equals(w.ZERO)},ExtendedPoint:w,utils:{getExtendedPublicKey:L,// ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
randomPrivateKey:()=>o(r.BYTES),/**
         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
         * values. This slows down first getPublicKey() by milliseconds (see Speed section),
         * but allows to speed-up subsequent getPublicKey() calls up to 20x.
         * @param windowSize 2, 4, 8, 16
         */precompute:(e=8,t=w.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)}}};var un={};Object.defineProperty(un,"__esModule",{value:!0}),un.montgomery=void 0;var c8=A("jfV5v"),c9=A("j2PHb");const ua=BigInt(0),ui=BigInt(1);un.montgomery=// NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)
// Uses only one coordinate instead of two
function(e){let t=((0,c9.validateObject)(e,{a:"bigint"},{montgomeryBits:"isSafeInteger",nByteLength:"isSafeInteger",adjustScalarBytes:"function",domain:"function",powPminus2:"function",Gu:"bigint"}),Object.freeze({...e})),{P:r}=t,n=e=>(0,c8.mod)(e,r),a=t.montgomeryBits,i=Math.ceil(a/8),o=t.nByteLength,s=t.adjustScalarBytes||(e=>e),l=t.powPminus2||(e=>(0,c8.pow)(e,r-BigInt(2),r));// cswap from RFC7748. But it is not from RFC7748!
/*
      cswap(swap, x_2, x_3):
           dummy = mask(swap) AND (x_2 XOR x_3)
           x_2 = x_2 XOR dummy
           x_3 = x_3 XOR dummy
           Return (x_2, x_3)
    Where mask(swap) is the all-1 or all-0 word of the same length as x_2
     and x_3, computed, e.g., as mask(swap) = 0 - swap.
    */function c(e,t,r){let a=n(e*(t-r));return[t=n(t-a),r=n(r+a)]}// Accepts 0 as well
function u(e){if("bigint"==typeof e&&ua<=e&&e<r)return e;throw Error("Expected valid scalar 0 < scalar < CURVE.P")}// x25519 from 4
// The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519
let d=(t.a-BigInt(2))/BigInt(4);function f(e){return(0,c9.numberToBytesLE)(n(e),i)}function p(e,t){let r=function(e){// Section 5: When receiving such an array, implementations of X25519
// MUST mask the most significant bit in the final byte.
let t=(0,c9.ensureBytes)("u coordinate",e,i);return 32===o&&(t[31]&=127),(0,c9.bytesToNumberLE)(t)}(t),p=function(e){let t=(0,c9.ensureBytes)("scalar",e),r=t.length;if(r!==i&&r!==o)throw Error(`Expected ${i} or ${o} bytes, got ${r}`);return(0,c9.bytesToNumberLE)(s(t))}(e),h=/**
     *
     * @param pointU u coordinate (x) on Montgomery Curve 25519
     * @param scalar by which the point would be multiplied
     * @returns new Point on Montgomery curve
     */function(e,t){let r;let i=u(e),o=u(t),s=ui,f=ua,p=i,h=ui,b=ua;for(let e=BigInt(a-1);e>=ua;e--){let t=o>>e&ui;b^=t,s=(r=c(b,s,p))[0],p=r[1],f=(r=c(b,f,h))[0],h=r[1],b=t;let a=s+f,l=n(a*a),u=s-f,y=n(u*u),m=l-y,g=p+h,v=p-h,x=n(v*a),w=n(g*u),P=x+w,O=x-w;p=n(P*P),h=n(i*n(O*O)),s=n(l*y),f=n(m*(l+n(d*m)))}s=// (x_2, x_3) = cswap(swap, x_2, x_3)
(r=c(b,s,p))[0],p=r[1],f=// (z_2, z_3) = cswap(swap, z_2, z_3)
(r=c(b,f,h))[0],h=r[1];// z_2^(p - 2)
let y=l(f);// Return x_2 * (z_2^(p - 2))
return n(s*y)}(r,p);// The result was not contributory
// https://cr.yp.to/ecdh.html#validate
if(h===ua)throw Error("Invalid private or public key received");return f(h)}// Computes public key from private. By doing scalar multiplication of base point.
let h=f(t.Gu);function b(e){return p(e,h)}return{scalarMult:p,scalarMultBase:b,getSharedSecret:(e,t)=>p(e,t),getPublicKey:e=>b(e),utils:{randomPrivateKey:()=>t.randomBytes(t.nByteLength)},GuBytes:h}};var c8=A("jfV5v"),c9=A("j2PHb"),uo={};Object.defineProperty(uo,"__esModule",{value:!0}),uo.createHasher=uo.isogenyMap=uo.hash_to_field=uo.expand_message_xof=uo.expand_message_xmd=void 0;var c8=A("jfV5v"),c9=A("j2PHb");// Octet Stream to Integer. "spec" implementation of os2ip is 2.5x slower vs bytesToNumberBE.
const us=c9.bytesToNumberBE;// Integer to Octet Stream (numberToBytesBE)
function ul(e,t){if(e<0||e>=1<<8*t)throw Error(`bad I2OSP call: value=${e} length=${t}`);let r=Array.from({length:t}).fill(0);for(let n=t-1;n>=0;n--)r[n]=255&e,e>>>=8;return new Uint8Array(r)}function uc(e){if(!(0,c9.isBytes)(e))throw Error("Uint8Array expected")}function uu(e){if(!Number.isSafeInteger(e))throw Error("number expected")}// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits
// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1
function ud(e,t,r,n){uc(e),uc(t),uu(r),t.length>255&&(t=n((0,c9.concatBytes)((0,c9.utf8ToBytes)("H2C-OVERSIZE-DST-"),t)));let{outputLen:a,blockLen:i}=n,o=Math.ceil(r/a);if(o>255)throw Error("Invalid xmd length");let s=(0,c9.concatBytes)(t,ul(t.length,1)),l=ul(0,i),c=ul(r,2),u=Array(o),d=n((0,c9.concatBytes)(l,e,c,ul(0,1),s));u[0]=n((0,c9.concatBytes)(d,ul(1,1),s));for(let e=1;e<=o;e++){let t=[function(e,t){let r=new Uint8Array(e.length);for(let n=0;n<e.length;n++)r[n]=e[n]^t[n];return r}(d,u[e-1]),ul(e+1,1),s];u[e]=n((0,c9.concatBytes)(...t))}let f=(0,c9.concatBytes)(...u);return f.slice(0,r)}// Produces a uniformly random byte string using an extendable-output function (XOF) H.
// 1. The collision resistance of H MUST be at least k bits.
// 2. H MUST be an XOF that has been proved indifferentiable from
//    a random oracle under a reasonable cryptographic assumption.
// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2
function uf(e,t,r,n,a){// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
// DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));
if(uc(e),uc(t),uu(r),t.length>255){let e=Math.ceil(2*n/8);t=a.create({dkLen:e}).update((0,c9.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(t).digest()}if(r>65535||t.length>255)throw Error("expand_message_xof: invalid lenInBytes");return a.create({dkLen:r}).update(e).update(ul(r,2))// 2. DST_prime = DST || I2OSP(len(DST), 1)
.update(t).update(ul(t.length,1)).digest()}/**
 * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F
 * https://www.rfc-editor.org/rfc/rfc9380#section-5.2
 * @param msg a byte string containing the message to hash
 * @param count the number of elements of F to output
 * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above
 * @returns [u_0, ..., u_(count - 1)], a list of field elements.
 */function up(e,t,r){let n;(0,c9.validateObject)(r,{DST:"stringOrUint8Array",p:"bigint",m:"isSafeInteger",k:"isSafeInteger",hash:"hash"});let{p:a,k:i,m:o,hash:s,expand:l,DST:c}=r;uc(e),uu(t);let u=function(e){if((0,c9.isBytes)(e))return e;if("string"==typeof e)return(0,c9.utf8ToBytes)(e);throw Error("DST must be Uint8Array or string")}(c),d=a.toString(2).length,f=Math.ceil((d+i)/8),p=t*o*f;if("xmd"===l)n=ud(e,u,p,s);else if("xof"===l)n=uf(e,u,p,i,s);else if("_internal_pass"===l)n=e;else throw Error('expand must be "xmd" or "xof"');let h=Array(t);for(let e=0;e<t;e++){let t=Array(o);for(let r=0;r<o;r++){let i=f*(r+e*o),s=n.subarray(i,i+f);t[r]=(0,c8.mod)(us(s),a)}h[e]=t}return h}uo.expand_message_xmd=ud,uo.expand_message_xof=uf,uo.hash_to_field=up,uo.isogenyMap=function(e,t){// Make same order as in spec
let r=t.map(e=>Array.from(e).reverse());return(t,n)=>{let[a,i,o,s]=r.map(r=>r.reduce((r,n)=>e.add(e.mul(r,t),n)));return t=e.div(a,i),n=e.mul(n,e.div(o,s)),{x:t,y:n}}},uo.createHasher=function(e,t,r){if("function"!=typeof t)throw Error("mapToCurve() must be defined");return{// Encodes byte string to elliptic curve.
// hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
hashToCurve(n,a){let i=up(n,2,{...r,DST:r.DST,...a}),o=e.fromAffine(t(i[0])),s=e.fromAffine(t(i[1])),l=o.add(s).clearCofactor();return l.assertValidity(),l},// Encodes byte string to elliptic curve.
// encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
encodeToCurve(n,a){let i=up(n,1,{...r,DST:r.encodeDST,...a}),o=e.fromAffine(t(i[0])).clearCofactor();return o.assertValidity(),o}}};/**
 * ed25519 Twisted Edwards curve with following addons:
 * - X25519 ECDH
 * - Ristretto cofactor elimination
 * - Elligator hash-to-group / point indistinguishability
 */const uh=BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949"),ub=BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752"),uy=BigInt(0),um=BigInt(1),ug=BigInt(2),uv=BigInt(5),ux=BigInt(10),uw=BigInt(20),uP=BigInt(40),uO=BigInt(80);function uT(e){let t=e*e%uh,r=t*e%uh,n=(0,c8.pow2)(r,ug,uh)*r%uh,a=(0,c8.pow2)(n,um,uh)*e%uh,i=(0,c8.pow2)(a,uv,uh)*a%uh,o=(0,c8.pow2)(i,ux,uh)*i%uh,s=(0,c8.pow2)(o,uw,uh)*o%uh,l=(0,c8.pow2)(s,uP,uh)*s%uh,c=(0,c8.pow2)(l,uO,uh)*l%uh,u=(0,c8.pow2)(c,uO,uh)*l%uh,d=(0,c8.pow2)(u,ux,uh)*i%uh,f=(0,c8.pow2)(d,ug,uh)*e%uh;// ^ To pow to (p+3)/8, multiply it by x.
return{pow_p_5_8:f,b2:r}}function uz(e){return(// Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,
// set the three least significant bits of the first byte
e[0]&=248,// and the most significant bit of the last to zero,
e[31]&=127,// set the second most significant bit of the last byte to 1
e[31]|=64,e)}// sqrt(u/v)
function uk(e,t){let r=(0,c8.mod)(t*t*t,uh),n=(0,c8.mod)(r*r*t,uh),a=uT(e*n).pow_p_5_8,i=(0,c8.mod)(e*r*a,uh),o=(0,c8.mod)(t*i*i,uh),s=i,l=(0,c8.mod)(i*ub,uh),c=o===e,u=o===(0,c8.mod)(-e,uh),d=o===(0,c8.mod)(-e*ub,uh);// v³
return c&&(i=s),(u||d)&&(i=l),(0,c8.isNegativeLE)(i,uh)&&(i=(0,c8.mod)(-i,uh)),{isValid:c||u,value:i}}// Just in case
cG.ED25519_TORSION_SUBGROUP=["0100000000000000000000000000000000000000000000000000000000000000","c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a","0000000000000000000000000000000000000000000000000000000000000080","26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05","ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f","26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85","0000000000000000000000000000000000000000000000000000000000000000","c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa"];const uL=(0,c8.Field)(uh,void 0,!0),uE={// Param: a
a:BigInt(-1),// d is equal to -121665/121666 over finite field.
// Negative number is P - number, and division is invert(number, P)
d:BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),Fp:uL,// Subgroup order: how many points curve has
// 2n**252n + 27742317777372353535851937790883648493n;
n:BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),// Cofactor
h:BigInt(8),// Base point (x, y) aka generator point
Gx:BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),Gy:BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),hash:cW.sha512,randomBytes:sF.randomBytes,adjustScalarBytes:uz,uvRatio:// Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
// Constant-time, u/√v
uk};function uN(e,t,r){if(t.length>255)throw Error("Context is too big");return(0,sF.concatBytes)((0,sF.utf8ToBytes)("SigEd25519 no Ed25519 collisions"),new Uint8Array([r?1:0,t.length]),t,e)}/**
 * Converts ed25519 public key to x25519 public key. Uses formula:
 * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`
 * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`
 * @example
 *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());
 *   const aPriv = x25519.utils.randomPrivateKey();
 *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))
 */function uS(e){let{y:t}=cG.ed25519.ExtendedPoint.fromHex(e),r=BigInt(1);return uL.toBytes(uL.create((r+t)*uL.inv(r-t)))}cG.ed25519=(0,c3.twistedEdwards)(uE),cG.ed25519ctx=(0,c3.twistedEdwards)({...uE,domain:uN}),cG.ed25519ph=(0,c3.twistedEdwards)({...uE,domain:uN,prehash:cW.sha512}),cG.x25519=(0,un.montgomery)({P:uh,a:BigInt(486662),montgomeryBits:255,nByteLength:32,Gu:BigInt(9),powPminus2:e=>{// x^(p-2) aka x^(2^255-21)
let{pow_p_5_8:t,b2:r}=uT(e);return(0,c8.mod)((0,c8.pow2)(t,BigInt(3),uh)*r,uh)},adjustScalarBytes:uz,randomBytes:sF.randomBytes}),cG.edwardsToMontgomeryPub=uS,cG.edwardsToMontgomery=uS,cG.edwardsToMontgomeryPriv=/**
 * Converts ed25519 secret key to x25519 secret key.
 * @example
 *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());
 *   const aPriv = ed25519.utils.randomPrivateKey();
 *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)
 */function(e){let t=uE.hash(e.subarray(0,32));return uE.adjustScalarBytes(t).subarray(0,32)};// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)
// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since
// SageMath returns different root first and everything falls apart
const uM=(uL.ORDER+BigInt(3))/BigInt(8),uj=uL.pow(ug,uM),uH=uL.sqrt(uL.neg(uL.ONE)),uR=(uL.ORDER-BigInt(5))/BigInt(8),uI=BigInt(486662),uB=(0,c8.FpSqrtEven)(uL,uL.neg(BigInt(486664))),uV=(0,uo.createHasher)(cG.ed25519.ExtendedPoint,e=>(function(e){let t,r,n,a,i,o,s,l,c,u,d,f,p,h,b,y,m,g,v,x,w;let{xMn:P,xMd:O,yMn:T,yMd:z}=(t=uL.sqr(e),t=uL.mul(t,ug),r=uL.add(t,uL.ONE),n=uL.neg(uI),a=uL.sqr(r),i=uL.mul(a,r),o=uL.mul(t,uI),o=uL.mul(o,n),o=uL.add(o,a),o=uL.mul(o,n),s=uL.sqr(i),a=uL.sqr(s),s=uL.mul(s,i),s=uL.mul(s,o),a=uL.mul(a,s),l=uL.pow(a,uR),l=uL.mul(l,s),c=uL.mul(l,uH),a=uL.sqr(l),a=uL.mul(a,i),u=uL.eql(a,o),d=uL.cmov(c,l,u),f=uL.mul(n,t),p=uL.mul(l,e),p=uL.mul(p,uj),h=uL.mul(p,uH),b=uL.mul(o,t),a=uL.sqr(p),a=uL.mul(a,i),y=uL.eql(a,b),m=uL.cmov(h,p,y),a=uL.sqr(d),a=uL.mul(a,i),g=uL.eql(a,o),v=uL.cmov(f,n,g),x=uL.cmov(m,d,g),w=uL.isOdd(x),{xMn:v,xMd:r,yMn:x=uL.cmov(x,uL.neg(x),g!==w),yMd:um}),k=uL.mul(P,z);//  1.  (xMn, xMd, yMn, yMd) =
    k=uL.mul(k,uB);let L=uL.mul(O,T),E=uL.sub(P,O),N=uL.add(P,O),S=uL.mul(L,N),M=uL.eql(S,uL.ZERO);//  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM
    k=uL.cmov(k,uL.ZERO,M),L=uL.cmov(L,uL.ONE,M),E=uL.cmov(E,uL.ONE,M),N=uL.cmov(N,uL.ONE,M);let j=uL.invertBatch([L,N]);// batch division
    return{x:uL.mul(k,j[0]),y:uL.mul(E,j[1])};//  13. return (xn, xd, yn, yd)
    })(e[0]),{DST:"edwards25519_XMD:SHA-512_ELL2_RO_",encodeDST:"edwards25519_XMD:SHA-512_ELL2_NU_",p:uL.ORDER,m:1,k:128,expand:"xmd",hash:cW.sha512});// 1. c1 = (q + 3) / 8       # Integer arithmetic
function uX(e){if(!(e instanceof uW))throw Error("RistrettoPoint expected")}cG.hashToCurve=uV.hashToCurve,cG.encodeToCurve=uV.encodeToCurve;// √(ad - 1)
const uU=BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235"),uA=BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578"),uD=BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838"),uC=BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952"),uF=e=>uk(um,e),uZ=BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),uq=e=>cG.ed25519.CURVE.Fp.create((0,c9.bytesToNumberLE)(e)&uZ);// Computes Elligator map for Ristretto
// https://ristretto.group/formulas/elligator.html
function uG(e){let{d:t}=cG.ed25519.CURVE,r=cG.ed25519.CURVE.Fp.ORDER,n=cG.ed25519.CURVE.Fp.create,a=n(ub*e*e),i=n((a+um)*uD),o=BigInt(-1),s=n((o-t*a)*n(a+t)),{isValid:l,value:c}=uk(i,s),u=n(c*e);(0,c8.isNegativeLE)(u,r)||(u=n(-u)),l||(c=u),l||(o=a);let d=n(o*(a-um)*uC-s),f=c*c,p=n((c+c)*s),h=n(d*uU),b=n(um-f),y=n(um+f);// 9
return new cG.ed25519.ExtendedPoint(n(p*y),n(b*h),n(h*y),n(p*b))}/**
 * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be
 * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.
 * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,
 * but it should work in its own namespace: do not combine those two.
 * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448
 */class uW{// Private property to discourage combining ExtendedPoint + RistrettoPoint
// Always use Ristretto encoding/decoding instead.
constructor(e){this.ep=e}static fromAffine(e){return new uW(cG.ed25519.ExtendedPoint.fromAffine(e))}/**
     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.
     * The hash-to-group operation applies Elligator twice and adds the results.
     * **Note:** this is one-way map, there is no conversion from point to hash.
     * https://ristretto.group/formulas/elligator.html
     * @param hex 64-byte output of a hash function
     */static hashToCurve(e){e=(0,c9.ensureBytes)("ristrettoHash",e,64);let t=uq(e.slice(0,32)),r=uG(t),n=uq(e.slice(32,64)),a=uG(n);return new uW(r.add(a))}/**
     * Converts ristretto-encoded string to ristretto point.
     * https://ristretto.group/formulas/decoding.html
     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
     */static fromHex(e){e=(0,c9.ensureBytes)("ristrettoHex",e,32);let{a:t,d:r}=cG.ed25519.CURVE,n=cG.ed25519.CURVE.Fp.ORDER,a=cG.ed25519.CURVE.Fp.create,i="RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint",o=uq(e);// 1. Check that s_bytes is the canonical encoding of a field element, or else abort.
// 3. Check that s is non-negative, or else abort
if(!(0,c9.equalBytes)((0,c9.numberToBytesLE)(o,32),e)||(0,c8.isNegativeLE)(o,n))throw Error(i);let s=a(o*o),l=a(um+t*s),c=a(um-t*s),u=a(l*l),d=a(c*c),f=a(t*r*u-d),{isValid:p,value:h}=uF(a(f*d)),b=a(h*c),y=a(h*b*f),m=a((o+o)*b);(0,c8.isNegativeLE)(m,n)&&(m=a(-m));// 10
let g=a(l*y),v=a(m*g);// 11
if(!p||(0,c8.isNegativeLE)(v,n)||g===uy)throw Error(i);return new uW(new cG.ed25519.ExtendedPoint(m,g,um,v))}/**
     * Encodes ristretto point to Uint8Array.
     * https://ristretto.group/formulas/encoding.html
     */toRawBytes(){let e,{ex:t,ey:r,ez:n,et:a}=this.ep,i=cG.ed25519.CURVE.Fp.ORDER,o=cG.ed25519.CURVE.Fp.create,s=o(o(n+r)*o(n-r)),l=o(t*r),c=o(l*l),{value:u}=uF(o(s*c)),d=o(u*s),f=o(u*l),p=o(d*f*a);if((0,c8.isNegativeLE)(a*p,i)){let n=o(r*ub),a=o(t*ub);t=n,r=a,e=o(d*uA)}else e=f;// 8
(0,c8.isNegativeLE)(t*p,i)&&(r=o(-r));let h=o((n-r)*e);// 10 (check footer's note, no sqrt(-a))
return(0,c8.isNegativeLE)(h,i)&&(h=o(-h)),(0,c9.numberToBytesLE)(h,32);// 11
}toHex(){return(0,c9.bytesToHex)(this.toRawBytes())}toString(){return this.toHex()}// Compare one point to another.
equals(e){uX(e);let{ex:t,ey:r}=this.ep,{ex:n,ey:a}=e.ep,i=cG.ed25519.CURVE.Fp.create,o=i(t*a)===i(r*n),s=i(r*a)===i(t*n);return o||s}add(e){return uX(e),new uW(this.ep.add(e.ep))}subtract(e){return uX(e),new uW(this.ep.subtract(e.ep))}multiply(e){return new uW(this.ep.multiply(e))}multiplyUnsafe(e){return new uW(this.ep.multiplyUnsafe(e))}double(){return new uW(this.ep.double())}negate(){return new uW(this.ep.negate())}}function uY(e,t){if(!sb||!t&&ck()){let t=cr(e);return{publicKey:t.slice(32),secretKey:t.slice(0,64)}}let r=(0,cG.ed25519).getPublicKey(e);return{publicKey:r,secretKey:sH([e,r])}}cG.RistrettoPoint=(uW.BASE||(uW.BASE=new uW(cG.ed25519.ExtendedPoint.BASE)),uW.ZERO||(uW.ZERO=new uW(cG.ed25519.ExtendedPoint.ZERO)),uW),cG.hashToRistretto255=(e,t)=>{let r=t.DST,n="string"==typeof r?(0,sF.utf8ToBytes)(r):r,a=(0,uo.expand_message_xmd)(e,n,64,cW.sha512),i=uW.hashToCurve(a);return i},cG.hash_to_ristretto255=cG.hashToRistretto255;var uK={};Object.defineProperty(uK,"__esModule",{value:!0}),uK.shake256=uK.shake128=uK.keccak_512=uK.keccak_384=uK.keccak_256=uK.keccak_224=uK.sha3_512=uK.sha3_384=uK.sha3_256=uK.sha3_224=uK.Keccak=uK.keccakP=void 0;// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.
// It's called a sponge function.
// Various per round constants calculations
const[uJ,uQ,u_]=[[],[],[]],u$=/* @__PURE__ */BigInt(0),u0=/* @__PURE__ */BigInt(1),u1=/* @__PURE__ */BigInt(2),u2=/* @__PURE__ */BigInt(7),u5=/* @__PURE__ */BigInt(256),u3=/* @__PURE__ */BigInt(113);for(let e=0,t=u0,r=1,n=0;e<24;e++){// Pi
[r,n]=[n,(2*r+3*n)%5],uJ.push(2*(5*n+r)),// Rotational
uQ.push((e+1)*(e+2)/2%64);// Iota
let a=u$;for(let e=0;e<7;e++)(t=(t<<u0^(t>>u2)*u3)%u5)&u1&&(a^=u0<<(u0<</* @__PURE__ */BigInt(e))-u0);u_.push(a)}const[u8,u9]=/* @__PURE__ */(0,s1.split)(u_,!0),u6=(e,t,r)=>r>32?(0,s1.rotlBH)(e,t,r):(0,s1.rotlSH)(e,t,r),u4=(e,t,r)=>r>32?(0,s1.rotlBL)(e,t,r):(0,s1.rotlSL)(e,t,r);// Same as keccakf1600, but allows to skip some rounds
function u7(e,t=24){let r=new Uint32Array(10);// NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
for(let n=24-t;n<24;n++){// Theta θ
for(let t=0;t<10;t++)r[t]=e[t]^e[t+10]^e[t+20]^e[t+30]^e[t+40];for(let t=0;t<10;t+=2){let n=(t+8)%10,a=(t+2)%10,i=r[a],o=r[a+1],s=u6(i,o,1)^r[n],l=u4(i,o,1)^r[n+1];for(let r=0;r<50;r+=10)e[t+r]^=s,e[t+r+1]^=l}// Rho (ρ) and Pi (π)
let t=e[2],a=e[3];for(let r=0;r<24;r++){let n=uQ[r],i=u6(t,a,n),o=u4(t,a,n),s=uJ[r];t=e[s],a=e[s+1],e[s]=i,e[s+1]=o}// Chi (χ)
for(let t=0;t<50;t+=10){for(let n=0;n<10;n++)r[n]=e[t+n];for(let n=0;n<10;n++)e[t+n]^=~r[(n+2)%10]&r[(n+4)%10]}// Iota (ι)
e[0]^=u8[n],e[1]^=u9[n]}r.fill(0)}uK.keccakP=u7;class de extends sF.Hash{// NOTE: we accept arguments in bytes instead of bits here.
constructor(e,t,r,n=!1,a=24){// 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
if(super(),this.blockLen=e,this.suffix=t,this.outputLen=r,this.enableXOF=n,this.rounds=a,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,// Can be passed from user as dkLen
(0,sB.number)(r),0>=this.blockLen||this.blockLen>=200)throw Error("Sha3 supports only keccak-f1600 function");this.state=new Uint8Array(200),this.state32=(0,sF.u32)(this.state)}keccak(){u7(this.state32,this.rounds),this.posOut=0,this.pos=0}update(e){(0,sB.exists)(this);let{blockLen:t,state:r}=this;e=(0,sF.toBytes)(e);let n=e.length;for(let a=0;a<n;){let i=Math.min(t-this.pos,n-a);for(let t=0;t<i;t++)r[this.pos++]^=e[a++];this.pos===t&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;let{state:e,suffix:t,pos:r,blockLen:n}=this;// Do the padding
e[r]^=t,(128&t)!=0&&r===n-1&&this.keccak(),e[n-1]^=128,this.keccak()}writeInto(e){(0,sB.exists)(this,!1),(0,sB.bytes)(e),this.finish();let t=this.state,{blockLen:r}=this;for(let n=0,a=e.length;n<a;){this.posOut>=r&&this.keccak();let i=Math.min(r-this.posOut,a-n);e.set(t.subarray(this.posOut,this.posOut+i),n),this.posOut+=i,n+=i}return e}xofInto(e){// Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
if(!this.enableXOF)throw Error("XOF is not possible for this instance");return this.writeInto(e)}xof(e){return(0,sB.number)(e),this.xofInto(new Uint8Array(e))}digestInto(e){if((0,sB.output)(e,this),this.finished)throw Error("digest() was already called");return this.writeInto(e),this.destroy(),e}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(e){let{blockLen:t,suffix:r,outputLen:n,rounds:a,enableXOF:i}=this;return e||(e=new de(t,r,n,i,a)),e.state32.set(this.state32),e.pos=this.pos,e.posOut=this.posOut,e.finished=this.finished,e.rounds=a,// Suffix can change in cSHAKE
e.suffix=r,e.outputLen=n,e.enableXOF=i,e.destroyed=this.destroyed,e}}uK.Keccak=de;const dt=(e,t,r)=>(0,sF.wrapConstructor)(()=>new de(t,e,r));uK.sha3_224=dt(6,144,28),/**
 * SHA3-256 hash function
 * @param message - that would be hashed
 */uK.sha3_256=dt(6,136,32),uK.sha3_384=dt(6,104,48),uK.sha3_512=dt(6,72,64),uK.keccak_224=dt(1,144,28),/**
 * keccak-256 hash function. Different from SHA3-256.
 * @param message - that would be hashed
 */uK.keccak_256=dt(1,136,32),uK.keccak_384=dt(1,104,48),uK.keccak_512=dt(1,72,64);const dr=(e,t,r)=>(0,sF.wrapXOFConstructorWithOpts)((n={})=>new de(t,e,void 0===n.dkLen?r:n.dkLen,!0));uK.shake128=dr(31,168,16),uK.shake256=dr(31,136,32);const dn=cM({256:cx,512:cw},{256:uK.keccak_256,512:uK.keccak_512});var da={};Object.defineProperty(da,"__esModule",{value:!0}),da.encodeToCurve=da.hashToCurve=da.schnorr=da.secp256k1=void 0;var di={};Object.defineProperty(di,"__esModule",{value:!0}),di.sha224=di.sha256=void 0;// SHA2-256 need to try 2^128 hashes to execute birthday attack.
// BTC network is doing 2^67 hashes/sec as per early 2023.
// Choice: a ? b : c
const ds=(e,t,r)=>e&t^~e&r,dl=(e,t,r)=>e&t^e&r^t&r,dc=/* @__PURE__ */new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),du=/* @__PURE__ */new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),dd=/* @__PURE__ */new Uint32Array(64);class df extends cY.SHA2{constructor(){super(64,32,8,!1),// We cannot use array here since array allows indexing by variable
// which means optimizer/compiler cannot use registers.
this.A=0|du[0],this.B=0|du[1],this.C=0|du[2],this.D=0|du[3],this.E=0|du[4],this.F=0|du[5],this.G=0|du[6],this.H=0|du[7]}get(){let{A:e,B:t,C:r,D:n,E:a,F:i,G:o,H:s}=this;return[e,t,r,n,a,i,o,s]}// prettier-ignore
set(e,t,r,n,a,i,o,s){this.A=0|e,this.B=0|t,this.C=0|r,this.D=0|n,this.E=0|a,this.F=0|i,this.G=0|o,this.H=0|s}process(e,t){// Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
for(let r=0;r<16;r++,t+=4)dd[r]=e.getUint32(t,!1);for(let e=16;e<64;e++){let t=dd[e-15],r=dd[e-2],n=(0,sF.rotr)(t,7)^(0,sF.rotr)(t,18)^t>>>3,a=(0,sF.rotr)(r,17)^(0,sF.rotr)(r,19)^r>>>10;dd[e]=a+dd[e-7]+n+dd[e-16]|0}// Compression function main loop, 64 rounds
let{A:r,B:n,C:a,D:i,E:o,F:s,G:l,H:c}=this;for(let e=0;e<64;e++){let t=(0,sF.rotr)(o,6)^(0,sF.rotr)(o,11)^(0,sF.rotr)(o,25),u=c+t+ds(o,s,l)+dc[e]+dd[e]|0,d=(0,sF.rotr)(r,2)^(0,sF.rotr)(r,13)^(0,sF.rotr)(r,22),f=d+dl(r,n,a)|0;c=l,l=s,s=o,o=i+u|0,i=a,a=n,n=r,r=u+f|0}// Add the compressed chunk to the current hash value
r=r+this.A|0,n=n+this.B|0,a=a+this.C|0,i=i+this.D|0,o=o+this.E|0,s=s+this.F|0,l=l+this.G|0,c=c+this.H|0,this.set(r,n,a,i,o,s,l,c)}roundClean(){dd.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
class dp extends df{constructor(){super(),this.A=-1056596264,this.B=914150663,this.C=812702999,this.D=-150054599,this.E=-4191439,this.F=1750603025,this.G=1694076839,this.H=-1090891868,this.outputLen=28}}/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */di.sha256=(0,sF.wrapConstructor)(()=>new df),di.sha224=(0,sF.wrapConstructor)(()=>new dp);var c8=A("jfV5v"),dh={};Object.defineProperty(dh,"__esModule",{value:!0}),dh.mapToCurveSimpleSWU=dh.SWUFpSqrtRatio=dh.weierstrass=dh.weierstrassPoints=dh.DER=void 0;var c8=A("jfV5v"),c9=(A("j2PHb"),A("j2PHb")),c6=A("lr2C3");// ASN.1 DER encoding utilities
const{bytesToNumberBE:db,hexToBytes:dy}=c9;dh.DER={// asn.1 DER encoding utils
Err:class extends Error{constructor(e=""){super(e)}},_parseInt(e){let{Err:t}=dh.DER;if(e.length<2||2!==e[0])throw new t("Invalid signature integer tag");let r=e[1],n=e.subarray(2,r+2);if(!r||n.length!==r)throw new t("Invalid signature integer: wrong length");// https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
// since we always use positive integers here. It must always be empty:
// - add zero byte if exists
// - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
if(128&n[0])throw new t("Invalid signature integer: negative");if(0===n[0]&&!(128&n[1]))throw new t("Invalid signature integer: unnecessary leading zero");return{d:db(n),l:e.subarray(r+2)};// d is data, l is left
},toSig(e){// parse DER signature
let{Err:t}=dh.DER,r="string"==typeof e?dy(e):e;if(!c9.isBytes(r))throw Error("ui8a expected");let n=r.length;if(n<2||48!=r[0])throw new t("Invalid signature tag");if(r[1]!==n-2)throw new t("Invalid signature: incorrect length");let{d:a,l:i}=dh.DER._parseInt(r.subarray(2)),{d:o,l:s}=dh.DER._parseInt(i);if(s.length)throw new t("Invalid signature: left bytes after parsing");return{r:a,s:o}},hexFromSig(e){// Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
let t=e=>8&Number.parseInt(e[0],16)?"00"+e:e,r=e=>{let t=e.toString(16);return 1&t.length?`0${t}`:t},n=t(r(e.s)),a=t(r(e.r)),i=n.length/2,o=a.length/2,s=r(i),l=r(o);return`30${r(o+i+4)}02${l}${a}02${s}${n}`}};// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const dm=BigInt(0),dg=BigInt(1),dv=BigInt(2),dx=BigInt(3),dw=BigInt(4);function dP(e){let t=function(e){let t=(0,c6.validateBasic)(e);c9.validateObject(t,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});let{endo:r,Fp:n,a:a}=t;if(r){if(!n.eql(a,n.ZERO))throw Error("Endomorphism can only be defined for Koblitz curves that have a=0");if("object"!=typeof r||"bigint"!=typeof r.beta||"function"!=typeof r.splitScalar)throw Error("Expected endomorphism with beta: bigint and splitScalar: function")}return Object.freeze({...t})}(e),{Fp:r}=t,n=t.toBytes||((e,t,n)=>{let a=t.toAffine();return c9.concatBytes(Uint8Array.from([4]),r.toBytes(a.x),r.toBytes(a.y))}),a=t.fromBytes||(e=>{// const head = bytes[0];
let t=e.subarray(1),n=r.fromBytes(t.subarray(0,r.BYTES)),a=r.fromBytes(t.subarray(r.BYTES,2*r.BYTES));return{x:n,y:a}});/**
     * y² = x³ + ax + b: Short weierstrass curve formula
     * @returns y²
     */function i(e){let{a:n,b:a}=t,i=r.sqr(e),o=r.mul(i,e);return r.add(r.add(o,r.mul(e,n)),a);// x3 + a * x + b
}// Validate whether the passed curve params are valid.
// We check if curve equation works for generator point.
// `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
// ProjectivePoint class has not been initialized yet.
if(!r.eql(r.sqr(t.Gy),i(t.Gx)))throw Error("bad generator point: equation left != right");// Valid group elements reside in range 1..n-1
function o(e){return"bigint"==typeof e&&dm<e&&e<t.n}function s(e){if(!o(e))throw Error("Expected valid bigint: 0 < bigint < curve.n")}// Validates if priv key is valid and converts it to bigint.
// Supports options allowedPrivateKeyLengths and wrapPrivateKey.
function l(e){let r;let{allowedPrivateKeyLengths:n,nByteLength:a,wrapPrivateKey:i,n:o}=t;if(n&&"bigint"!=typeof e){// Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
if(c9.isBytes(e)&&(e=c9.bytesToHex(e)),"string"!=typeof e||!n.includes(e.length))throw Error("Invalid key");e=e.padStart(2*a,"0")}try{r="bigint"==typeof e?e:c9.bytesToNumberBE((0,c9.ensureBytes)("private key",e,a))}catch(t){throw Error(`private key must be ${a} bytes, hex or bigint, not ${typeof e}`)}return i&&(r=c8.mod(r,o)),s(r),r}let c=new Map;function u(e){if(!(e instanceof d))throw Error("ProjectivePoint expected")}/**
     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
     * Default Point works in 2d / affine coordinates: (x, y)
     * We're doing calculations in projective, because its operations don't require costly inversion.
     */class d{constructor(e,t,n){if(this.px=e,this.py=t,this.pz=n,null==e||!r.isValid(e))throw Error("x required");if(null==t||!r.isValid(t))throw Error("y required");if(null==n||!r.isValid(n))throw Error("z required")}// Does not validate if the point is on-curve.
// Use fromHex instead, or call assertValidity() later.
static fromAffine(e){let{x:t,y:n}=e||{};if(!e||!r.isValid(t)||!r.isValid(n))throw Error("invalid affine point");if(e instanceof d)throw Error("projective point not allowed");let a=e=>r.eql(e,r.ZERO);return(// fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
a(t)&&a(n)?d.ZERO:new d(t,n,r.ONE))}get x(){return this.toAffine().x}get y(){return this.toAffine().y}/**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */static normalizeZ(e){let t=r.invertBatch(e.map(e=>e.pz));return e.map((e,r)=>e.toAffine(t[r])).map(d.fromAffine)}/**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */static fromHex(e){let t=d.fromAffine(a((0,c9.ensureBytes)("pointHex",e)));return t.assertValidity(),t}// Multiplies generator point by privateKey.
static fromPrivateKey(e){return d.BASE.multiply(l(e))}// "Private method", don't use it directly
_setWindowSize(e){this._WINDOW_SIZE=e,c.delete(this)}// A point on curve is valid if it conforms to equation.
assertValidity(){if(this.is0()){// (0, 1, 0) aka ZERO is invalid in most contexts.
// In BLS, ZERO can be serialized, so we allow it.
// (0, 0, 0) is wrong representation of ZERO and is always invalid.
if(t.allowInfinityPoint&&!r.is0(this.py))return;throw Error("bad point: ZERO")}// Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
let{x:e,y:n}=this.toAffine();// Check if x, y are valid field elements
if(!r.isValid(e)||!r.isValid(n))throw Error("bad point: x or y not FE");let a=r.sqr(n),o=i(e);// y²
if(!r.eql(a,o))throw Error("bad point: equation left != right");if(!this.isTorsionFree())throw Error("bad point: not in prime-order subgroup")}hasEvenY(){let{y:e}=this.toAffine();if(r.isOdd)return!r.isOdd(e);throw Error("Field doesn't support isOdd")}/**
         * Compare one point to another.
         */equals(e){u(e);let{px:t,py:n,pz:a}=this,{px:i,py:o,pz:s}=e,l=r.eql(r.mul(t,s),r.mul(i,a)),c=r.eql(r.mul(n,s),r.mul(o,a));return l&&c}/**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */negate(){return new d(this.px,r.neg(this.py),this.pz)}// Renes-Costello-Batina exception-free doubling formula.
// There is 30% faster Jacobian formula, but it is not complete.
// https://eprint.iacr.org/2015/1060, algorithm 3
// Cost: 8M + 3S + 3*a + 2*b3 + 15add.
double(){let{a:e,b:n}=t,a=r.mul(n,dx),{px:i,py:o,pz:s}=this,l=r.ZERO,c=r.ZERO,u=r.ZERO,f=r.mul(i,i),p=r.mul(o,o),h=r.mul(s,s),b=r.mul(i,o);return b=r.add(b,b),u=r.mul(i,s),u=r.add(u,u),l=r.mul(e,u),c=r.mul(a,h),c=r.add(l,c),l=r.sub(p,c),c=r.add(p,c),c=r.mul(l,c),l=r.mul(b,l),u=r.mul(a,u),h=r.mul(e,h),b=r.sub(f,h),b=r.mul(e,b),b=r.add(b,u),u=r.add(f,f),f=r.add(u,f),f=r.add(f,h),f=r.mul(f,b),c=r.add(c,f),h=r.mul(o,s),h=r.add(h,h),f=r.mul(h,b),l=r.sub(l,f),u=r.mul(h,p),u=r.add(u,u),new d(l,c,u=r.add(u,u))}// Renes-Costello-Batina exception-free addition formula.
// There is 30% faster Jacobian formula, but it is not complete.
// https://eprint.iacr.org/2015/1060, algorithm 1
// Cost: 12M + 0S + 3*a + 3*b3 + 23add.
add(e){u(e);let{px:n,py:a,pz:i}=this,{px:o,py:s,pz:l}=e,c=r.ZERO,f=r.ZERO,p=r.ZERO,h=t.a,b=r.mul(t.b,dx),y=r.mul(n,o),m=r.mul(a,s),g=r.mul(i,l),v=r.add(n,a),x=r.add(o,s);v=r.mul(v,x),x=r.add(y,m),v=r.sub(v,x),x=r.add(n,i);let w=r.add(o,l);// step 10
return x=r.mul(x,w),w=r.add(y,g),x=r.sub(x,w),w=r.add(a,i),c=r.add(s,l),w=r.mul(w,c),c=r.add(m,g),w=r.sub(w,c),p=r.mul(h,x),c=r.mul(b,g),p=r.add(c,p),c=r.sub(m,p),p=r.add(m,p),f=r.mul(c,p),m=r.add(y,y),m=r.add(m,y),g=r.mul(h,g),x=r.mul(b,x),m=r.add(m,g),g=r.sub(y,g),g=r.mul(h,g),x=r.add(x,g),y=r.mul(m,x),f=r.add(f,y),y=r.mul(w,x),c=r.mul(v,c),c=r.sub(c,y),y=r.mul(v,m),p=r.mul(w,p),new d(c,f,p=r.add(p,y))}subtract(e){return this.add(e.negate())}is0(){return this.equals(d.ZERO)}wNAF(e){return p.wNAFCached(this,c,e,e=>{let t=r.invertBatch(e.map(e=>e.pz));return e.map((e,r)=>e.toAffine(t[r])).map(d.fromAffine)})}/**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */multiplyUnsafe(e){let n=d.ZERO;if(e===dm)return n;if(s(e),e===dg)return this;let{endo:a}=t;if(!a)return p.unsafeLadder(this,e);// Apply endomorphism
let{k1neg:i,k1:o,k2neg:l,k2:c}=a.splitScalar(e),u=n,f=n,h=this;for(;o>dm||c>dm;)o&dg&&(u=u.add(h)),c&dg&&(f=f.add(h)),h=h.double(),o>>=dg,c>>=dg;return i&&(u=u.negate()),l&&(f=f.negate()),f=new d(r.mul(f.px,a.beta),f.py,f.pz),u.add(f)}/**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */multiply(e){let n,a;s(e);let{endo:i}=t;if(i){let{k1neg:t,k1:o,k2neg:s,k2:l}=i.splitScalar(e),{p:c,f:u}=this.wNAF(o),{p:f,f:h}=this.wNAF(l);c=p.constTimeNegate(t,c),f=p.constTimeNegate(s,f),f=new d(r.mul(f.px,i.beta),f.py,f.pz),n=c.add(f),a=u.add(h)}else{let{p:t,f:r}=this.wNAF(e);n=t,a=r}// Normalize `z` for both points, but return only real one
return d.normalizeZ([n,a])[0]}/**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */multiplyAndAddUnsafe(e,t,r){let n=d.BASE,a=(e,t// Select faster multiply() method
)=>t!==dm&&t!==dg&&e.equals(n)?e.multiply(t):e.multiplyUnsafe(t),i=a(this,t).add(a(e,r));// No Strauss-Shamir trick: we have 10% faster G precomputes
return i.is0()?void 0:i}// Converts Projective point to affine (x, y) coordinates.
// Can accept precomputed Z^-1 - for example, from invertBatch.
// (x, y, z) ∋ (x=x/z, y=y/z)
toAffine(e){let{px:t,py:n,pz:a}=this,i=this.is0();// If invZ was 0, we return zero point. However we still want to execute
// all operations, so we replace invZ with a random number, 1.
null==e&&(e=i?r.ONE:r.inv(a));let o=r.mul(t,e),s=r.mul(n,e),l=r.mul(a,e);if(i)return{x:r.ZERO,y:r.ZERO};if(!r.eql(l,r.ONE))throw Error("invZ was invalid");return{x:o,y:s}}isTorsionFree(){let{h:e,isTorsionFree:r}=t;if(e===dg)return!0;// No subgroups, always torsion-free
if(r)return r(d,this);throw Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){let{h:e,clearCofactor:r}=t;return e===dg?this:r?r(d,this):this.multiplyUnsafe(t.h)// Fast-path
}toRawBytes(e=!0){return this.assertValidity(),n(d,this,e)}toHex(e=!0){return c9.bytesToHex(this.toRawBytes(e))}}d.BASE=new d(t.Gx,t.Gy,r.ONE),d.ZERO=new d(r.ZERO,r.ONE,r.ZERO);let f=t.nBitLength,p=(0,c6.wNAF)(d,t.endo?Math.ceil(f/2):f);// Validate if generator point is on curve
return{CURVE:t,ProjectivePoint:d,normPrivateKeyToScalar:l,weierstrassEquation:i,isWithinCurveOrder:o}}/**
 * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.
 * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.
 * b = True and y = sqrt(u / v) if (u / v) is square in F, and
 * b = False and y = sqrt(Z * (u / v)) otherwise.
 * @param Fp
 * @param Z
 * @returns
 */function dO(e,t){// Generic implementation
let r=e.ORDER,n=dm;for(let e=r-dg;e%dv===dm;e/=dv)n+=dg;let a=n,i=dv<<a-dg-dg,o=i*dv,s=(r-dg)/o,l=(s-dg)/dv,c=o-dg,u=e.pow(t,s),d=e.pow(t,(s+dg)/dv),f=(t,r)=>{let n=u,o=e.pow(r,c),s=e.sqr(o);// 1. tv1 = c6
s=e.mul(s,r);let f=e.mul(t,s);// 5. tv5 = u * tv3
f=e.pow(f,l),f=e.mul(f,o),o=e.mul(f,r),s=e.mul(f,t);let p=e.mul(s,o);// 10. tv4 = tv3 * tv2
f=e.pow(p,i);let h=e.eql(f,e.ONE);// 12. isQR = tv5 == 1
o=e.mul(s,d),f=e.mul(p,n),s=e.cmov(o,s,h),p=e.cmov(f,p,h);// 17. for i in (c1, c1 - 1, ..., 2):
for(let t=a;t>dg;t--){let r=t-dv;// 18.    tv5 = i - 2
r=dv<<r-dg;let a=e.pow(p,r),i=e.eql(a,e.ONE);// 20.    tv5 = tv4^tv5
o=e.mul(s,n),n=e.mul(n,n),a=e.mul(p,n),s=e.cmov(o,s,i),p=e.cmov(a,p,i)}return{isValid:h,value:s}};// 1. c1, the largest integer such that 2^c1 divides q - 1.
if(e.ORDER%dw===dx){// sqrt_ratio_3mod4(u, v)
let r=(e.ORDER-dx)/dw,n=e.sqrt(e.neg(t));// 1. c1 = (q - 3) / 4     # Integer arithmetic
f=(t,a)=>{let i=e.sqr(a),o=e.mul(t,a);// 1. tv1 = v^2
i=e.mul(i,o);// 3. tv1 = tv1 * tv2
let s=e.pow(i,r);// 4. y1 = tv1^c1
s=e.mul(s,o);// 5. y1 = y1 * tv2
let l=e.mul(s,n),c=e.mul(e.sqr(s),a),u=e.eql(c,t),d=e.cmov(l,s,u);// 6. y2 = y1 * c2
return{isValid:u,value:d};// 11. return (isQR, y) isQR ? y : y*c2
}}// No curves uses that
// if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8
return f}dh.weierstrassPoints=dP,dh.weierstrass=function(e){let t=function(e){let t=(0,c6.validateBasic)(e);return c9.validateObject(t,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...t})}(e),{Fp:r,n:n}=t,a=r.BYTES+1,i=2*r.BYTES+1;function o(e){return c8.mod(e,n)}function s(e){return c8.invert(e,n)}let{ProjectivePoint:l,normPrivateKeyToScalar:c,weierstrassEquation:u,isWithinCurveOrder:d}=dP({...t,toBytes(e,t,n){let a=t.toAffine(),i=r.toBytes(a.x),o=c9.concatBytes;return n?o(Uint8Array.from([t.hasEvenY()?2:3]),i):o(Uint8Array.from([4]),i,r.toBytes(a.y))},fromBytes(e){let t=e.length,n=e[0],o=e.subarray(1);// this.assertValidity() is done inside of fromHex
if(t===a&&(2===n||3===n)){let e=c9.bytesToNumberBE(o);if(!(dm<e&&e<r.ORDER))throw Error("Point is not on curve");let t=u(e),a=r.sqrt(t),i=(a&dg)===dg;// y² = x³ + ax + b
return(1&n)==1!==i&&(a=r.neg(a)),{x:e,y:a}}if(t===i&&4===n){let e=r.fromBytes(o.subarray(0,r.BYTES)),t=r.fromBytes(o.subarray(r.BYTES,2*r.BYTES));return{x:e,y:t}}throw Error(`Point of length ${t} was invalid. Expected ${a} compressed bytes or ${i} uncompressed bytes`)}}),f=e=>c9.bytesToHex(c9.numberToBytesBE(e,t.nByteLength));function p(e){let t=n>>dg;return e>t}// slice bytes num
let h=(e,t,r)=>c9.bytesToNumberBE(e.slice(t,r));/**
     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
     */class b{constructor(e,t,r){this.r=e,this.s=t,this.recovery=r,this.assertValidity()}// pair (bytes of r, bytes of s)
static fromCompact(e){let r=t.nByteLength;return new b(h(e=(0,c9.ensureBytes)("compactSignature",e,2*r),0,r),h(e,r,2*r))}// DER encoded ECDSA signature
// https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
static fromDER(e){let{r:t,s:r}=dh.DER.toSig((0,c9.ensureBytes)("DER",e));return new b(t,r)}assertValidity(){// can use assertGE here
if(!d(this.r))throw Error("r must be 0 < r < CURVE.n");if(!d(this.s))throw Error("s must be 0 < s < CURVE.n")}addRecoveryBit(e){return new b(this.r,this.s,e)}recoverPublicKey(e){let{r:n,s:a,recovery:i}=this,c=g((0,c9.ensureBytes)("msgHash",e));if(null==i||![0,1,2,3].includes(i))throw Error("recovery id invalid");let u=2===i||3===i?n+t.n:n;if(u>=r.ORDER)throw Error("recovery id 2 or 3 invalid");let d=(1&i)==0?"02":"03",p=l.fromHex(d+f(u)),h=s(u),b=o(-c*h),y=o(a*h),m=l.BASE.multiplyAndAddUnsafe(p,b,y);if(!m)throw Error("point at infinify");// unsafe is fine: no priv data leaked
return m.assertValidity(),m}// Signatures should be low-s, to prevent malleability.
hasHighS(){return p(this.s)}normalizeS(){return this.hasHighS()?new b(this.r,o(-this.s),this.recovery):this}// DER-encoded
toDERRawBytes(){return c9.hexToBytes(this.toDERHex())}toDERHex(){return dh.DER.hexFromSig({r:this.r,s:this.s})}// padded bytes of r, then padded bytes of s
toCompactRawBytes(){return c9.hexToBytes(this.toCompactHex())}toCompactHex(){return f(this.r)+f(this.s)}}/**
     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
     */function y(e){let t=c9.isBytes(e),r="string"==typeof e,n=(t||r)&&e.length;return t?n===a||n===i:r?n===2*a||n===2*i:e instanceof l}// RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
// FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
// bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
// int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
let m=t.bits2int||function(e){// For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
// for some cases, since bytes.length * 8 is not actual bitLength.
let r=c9.bytesToNumberBE(e),n=8*e.length-t.nBitLength;// check for == u8 done here
return n>0?r>>BigInt(n):r},g=t.bits2int_modN||function(e){return o(m(e));// can't use bytesToNumberBE here
},v=c9.bitMask(t.nBitLength);/**
     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
     */function x(e){if("bigint"!=typeof e)throw Error("bigint expected");if(!(dm<=e&&e<v))throw Error(`bigint expected < 2^${t.nBitLength}`);// works with order, can have different size than numToField!
return c9.numberToBytesBE(e,t.nByteLength)}let w={lowS:t.lowS,prehash:!1},P={lowS:t.lowS,prehash:!1};return(// Enable precomputes. Slows down first publicKey computation by 20ms.
l.BASE._setWindowSize(8),{CURVE:t,getPublicKey:/**
     * Computes public key for a private key. Checks for validity of the private key.
     * @param privateKey private key
     * @param isCompressed whether to return compact (default), or full key
     * @returns Public key, full when isCompressed=false; short when isCompressed=true
     */function(e,t=!0){return l.fromPrivateKey(e).toRawBytes(t)},getSharedSecret:/**
     * ECDH (Elliptic Curve Diffie Hellman).
     * Computes shared public key from private key and public key.
     * Checks: 1) private key validity 2) shared key is on-curve.
     * Does NOT hash the result.
     * @param privateA private key
     * @param publicB different public key
     * @param isCompressed whether to return compact (default), or full key
     * @returns shared public key
     */function(e,t,r=!0){if(y(e))throw Error("first arg must be private key");if(!y(t))throw Error("second arg must be public key");let n=l.fromHex(t);// check for being on-curve
return n.multiply(c(e)).toRawBytes(r)},sign:/**
     * Signs message hash with a private key.
     * ```
     * sign(m, d, k) where
     *   (x, y) = G × k
     *   r = x mod n
     *   s = (m + dr)/k mod n
     * ```
     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
     * @param privKey private key
     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
     * @returns signature with recovery param
     */function(e,n,a=w){let{seed:i,k2sig:u}=// Steps A, D of RFC6979 3.2
// Creates RFC6979 seed; converts msg/privKey to numbers.
// Used only in sign, not in verify.
// NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
// Also it can be bigger for P224 + SHA256
function(e,n,a=w){if(["recovered","canonical"].some(e=>e in a))throw Error("sign() legacy options not supported");let{hash:i,randomBytes:u}=t,{lowS:f,prehash:h,extraEntropy:y}=a;null==f&&(f=!0),e=(0,c9.ensureBytes)("msgHash",e),h&&(e=(0,c9.ensureBytes)("prehashed msgHash",i(e)));// We can't later call bits2octets, since nested bits2int is broken for curves
// with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
// const bits2octets = (bits) => int2octets(bits2int_modN(bits))
let v=g(e),P=c(n),O=[x(P),x(v)];// extraEntropy. RFC6979 3.6: additional k' (optional).
if(null!=y){// K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
let e=!0===y?u(r.BYTES):y;// generate random bytes OR pass as-is
O.push((0,c9.ensureBytes)("extraEntropy",e));// check for being bytes
}let T=c9.concatBytes(...O);// Step D of RFC6979 3.2
return{seed:T,k2sig:// Converts signature params into point w r/s, checks result for validity.
function(e){// RFC 6979 Section 3.2, step 3: k = bits2int(T)
let t=m(e);// Cannot use fields methods, since it is group element
if(!d(t))return;// Important: all mod() calls here must be done over N
let r=s(t),n=l.BASE.multiply(t).toAffine(),a=o(n.x);// k^-1 mod n
if(a===dm)return;// Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
// https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
// a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
let i=o(r*o(v+a*P));// Not using blinding here
if(i===dm)return;let c=(n.x===a?0:2)|Number(n.y&dg),u=i;// recovery bit (2 or 3, when q.x > n)
return f&&p(i)&&(u=p(i)?o(-i):i,c^=1),new b(a,u,c);// use normS, not s
}}}(e,n,a),f=c9.createHmacDrbg(t.hash.outputLen,t.nByteLength,t.hmac);// Steps A, D of RFC6979 3.2.
return f(i,u);// Steps B, C, D, E, F, G
},verify:// utils.precompute(8, ProjectivePoint.BASE)
/**
     * Verifies a signature against message hash and public key.
     * Rejects lowS signatures by default: to override,
     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
     *
     * ```
     * verify(r, s, h, P) where
     *   U1 = hs^-1 mod n
     *   U2 = rs^-1 mod n
     *   R = U1⋅G - U2⋅P
     *   mod(R.x, n) == r
     * ```
     */function(e,r,n,a=P){let i,c;if(r=(0,c9.ensureBytes)("msgHash",r),n=(0,c9.ensureBytes)("publicKey",n),"strict"in a)throw Error("options.strict was renamed to lowS");let{lowS:u,prehash:d}=a;try{if("string"==typeof e||c9.isBytes(e))// Since DER can also be 2*nByteLength bytes, we check for it first.
try{c=b.fromDER(e)}catch(t){if(!(t instanceof dh.DER.Err))throw t;c=b.fromCompact(e)}else if("object"==typeof e&&"bigint"==typeof e.r&&"bigint"==typeof e.s){let{r:t,s:r}=e;c=new b(t,r)}else throw Error("PARSE");i=l.fromHex(n)}catch(e){if("PARSE"===e.message)throw Error("signature must be Signature instance, Uint8Array or hex string");return!1}if(u&&c.hasHighS())return!1;d&&(r=t.hash(r));let{r:f,s:p}=c,h=g(r),y=s(p),m=o(h*y),v=o(f*y),x=l.BASE.multiplyAndAddUnsafe(i,m,v)?.toAffine();if(!x)return!1;let w=o(x.x);return w===f},ProjectivePoint:l,Signature:b,utils:{isValidPrivateKey(e){try{return c(e),!0}catch(e){return!1}},normPrivateKeyToScalar:c,/**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */randomPrivateKey:()=>{let e=c8.getMinHashLength(t.n);return c8.mapHashToField(t.randomBytes(e),t.n)},/**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */precompute:(e=8,t=l.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)}})},dh.SWUFpSqrtRatio=dO,dh.mapToCurveSimpleSWU=/**
 * Simplified Shallue-van de Woestijne-Ulas Method
 * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2
 */function(e,t){if(c8.validateField(e),!e.isValid(t.A)||!e.isValid(t.B)||!e.isValid(t.Z))throw Error("mapToCurveSimpleSWU: invalid opts");let r=dO(e,t.Z);if(!e.isOdd)throw Error("Fp.isOdd is not implemented!");// Input: u, an element of F.
// Output: (x, y), a point on E.
return n=>{let a,i,o,s,l,c,u,d;a=e.sqr(n),a=e.mul(a,t.Z),i=e.sqr(a),i=e.add(i,a),o=e.add(i,e.ONE),o=e.mul(o,t.B),s=e.cmov(t.Z,e.neg(i),!e.eql(i,e.ZERO)),s=e.mul(s,t.A),i=e.sqr(o),c=e.sqr(s),l=e.mul(c,t.A),i=e.add(i,l),i=e.mul(i,o),c=e.mul(c,s),l=e.mul(c,t.B),i=e.add(i,l),u=e.mul(a,o);let{isValid:f,value:p}=r(i,c);// 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)
d=e.mul(a,n),d=e.mul(d,p),u=e.cmov(u,o,f),d=e.cmov(d,p,f);let h=e.isOdd(n)===e.isOdd(d);// 23.  e1 = sgn0(u) == sgn0(y)
return d=e.cmov(e.neg(d),d,h),{x:u=e.div(u,s),y:d}}};var c9=A("j2PHb"),dT={};Object.defineProperty(dT,"__esModule",{value:!0}),dT.createCurve=dT.getHash=void 0;var dz={};Object.defineProperty(dz,"__esModule",{value:!0}),dz.hmac=dz.HMAC=void 0;// HMAC (RFC 2104)
class dk extends sF.Hash{constructor(e,t){super(),this.finished=!1,this.destroyed=!1,(0,sB.hash)(e);let r=(0,sF.toBytes)(t);if(this.iHash=e.create(),"function"!=typeof this.iHash.update)throw Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;let n=this.blockLen,a=new Uint8Array(n);// blockLen can be bigger than outputLen
a.set(r.length>n?e.create().update(r).digest():r);for(let e=0;e<a.length;e++)a[e]^=54;this.iHash.update(a),// By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
this.oHash=e.create();// Undo internal XOR && apply outer XOR
for(let e=0;e<a.length;e++)a[e]^=106;this.oHash.update(a),a.fill(0)}update(e){return(0,sB.exists)(this),this.iHash.update(e),this}digestInto(e){(0,sB.exists)(this),(0,sB.bytes)(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){let e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){// Create new instance without calling constructor since key already in state and we don't know it.
e||(e=Object.create(Object.getPrototypeOf(this),{}));let{oHash:t,iHash:r,finished:n,destroyed:a,blockLen:i,outputLen:o}=this;return e.finished=n,e.destroyed=a,e.blockLen=i,e.outputLen=o,e.oHash=t._cloneInto(e.oHash),e.iHash=r._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}// connects noble-curves to noble-hashes
function dL(e){return{hash:e,hmac:(t,...r)=>(0,dz.hmac)(e,t,(0,sF.concatBytes)(...r)),randomBytes:sF.randomBytes}}dz.HMAC=dk,dz.hmac=(e,t,r)=>new dk(e,t).update(r).digest(),dz.hmac.create=(e,t)=>new dk(e,t),dT.getHash=dL,dT.createCurve=function(e,t){let r=t=>(0,dh.weierstrass)({...e,...dL(t)});return Object.freeze({...r(t),create:r})};const dE=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),dN=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),dS=BigInt(1),dM=BigInt(2),dj=(e,t)=>(e+t/dM)/t;/**
 * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
 * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
 */function dH(e){// prettier-ignore
let t=BigInt(3),r=BigInt(6),n=BigInt(11),a=BigInt(22),i=BigInt(23),o=BigInt(44),s=BigInt(88),l=e*e*e%dE,c=l*l*e%dE,u=(0,c8.pow2)(c,t,dE)*c%dE,d=(0,c8.pow2)(u,t,dE)*c%dE,f=(0,c8.pow2)(d,dM,dE)*l%dE,p=(0,c8.pow2)(f,n,dE)*f%dE,h=(0,c8.pow2)(p,a,dE)*p%dE,b=(0,c8.pow2)(h,o,dE)*h%dE,y=(0,c8.pow2)(b,s,dE)*b%dE,m=(0,c8.pow2)(y,o,dE)*h%dE,g=(0,c8.pow2)(m,t,dE)*c%dE,v=(0,c8.pow2)(g,i,dE)*p%dE,x=(0,c8.pow2)(v,r,dE)*l%dE,w=(0,c8.pow2)(x,dM,dE);if(!dR.eql(dR.sqr(w),e))throw Error("Cannot find square root");return w}const dR=(0,c8.Field)(dE,void 0,void 0,{sqrt:dH});da.secp256k1=(0,dT.createCurve)({a:BigInt(0),b:BigInt(7),Fp:dR,n:dN,// Base point (x, y) aka generator point
Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,/**
     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
     */endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:e=>{let t=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-dS*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),n=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),a=BigInt("0x100000000000000000000000000000000"),i=dj(t*e,dN),o=dj(-r*e,dN),s=(0,c8.mod)(e-i*t-o*n,dN),l=(0,c8.mod)(-i*r-o*t,dN),c=s>a,u=l>a;if(c&&(s=dN-s),u&&(l=dN-l),s>a||l>a)throw Error("splitScalar: Endomorphism failed, k="+e);return{k1neg:c,k1:s,k2neg:u,k2:l}}}},di.sha256);// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
const dI=BigInt(0),dB=e=>"bigint"==typeof e&&dI<e&&e<dE,dV=e=>"bigint"==typeof e&&dI<e&&e<dN,dX={};function dU(e,...t){let r=dX[e];if(void 0===r){let t=(0,di.sha256)(Uint8Array.from(e,e=>e.charCodeAt(0)));r=(0,c9.concatBytes)(t,t),dX[e]=r}return(0,di.sha256)((0,c9.concatBytes)(r,...t))}// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03
const dA=e=>e.toRawBytes(!0).slice(1),dD=e=>(0,c9.numberToBytesBE)(e,32),dC=e=>(0,c8.mod)(e,dE),dF=e=>(0,c8.mod)(e,dN),dZ=da.secp256k1.ProjectivePoint,dq=(e,t,r)=>dZ.BASE.multiplyAndAddUnsafe(e,t,r);// Calculate point, scalar and bytes
function dG(e){let t=da.secp256k1.utils.normPrivateKeyToScalar(e),r=dZ.fromPrivateKey(t),n=r.hasEvenY()?t:dF(-t);// same method executed in fromPrivateKey
return{scalar:n,bytes:dA(r)}}/**
 * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.
 * @returns valid point checked for being on-curve
 */function dW(e){if(!dB(e))throw Error("bad x: need 0 < x < p");// Fail if x ≥ p.
let t=dC(e*e),r=dC(t*e+BigInt(7)),n=dH(r);n%dM!==dI&&(n=dC(-n));let a=new dZ(e,n,dS);// y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.
return a.assertValidity(),a}/**
 * Create tagged hash, convert it to bigint, reduce modulo-n.
 */function dY(...e){return dF((0,c9.bytesToNumberBE)(dU("BIP0340/challenge",...e)))}/**
 * Verifies Schnorr signature.
 * Will swallow errors & return false except for initial type validation of arguments.
 */function dK(e,t,r){let n=(0,c9.ensureBytes)("signature",e,64),a=(0,c9.ensureBytes)("message",t),i=(0,c9.ensureBytes)("publicKey",r,32);try{let e=dW((0,c9.bytesToNumberBE)(i)),t=(0,c9.bytesToNumberBE)(n.subarray(0,32));// P = lift_x(int(pk)); fail if that fails
if(!dB(t))return!1;let r=(0,c9.bytesToNumberBE)(n.subarray(32,64));// Let s = int(sig[32:64]); fail if s ≥ n.
if(!dV(r))return!1;let o=dY(dD(t),dA(e),a),s=dq(e,r,dF(-o));// int(challenge(bytes(r)||bytes(P)||m))%n
if(!s||!s.hasEvenY()||s.toAffine().x!==t)return!1;// -eP == (n-e)P
return!0;// Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.
}catch(e){return!1}}da.schnorr={getPublicKey:/**
 * Schnorr public key is just `x` coordinate of Point as per BIP340.
 */function(e){return dG(e).bytes;// d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)
},sign:/**
 * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.
 * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.
 */function(e,t,r=(0,sF.randomBytes)(32)){let n=(0,c9.ensureBytes)("message",e),{bytes:a,scalar:i}=dG(t),o=(0,c9.ensureBytes)("auxRand",r,32),s=dD(i^(0,c9.bytesToNumberBE)(dU("BIP0340/aux",o))),l=dU("BIP0340/nonce",s,a,n),c=dF((0,c9.bytesToNumberBE)(l));if(c===dI)throw Error("sign failed: k is zero");// Fail if k' = 0.
let{bytes:u,scalar:d}=dG(c),f=dY(u,a,n),p=new Uint8Array(64);// Let R = k'⋅G.
// If Verify(bytes(P), m, sig) (see below) returns failure, abort
if(p.set(u,0),p.set(dD(dF(d+f*i)),32),!dK(p,n,a))throw Error("sign: Invalid signature produced");return p},verify:dK,utils:{randomPrivateKey:da.secp256k1.utils.randomPrivateKey,lift_x:dW,pointToBytes:dA,numberToBytesBE:c9.numberToBytesBE,bytesToNumberBE:c9.bytesToNumberBE,taggedHash:dU,mod:c8.mod}};const dJ=(0,uo.isogenyMap)(dR,[// xNum
["0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7","0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581","0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262","0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"],// xDen
["0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b","0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14","0x0000000000000000000000000000000000000000000000000000000000000001"],// yNum
["0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c","0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3","0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931","0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"],// yDen
["0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b","0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573","0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f","0x0000000000000000000000000000000000000000000000000000000000000001"]].map(e=>e.map(e=>BigInt(e)))),dQ=(0,dh.mapToCurveSimpleSWU)(dR,{A:BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),B:BigInt("1771"),Z:dR.create(BigInt("-11"))}),d_=(0,uo.createHasher)(da.secp256k1.ProjectivePoint,e=>{let{x:t,y:r}=dQ(dR.create(e[0]));return dJ(t,r)},{DST:"secp256k1_XMD:SHA-256_SSWU_RO_",encodeDST:"secp256k1_XMD:SHA-256_SSWU_NU_",p:dR.ORDER,m:1,k:128,expand:"xmd",hash:di.sha256});da.hashToCurve=d_.hashToCurve,da.encodeToCurve=d_.encodeToCurve;var oI=A("dEXSZ");/**
 * @name isBigInt
 * @summary Tests for a `BigInt` object instance.
 * @description
 * Checks to see if the input object is an instance of `BigInt`
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBigInt } from '@polkadot/util';
 *
 * console.log('isBigInt', isBigInt(123_456n)); // => true
 * ```
 */function d$(e){return"bigint"==typeof e}/**
 * @name isObject
 * @summary Tests for an `object`.
 * @description
 * Checks to see if the input value is a JavaScript object.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isObject } from '@polkadot/util';
 *
 * isObject({}); // => true
 * isObject('something'); // => false
 * ```
 */function d0(e){return!!e&&"object"==typeof e}function d1(...e){return t=>(d0(t)||sm(t))&&e.every(e=>sm(t[e]))}const d2=d1("toBigInt"),d5=d1("toBn");var oI=A("dEXSZ");function d3(e){return e?/*@__PURE__*/n(oI).isBN(e)?e:o3(e)?function(e,{isLe:t=!1,isNegative:r=!1}={}){if(!e||"0x"===e)return new/*@__PURE__*/(n(oI))(0);let a=function(e){if(!e||"0x"===e)return"";if(o2.test(e))return e.substring(2);if(o5.test(e))return e;throw Error(`Expected hex value to convert, found '${e}'`)}(e),i=new/*@__PURE__*/(n(oI))(a,16,t?"le":"be");// fromTwos takes as parameter the number of bits, which is the hex length
// multiplied by 4 (2 bytes being 8 bits)
return r?i.fromTwos(4*a.length):i}(e.toString()):d$(e)?new/*@__PURE__*/(n(oI))(e.toString()):d5(e)?e.toBn():new/*@__PURE__*/(n(oI))(d2(e)?e.toBigInt().toString():e):new/*@__PURE__*/(n(oI))(0)}const d8={bitLength:-1,isLe:!0,isNegative:!1};function d9(e,{bitLength:t=-1,isLe:r=!0,isNegative:n=!1}=d8){let a=d3(e),i=-1===t?Math.ceil(a.bitLength()/8):Math.ceil((t||0)/8);if(!e)return new Uint8Array(-1===t?1:i);let o=new Uint8Array(i),s=n?a.toTwos(8*i):a;return o.set(s.toArray(r?"le":"be",i),0),o}const d6={isLe:!1},d4={isLe:!0},d7={bitLength:32,isLe:!1},fe={bitLength:32,isLe:!0},ft={bitLength:256,isLe:!1},fr={bitLength:256,isLe:!0};function fn(e,t){if(![33,65].includes(e.length))throw Error(`Invalid publicKey provided, received ${e.length} bytes input`);if(65===e.length)return e.subarray(1);if(!sb||!t&&ck())return cs(e).subarray(1);let{px:r,py:n}=(0,da.secp256k1).ProjectivePoint.fromHex(e);return sj(d9(r,ft),d9(n,ft))}function fa(e){var t;if(!e)return"0x";let r=sx(e);if(![20,32,33,65].includes(r.length))throw Error(`Invalid address or publicKey provided, received ${r.length} bytes input`);let n=cS(([33,65].includes((t=r).length)&&(t=dn(fn(t))),t.slice(-20)),-1,!1),a=cS(dn(n),-1,!1),i="";for(let e=0;e<40;e++)i=`${i}${parseInt(a[e],16)>7?n[e].toUpperCase():n[e]}`;return`0x${i}`}const fi={256:di.sha256,512:cW.sha512},fo={256:cg,512:cv};function fs(e,t,r=256,n){let a=sx(e);return!sb||!n&&ck()?fo[r](a,t):(0,dz.hmac)(fi[r],a,t)}/**
 * @name u8aEmpty
 * @summary Tests for a `Uint8Array` for emptyness
 * @description
 * Checks to see if the input `Uint8Array` has zero length or contains all 0 values.
 */function fl(e){let t=0|e.length;// on smaller sizes, the byte-by-byte compare is faster than allocating
// another object for DataView (on very large arrays the DataView is faster)
for(let r=0;r<t;r++)if(0|e[r])return!1;return!0}function fc(e,t){if(32!==e.length)throw Error("Expected valid 32-byte private key as a seed");if(!sb||!t&&ck()){let t=ci(e),r=t.slice(32);// There is an issue with the secp256k1 when running in an ASM.js environment where
// it seems that the lazy static section yields invalid results on the _first_ run.
// If this happens, fail outright, we cannot allow invalid return values
// https://github.com/polkadot-js/wasm/issues/307
if(fl(r))throw Error("Invalid publicKey generated from WASM interface");return{publicKey:r,secretKey:t.slice(0,32)}}return{publicKey:(0,da.secp256k1).getPublicKey(e,!0),secretKey:e}}const fu=sh(0),fd=sh(1);var oI=A("dEXSZ");const ff=sh(256),fp=sh(65536),fh=sh("0x10000000000000000");function fb(e,{isLe:t=!0,isNegative:r=!1}={}){// slice + reverse is expensive, however SCALE is LE by default so this is the path
// we are most interested in (the BE is added for the sake of being comprehensive)
t||(e=e.slice().reverse());let n=e.length;if(r&&n&&128&e[n-1]){switch(n){case 0:return sh(0);case 1:return sh(-((255^e[0])*1)-1);case 2:return sh(-((e[0]+(e[1]<<8)^65535)*1)-1);case 4:return sh(-((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)*1)-1)}let t=new DataView(e.buffer,e.byteOffset);if(8===n)return t.getBigInt64(0,!0);let r=sh(0),a=n%2;for(let e=n-2;e>=a;e-=2)r=r*fp+sh(65535^t.getUint16(e,!0));return a&&(r=r*ff+sh(255^e[0])),-(r*fd)-fd}switch(n){case 0:return sh(0);case 1:return sh(e[0]);case 2:return sh(e[0]+(e[1]<<8));case 4:return sh(e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3])}let a=new DataView(e.buffer,e.byteOffset);switch(n){case 8:return a.getBigUint64(0,!0);case 16:return a.getBigUint64(8,!0)*fh+a.getBigUint64(0,!0);default:{let t=sh(0),r=n%2;for(let e=n-2;e>=r;e-=2)t=t*fp+sh(a.getUint16(e,!0));return r&&(t=t*ff+sh(e[0])),t}}}var oI=A("dEXSZ");function fy(e){return /*@__PURE__*/n(oI).isBN(e)}const fm=sh(256),fg=sh(255),fv="ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141".replace(/ /g,""),fx=sh(`0x${fv}`),fw=new/*@__PURE__*/(n(oI))(fv,"hex"),fP=sr("Bitcoin seed");function fO(e,t){return{chainCode:t,publicKey:fc(e).publicKey,secretKey:e}}var oI=(A("dEXSZ"),A("dEXSZ"),A("dEXSZ"));const fT=/*#__PURE__*/new/*@__PURE__*/(n(oI))(1),fz=/*#__PURE__*/new/*@__PURE__*/(n(oI))(2),fk=/*#__PURE__*/new/*@__PURE__*/(n(oI))(1e9);fk.mul(fk);const fL=fz.pow(new/*@__PURE__*/(n(oI))(6)).isub(fT),fE=fz.pow(new/*@__PURE__*/(n(oI))(14)).isub(fT),fN=fz.pow(new/*@__PURE__*/(n(oI))(30)).isub(fT),fS={bitLength:16},fM={bitLength:32};function fj(e){return sH([function(e){let t=d3(e);if(t.lte(fL))return new Uint8Array([t.toNumber()<<2]);if(t.lte(fE))return d9(t.shln(2).iadd(fT),fS);if(t.lte(fN))return d9(t.shln(2).iadd(fz),fM);let r=d9(t),n=r.length;// adjust to the minimum number of bytes
for(;0===r[n-1];)n--;if(n<4)throw Error("Invalid length, previous checks match anything less than 2^30");return sH([// subtract 4 as minimum (also catered for in decoding)
new Uint8Array([(n-4<<2)+3]),r.subarray(0,n)])}(e.length),e])}/**
 * @name isNumber
 * @summary Tests for a JavaScript number.
 * @description
 * Checks to see if the input value is a valid number.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNumber } from '@polkadot/util';
 *
 * console.log('isNumber', isNumber(1234)); // => true
 * ```
 */function fH(e){return"number"==typeof e}const fR=/^\d+$/;class fI{__internal__chainCode=new Uint8Array(32);__internal__isHard=!1;static from(e){let t=new fI,[r,a]=e.startsWith("/")?[e.substring(1),!0]:[e,!1];return t.soft(fR.test(r)?new/*@__PURE__*/(n(oI))(r,10):r),a?t.harden():t}get chainCode(){return this.__internal__chainCode}get isHard(){return this.__internal__isHard}get isSoft(){return!this.__internal__isHard}hard(e){return this.soft(e).harden()}harden(){return this.__internal__isHard=!0,this}soft(e){var t;return fH(e)||fy(e)||d$(e)?this.soft(d9(e,fr)):o3(e)?this.soft(o1(e)):"string"==typeof(t=e)||t instanceof String?this.soft(fj(sr(e))):e.length>32?this.soft(cj(e)):(this.__internal__chainCode.fill(0),this.__internal__chainCode.set(e,0),this)}soften(){return this.__internal__isHard=!1,this}}const fB=/\/(\/?)([^/]+)/g;function fV(e){let t=e.match(fB),r=[],n="";if(t)for(let e of(n=t.join(""),t))r.push(fI.from(e.substring(1)));if(n!==e)throw Error(`Re-constructed path "${n}" does not match input`);return{parts:t,path:r}}const fX=/^(\w+( \w+)*)((\/\/?[^/]+)*)(\/\/\/(.*))?$/,fU=fj(sr("Secp256k1HDKD"));function fA(e,t){return(r,{chainCode:n,isHard:a})=>{if(!a)throw Error("A soft key was found in the path and is not supported");return e(t(r.secretKey.subarray(0,32),n))}}const fD=fA(fc,function(e,t){if(!sv(t)||32!==t.length)throw Error("Invalid chainCode passed to derive");// NOTE This is specific to the Substrate HDD derivation, so always use the blake2 hasher
return cj(sj(fU,e,t),256)}),fC=fj(sr("Ed25519HDKD")),fF=fA(uY,function(e,t){if(!sv(t)||32!==t.length)throw Error("Invalid chainCode passed to derive");return cj(sj(fC,e,t))});function fZ(e){let t=sx(e);if(96!==t.length)throw Error(`Expected keypair with 96 bytes, found ${t.length}`);return{publicKey:t.slice(64,96),secretKey:t.slice(0,64)}}function fq(e){return(t,r)=>{if(!sv(r)||32!==r.length)throw Error("Invalid chainCode passed to derive");return fZ(e(function({publicKey:e,secretKey:t}){return sj(t,e).slice()}(t),r))}}const fG=fq(cu),fW=fq(cd),fY={ecdsa:fD,ed25519:fF,// FIXME This is Substrate-compatible, not Ethereum-compatible
ethereum:fD,sr25519:function(e,{chainCode:t,isSoft:r}){return r?fW(e,t):fG(e,t)}};function fK(e,t,r){let n=fY[r],a=e;for(let e of t)a=n(a,e);return a}var fJ={};// Common prologue and epilogue for sync/async functions
function fQ(e,t,r,n){(0,sB.hash)(e);let a=(0,sF.checkOpts)({dkLen:32,asyncTick:10},n),{c:i,dkLen:o,asyncTick:s}=a;if((0,sB.number)(i),(0,sB.number)(o),(0,sB.number)(s),i<1)throw Error("PBKDF2: iterations (c) should be >= 1");let l=(0,sF.toBytes)(t),c=(0,sF.toBytes)(r),u=new Uint8Array(o),d=dz.hmac.create(e,l),f=d._cloneInto().update(c);return{c:i,dkLen:o,asyncTick:s,DK:u,PRF:d,PRFSalt:f}}function f_(e,t,r,n,a){return e.destroy(),t.destroy(),n&&n.destroy(),a.fill(0),r}async function f$(e,t,r,n){let a;let{c:i,dkLen:o,asyncTick:s,DK:l,PRF:c,PRFSalt:u}=fQ(e,t,r,n),d=new Uint8Array(4),f=(0,sF.createView)(d),p=new Uint8Array(c.outputLen);// DK = T1 + T2 + ⋯ + Tdklen/hlen
for(let e=1,t=0;t<o;e++,t+=c.outputLen){// Ti = F(Password, Salt, c, i)
let r=l.subarray(t,t+c.outputLen);f.setInt32(0,e,!1),// F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
// U1 = PRF(Password, Salt + INT_32_BE(i))
(a=u._cloneInto(a)).update(d).digestInto(p),r.set(p.subarray(0,r.length)),await (0,sF.asyncLoop)(i-1,s,()=>{// Uc = PRF(Password, Uc−1)
c._cloneInto(a).update(p).digestInto(p);for(let e=0;e<r.length;e++)r[e]^=p[e]})}return f_(c,u,l,a,p)}function f0(e=32){return(0,lL.getRandomValues)(new Uint8Array(e))}function f1(e,t=f0(),r=2048,n){let a=sx(e),i=sx(t);return{password:!sb||!n&&ck()?cP(a,i,r):(0,fJ.pbkdf2)(cW.sha512,a,i,{c:r,dkLen:64}),rounds:r,salt:t}}Object.defineProperty(fJ,"__esModule",{value:!0}),fJ.pbkdf2Async=fJ.pbkdf2=void 0,fJ.pbkdf2=/**
 * PBKDF2-HMAC: RFC 2898 key derivation function
 * @param hash - hash function that would be used e.g. sha256
 * @param password - password from which a derived key is generated
 * @param salt - cryptographic salt
 * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
 */function(e,t,r,n){let a;let{c:i,dkLen:o,DK:s,PRF:l,PRFSalt:c}=fQ(e,t,r,n),u=new Uint8Array(4),d=(0,sF.createView)(u),f=new Uint8Array(l.outputLen);// DK = T1 + T2 + ⋯ + Tdklen/hlen
for(let e=1,t=0;t<o;e++,t+=l.outputLen){// Ti = F(Password, Salt, c, i)
let r=s.subarray(t,t+l.outputLen);d.setInt32(0,e,!1),// F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
// U1 = PRF(Password, Salt + INT_32_BE(i))
(a=c._cloneInto(a)).update(u).digestInto(f),r.set(f.subarray(0,r.length));for(let e=1;e<i;e++){// Uc = PRF(Password, Uc−1)
l._cloneInto(a).update(f).digestInto(f);for(let e=0;e<r.length;e++)r[e]^=f[e]}}return f_(l,c,s,a,f)},fJ.pbkdf2Async=f$;const f2=cM({256:cT,512:cz},{256:di.sha256,512:cW.sha512}),f5=(e,t)=>f2(e,256,t);var f3="abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo".split("|");const f8="Invalid mnemonic";/** @internal */function f9(e){return(e||"").normalize("NFKD")}/** @internal */function f6(e){return parseInt(e,2)}function f4(e,t){return f1(sr(f9(e)),sr(`mnemonic${f9(t)}`)).password}function f7(e,t=f3){let r=f9(e).split(" ");if(r.length%3!=0)throw Error(f8);// convert word indices to 11 bit binary strings
let n=r.map(e=>{let r=t.indexOf(e);if(-1===r)throw Error(f8);return r.toString(2).padStart(11,"0")}).join(""),a=32*Math.floor(n.length/33),i=n.slice(0,a),o=n.slice(a),s=i.match(/(.{1,8})/g),l=s?.map(f6);if(!l||l.length%4!=0||l.length<16||l.length>32)throw Error("Invalid entropy");let c=sx(l);if(Array.from(f5(c)).map(e=>e.toString(2).padStart(8,"0")).join("").slice(0,8*c.length/32)!==o)throw Error("Invalid mnemonic checksum");return c}function pe(e,t,r){return!sb||!t&&!r&&ck()?ct(e):function(e,t){try{f7(e,t)}catch{return!1}return!0}(e,t)}function pt(e){let t=sx(e);if(32!==t.length)throw Error(`Expected a seed matching 32 bytes, found ${t.length}`);return fZ(cf(t))}/**
 * @name objectSpread
 * @summary Concats all sources into the destination
 */function pr(e,...t){for(let r=0,n=t.length;r<n;r++){let n=t[r];if(n){if("function"==typeof n.entries)for(let[t,r]of n.entries())e[t]=r;else Object.assign(e,n)}}return e}function pn(e,t){let r=sx(e),n=sx(t);if(r.length===n.length){let e=new DataView(r.buffer,r.byteOffset),t=new DataView(n.buffer,n.byteOffset),a=r.length%4|0,i=r.length-a|0;for(let r=0;r<i;r+=4)if(e.getUint32(r)!==t.getUint32(r))return!1;for(let e=i,t=r.length;e<t;e++)if(r[e]!==n[e])return!1;return!0}return!1}function pa(e,t){if(![33,65].includes(e.length))throw Error(`Invalid publicKey provided, received ${e.length} bytes input`);return 33===e.length?e:!sb||!t&&ck()?co(e):(0,da.secp256k1).ProjectivePoint.fromHex(e).toRawBytes(!0)}function pi(e,t,r){return"keccak"===e?dn(t,void 0,r):cj(t,void 0,void 0,r)}function po(e,{secretKey:t},r="blake2",n){if(t?.length!==32)throw Error("Expected valid secp256k1 secretKey, 32-bytes");let a=pi(r,e,n);if(!sb||!n&&ck())return cc(a,t);let i=(0,da.secp256k1).sign(a,t,{lowS:!0});return sj(d9(i.r,ft),d9(i.s,ft),new Uint8Array([i.recovery||0]))}const ps=sx("\x19Ethereum Signed Message:\n"),pl=sx("<Bytes>"),pc=sx("</Bytes>"),pu=pl.length+pc.length;function pd(e,t){return e.length>=pu&&pn(e.subarray(0,pl.length),pl)&&pn(e.slice(-pc.length),pc)||t&&e.length>=ps.length&&pn(e.subarray(0,ps.length),ps)}function pf(e,t,r,n){let a=sx(e),i=sx(r),o=sx(t);if(32!==i.length)throw Error(`Invalid publicKey, received ${i.length}, expected 32`);if(64!==o.length)throw Error(`Invalid signature, received ${o.length} bytes, expected 64`);try{return!sb||!n&&ck()?ca(o,a,i):(0,cG.ed25519).verify(o,a,i)}catch{return!1}}function pp(e,t,r){let n=sx(r),a=sx(t);if(32!==n.length)throw Error(`Invalid publicKey, received ${n.length} bytes, expected 32`);if(64!==a.length)throw Error(`Invalid signature, received ${a.length} bytes, expected 64`);return ch(a,sx(e),n)}const ph=e=>(t,r,n)=>(function(e,t,r,n="blake2",a){let i=sx(t);if(65!==i.length)throw Error(`Expected signature with 65 bytes, ${i.length} found instead`);let o=function(e,t,r,n="blake2",a){let i=sx(t).subarray(0,64),o=sx(e),s=!sb||!a&&ck()?cl(o,i,r):(0,da.secp256k1).Signature.fromCompact(i).addRecoveryBit(r).recoverPublicKey(o).toRawBytes();if(!s)throw Error("Unable to recover publicKey from signature");return"keccak"===n?fn(s,a):pa(s,a)}(pi(n,e),i,i[64],n,a),s=pi(n,o,a),l=sx(r);// for Ethereum (keccak) the last 20 bytes is the address
        return pn(o,l)||("keccak"===n?pn(s.slice(-20),l.slice(-20)):pn(s,l))})(t,r,n,e),pb=[["ecdsa",ph("blake2")],["ethereum",ph("keccak")]],py=[["ed25519",pf],["sr25519",pp],...pb],pm=["ed25519","sr25519","ecdsa"];function pg(e,{message:t,publicKey:r,signature:n},a=py){return e.isValid=a.some(([a,i])=>{try{if(i(t,n,r))return e.crypto=a,!0}catch{// do nothing, result.isValid still set to false
}return!1}),e}function pv(e,{message:t,publicKey:r,signature:n}){if(![0,1,2].includes(n[0]))throw Error(`Unknown crypto type, expected signature prefix [0..2], found ${n[0]}`);let a=pm[n[0]]||"none";e.crypto=a;try{e.isValid=({ecdsa:()=>pg(e,{message:t,publicKey:r,signature:n.subarray(1)},pb).isValid,ed25519:()=>pf(t,n.subarray(1),r),none:()=>{throw Error("no verify for `none` crypto type")},sr25519:()=>pp(t,n.subarray(1),r)})[a]()}catch{// ignore, result.isValid still set to false
}return e}function px(e,t,r){let n=sx(t);if(![64,65,66].includes(n.length))throw Error(`Invalid signature length, expected [64..66] bytes, found ${n.length}`);let a=cq(r),i={message:sx(e),publicKey:a,signature:n},o={crypto:"none",isValid:!1,isWrapped:pd(i.message,!0),publicKey:a},s=pd(i.message,!1),l=[0,1,2].includes(n[0])&&[65,66].includes(n.length)?pv:pg;return(l(o,i),"none"!==o.crypto||o.isWrapped&&!s)?o:(i.message=s?function(e){let t=sx(e);// we don't want to unwrap Ethereum-style wraps
return pd(t,!1)?t.subarray(pl.length,t.length-pc.length):t}(i.message):function(e){let t=sx(e);return pd(t,!0)?t:sH([pl,t,pc])}(i.message),l(o,i))}const pw=new Uint8Array,pP=new Uint8Array;/* eslint-disable brace-style,camelcase,comma-spacing,curly,one-var,padding-line-between-statements,space-infix-ops */function pO(e,t){return e<<t|e>>>32-t}function pT(e,t){let r=255&e[t+3];return(r=(r=r<<8|255&e[t+2])<<8|255&e[t+1])<<8|255&e[t+0]}function pz(e,t,r){for(let n=0;n<4;n++)e[t+n]=255&r,r>>>=8}function pk(e,t,r,n,a){let i,o,s;let l=new Uint32Array(16),c=new Uint32Array(16),u=new Uint32Array(16),d=new Uint32Array(4);for(i=0;i<4;i++)c[5*i]=pT(n,4*i),c[1+i]=pT(r,4*i),c[6+i]=pT(t,4*i),c[11+i]=pT(r,16+4*i);for(i=0;i<16;i++)u[i]=c[i];for(i=0;i<20;i++){for(o=0;o<4;o++){for(s=0;s<4;s++)d[s]=c[(5*o+4*s)%16];for(d[1]^=pO(d[0]+d[3]|0,7),d[2]^=pO(d[1]+d[0]|0,9),d[3]^=pO(d[2]+d[1]|0,13),d[0]^=pO(d[3]+d[2]|0,18),s=0;s<4;s++)l[4*o+(o+s)%4]=d[s]}for(s=0;s<16;s++)c[s]=l[s]}if(a){for(i=0;i<16;i++)c[i]=c[i]+u[i]|0;for(i=0;i<4;i++)c[5*i]=c[5*i]-pT(n,4*i)|0,c[6+i]=c[6+i]-pT(t,4*i)|0;for(i=0;i<4;i++)pz(e,4*i,c[5*i]),pz(e,16+4*i,c[6+i])}else for(i=0;i<16;i++)pz(e,4*i,c[i]+u[i]|0)}const pL=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function pE(e,t,r,n,a,i,o){let s=new Uint8Array(32);return pk(s,i,o,pL,!0),function(e,t,r,n,a,i,o){let s,l;let c=new Uint8Array(16),u=new Uint8Array(64);if(!a)return 0;for(l=0;l<16;l++)c[l]=0;for(l=0;l<8;l++)c[l]=i[l];for(;a>=64;){for(pk(u,c,o,pL,!1),l=0;l<64;l++)e[t+l]=(r?r[n+l]:0)^u[l];for(l=8,s=1;l<16;l++)s=s+(255&c[l])|0,c[l]=255&s,s>>>=8;a-=64,t+=64,r&&(n+=64)}if(a>0)for(pk(u,c,o,pL,!1),l=0;l<a;l++)e[t+l]=(r?r[n+l]:0)^u[l];return 0}(e,t,r,n,a,i.subarray(16),s)}function pN(e,t){let r=0;for(let n=0;n<17;n++)r=r+(e[n]+t[n]|0)|0,e[n]=255&r,r>>>=8}const pS=new Uint32Array([5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252]);function pM(e,t,r,n,a,i){let o,s,l;let c=new Uint32Array(17),u=new Uint32Array(17),d=new Uint32Array(17),f=new Uint32Array(17),p=new Uint32Array(17);for(s=0;s<17;s++)u[s]=d[s]=0;for(s=0;s<16;s++)u[s]=i[s];for(u[3]&=15,u[4]&=252,u[7]&=15,u[8]&=252,u[11]&=15,u[12]&=252,u[15]&=15;a>0;){for(s=0;s<17;s++)f[s]=0;for(s=0;s<16&&s<a;++s)f[s]=r[n+s];for(f[s]=1,n+=s,a-=s,pN(d,f),o=0;o<17;o++)for(s=0,c[o]=0;s<17;s++)c[o]=c[o]+d[s]*(s<=o?u[o-s]:320*u[o+17-s]|0)|0;for(o=0;o<17;o++)d[o]=c[o];for(s=0,l=0;s<16;s++)l=l+d[s]|0,d[s]=255&l,l>>>=8;for(s=0,l=l+d[16]|0,d[16]=3&l,l=5*(l>>>2)|0;s<16;s++)l=l+d[s]|0,d[s]=255&l,l>>>=8;l=l+d[16]|0,d[16]=l}for(s=0;s<17;s++)p[s]=d[s];pN(d,pS);let h=0|-(d[16]>>>7);for(s=0;s<17;s++)d[s]^=h&(p[s]^d[s]);for(s=0;s<16;s++)f[s]=i[s+16];for(f[16]=0,pN(d,f),s=0;s<16;s++)e[t+s]=d[s];return 0}function pj(e,t){if(32!==e.length)throw Error("bad key size");if(24!==t.length)throw Error("bad nonce size")}function pH(...e){for(let t=0,r=e.length;t<r;t++)if(!(e[t]instanceof Uint8Array))throw TypeError("unexpected type, use Uint8Array")}var pR={};Object.defineProperty(pR,"__esModule",{value:!0}),pR.scryptAsync=pR.scrypt=void 0;// RFC 7914 Scrypt KDF
// Left rotate for uint32
const pI=(e,t)=>e<<t|e>>>32-t;// The main Scrypt loop: uses Salsa extensively.
// Six versions of the function were tried, this is the fastest one.
// prettier-ignore
function pB(e,t,r,n,a,i){// Based on https://cr.yp.to/salsa20.html
// Xor blocks
let o=e[t++]^r[n++],s=e[t++]^r[n++],l=e[t++]^r[n++],c=e[t++]^r[n++],u=e[t++]^r[n++],d=e[t++]^r[n++],f=e[t++]^r[n++],p=e[t++]^r[n++],h=e[t++]^r[n++],b=e[t++]^r[n++],y=e[t++]^r[n++],m=e[t++]^r[n++],g=e[t++]^r[n++],v=e[t++]^r[n++],x=e[t++]^r[n++],w=e[t++]^r[n++],P=o,O=s,T=l,z=c,k=u,L=d,E=f,N=p,S=h,M=b,j=y,H=m,R=g,I=v,B=x,V=w;// Main loop (salsa)
for(let e=0;e<8;e+=2)k^=pI(P+R|0,7),S^=pI(k+P|0,9),R^=pI(S+k|0,13),P^=pI(R+S|0,18),M^=pI(L+O|0,7),I^=pI(M+L|0,9),O^=pI(I+M|0,13),L^=pI(O+I|0,18),B^=pI(j+E|0,7),T^=pI(B+j|0,9),E^=pI(T+B|0,13),j^=pI(E+T|0,18),z^=pI(V+H|0,7),N^=pI(z+V|0,9),H^=pI(N+z|0,13),V^=pI(H+N|0,18),O^=pI(P+z|0,7),T^=pI(O+P|0,9),z^=pI(T+O|0,13),P^=pI(z+T|0,18),E^=pI(L+k|0,7),N^=pI(E+L|0,9),k^=pI(N+E|0,13),L^=pI(k+N|0,18),H^=pI(j+M|0,7),S^=pI(H+j|0,9),M^=pI(S+H|0,13),j^=pI(M+S|0,18),R^=pI(V+B|0,7),I^=pI(R+V|0,9),B^=pI(I+R|0,13),V^=pI(B+I|0,18);// Write output (salsa)
a[i++]=o+P|0,a[i++]=s+O|0,a[i++]=l+T|0,a[i++]=c+z|0,a[i++]=u+k|0,a[i++]=d+L|0,a[i++]=f+E|0,a[i++]=p+N|0,a[i++]=h+S|0,a[i++]=b+M|0,a[i++]=y+j|0,a[i++]=m+H|0,a[i++]=g+R|0,a[i++]=v+I|0,a[i++]=x+B|0,a[i++]=w+V|0}function pV(e,t,r,n,a){// The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)
let i=n+0,o=n+16*a;for(let n=0;n<16;n++)r[o+n]=e[t+(2*a-1)*16+n];// X ← B[2r−1]
for(let n=0;n<a;n++,i+=16,t+=16)// We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1
pB(r,o,e,t,r,i),n>0&&(o+=16),pB(r,i,e,t+=16,r,o)}// Common prologue and epilogue for sync/async functions
function pX(e,t,r){// Maxmem - 1GB+1KB by default
let n=(0,sF.checkOpts)({dkLen:32,asyncTick:10,maxmem:1073742848},r),{N:a,r:i,p:o,dkLen:s,asyncTick:l,maxmem:c,onProgress:u}=n;if((0,sB.number)(a),(0,sB.number)(i),(0,sB.number)(o),(0,sB.number)(s),(0,sB.number)(l),(0,sB.number)(c),void 0!==u&&"function"!=typeof u)throw Error("progressCb should be function");let d=128*i,f=d/4;if(a<=1||(a&a-1)!=0||a>=2**(d/8)||a>4294967296)// There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.
throw Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");if(o<0||o>(4294967296-1)*32/d)throw Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");if(s<0||s>(4294967296-1)*32)throw Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");let p=d*(a+o);if(p>c)throw Error(`Scrypt: parameters too large, ${p} (128 * r * (N + p)) > ${c} (maxmem)`);// [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)
// Since it has only one iteration there is no reason to use async variant
let h=(0,fJ.pbkdf2)(di.sha256,e,t,{c:1,dkLen:d*o}),b=(0,sF.u32)(h),y=(0,sF.u32)(new Uint8Array(d*a)),m=(0,sF.u32)(new Uint8Array(d)),g=()=>{};if(u){let e=2*a*o,t=Math.max(Math.floor(e/1e4),1),r=0;g=()=>{r++,u&&(!(r%t)||r===e)&&u(r/e)}}return{N:a,r:i,p:o,dkLen:s,blockSize32:f,V:y,B32:b,B:h,tmp:m,blockMixCb:g,asyncTick:l}}function pU(e,t,r,n,a){let i=(0,fJ.pbkdf2)(di.sha256,e,r,{c:1,dkLen:t});return r.fill(0),n.fill(0),a.fill(0),i}/**
 * Scrypt KDF from RFC 7914.
 */async function pA(e,t,r){let{N:n,r:a,p:i,dkLen:o,blockSize32:s,V:l,B32:c,B:u,tmp:d,blockMixCb:f,asyncTick:p}=pX(e,t,r);for(let e=0;e<i;e++){let t=s*e;for(let e=0;e<s;e++)l[e]=c[t+e];// V[0] = B[i]
let r=0;await (0,sF.asyncLoop)(n-1,p,()=>{pV(l,r,l,r+=s,a),f()}),pV(l,(n-1)*s,c,t,a),f(),await (0,sF.asyncLoop)(n,p,()=>{// First u32 of the last 64-byte block (u32 is LE)
let e=c[t+s-16]%n;// j = Integrify(X) % iterations
for(let r=0;r<s;r++)d[r]=c[t+r]^l[e*s+r];// tmp = B ^ V[j]
pV(d,0,c,t,a),f()})}return pU(e,o,u,l,d)}pR.scrypt=/**
 * Scrypt KDF from RFC 7914.
 * @param password - pass
 * @param salt - salt
 * @param opts - parameters
 * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)
 * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance
 * - `p` is parallelization factor (1 is common)
 * - `dkLen` is output key length in bytes e.g. 32.
 * - `asyncTick` - (default: 10) max time in ms for which async function can block execution
 * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt
 * - `onProgress` - callback function that would be executed for progress report
 * @returns Derived key
 */function(e,t,r){let{N:n,r:a,p:i,dkLen:o,blockSize32:s,V:l,B32:c,B:u,tmp:d,blockMixCb:f}=pX(e,t,r);for(let e=0;e<i;e++){let t=s*e;for(let e=0;e<s;e++)l[e]=c[t+e];// V[0] = B[i]
for(let e=0,t=0;e<n-1;e++)pV(l,t,l,t+=s,a),f();pV(l,(n-1)*s,c,t,a),f();for(let e=0;e<n;e++){// First u32 of the last 64-byte block (u32 is LE)
let e=c[t+s-16]%n;// j = Integrify(X) % iterations
for(let r=0;r<s;r++)d[r]=c[t+r]^l[e*s+r];// tmp = B ^ V[j]
pV(d,0,c,t,a),f()}}return pU(e,o,u,l,d)},pR.scryptAsync=pA;const pD={N:32768,p:1,r:8};function pC(e,t=f0(),r=pD,n){let a=sx(e);return{params:r,password:!sb||!n&&ck()?cO(a,t,Math.log2(r.N),r.r,r.p):(0,pR.scrypt)(a,t,pr({dkLen:64},r)),salt:t}}var oI=A("dEXSZ");function pF(e,{isLe:t=!0,isNegative:r=!1}={}){// slice + reverse is expensive, however SCALE is LE by default so this is the path
// we are most interested in (the BE is added for the sake of being comprehensive)
t||(e=e.slice().reverse());let a=e.length;// shortcut for <= u48 values - in this case the manual conversion
// here seems to be more efficient than passing the full array
if(r&&a&&128&e[a-1])// For <= 32, we also optimize the xor to a single op
switch(a){case 0:return new/*@__PURE__*/(n(oI))(0);case 1:return new/*@__PURE__*/(n(oI))(-((255^e[0])*1)-1);case 2:return new/*@__PURE__*/(n(oI))(-((e[0]+(e[1]<<8)^65535)*1)-1);case 3:return new/*@__PURE__*/(n(oI))(-((e[0]+(e[1]<<8)+(e[2]<<16)^16777215)*1)-1);case 4:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return new/*@__PURE__*/(n(oI))(-((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)*1)-1);case 5:return new/*@__PURE__*/(n(oI))(-(((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)+(255^e[4])*4294967296)*1)-1);case 6:return new/*@__PURE__*/(n(oI))(-(((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)+(e[4]+(e[5]<<8)^65535)*4294967296)*1)-1);default:return new/*@__PURE__*/(n(oI))(e,"le").fromTwos(8*a)}// Most common case - u{8, 16, 32} default LE SCALE-encoded
//
// There are some slight benefits in unrolling this specific loop,
// however it comes with diminishing returns since here the actual
// `new BN` does seem to take up the bulk of the time
switch(a){case 0:return new/*@__PURE__*/(n(oI))(0);case 1:return new/*@__PURE__*/(n(oI))(e[0]);case 2:return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8));case 3:return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8)+(e[2]<<16));case 4:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]);case 5:return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8)+(e[2]<<16)+(e[3]+(e[4]<<8))*16777216);case 6:return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8)+(e[2]<<16)+(e[3]+(e[4]<<8)+(e[5]<<16))*16777216);default:return new/*@__PURE__*/(n(oI))(e,"le")}}const pZ=["scrypt","xsalsa20-poly1305"],pq=["none"],pG=new Uint8Array([161,35,3,33,0]),pW=new Uint8Array([48,83,2,1,1,48,5,6,3,43,101,112,4,34,4,32]),pY=pW.length,pK=new Uint8Array,pJ={ecdsa:fc,ed25519:uY,ethereum:fc,sr25519:pt},pQ={ecdsa:new Uint8Array([2]),ed25519:new Uint8Array([0]),ethereum:new Uint8Array([2]),sr25519:new Uint8Array([1])},p_={ecdsa:(e,t)=>po(e,t,"blake2"),ed25519:function(e,{publicKey:t,secretKey:r},n){if(r){if(!t)throw Error("Expected a valid publicKey")}else throw Error("Expected a valid secretKey");let a=sx(e),i=r.subarray(0,32);return!sb||!n&&ck()?cn(t,i,a):(0,cG.ed25519).sign(a,i)},ethereum:(e,t)=>po(e,t,"keccak"),sr25519:function(e,{publicKey:t,secretKey:r}){if(t?.length!==32)throw Error("Expected a valid publicKey, 32-bytes");if(r?.length!==64)throw Error("Expected a valid secretKey, 64-bytes");return cp(t,r,sx(e))}},p$={ecdsa:e=>e.length>32?cj(e):e,ed25519:e=>e,ethereum:e=>20===e.length?e:dn(fn(e)),sr25519:e=>e};function p0(e){return!e||fl(e)}function p1(e,t,r){return cj(sj(t||"",r||"",e))}function p2({toSS58:e,type:t},{publicKey:r,secretKey:n},a={},i=null,o){let s=(e,a)=>{let s=function(e,t,r){let n=Array.isArray(r)||void 0===r?r:[r],a=function(e,t,r=pZ){if(e){if(r.includes("xsalsa20-poly1305")&&!t)throw Error("Password required to decode encrypted data")}else throw Error("No encrypted data available to decode");let n=e;if(t){let a;if(r.includes("scrypt")){let{params:r,salt:n}=function(e){let t=e.subarray(0,32),r=pF(e.subarray(32,36),d4).toNumber(),n=pF(e.subarray(36,40),d4).toNumber(),a=pF(e.subarray(40,44),d4).toNumber();// FIXME At this moment we assume these to be fixed params, this is not a great idea
// since we lose flexibility and updates for greater security. However we need some
// protection against carefully-crafted params that can eat up CPU since these are user
// inputs. So we need to get very clever here, but atm we only allow the defaults
// and if no match, bail out
if(r!==pD.N||n!==pD.p||a!==pD.r)throw Error("Invalid injected scrypt params found");return{params:{N:r,p:n,r:a},salt:t}}(e);a=pC(t,n,r).password,e=e.subarray(44)}else a=sr(t);n=function(e,t,r){pH(e,t,r),pj(r,t);let n=new Uint8Array(16+e.length),a=new Uint8Array(n.length);for(let t=0;t<e.length;t++)n[t+16]=e[t];return n.length<32||0!==function(e,t,r,n,a){let i=new Uint8Array(32);if(r<32||(pE(i,0,null,0,32,n,a),0!==function(e,t,r,n,a,i){let o=new Uint8Array(16);return pM(o,0,r,32,a,i),function(e,t,r,n,a){let i=0;for(let t=0;t<16;t++)i|=e[16+t]^r[0+t];return(1&i-1>>>8)-1}(e,0,o,0,0)}(t,0,t,0,r-32,i)))return -1;pE(e,0,t,0,r,n,a);for(let t=0;t<32;t++)e[t]=0;return 0}(a,n,n.length,t,r)?null:a.subarray(32)}(e.subarray(24),e.subarray(0,24),/**
 * @name u8aFixLength
 * @summary Shifts a Uint8Array to a specific bitLength
 * @description
 * Returns a uint8Array with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aFixLength } from '@polkadot/util';
 *
 * u8aFixLength('0x12') // => 0x12
 * u8aFixLength('0x12', 16) // => 0x0012
 * u8aFixLength('0x1234', 8) // => 0x12
 * ```
 */function(e,t=-1,r=!1){let n=Math.ceil(t/8);if(-1===t||e.length===n)return e;if(e.length>n)return e.subarray(0,n);let a=new Uint8Array(n);return a.set(e,r?0:n-e.length),a}(a,256,!0))}if(!n)throw Error("Unable to decode using the supplied passphrase");return n}(t,e,n),i=a.subarray(0,pW.length);if(!pn(i,pW))throw Error("Invalid Pkcs8 header found in body");let o=a.subarray(pY,pY+64),s=pY+64,l=a.subarray(s,s+pG.length);// old-style, we have the seed here
if(!pn(l,pG)&&(s=pY+32,o=a.subarray(pY,s),!pn(l=a.subarray(s,s+pG.length),pG)))throw Error("Invalid Pkcs8 divider found in body");let c=s+pG.length,u=a.subarray(c,c+32);return{publicKey:u,secretKey:o}}(e,a||i,o);if(64===s.secretKey.length)r=s.publicKey,n=s.secretKey;else{let e=pJ[t](s.secretKey);r=e.publicKey,n=e.secretKey}},l=e=>(p0(n)&&i&&s(e,i),i=function({publicKey:e,secretKey:t},r){if(!t)throw Error("Expected a valid secretKey to be passed to encode");let n=sj(pW,t,pG,e);if(!r)return n;let{params:a,password:i,salt:o}=pC(r),{encrypted:s,nonce:l}=function(e,t,r=f0(24)){return{encrypted:function(e,t,r){pH(e,t,r),pj(r,t);let n=new Uint8Array(32+e.length),a=new Uint8Array(n.length);for(let t=0;t<e.length;t++)n[t+32]=e[t];return function(e,t,r,n,a){if(!(r<32)){pE(e,0,t,0,r,n,a),pM(e,16,e,32,r-32,e);for(let t=0;t<16;t++)e[t]=0}}(a,n,n.length,t,r),a.subarray(16)}(e,r,t),nonce:r}}(n,i.subarray(0,32));return sj(function(e,{N:t,p:r,r:n}){return sj(e,d9(t,fe),d9(r,fe),d9(n,fe))}(o,a),l,s)}({publicKey:r,secretKey:n},e),o=void 0,i),c=()=>{let n=p$[t](r);return"ethereum"===t?fa(n):e(n)};return{get address(){return c()},get addressRaw(){let e=p$[t](r);return"ethereum"===t?e.slice(-20):e},get isLocked(){return p0(n)},get meta(){return a},get publicKey(){return r},get type(){return t},decodePkcs8:s,derive:(a,i)=>{if("ethereum"===t)throw Error("Unable to derive on this keypair");if(p0(n))throw Error("Cannot derive on a locked keypair");let{path:o}=fV(a),s=fK({publicKey:r,secretKey:n},o,t);return p2({toSS58:e,type:t},s,i,null)},encodePkcs8:e=>l(e),lock:()=>{n=new Uint8Array},setMeta:e=>{a=pr({},a,e)},sign:(e,a={})=>{if(p0(n))throw Error("Cannot sign with a locked key pair");return sj(a.withType?pQ[t]:pK,p_[t](sx(e),{publicKey:r,secretKey:n}))},toJson:e=>{// NOTE: For ecdsa and ethereum, the publicKey cannot be extracted from the address. For these
// pass the hex-encoded publicKey through to the address portion of the JSON (before decoding)
// unless the publicKey is already an address
let n=["ecdsa","ethereum"].includes(t)?20===r.length?cS(r):cS(pa(r)):c();return function(e,{address:t,meta:r},n,a){var i;return pr((i=["pkcs8",e],{encoded:sL(n),encoding:{content:i,type:a?pZ:pq,version:"3"}}),{address:t,meta:r})}(t,{address:n,meta:a},l(e),!!e)},unlock:e=>s(e),verify:(e,r,n)=>px(e,r,p$[t](sx(n))).isValid,vrfSign:(e,a,i)=>{if(p0(n))throw Error("Cannot sign with a locked key pair");if("sr25519"===t)return function(e,{secretKey:t},r=pw,n=pw){if(t?.length!==64)throw Error("Invalid secretKey, expected 64-bytes");return cb(t,sx(r),sx(e),sx(n))}(e,{secretKey:n},a,i);let o=p_[t](sx(e),{publicKey:r,secretKey:n});return sj(p1(o,a,i),o)},vrfVerify:(e,n,a,i,o)=>{if("sr25519"===t)return function(e,t,r,n=pP,a=pP){let i=sx(r),o=sx(t);if(32!==i.length)throw Error("Invalid publicKey, expected 32-bytes");if(96!==o.length)throw Error("Invalid vrfSign output, expected 96 bytes");return cy(i,sx(n),sx(e),sx(a),o)}(e,n,r,i,o);let s=px(e,sj(pQ[t],n.subarray(32)),p$[t](sx(a)));return s.isValid&&pn(n.subarray(0,32),p1(n.subarray(32),i,o))}}}class p5{__internal__map={};add(e){return this.__internal__map[cq(e.address).toString()]=e,e}all(){return Object.values(this.__internal__map)}get(e){let t=this.__internal__map[cq(e).toString()];if(!t)throw Error(`Unable to retrieve keypair '${sv(e)||o3(e)?cS(sx(e)):e}'`);return t}remove(e){delete this.__internal__map[cq(e).toString()]}}const p3={ecdsa:e=>fc(e),ed25519:e=>uY(e),ethereum:e=>fc(e),sr25519:e=>pt(e)};function p8({publicKey:e}){return e}class p9{__internal__pairs;__internal__type;__internal__ss58;decodeAddress=cq;constructor(e={}){if(e.type=e.type||"ed25519",!["ecdsa","ethereum","ed25519","sr25519"].includes(e.type||"undefined"))throw Error(`Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${e.type||"unknown"}`);this.__internal__pairs=new p5,this.__internal__ss58=e.ss58Format,this.__internal__type=e.type}/**
     * @description retrieve the pairs (alias for getPairs)
     */get pairs(){return this.getPairs()}/**
     * @description retrieve the publicKeys (alias for getPublicKeys)
     */get publicKeys(){return this.getPublicKeys()}/**
     * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa
     */get type(){return this.__internal__type}/**
     * @name addPair
     * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     */addPair(e){return this.__internal__pairs.add(e)}/**
     * @name addFromAddress
     * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Allows user to explicitly provide separate inputs including account address or public key, and optionally
     * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file
     * of an account backup), and then generates a keyring pair from them that it passes to
     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */addFromAddress(e,t={},r=null,n=this.type,a,i){let o=this.decodeAddress(e,a);return this.addPair(p2({toSS58:this.encodeAddress,type:n},{publicKey:o,secretKey:new Uint8Array},t,r,i))}/**
     * @name addFromJson
     * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file
     * of an account backup), and then generates a keyring pair from it that it passes to
     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */addFromJson(e,t){return this.addPair(this.createFromJson(e,t))}/**
     * @name addFromMnemonic
     * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)
     * argument and a metadata argument that contains account information (that may be obtained from the json file
     * of an account backup), and then generates a keyring pair from it that it passes to
     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */addFromMnemonic(e,t={},r=this.type){return this.addFromUri(e,t,r)}/**
     * @name addFromPair
     * @summary Stores an account created from an explicit publicKey/secreteKey combination
     */addFromPair(e,t={},r=this.type){return this.addPair(this.createFromPair(e,t,r))}/**
     * @name addFromSeed
     * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.
     * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to
     * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */addFromSeed(e,t={},r=this.type){return this.addPair(p2({toSS58:this.encodeAddress,type:r},p3[r](e),t,null))}/**
     * @name addFromUri
     * @summary Creates an account via an suri
     * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)
     */addFromUri(e,t={},r=this.type){return this.addPair(this.createFromUri(e,t,r))}/**
     * @name createFromJson
     * @description Creates a pair from a JSON keyfile
     */createFromJson({address:e,encoded:t,encoding:{content:r,type:n,version:a},meta:i},o){if("3"===a&&"pkcs8"!==r[0])throw Error(`Unable to decode non-pkcs8 type, [${r.join(",")}] found}`);let s="0"!==a&&Array.isArray(r)?r[1]:this.type,l=Array.isArray(n)?n:[n];if(!["ed25519","sr25519","ecdsa","ethereum"].includes(s))throw Error(`Unknown crypto type ${s}`);// Here the address and publicKey are 32 bytes and isomorphic. This is why the address field needs to be the public key for ethereum type pairs
let c=o3(e)?o1(e):this.decodeAddress(e,o),u=o3(t)?o1(t):sk(t);return p2({toSS58:this.encodeAddress,type:s},{publicKey:c,secretKey:new Uint8Array},i,u,l)}/**
     * @name createFromPair
     * @summary Creates a pair from an explicit publicKey/secreteKey combination
     */createFromPair(e,t={},r=this.type){return p2({toSS58:this.encodeAddress,type:r},e,t,null)}/**
     * @name createFromUri
     * @summary Creates a Keypair from an suri
     * @description This creates a pair from the suri, but does not add it to the keyring
     */createFromUri(e,t={},r=this.type){let a;// here we only aut-add the dev phrase if we have a hard-derived path
let i=e.startsWith("//")?`bottom drive obey lake curtain smoke basket hold race lonely fit walk${e}`:e,{derivePath:o,password:s,path:l,phrase:c}=function(e){// eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
let t=e.match(fX);if(null===t)throw Error("Unable to match provided value to a secret URI");let[,r,,n,,,a]=t,{path:i}=fV(n);return{derivePath:n,password:a,path:i,phrase:r}}(i),u=o3(c,256);if(u)a=o1(c);else{let e=c.split(" ");if([12,15,18,21,24].includes(e.length))a="ethereum"===r?function(e,t="",r,n=32){if(pe(e)){if(![32,64].includes(n))throw Error(`Invalid seed length ${n}, expected 32 or 64`)}else throw Error("Invalid bip39 mnemonic specified");return 32===n?!sb||!r&&ck()?ce(e,t):f4(e,t).subarray(0,32):f4(e,t)}(c,"",!1,64):function(e,t="",r,n){if(pe(e,r,n)){if(!r&&!n&&ck())return l7(e,t)}else throw Error("Invalid bip39 mnemonic specified");let a=!sb||!r&&ck()?l4(e):f7(e,r),i=sr(`mnemonic${t}`);// return the first 32 bytes as the seed
return f1(a,i).password.slice(0,32)}(c,s);else{if(c.length>32)throw Error("specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes");a=sr(c.padEnd(32))}}let d="ethereum"===r?u?p3[r](a)// for eth, if the private key is provided as suri, it must be derived only once
:function(e,t=""){let r=fs(fP,e,512),a=fO(r.slice(0,32),r.slice(32));if(!t||"m"===t||"M"===t||"m'"===t||"M'"===t)return a;if(!function(e){if(!e.startsWith("m/"))return!1;let t=e.split("/").slice(1);for(let e of t){let t=/^\d+'?$/.test(e)?parseInt(e.replace(/'$/,""),10):Number.NaN;if(isNaN(t)||t>=2147483648||t<0)return!1}return!0}(t))throw Error("Invalid derivation path");let i=t.split("/").slice(1);for(let e of i)a=function e(t,r){let a=d9(r,d7),i=r>=2147483648?sj(new Uint8Array(1),t.secretKey,a):sj(t.publicKey,a);try{let e=fs(t.chainCode,i,512);return fO(function(e,t,r){if(sv(e)&&32===e.length){if(!sv(t)||32!==t.length)throw Error("Expected tweak to be an Uint8Array with length 32")}else throw Error("Expected seckey to be an Uint8Array with length 32");return sb?function(e,t){let r=fb(t,d6);if(r>=fx)throw Error("Tweak parameter is out of range");if((r+=fb(e,d6))>=fx&&(r-=fx),r===fu)throw Error("Invalid resulting private key");return function(e,{bitLength:t=-1,isLe:r=!0,isNegative:n=!1}={}){let a="bigint"==typeof e?e:e?o3(e)?function(e,{isLe:t=!1,isNegative:r=!1}={}){return e&&"0x"!==e?fb(o1(e),{isLe:t,isNegative:r}):sh(0)}(e.toString()):fy(e)?sh(e.toString()):d2(e)?e.toBigInt():d5(e)?sh(e.toBn().toString()):sh(e):sh(0);if(a===fu)return new Uint8Array(-1===t?1:Math.ceil((t||0)/8));let i=function(e,t,r){let n=[],a=r&&e<fu;for(a&&(e=-((e+fd)*fd));e!==fu;){let r=e%fm,i=Number(a?r^fg:r);t?n.push(i):n.unshift(i),e=(e-r)/fm}return Uint8Array.from(n)}(a,r,n);if(-1===t)return i;let o=Math.ceil((t||0)/8),s=new Uint8Array(o);return n&&s.fill(255),s.set(i,r?0:o-i.length),s}(r,ft)}(e,t):function(e,t){let r=new/*@__PURE__*/(n(oI))(t);if(r.cmp(fw)>=0)throw Error("Tweak parameter is out of range");if(r.iadd(new/*@__PURE__*/(n(oI))(e)),r.cmp(fw)>=0&&r.isub(fw),r.isZero())throw Error("Invalid resulting private key");return d9(r,ft)}(e,t)}(t.secretKey,e.slice(0,32)),e.slice(32))}catch{// In case parse256(IL) >= n or ki == 0, proceed with the next value for i
return e(t,r+1)}}(a,parseInt(e,10)+(e.length>1&&e.endsWith("'")?2147483648:0));return a}(a,o.substring(1)):fK(p3[r](a),l,r);return p2({toSS58:this.encodeAddress,type:r},d,t,null)}/**
     * @name encodeAddress
     * @description Encodes the input into an ss58 representation
     */encodeAddress=(e,t)=>"ethereum"===this.type?fa(e):function(e,t=cZ.prefix){// decode it, this means we can re-encode an address
    let r=cq(e);if(t<0||t>16383||[46,47].includes(t))throw Error("Out of range ss58Format specified");if(!cZ.allowedDecodedLengths.includes(r.length))throw Error(`Expected a valid key to convert, with length ${cZ.allowedDecodedLengths.join(", ")}`);let n=sj(t<64?[t]:[(252&t)>>2|64,t>>8|(3&t)<<6],r);return sM(sj(n,cR(n).subarray(0,[32,33].includes(r.length)?2:1)))}(e,t??this.__internal__ss58);/**
     * @name getPair
     * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address
     * @description Returns a keyring pair value from the keyring pair dictionary by performing
     * a key lookup using the provided account address or public key (after decoding it).
     */getPair(e){return this.__internal__pairs.get(e)}/**
     * @name getPairs
     * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary
     * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.
     */getPairs(){return this.__internal__pairs.all()}/**
     * @name getPublicKeys
     * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary
     * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.
     */getPublicKeys(){return this.__internal__pairs.all().map(p8)}/**
     * @name removePair
     * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.
     */removePair(e){this.__internal__pairs.remove(e)}/**
     * @name setSS58Format;
     * @description Sets the ss58 format for the keyring
     */setSS58Format(e){this.__internal__ss58=e}/**
     * @name toJson
     * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account
     * @description Returns a JSON object containing the metadata associated with an account
     * when valid address or public key and when the account passphrase is provided if the account secret
     * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user
     * may backup their account to a JSON file that contains this information.
     */toJson(e,t){return this.__internal__pairs.get(e).toJson(t)}}var p6={};!function(e){// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/
var t,r=function(e){var t,r=new Float64Array(16);if(e)for(t=0;t<e.length;t++)r[t]=e[t];return r},n=function(){throw Error("no PRNG")},a=new Uint8Array(16),i=new Uint8Array(32);i[0]=9;var o=r(),s=r([1]),l=r([56129,1]),c=r([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),u=r([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),d=r([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),f=r([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),p=r([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function h(e,t,r,n){e[t]=r>>24&255,e[t+1]=r>>16&255,e[t+2]=r>>8&255,e[t+3]=255&r,e[t+4]=n>>24&255,e[t+5]=n>>16&255,e[t+6]=n>>8&255,e[t+7]=255&n}function b(e,t,r,n,a){var i,o=0;for(i=0;i<a;i++)o|=e[t+i]^r[n+i];return(1&o-1>>>8)-1}function y(e,t,r,n){return b(e,t,r,n,16)}function m(e,t,r,n){return b(e,t,r,n,32)}function g(e,t,r,n){!function(e,t,r,n){for(var a,i=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,o=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,s=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,l=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,c=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,u=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,d=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,f=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,p=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,h=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,b=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,y=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,m=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,g=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,v=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,x=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,w=i,P=o,O=s,T=l,z=c,k=u,L=d,E=f,N=p,S=h,M=b,j=y,H=m,R=g,I=v,B=x,V=0;V<20;V+=2)z^=(a=w+H|0)<<7|a>>>25,N^=(a=z+w|0)<<9|a>>>23,H^=(a=N+z|0)<<13|a>>>19,w^=(a=H+N|0)<<18|a>>>14,S^=(a=k+P|0)<<7|a>>>25,R^=(a=S+k|0)<<9|a>>>23,P^=(a=R+S|0)<<13|a>>>19,k^=(a=P+R|0)<<18|a>>>14,I^=(a=M+L|0)<<7|a>>>25,O^=(a=I+M|0)<<9|a>>>23,L^=(a=O+I|0)<<13|a>>>19,M^=(a=L+O|0)<<18|a>>>14,T^=(a=B+j|0)<<7|a>>>25,E^=(a=T+B|0)<<9|a>>>23,j^=(a=E+T|0)<<13|a>>>19,B^=(a=j+E|0)<<18|a>>>14,P^=(a=w+T|0)<<7|a>>>25,O^=(a=P+w|0)<<9|a>>>23,T^=(a=O+P|0)<<13|a>>>19,w^=(a=T+O|0)<<18|a>>>14,L^=(a=k+z|0)<<7|a>>>25,E^=(a=L+k|0)<<9|a>>>23,z^=(a=E+L|0)<<13|a>>>19,k^=(a=z+E|0)<<18|a>>>14,j^=(a=M+S|0)<<7|a>>>25,N^=(a=j+M|0)<<9|a>>>23,S^=(a=N+j|0)<<13|a>>>19,M^=(a=S+N|0)<<18|a>>>14,H^=(a=B+I|0)<<7|a>>>25,R^=(a=H+B|0)<<9|a>>>23,I^=(a=R+H|0)<<13|a>>>19,B^=(a=I+R|0)<<18|a>>>14;w=w+i|0,P=P+o|0,O=O+s|0,T=T+l|0,z=z+c|0,k=k+u|0,L=L+d|0,E=E+f|0,N=N+p|0,S=S+h|0,M=M+b|0,j=j+y|0,H=H+m|0,R=R+g|0,I=I+v|0,B=B+x|0,e[0]=w>>>0&255,e[1]=w>>>8&255,e[2]=w>>>16&255,e[3]=w>>>24&255,e[4]=P>>>0&255,e[5]=P>>>8&255,e[6]=P>>>16&255,e[7]=P>>>24&255,e[8]=O>>>0&255,e[9]=O>>>8&255,e[10]=O>>>16&255,e[11]=O>>>24&255,e[12]=T>>>0&255,e[13]=T>>>8&255,e[14]=T>>>16&255,e[15]=T>>>24&255,e[16]=z>>>0&255,e[17]=z>>>8&255,e[18]=z>>>16&255,e[19]=z>>>24&255,e[20]=k>>>0&255,e[21]=k>>>8&255,e[22]=k>>>16&255,e[23]=k>>>24&255,e[24]=L>>>0&255,e[25]=L>>>8&255,e[26]=L>>>16&255,e[27]=L>>>24&255,e[28]=E>>>0&255,e[29]=E>>>8&255,e[30]=E>>>16&255,e[31]=E>>>24&255,e[32]=N>>>0&255,e[33]=N>>>8&255,e[34]=N>>>16&255,e[35]=N>>>24&255,e[36]=S>>>0&255,e[37]=S>>>8&255,e[38]=S>>>16&255,e[39]=S>>>24&255,e[40]=M>>>0&255,e[41]=M>>>8&255,e[42]=M>>>16&255,e[43]=M>>>24&255,e[44]=j>>>0&255,e[45]=j>>>8&255,e[46]=j>>>16&255,e[47]=j>>>24&255,e[48]=H>>>0&255,e[49]=H>>>8&255,e[50]=H>>>16&255,e[51]=H>>>24&255,e[52]=R>>>0&255,e[53]=R>>>8&255,e[54]=R>>>16&255,e[55]=R>>>24&255,e[56]=I>>>0&255,e[57]=I>>>8&255,e[58]=I>>>16&255,e[59]=I>>>24&255,e[60]=B>>>0&255,e[61]=B>>>8&255,e[62]=B>>>16&255,e[63]=B>>>24&255}(e,t,r,n)}function v(e,t,r,n){!function(e,t,r,n){for(var a,i=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,o=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,s=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,l=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,c=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,u=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,d=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,f=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,p=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,h=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,b=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,y=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,m=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,g=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,v=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,x=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,w=i,P=o,O=s,T=l,z=c,k=u,L=d,E=f,N=p,S=h,M=b,j=y,H=m,R=g,I=v,B=x,V=0;V<20;V+=2)z^=(a=w+H|0)<<7|a>>>25,N^=(a=z+w|0)<<9|a>>>23,H^=(a=N+z|0)<<13|a>>>19,w^=(a=H+N|0)<<18|a>>>14,S^=(a=k+P|0)<<7|a>>>25,R^=(a=S+k|0)<<9|a>>>23,P^=(a=R+S|0)<<13|a>>>19,k^=(a=P+R|0)<<18|a>>>14,I^=(a=M+L|0)<<7|a>>>25,O^=(a=I+M|0)<<9|a>>>23,L^=(a=O+I|0)<<13|a>>>19,M^=(a=L+O|0)<<18|a>>>14,T^=(a=B+j|0)<<7|a>>>25,E^=(a=T+B|0)<<9|a>>>23,j^=(a=E+T|0)<<13|a>>>19,B^=(a=j+E|0)<<18|a>>>14,P^=(a=w+T|0)<<7|a>>>25,O^=(a=P+w|0)<<9|a>>>23,T^=(a=O+P|0)<<13|a>>>19,w^=(a=T+O|0)<<18|a>>>14,L^=(a=k+z|0)<<7|a>>>25,E^=(a=L+k|0)<<9|a>>>23,z^=(a=E+L|0)<<13|a>>>19,k^=(a=z+E|0)<<18|a>>>14,j^=(a=M+S|0)<<7|a>>>25,N^=(a=j+M|0)<<9|a>>>23,S^=(a=N+j|0)<<13|a>>>19,M^=(a=S+N|0)<<18|a>>>14,H^=(a=B+I|0)<<7|a>>>25,R^=(a=H+B|0)<<9|a>>>23,I^=(a=R+H|0)<<13|a>>>19,B^=(a=I+R|0)<<18|a>>>14;e[0]=w>>>0&255,e[1]=w>>>8&255,e[2]=w>>>16&255,e[3]=w>>>24&255,e[4]=k>>>0&255,e[5]=k>>>8&255,e[6]=k>>>16&255,e[7]=k>>>24&255,e[8]=M>>>0&255,e[9]=M>>>8&255,e[10]=M>>>16&255,e[11]=M>>>24&255,e[12]=B>>>0&255,e[13]=B>>>8&255,e[14]=B>>>16&255,e[15]=B>>>24&255,e[16]=L>>>0&255,e[17]=L>>>8&255,e[18]=L>>>16&255,e[19]=L>>>24&255,e[20]=E>>>0&255,e[21]=E>>>8&255,e[22]=E>>>16&255,e[23]=E>>>24&255,e[24]=N>>>0&255,e[25]=N>>>8&255,e[26]=N>>>16&255,e[27]=N>>>24&255,e[28]=S>>>0&255,e[29]=S>>>8&255,e[30]=S>>>16&255,e[31]=S>>>24&255}(e,t,r,n)}var x=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);// "expand 32-byte k"
function w(e,t,r,n,a,i,o){var s,l,c=new Uint8Array(16),u=new Uint8Array(64);for(l=0;l<16;l++)c[l]=0;for(l=0;l<8;l++)c[l]=i[l];for(;a>=64;){for(g(u,c,o,x),l=0;l<64;l++)e[t+l]=r[n+l]^u[l];for(l=8,s=1;l<16;l++)s=s+(255&c[l])|0,c[l]=255&s,s>>>=8;a-=64,t+=64,n+=64}if(a>0)for(g(u,c,o,x),l=0;l<a;l++)e[t+l]=r[n+l]^u[l];return 0}function P(e,t,r,n,a){var i,o,s=new Uint8Array(16),l=new Uint8Array(64);for(o=0;o<16;o++)s[o]=0;for(o=0;o<8;o++)s[o]=n[o];for(;r>=64;){for(g(l,s,a,x),o=0;o<64;o++)e[t+o]=l[o];for(o=8,i=1;o<16;o++)i=i+(255&s[o])|0,s[o]=255&i,i>>>=8;r-=64,t+=64}if(r>0)for(g(l,s,a,x),o=0;o<r;o++)e[t+o]=l[o];return 0}function O(e,t,r,n,a){var i=new Uint8Array(32);v(i,n,a,x);for(var o=new Uint8Array(8),s=0;s<8;s++)o[s]=n[s+16];return P(e,t,r,o,i)}function T(e,t,r,n,a,i,o){var s=new Uint8Array(32);v(s,i,o,x);for(var l=new Uint8Array(8),c=0;c<8;c++)l[c]=i[c+16];return w(e,t,r,n,a,l,s)}/*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/var z=function(e){var t,r,n,a,i,o,s,l;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,t=255&e[0]|(255&e[1])<<8,this.r[0]=8191&t,r=255&e[2]|(255&e[3])<<8,this.r[1]=(t>>>13|r<<3)&8191,n=255&e[4]|(255&e[5])<<8,this.r[2]=(r>>>10|n<<6)&7939,a=255&e[6]|(255&e[7])<<8,this.r[3]=(n>>>7|a<<9)&8191,i=255&e[8]|(255&e[9])<<8,this.r[4]=(a>>>4|i<<12)&255,this.r[5]=i>>>1&8190,o=255&e[10]|(255&e[11])<<8,this.r[6]=(i>>>14|o<<2)&8191,s=255&e[12]|(255&e[13])<<8,this.r[7]=(o>>>11|s<<5)&8065,l=255&e[14]|(255&e[15])<<8,this.r[8]=(s>>>8|l<<8)&8191,this.r[9]=l>>>5&127,this.pad[0]=255&e[16]|(255&e[17])<<8,this.pad[1]=255&e[18]|(255&e[19])<<8,this.pad[2]=255&e[20]|(255&e[21])<<8,this.pad[3]=255&e[22]|(255&e[23])<<8,this.pad[4]=255&e[24]|(255&e[25])<<8,this.pad[5]=255&e[26]|(255&e[27])<<8,this.pad[6]=255&e[28]|(255&e[29])<<8,this.pad[7]=255&e[30]|(255&e[31])<<8};function k(e,t,r,n,a,i){var o=new z(i);return o.update(r,n,a),o.finish(e,t),0}function L(e,t,r,n,a,i){var o=new Uint8Array(16);return k(o,0,r,n,a,i),y(e,t,o,0)}function E(e,t,r,n,a){var i;if(r<32)return -1;for(T(e,0,t,0,r,n,a),k(e,16,e,32,r-32,e),i=0;i<16;i++)e[i]=0;return 0}function N(e,t,r,n,a){var i,o=new Uint8Array(32);if(r<32||(O(o,0,32,n,a),0!==L(t,16,t,32,r-32,o)))return -1;for(T(e,0,t,0,r,n,a),i=0;i<32;i++)e[i]=0;return 0}function S(e,t){var r;for(r=0;r<16;r++)e[r]=0|t[r]}function M(e){var t,r,n=1;for(t=0;t<16;t++)n=Math.floor((r=e[t]+n+65535)/65536),e[t]=r-65536*n;e[0]+=n-1+37*(n-1)}function j(e,t,r){for(var n,a=~(r-1),i=0;i<16;i++)n=a&(e[i]^t[i]),e[i]^=n,t[i]^=n}function H(e,t){var n,a,i,o=r(),s=r();for(n=0;n<16;n++)s[n]=t[n];for(M(s),M(s),M(s),a=0;a<2;a++){for(n=1,o[0]=s[0]-65517;n<15;n++)o[n]=s[n]-65535-(o[n-1]>>16&1),o[n-1]&=65535;o[15]=s[15]-32767-(o[14]>>16&1),i=o[15]>>16&1,o[14]&=65535,j(s,o,1-i)}for(n=0;n<16;n++)e[2*n]=255&s[n],e[2*n+1]=s[n]>>8}function R(e,t){var r=new Uint8Array(32),n=new Uint8Array(32);return H(r,e),H(n,t),m(r,0,n,0)}function I(e){var t=new Uint8Array(32);return H(t,e),1&t[0]}function B(e,t){var r;for(r=0;r<16;r++)e[r]=t[2*r]+(t[2*r+1]<<8);e[15]&=32767}function V(e,t,r){for(var n=0;n<16;n++)e[n]=t[n]+r[n]}function X(e,t,r){for(var n=0;n<16;n++)e[n]=t[n]-r[n]}function U(e,t,r){var n,a,i=0,o=0,s=0,l=0,c=0,u=0,d=0,f=0,p=0,h=0,b=0,y=0,m=0,g=0,v=0,x=0,w=0,P=0,O=0,T=0,z=0,k=0,L=0,E=0,N=0,S=0,M=0,j=0,H=0,R=0,I=0,B=r[0],V=r[1],X=r[2],U=r[3],A=r[4],D=r[5],C=r[6],F=r[7],Z=r[8],q=r[9],G=r[10],W=r[11],Y=r[12],K=r[13],J=r[14],Q=r[15];i+=(n=t[0])*B,o+=n*V,s+=n*X,l+=n*U,c+=n*A,u+=n*D,d+=n*C,f+=n*F,p+=n*Z,h+=n*q,b+=n*G,y+=n*W,m+=n*Y,g+=n*K,v+=n*J,x+=n*Q,o+=(n=t[1])*B,s+=n*V,l+=n*X,c+=n*U,u+=n*A,d+=n*D,f+=n*C,p+=n*F,h+=n*Z,b+=n*q,y+=n*G,m+=n*W,g+=n*Y,v+=n*K,x+=n*J,w+=n*Q,s+=(n=t[2])*B,l+=n*V,c+=n*X,u+=n*U,d+=n*A,f+=n*D,p+=n*C,h+=n*F,b+=n*Z,y+=n*q,m+=n*G,g+=n*W,v+=n*Y,x+=n*K,w+=n*J,P+=n*Q,l+=(n=t[3])*B,c+=n*V,u+=n*X,d+=n*U,f+=n*A,p+=n*D,h+=n*C,b+=n*F,y+=n*Z,m+=n*q,g+=n*G,v+=n*W,x+=n*Y,w+=n*K,P+=n*J,O+=n*Q,c+=(n=t[4])*B,u+=n*V,d+=n*X,f+=n*U,p+=n*A,h+=n*D,b+=n*C,y+=n*F,m+=n*Z,g+=n*q,v+=n*G,x+=n*W,w+=n*Y,P+=n*K,O+=n*J,T+=n*Q,u+=(n=t[5])*B,d+=n*V,f+=n*X,p+=n*U,h+=n*A,b+=n*D,y+=n*C,m+=n*F,g+=n*Z,v+=n*q,x+=n*G,w+=n*W,P+=n*Y,O+=n*K,T+=n*J,z+=n*Q,d+=(n=t[6])*B,f+=n*V,p+=n*X,h+=n*U,b+=n*A,y+=n*D,m+=n*C,g+=n*F,v+=n*Z,x+=n*q,w+=n*G,P+=n*W,O+=n*Y,T+=n*K,z+=n*J,k+=n*Q,f+=(n=t[7])*B,p+=n*V,h+=n*X,b+=n*U,y+=n*A,m+=n*D,g+=n*C,v+=n*F,x+=n*Z,w+=n*q,P+=n*G,O+=n*W,T+=n*Y,z+=n*K,k+=n*J,L+=n*Q,p+=(n=t[8])*B,h+=n*V,b+=n*X,y+=n*U,m+=n*A,g+=n*D,v+=n*C,x+=n*F,w+=n*Z,P+=n*q,O+=n*G,T+=n*W,z+=n*Y,k+=n*K,L+=n*J,E+=n*Q,h+=(n=t[9])*B,b+=n*V,y+=n*X,m+=n*U,g+=n*A,v+=n*D,x+=n*C,w+=n*F,P+=n*Z,O+=n*q,T+=n*G,z+=n*W,k+=n*Y,L+=n*K,E+=n*J,N+=n*Q,b+=(n=t[10])*B,y+=n*V,m+=n*X,g+=n*U,v+=n*A,x+=n*D,w+=n*C,P+=n*F,O+=n*Z,T+=n*q,z+=n*G,k+=n*W,L+=n*Y,E+=n*K,N+=n*J,S+=n*Q,y+=(n=t[11])*B,m+=n*V,g+=n*X,v+=n*U,x+=n*A,w+=n*D,P+=n*C,O+=n*F,T+=n*Z,z+=n*q,k+=n*G,L+=n*W,E+=n*Y,N+=n*K,S+=n*J,M+=n*Q,m+=(n=t[12])*B,g+=n*V,v+=n*X,x+=n*U,w+=n*A,P+=n*D,O+=n*C,T+=n*F,z+=n*Z,k+=n*q,L+=n*G,E+=n*W,N+=n*Y,S+=n*K,M+=n*J,j+=n*Q,g+=(n=t[13])*B,v+=n*V,x+=n*X,w+=n*U,P+=n*A,O+=n*D,T+=n*C,z+=n*F,k+=n*Z,L+=n*q,E+=n*G,N+=n*W,S+=n*Y,M+=n*K,j+=n*J,H+=n*Q,v+=(n=t[14])*B,x+=n*V,w+=n*X,P+=n*U,O+=n*A,T+=n*D,z+=n*C,k+=n*F,L+=n*Z,E+=n*q,N+=n*G,S+=n*W,M+=n*Y,j+=n*K,H+=n*J,R+=n*Q,x+=(n=t[15])*B,w+=n*V,P+=n*X,O+=n*U,T+=n*A,z+=n*D,k+=n*C,L+=n*F,E+=n*Z,N+=n*q,S+=n*G,M+=n*W,j+=n*Y,H+=n*K,R+=n*J,I+=n*Q,i+=38*w,o+=38*P,s+=38*O,l+=38*T,c+=38*z,u+=38*k,d+=38*L,f+=38*E,p+=38*N,h+=38*S,b+=38*M,y+=38*j,m+=38*H,g+=38*R,v+=38*I,a=Math.floor((n=i+// t15 left as is
// first car
(a=1)+65535)/65536),i=n-65536*a,a=Math.floor((n=o+a+65535)/65536),o=n-65536*a,a=Math.floor((n=s+a+65535)/65536),s=n-65536*a,a=Math.floor((n=l+a+65535)/65536),l=n-65536*a,a=Math.floor((n=c+a+65535)/65536),c=n-65536*a,a=Math.floor((n=u+a+65535)/65536),u=n-65536*a,a=Math.floor((n=d+a+65535)/65536),d=n-65536*a,a=Math.floor((n=f+a+65535)/65536),f=n-65536*a,a=Math.floor((n=p+a+65535)/65536),p=n-65536*a,a=Math.floor((n=h+a+65535)/65536),h=n-65536*a,a=Math.floor((n=b+a+65535)/65536),b=n-65536*a,a=Math.floor((n=y+a+65535)/65536),y=n-65536*a,a=Math.floor((n=m+a+65535)/65536),m=n-65536*a,a=Math.floor((n=g+a+65535)/65536),g=n-65536*a,a=Math.floor((n=v+a+65535)/65536),v=n-65536*a,a=Math.floor((n=x+a+65535)/65536),x=n-65536*a,i+=a-1+37*(a-1),a=Math.floor((n=i+// second car
(a=1)+65535)/65536),i=n-65536*a,a=Math.floor((n=o+a+65535)/65536),o=n-65536*a,a=Math.floor((n=s+a+65535)/65536),s=n-65536*a,a=Math.floor((n=l+a+65535)/65536),l=n-65536*a,a=Math.floor((n=c+a+65535)/65536),c=n-65536*a,a=Math.floor((n=u+a+65535)/65536),u=n-65536*a,a=Math.floor((n=d+a+65535)/65536),d=n-65536*a,a=Math.floor((n=f+a+65535)/65536),f=n-65536*a,a=Math.floor((n=p+a+65535)/65536),p=n-65536*a,a=Math.floor((n=h+a+65535)/65536),h=n-65536*a,a=Math.floor((n=b+a+65535)/65536),b=n-65536*a,a=Math.floor((n=y+a+65535)/65536),y=n-65536*a,a=Math.floor((n=m+a+65535)/65536),m=n-65536*a,a=Math.floor((n=g+a+65535)/65536),g=n-65536*a,a=Math.floor((n=v+a+65535)/65536),v=n-65536*a,a=Math.floor((n=x+a+65535)/65536),x=n-65536*a,i+=a-1+37*(a-1),e[0]=i,e[1]=o,e[2]=s,e[3]=l,e[4]=c,e[5]=u,e[6]=d,e[7]=f,e[8]=p,e[9]=h,e[10]=b,e[11]=y,e[12]=m,e[13]=g,e[14]=v,e[15]=x}function D(e,t){U(e,t,t)}function C(e,t){var n,a=r();for(n=0;n<16;n++)a[n]=t[n];for(n=253;n>=0;n--)D(a,a),2!==n&&4!==n&&U(a,a,t);for(n=0;n<16;n++)e[n]=a[n]}function F(e,t){var n,a=r();for(n=0;n<16;n++)a[n]=t[n];for(n=250;n>=0;n--)D(a,a),1!==n&&U(a,a,t);for(n=0;n<16;n++)e[n]=a[n]}function Z(e,t,n){var a,i,o=new Uint8Array(32),s=new Float64Array(80),c=r(),u=r(),d=r(),f=r(),p=r(),h=r();for(i=0;i<31;i++)o[i]=t[i];for(o[31]=127&t[31]|64,o[0]&=248,B(s,n),i=0;i<16;i++)u[i]=s[i],f[i]=c[i]=d[i]=0;for(i=254,c[0]=f[0]=1;i>=0;--i)j(c,u,a=o[i>>>3]>>>(7&i)&1),j(d,f,a),V(p,c,d),X(c,c,d),V(d,u,f),X(u,u,f),D(f,p),D(h,c),U(c,d,c),U(d,u,p),V(p,c,d),X(c,c,d),D(u,c),X(d,f,h),U(c,d,l),V(c,c,f),U(d,d,c),U(c,f,h),U(f,u,s),D(u,p),j(c,u,a),j(d,f,a);for(i=0;i<16;i++)s[i+16]=c[i],s[i+32]=d[i],s[i+48]=u[i],s[i+64]=f[i];var b=s.subarray(32),y=s.subarray(16);return C(b,b),U(y,y,b),H(e,y),0}function q(e,t){return Z(e,t,i)}function G(e,t){return n(t,32),q(e,t)}function W(e,t,r){var n=new Uint8Array(32);return Z(n,r,t),v(e,a,n,x)}z.prototype.blocks=function(e,t,r){for(var n,a,i,o,s,l,c,u,d,f,p,h,b,y,m,g,v,x,w,P=this.fin?0:2048,O=this.h[0],T=this.h[1],z=this.h[2],k=this.h[3],L=this.h[4],E=this.h[5],N=this.h[6],S=this.h[7],M=this.h[8],j=this.h[9],H=this.r[0],R=this.r[1],I=this.r[2],B=this.r[3],V=this.r[4],X=this.r[5],U=this.r[6],A=this.r[7],D=this.r[8],C=this.r[9];r>=16;)O+=8191&(n=255&e[t+0]|(255&e[t+1])<<8),T+=(n>>>13|(a=255&e[t+2]|(255&e[t+3])<<8)<<3)&8191,z+=(a>>>10|(i=255&e[t+4]|(255&e[t+5])<<8)<<6)&8191,k+=(i>>>7|(o=255&e[t+6]|(255&e[t+7])<<8)<<9)&8191,L+=(o>>>4|(s=255&e[t+8]|(255&e[t+9])<<8)<<12)&8191,E+=s>>>1&8191,N+=(s>>>14|(l=255&e[t+10]|(255&e[t+11])<<8)<<2)&8191,S+=(l>>>11|(c=255&e[t+12]|(255&e[t+13])<<8)<<5)&8191,M+=(c>>>8|(u=255&e[t+14]|(255&e[t+15])<<8)<<8)&8191,j+=u>>>5|P,d=(f=(d=0)+O*H+T*(5*C)+z*(5*D)+k*(5*A)+L*(5*U))>>>13,f&=8191,f+=E*(5*X)+N*(5*V)+S*(5*B)+M*(5*I)+j*(5*R),d+=f>>>13,f&=8191,d=(p=d+O*R+T*H+z*(5*C)+k*(5*D)+L*(5*A))>>>13,p&=8191,p+=E*(5*U)+N*(5*X)+S*(5*V)+M*(5*B)+j*(5*I),d+=p>>>13,p&=8191,d=(h=d+O*I+T*R+z*H+k*(5*C)+L*(5*D))>>>13,h&=8191,h+=E*(5*A)+N*(5*U)+S*(5*X)+M*(5*V)+j*(5*B),d+=h>>>13,h&=8191,d=(b=d+O*B+T*I+z*R+k*H+L*(5*C))>>>13,b&=8191,b+=E*(5*D)+N*(5*A)+S*(5*U)+M*(5*X)+j*(5*V),d+=b>>>13,b&=8191,d=(y=d+O*V+T*B+z*I+k*R+L*H)>>>13,y&=8191,y+=E*(5*C)+N*(5*D)+S*(5*A)+M*(5*U)+j*(5*X),d+=y>>>13,y&=8191,d=(m=d+O*X+T*V+z*B+k*I+L*R)>>>13,m&=8191,m+=E*H+N*(5*C)+S*(5*D)+M*(5*A)+j*(5*U),d+=m>>>13,m&=8191,d=(g=d+O*U+T*X+z*V+k*B+L*I)>>>13,g&=8191,g+=E*R+N*H+S*(5*C)+M*(5*D)+j*(5*A),d+=g>>>13,g&=8191,d=(v=d+O*A+T*U+z*X+k*V+L*B)>>>13,v&=8191,v+=E*I+N*R+S*H+M*(5*C)+j*(5*D),d+=v>>>13,v&=8191,d=(x=d+O*D+T*A+z*U+k*X+L*V)>>>13,x&=8191,x+=E*B+N*I+S*R+M*H+j*(5*C),d+=x>>>13,x&=8191,d=(w=d+O*C+T*D+z*A+k*U+L*X)>>>13,w&=8191,w+=E*V+N*B+S*I+M*R+j*H,d+=w>>>13,w&=8191,f=8191&(d=(d=(d<<2)+d|0)+f|0),d>>>=13,p+=d,O=f,T=p,z=h,k=b,L=y,E=m,N=g,S=v,M=x,j=w,t+=16,r-=16;this.h[0]=O,this.h[1]=T,this.h[2]=z,this.h[3]=k,this.h[4]=L,this.h[5]=E,this.h[6]=N,this.h[7]=S,this.h[8]=M,this.h[9]=j},z.prototype.finish=function(e,t){var r,n,a,i,o=new Uint16Array(10);if(this.leftover){for(i=this.leftover,this.buffer[i++]=1;i<16;i++)this.buffer[i]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(r=this.h[1]>>>13,this.h[1]&=8191,i=2;i<10;i++)this.h[i]+=r,r=this.h[i]>>>13,this.h[i]&=8191;for(this.h[0]+=5*r,r=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=r,r=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=r,o[0]=this.h[0]+5,r=o[0]>>>13,o[0]&=8191,i=1;i<10;i++)o[i]=this.h[i]+r,r=o[i]>>>13,o[i]&=8191;for(o[9]-=8192,n=(1^r)-1,i=0;i<10;i++)o[i]&=n;for(i=0,n=~n;i<10;i++)this.h[i]=this.h[i]&n|o[i];for(i=1,this.h[0]=(this.h[0]|this.h[1]<<13)&65535,this.h[1]=(this.h[1]>>>3|this.h[2]<<10)&65535,this.h[2]=(this.h[2]>>>6|this.h[3]<<7)&65535,this.h[3]=(this.h[3]>>>9|this.h[4]<<4)&65535,this.h[4]=(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14)&65535,this.h[5]=(this.h[6]>>>2|this.h[7]<<11)&65535,this.h[6]=(this.h[7]>>>5|this.h[8]<<8)&65535,this.h[7]=(this.h[8]>>>8|this.h[9]<<5)&65535,a=this.h[0]+this.pad[0],this.h[0]=65535&a;i<8;i++)a=(this.h[i]+this.pad[i]|0)+(a>>>16)|0,this.h[i]=65535&a;e[t+0]=this.h[0]>>>0&255,e[t+1]=this.h[0]>>>8&255,e[t+2]=this.h[1]>>>0&255,e[t+3]=this.h[1]>>>8&255,e[t+4]=this.h[2]>>>0&255,e[t+5]=this.h[2]>>>8&255,e[t+6]=this.h[3]>>>0&255,e[t+7]=this.h[3]>>>8&255,e[t+8]=this.h[4]>>>0&255,e[t+9]=this.h[4]>>>8&255,e[t+10]=this.h[5]>>>0&255,e[t+11]=this.h[5]>>>8&255,e[t+12]=this.h[6]>>>0&255,e[t+13]=this.h[6]>>>8&255,e[t+14]=this.h[7]>>>0&255,e[t+15]=this.h[7]>>>8&255},z.prototype.update=function(e,t,r){var n,a;if(this.leftover){for((a=16-this.leftover)>r&&(a=r),n=0;n<a;n++)this.buffer[this.leftover+n]=e[t+n];if(r-=a,t+=a,this.leftover+=a,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(r>=16&&(a=r-r%16,this.blocks(e,t,a),t+=a,r-=a),r){for(n=0;n<r;n++)this.buffer[this.leftover+n]=e[t+n];this.leftover+=r}};var Y=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function K(e,t,r,n){for(var a,i,o,s,l,c,u,d,f,p,h,b,y,m,g,v,x,w,P,O,T,z,k,L,E,N,S=new Int32Array(16),M=new Int32Array(16),j=e[0],H=e[1],R=e[2],I=e[3],B=e[4],V=e[5],X=e[6],U=e[7],A=t[0],D=t[1],C=t[2],F=t[3],Z=t[4],q=t[5],G=t[6],W=t[7],K=0;n>=128;){for(P=0;P<16;P++)O=8*P+K,S[P]=r[O+0]<<24|r[O+1]<<16|r[O+2]<<8|r[O+3],M[P]=r[O+4]<<24|r[O+5]<<16|r[O+6]<<8|r[O+7];for(P=0;P<80;P++)if(a=j,i=H,o=R,s=I,l=B,c=V,u=X,d=U,f=A,p=D,h=C,b=F,y=Z,m=q,g=G,v=W,// add
T=U,k=65535&(z=W),L=z>>>16,E=65535&T,N=T>>>16,// Sigma1
T=(B>>>14|Z<<18)^(B>>>18|Z<<14)^(Z>>>9|B<<23),k+=65535&(z=(Z>>>14|B<<18)^(Z>>>18|B<<14)^(B>>>9|Z<<23)),L+=z>>>16,E+=65535&T,N+=T>>>16,// Ch
T=B&V^~B&X,k+=65535&(z=Z&q^~Z&G),L+=z>>>16,E+=65535&T,N+=T>>>16,// K
T=Y[2*P],k+=65535&(z=Y[2*P+1]),L+=z>>>16,E+=65535&T,N+=T>>>16,// w
T=S[P%16],k+=65535&(z=M[P%16]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,x=65535&E|N<<16,w=65535&k|L<<16,// add
T=x,k=65535&(z=w),L=z>>>16,E=65535&T,N=T>>>16,// Sigma0
T=(j>>>28|A<<4)^(A>>>2|j<<30)^(A>>>7|j<<25),k+=65535&(z=(A>>>28|j<<4)^(j>>>2|A<<30)^(j>>>7|A<<25)),L+=z>>>16,E+=65535&T,N+=T>>>16,// Maj
T=j&H^j&R^H&R,k+=65535&(z=A&D^A&C^D&C),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,d=65535&E|N<<16,v=65535&k|L<<16,// add
T=s,k=65535&(z=b),L=z>>>16,E=65535&T,N=T>>>16,T=x,k+=65535&(z=w),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,s=65535&E|N<<16,b=65535&k|L<<16,H=a,R=i,I=o,B=s,V=l,X=c,U=u,j=d,D=f,C=p,F=h,Z=b,q=y,G=m,W=g,A=v,P%16==15)for(O=0;O<16;O++)// add
T=S[O],k=65535&(z=M[O]),L=z>>>16,E=65535&T,N=T>>>16,T=S[(O+9)%16],k+=65535&(z=M[(O+9)%16]),L+=z>>>16,E+=65535&T,N+=T>>>16,T=(// sigma0
(x=S[(O+1)%16])>>>1|(w=M[(O+1)%16])<<31)^(x>>>8|w<<24)^x>>>7,k+=65535&(z=(w>>>1|x<<31)^(w>>>8|x<<24)^(w>>>7|x<<25)),L+=z>>>16,E+=65535&T,N+=T>>>16,T=(// sigma1
(x=S[(O+14)%16])>>>19|(w=M[(O+14)%16])<<13)^(w>>>29|x<<3)^x>>>6,k+=65535&(z=(w>>>19|x<<13)^(x>>>29|w<<3)^(w>>>6|x<<26)),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,S[O]=65535&E|N<<16,M[O]=65535&k|L<<16;// add
T=j,k=65535&(z=A),L=z>>>16,E=65535&T,N=T>>>16,T=e[0],k+=65535&(z=t[0]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[0]=j=65535&E|N<<16,t[0]=A=65535&k|L<<16,T=H,k=65535&(z=D),L=z>>>16,E=65535&T,N=T>>>16,T=e[1],k+=65535&(z=t[1]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[1]=H=65535&E|N<<16,t[1]=D=65535&k|L<<16,T=R,k=65535&(z=C),L=z>>>16,E=65535&T,N=T>>>16,T=e[2],k+=65535&(z=t[2]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[2]=R=65535&E|N<<16,t[2]=C=65535&k|L<<16,T=I,k=65535&(z=F),L=z>>>16,E=65535&T,N=T>>>16,T=e[3],k+=65535&(z=t[3]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[3]=I=65535&E|N<<16,t[3]=F=65535&k|L<<16,T=B,k=65535&(z=Z),L=z>>>16,E=65535&T,N=T>>>16,T=e[4],k+=65535&(z=t[4]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[4]=B=65535&E|N<<16,t[4]=Z=65535&k|L<<16,T=V,k=65535&(z=q),L=z>>>16,E=65535&T,N=T>>>16,T=e[5],k+=65535&(z=t[5]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[5]=V=65535&E|N<<16,t[5]=q=65535&k|L<<16,T=X,k=65535&(z=G),L=z>>>16,E=65535&T,N=T>>>16,T=e[6],k+=65535&(z=t[6]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[6]=X=65535&E|N<<16,t[6]=G=65535&k|L<<16,T=U,k=65535&(z=W),L=z>>>16,E=65535&T,N=T>>>16,T=e[7],k+=65535&(z=t[7]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[7]=U=65535&E|N<<16,t[7]=W=65535&k|L<<16,K+=128,n-=128}return n}function J(e,t,r){var n,a=new Int32Array(8),i=new Int32Array(8),o=new Uint8Array(256),s=r;for(a[0]=1779033703,a[1]=3144134277,a[2]=1013904242,a[3]=2773480762,a[4]=1359893119,a[5]=2600822924,a[6]=528734635,a[7]=1541459225,i[0]=4089235720,i[1]=2227873595,i[2]=4271175723,i[3]=1595750129,i[4]=2917565137,i[5]=725511199,i[6]=4215389547,i[7]=327033209,K(a,i,t,r),r%=128,n=0;n<r;n++)o[n]=t[s-r+n];for(o[r]=128,o[(r=256-128*(r<112?1:0))-9]=0,h(o,r-8,s/536870912|0,s<<3),K(a,i,o,r),n=0;n<8;n++)h(e,8*n,a[n],i[n]);return 0}function Q(e,t){var n=r(),a=r(),i=r(),o=r(),s=r(),l=r(),c=r(),d=r(),f=r();X(n,e[1],e[0]),X(f,t[1],t[0]),U(n,n,f),V(a,e[0],e[1]),V(f,t[0],t[1]),U(a,a,f),U(i,e[3],t[3]),U(i,i,u),U(o,e[2],t[2]),V(o,o,o),X(s,a,n),X(l,o,i),V(c,o,i),V(d,a,n),U(e[0],s,l),U(e[1],d,c),U(e[2],c,l),U(e[3],s,d)}function _(e,t,r){var n;for(n=0;n<4;n++)j(e[n],t[n],r)}function $(e,t){var n=r(),a=r(),i=r();C(i,t[2]),U(n,t[0],i),U(a,t[1],i),H(e,a),e[31]^=I(n)<<7}function ee(e,t,r){var n,a;for(S(e[0],o),S(e[1],s),S(e[2],s),S(e[3],o),a=255;a>=0;--a)_(e,t,n=r[a/8|0]>>(7&a)&1),Q(t,e),Q(e,e),_(e,t,n)}function et(e,t){var n=[r(),r(),r(),r()];S(n[0],d),S(n[1],f),S(n[2],s),U(n[3],d,f),ee(e,n,t)}function er(e,t,a){var i,o=new Uint8Array(64),s=[r(),r(),r(),r()];for(a||n(t,32),J(o,t,32),o[0]&=248,o[31]&=127,o[31]|=64,et(s,o),$(e,s),i=0;i<32;i++)t[i+32]=e[i];return 0}var en=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function ea(e,t){var r,n,a,i;for(n=63;n>=32;--n){for(r=0,a=n-32,i=n-12;a<i;++a)t[a]+=r-16*t[n]*en[a-(n-32)],r=Math.floor((t[a]+128)/256),t[a]-=256*r;t[a]+=r,t[n]=0}for(a=0,r=0;a<32;a++)t[a]+=r-(t[31]>>4)*en[a],r=t[a]>>8,t[a]&=255;for(a=0;a<32;a++)t[a]-=r*en[a];for(n=0;n<32;n++)t[n+1]+=t[n]>>8,e[n]=255&t[n]}function ei(e){var t,r=new Float64Array(64);for(t=0;t<64;t++)r[t]=e[t];for(t=0;t<64;t++)e[t]=0;ea(e,r)}// Note: difference from C - smlen returned, not passed as argument.
function eo(e,t,n,a){var i,o,s=new Uint8Array(64),l=new Uint8Array(64),c=new Uint8Array(64),u=new Float64Array(64),d=[r(),r(),r(),r()];J(s,a,32),s[0]&=248,s[31]&=127,s[31]|=64;var f=n+64;for(i=0;i<n;i++)e[64+i]=t[i];for(i=0;i<32;i++)e[32+i]=s[32+i];for(J(c,e.subarray(32),n+32),ei(c),et(d,c),$(e,d),i=32;i<64;i++)e[i]=a[i];for(J(l,e,n+64),ei(l),i=0;i<64;i++)u[i]=0;for(i=0;i<32;i++)u[i]=c[i];for(i=0;i<32;i++)for(o=0;o<32;o++)u[i+o]+=l[i]*s[o];return ea(e.subarray(32),u),f}function es(e,t,n,a){var i,l,u,d,f,h,b,y,g=new Uint8Array(32),v=new Uint8Array(64),x=[r(),r(),r(),r()],w=[r(),r(),r(),r()];if(n<64||(i=r(),l=r(),u=r(),d=r(),f=r(),h=r(),b=r(),(S(w[2],s),B(w[1],a),D(u,w[1]),U(d,u,c),X(u,u,w[2]),V(d,w[2],d),D(f,d),D(h,f),U(b,h,f),U(i,b,u),U(i,i,d),F(i,i),U(i,i,u),U(i,i,d),U(i,i,d),U(w[0],i,d),D(l,w[0]),U(l,l,d),R(l,u)&&U(w[0],w[0],p),D(l,w[0]),U(l,l,d),R(l,u))?-1:(I(w[0])===a[31]>>7&&X(w[0],o,w[0]),U(w[3],w[0],w[1]),0)))return -1;for(y=0;y<n;y++)e[y]=t[y];for(y=0;y<32;y++)e[y+32]=a[y];if(J(v,e,n),ei(v),ee(x,w,v),et(w,t.subarray(32)),Q(x,w),$(g,x),n-=64,m(t,0,g,0)){for(y=0;y<n;y++)e[y]=0;return -1}for(y=0;y<n;y++)e[y]=t[y+64];return n}/* High-level API */function el(e,t){if(32!==e.length)throw Error("bad key size");if(24!==t.length)throw Error("bad nonce size")}function ec(){for(var e=0;e<arguments.length;e++)if(!(arguments[e]instanceof Uint8Array))throw TypeError("unexpected type, use Uint8Array")}function eu(e){for(var t=0;t<e.length;t++)e[t]=0}e.lowlevel={crypto_core_hsalsa20:v,crypto_stream_xor:T,crypto_stream:O,crypto_stream_salsa20_xor:w,crypto_stream_salsa20:P,crypto_onetimeauth:k,crypto_onetimeauth_verify:L,crypto_verify_16:y,crypto_verify_32:m,crypto_secretbox:E,crypto_secretbox_open:N,crypto_scalarmult:Z,crypto_scalarmult_base:q,crypto_box_beforenm:W,crypto_box_afternm:E,crypto_box:function(e,t,r,n,a,i){var o=new Uint8Array(32);return W(o,a,i),E(e,t,r,n,o)},crypto_box_open:function(e,t,r,n,a,i){var o=new Uint8Array(32);return W(o,a,i),N(e,t,r,n,o)},crypto_box_keypair:G,crypto_hash:J,crypto_sign:eo,crypto_sign_keypair:er,crypto_sign_open:es,crypto_secretbox_KEYBYTES:32,crypto_secretbox_NONCEBYTES:24,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:16,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:32,crypto_box_SECRETKEYBYTES:32,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:24,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:64,crypto_sign_PUBLICKEYBYTES:32,crypto_sign_SECRETKEYBYTES:64,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64,gf:r,D:c,L:en,pack25519:H,unpack25519:B,M:U,A:V,S:D,Z:X,pow2523:F,add:Q,set25519:S,modL:ea,scalarmult:ee,scalarbase:et},e.randomBytes=function(e){var t=new Uint8Array(e);return n(t,e),t},e.secretbox=function(e,t,r){ec(e,t,r),el(r,t);for(var n=new Uint8Array(32+e.length),a=new Uint8Array(n.length),i=0;i<e.length;i++)n[i+32]=e[i];return E(a,n,n.length,t,r),a.subarray(16)},e.secretbox.open=function(e,t,r){ec(e,t,r),el(r,t);for(var n=new Uint8Array(16+e.length),a=new Uint8Array(n.length),i=0;i<e.length;i++)n[i+16]=e[i];return n.length<32||0!==N(a,n,n.length,t,r)?null:a.subarray(32)},e.secretbox.keyLength=32,e.secretbox.nonceLength=24,e.secretbox.overheadLength=16,e.scalarMult=function(e,t){if(ec(e,t),32!==e.length)throw Error("bad n size");if(32!==t.length)throw Error("bad p size");var r=new Uint8Array(32);return Z(r,e,t),r},e.scalarMult.base=function(e){if(ec(e),32!==e.length)throw Error("bad n size");var t=new Uint8Array(32);return q(t,e),t},e.scalarMult.scalarLength=32,e.scalarMult.groupElementLength=32,e.box=function(t,r,n,a){var i=e.box.before(n,a);return e.secretbox(t,r,i)},e.box.before=function(e,t){ec(e,t),function(e,t){if(32!==e.length)throw Error("bad public key size");if(32!==t.length)throw Error("bad secret key size")}(e,t);var r=new Uint8Array(32);return W(r,e,t),r},e.box.after=e.secretbox,e.box.open=function(t,r,n,a){var i=e.box.before(n,a);return e.secretbox.open(t,r,i)},e.box.open.after=e.secretbox.open,e.box.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(32);return G(e,t),{publicKey:e,secretKey:t}},e.box.keyPair.fromSecretKey=function(e){if(ec(e),32!==e.length)throw Error("bad secret key size");var t=new Uint8Array(32);return q(t,e),{publicKey:t,secretKey:new Uint8Array(e)}},e.box.publicKeyLength=32,e.box.secretKeyLength=32,e.box.sharedKeyLength=32,e.box.nonceLength=24,e.box.overheadLength=e.secretbox.overheadLength,e.sign=function(e,t){if(ec(e,t),64!==t.length)throw Error("bad secret key size");var r=new Uint8Array(64+e.length);return eo(r,e,e.length,t),r},e.sign.open=function(e,t){if(ec(e,t),32!==t.length)throw Error("bad public key size");var r=new Uint8Array(e.length),n=es(r,e,e.length,t);if(n<0)return null;for(var a=new Uint8Array(n),i=0;i<a.length;i++)a[i]=r[i];return a},e.sign.detached=function(t,r){for(var n=e.sign(t,r),a=new Uint8Array(64),i=0;i<a.length;i++)a[i]=n[i];return a},e.sign.detached.verify=function(e,t,r){if(ec(e,t,r),64!==t.length)throw Error("bad signature size");if(32!==r.length)throw Error("bad public key size");var n,a=new Uint8Array(64+e.length),i=new Uint8Array(64+e.length);for(n=0;n<64;n++)a[n]=t[n];for(n=0;n<e.length;n++)a[n+64]=e[n];return es(i,a,a.length,r)>=0},e.sign.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(64);return er(e,t),{publicKey:e,secretKey:t}},e.sign.keyPair.fromSecretKey=function(e){if(ec(e),64!==e.length)throw Error("bad secret key size");for(var t=new Uint8Array(32),r=0;r<t.length;r++)t[r]=e[32+r];return{publicKey:t,secretKey:new Uint8Array(e)}},e.sign.keyPair.fromSeed=function(e){if(ec(e),32!==e.length)throw Error("bad seed size");for(var t=new Uint8Array(32),r=new Uint8Array(64),n=0;n<32;n++)r[n]=e[n];return er(t,r,!0),{publicKey:t,secretKey:r}},e.sign.publicKeyLength=32,e.sign.secretKeyLength=64,e.sign.seedLength=32,e.sign.signatureLength=64,e.hash=function(e){ec(e);var t=new Uint8Array(64);return J(t,e,e.length),t},e.hash.hashLength=64,e.verify=function(e,t){return(// Zero length arguments are considered not equal.
ec(e,t),0!==e.length&&0!==t.length&&e.length===t.length&&0===b(e,0,t,0,e.length))},e.setPRNG=function(e){n=e},(t="undefined"!=typeof self?self.crypto||self.msCrypto:null)&&t.getRandomValues?e.setPRNG(function(e,r){var n,a=new Uint8Array(r);for(n=0;n<r;n+=65536)t.getRandomValues(a.subarray(n,n+Math.min(r-n,65536)));for(n=0;n<r;n++)e[n]=a[n];eu(a)}):// Node.js.
(t=A("kjyEk"))&&t.randomBytes&&e.setPRNG(function(e,r){var n,a=t.randomBytes(r);for(n=0;n<r;n++)e[n]=a[n];eu(a)})}(p6||(self.nacl=self.nacl||{}));const p4="undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);var p7={randomUUID:p4};const he=new Uint8Array(16),ht=[];for(let e=0;e<256;++e)ht.push((e+256).toString(16).slice(1));var hr=function(t,r,n){if(p7.randomUUID&&!r&&!t)return p7.randomUUID();t=t||{};let a=t.random||(t.rng||function(){// lazy load so that environments that need to polyfill have a chance to do so
if(!e&&!// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
(e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)))throw Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return e(he)})();// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,r){n=n||0;for(let e=0;e<16;++e)r[n+e]=a[e];return r}return function(e,t=0){// Note: Be careful editing this code!  It's been tuned for performance
// and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
return ht[e[t+0]]+ht[e[t+1]]+ht[e[t+2]]+ht[e[t+3]]+"-"+ht[e[t+4]]+ht[e[t+5]]+"-"+ht[e[t+6]]+ht[e[t+7]]+"-"+ht[e[t+8]]+ht[e[t+9]]+"-"+ht[e[t+10]]+ht[e[t+11]]+ht[e[t+12]]+ht[e[t+13]]+ht[e[t+14]]+ht[e[t+15]]}(a)},hn={};r(hn,"SDKError",()=>ha),r(hn,"UnauthorizedError",()=>hi),r(hn,"CTypeHashMissingError",()=>ho),r(hn,"CTypeError",()=>hs),r(hn,"CTypeIdMismatchError",()=>hl),r(hn,"CTypeUnknownPropertiesError",()=>hc),r(hn,"UnsupportedKeyError",()=>hu),r(hn,"EncryptionError",()=>hd),r(hn,"DidError",()=>hf),r(hn,"DidExporterError",()=>hp),r(hn,"DidBatchError",()=>hh),r(hn,"DidNotFoundError",()=>hb),r(hn,"DidResolveUpgradedDidError",()=>hy),r(hn,"DidDeactivatedError",()=>hm),r(hn,"ClaimHashMissingError",()=>hg),r(hn,"RevokedTypeError",()=>hv),r(hn,"OwnerMissingError",()=>hx),r(hn,"SubjectMissingError",()=>hw),r(hn,"LegitimationsMissingError",()=>hP),r(hn,"ClaimNonceMapMissingError",()=>hO),r(hn,"ClaimMissingError",()=>hT),r(hn,"AddressTypeError",()=>hz),r(hn,"HashTypeError",()=>hk),r(hn,"HashMalformedError",()=>hL),r(hn,"DataStructureError",()=>hE),r(hn,"DelegationIdTypeError",()=>hN),r(hn,"DelegationIdMissingError",()=>hS),r(hn,"DelegateSignatureMissingError",()=>hM),r(hn,"InvalidRootNodeError",()=>hj),r(hn,"InvalidDelegationNodeError",()=>hH),r(hn,"ClaimContentsMalformedError",()=>hR),r(hn,"ObjectUnverifiableError",()=>hI),r(hn,"QuoteUnverifiableError",()=>hB),r(hn,"ClaimNonceMapMalformedError",()=>hV),r(hn,"UnknownMessageBodyTypeError",()=>hX),r(hn,"SignatureMalformedError",()=>hU),r(hn,"DidSubjectMismatchError",()=>hA),r(hn,"HierarchyQueryError",()=>hD),r(hn,"InvalidDidFormatError",()=>hC),r(hn,"AddressInvalidError",()=>hF),r(hn,"LegitimationsUnverifiableError",()=>hZ),r(hn,"SignatureUnverifiableError",()=>hq),r(hn,"CredentialUnverifiableError",()=>hG),r(hn,"ClaimUnverifiableError",()=>hW),r(hn,"IdentityMismatchError",()=>hY),r(hn,"SubscriptionsNotSupportedError",()=>hK),r(hn,"RootHashUnverifiableError",()=>hJ),r(hn,"DecodingMessageError",()=>hQ),r(hn,"TimeoutError",()=>h_),r(hn,"InvalidProofForStatementError",()=>h$),r(hn,"NoProofForStatementError",()=>h0),r(hn,"CodecMismatchError",()=>h1),r(hn,"PublicCredentialError",()=>h2);/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * KILT-specific errors with descriptions.
 *
 * @packageDocumentation
 *//* eslint-disable max-classes-per-file */class ha extends Error{constructor(e,t){super(e,t),// this line is the only reason for using SDKError
this.name=this.constructor.name}}class hi extends ha{}class ho extends ha{}class hs extends ha{}class hl extends ha{constructor(e,t){super(`Provided $id "${t}" does not match schema $id "${e}"`)}}class hc extends ha{}class hu extends ha{constructor(e){super(`The provided key type "${e}" is currently not supported`)}}class hd extends ha{}class hf extends ha{}class hp extends ha{}class hh extends ha{}class hb extends ha{}class hy extends ha{}class hm extends ha{}class hg extends ha{}class hv extends ha{}class hx extends ha{}class hw extends ha{}class hP extends ha{}class hO extends ha{}class hT extends ha{}class hz extends ha{}class hk extends ha{}class hL extends ha{constructor(e,t){e&&t?super(`Provided ${t} hash "${e}" is invalid or malformed`):e?super(`Provided hash "${e}" is invalid or malformed`):super("Provided hash invalid or malformed")}}class hE extends ha{}class hN extends ha{}class hS extends ha{}class hM extends ha{}class hj extends ha{}class hH extends ha{}class hR extends ha{}class hI extends ha{}class hB extends ha{}class hV extends ha{constructor(e){e?super(`Nonce map malformed or incomplete for statement "${e}"`):super("Nonce map malformed or incomplete")}}class hX extends ha{}class hU extends ha{}class hA extends ha{constructor(e,t){super(`The DID "${e}" doesn't match the DID Document's URI "${t}"`)}}class hD extends ha{constructor(e){super(`Could not find root node with id "${e}"`)}}class hC extends ha{constructor(e,t){super(`Not a valid KILT DID "${e}"`,t)}}class hF extends ha{constructor(e,t){e&&t?super(`Provided ${t} address "${e}" is invalid`):e?super(`Provided address "${e}" is invalid`):super("Provided address invalid")}}class hZ extends ha{}class hq extends ha{}class hG extends ha{}class hW extends ha{}class hY extends ha{constructor(e,t){t&&e?super(`${t} is not owner of the ${e}`):e?super(`Identity is not owner of the ${e}`):super("Addresses expected to be equal mismatched")}}class hK extends ha{constructor(e){super("This function is not available if the blockchain API does not support state or event subscriptions, use `WsProvider` to enable the complete feature set",e)}}class hJ extends ha{}class hQ extends ha{}class h_ extends ha{}class h$ extends ha{constructor(e){super(`Proof could not be verified for statement:
${e}`)}}class h0 extends ha{constructor(e){super(`No matching proof found for statement:
${e}`)}}class h1 extends ha{}class h2 extends ha{}function h5(e){return /*@__PURE__*/n(p6).box.keyPair.fromSecretKey(e)}function h3(e,t=!1){return t&&("string"==typeof e||e instanceof String)?e2(e):e5(e)}function h8(e,t){return t.sign(h3(e),{withType:!0})}function h9(e,t){return r_(h8(e,t))}function h6(e,t,r){if(!0!==function(e,t,r){let n=e5(t);if(![64,65,66].includes(n.length))throw Error(`Invalid signature length, expected [64..66] bytes, found ${n.length}`);let a=na(r),i={message:e5(e),publicKey:a,signature:n},o={crypto:"none",isValid:!1,isWrapped:nY(i.message,!0),publicKey:a},s=nY(i.message,!1),l=[0,1,2].includes(n[0])&&[65,66].includes(n.length)?oQ:oJ;return(l(o,i),"none"!==o.crypto||o.isWrapped&&!s)?o:(i.message=s?function(e){let t=e5(e);// we don't want to unwrap Ethereum-style wraps
return nY(t,!1)?t.subarray(nq.length,t.length-nG.length):t}(i.message):function(e){let t=e5(e);return nY(t,!0)?t:to([nq,t,nG])}(i.message),l(o,i))}(e,t,r).isValid)throw new hq}function h4(e,t){return r0(e,t)}function h7(e){return r_(r0(e,void 0))}function be(e){let t="object"==typeof e&&null!==e?JSON.stringify(eH.sortObj(e)):"number"==typeof e&&null!==e?e.toString():"boolean"==typeof e&&null!==e?JSON.stringify(e):e;return t.normalize("NFC")}function bt(e,t,r){let a=/*@__PURE__*/n(p6).randomBytes(24),i=/*@__PURE__*/n(p6).box(h3(e,!0),a,h3(t),h3(r));return{box:i,nonce:a}}function br(e,t,r){let n=bt(e,t,r),a=r_(n.box),i=r_(n.nonce);return{box:a,nonce:i}}function bn(e,t,r){let a=/*@__PURE__*/n(p6).box.open(h3(e.box),h3(e.nonce),h3(t),h3(r));return a||!1}function ba(e,t,r){let n=bn(e,h3(t),h3(r));return!1!==n&&t6(n)}function bi(e,t=""){return r1(t+e,256)}function bo(e,t={}){// apply defaults
let r={hasher:bi,nonceGenerator:()=>hr()},n=t.hasher||r.hasher,a=t.nonceGenerator||r.nonceGenerator,{nonces:i}=t,o="object"==typeof i?e=>i[e]:a;// iterate over statements to produce salted hashes
return e.map(e=>{// generate unsalted digests from statements as a first step
let t=n(e),r=o(t),a=n(t,r);return{digest:t,saltedHash:a,nonce:r,statement:e}})}function bs(e=nO(32),t){let r=new p9({ss58Format:38,type:t});return r.addFromSeed(e)}function bl(e,t){let r=new p9({ss58Format:38,type:t});return r.addFromUri(e)}function bc(e=nO(32)){return{...h5(e),type:"x25519"}}/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Universally unique identifiers (UUIDs) are needed in KILT to uniquely identify specific information.
 *
 * UUIDs are used for example in [[Credential]] to generate hashes.
 *
 * @packageDocumentation
 */function bu(){return h7(hr())}r({},"generate",()=>bu);var bd={};function bf(e){if("string"!=typeof e)throw new hz;if(!/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */function(e,t){let r;try{r=tn(e)}catch(e){return[!1,e.message]}let[n,,,a]=r3(r);return a!==t?[!1,`Prefix mismatch, expected ${t}, found ${a}`]:nn.allowedEncodedLengths.includes(r.length)?[n,n?null:"Invalid decoded address checksum"]:[!1,"Invalid decoded address length"]}(e,38)[0])throw new hF(e)}function bp(e){try{return bf(e),!0}catch{return!1}}function bh(e,t){if(!eA(e,t))throw new hL("string"==typeof e?e:void 0)}r(bd,"verifyKiltAddress",()=>bf),r(bd,"isKiltAddress",()=>bp),r(bd,"verifyIsHex",()=>bh),r(bd,"isHex",()=>eA);var bb={},by={};/* eslint-disable */function bm(e,t){let r=typeof e;if(r!==typeof t)return!1;if(Array.isArray(e)){if(!Array.isArray(t))return!1;let r=e.length;if(r!==t.length)return!1;for(let n=0;n<r;n++)if(!bm(e[n],t[n]))return!1;return!0}if("object"===r){if(!e||!t)return e===t;let r=Object.keys(e),n=Object.keys(t),a=r.length;if(a!==n.length)return!1;for(let n of r)if(!bm(e[n],t[n]))return!1;return!0}return e===t}r(by,"deepCompareStrict",()=>bm);var bg={};r(bg,"schemaKeyword",()=>bP),r(bg,"schemaArrayKeyword",()=>bO),r(bg,"schemaMapKeyword",()=>bT),r(bg,"ignoredKeyword",()=>bz),r(bg,"initialBaseURI",()=>bk),r(bg,"dereference",()=>bL);/* eslint-disable */// @ts-nocheck
var bv={};/* eslint-disable */function bx(e){return encodeURI(bw(e))}function bw(e){return e.replace(/~/g,"~0").replace(/\//g,"~1")}r(bv,"encodePointer",()=>bx),r(bv,"escapePointer",()=>bw);const bP={additionalItems:!0,unevaluatedItems:!0,items:!0,contains:!0,additionalProperties:!0,unevaluatedProperties:!0,propertyNames:!0,not:!0,if:!0,then:!0,else:!0},bO={prefixItems:!0,items:!0,allOf:!0,anyOf:!0,oneOf:!0},bT={$defs:!0,definitions:!0,properties:!0,patternProperties:!0,dependentSchemas:!0},bz={id:!0,$id:!0,$ref:!0,$schema:!0,$anchor:!0,$vocabulary:!0,$comment:!0,default:!0,enum:!0,const:!0,required:!0,type:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0};let bk=new URL("undefined"!=typeof self&&self.location?self.location.origin+self.location.pathname+location.search:"https://github.com/cfworker");function bL(e,t=Object.create(null),r=bk,n=""){if(e&&"object"==typeof e&&!Array.isArray(e)){let a=e.$id||e.id;if(a){let i=new URL(a,r);i.hash.length>1?t[i.href]=e:(i.hash="",""===n?r=i:bL(e,t,r))}}else if(!0!==e&&!1!==e)return t;// compute the schema's URI and add it to the mapping.
let a=r.href+(n?"#"+n:"");if(void 0!==t[a])throw Error(`Duplicate schema URI "${a}"`);// exit early if this is a boolean schema.
if(t[a]=e,!0===e||!1===e)return t;// if a $ref is found, resolve its absolute URI.
if(void 0===e.__absolute_uri__&&Object.defineProperty(e,"__absolute_uri__",{enumerable:!1,value:a}),e.$ref&&void 0===e.__absolute_ref__){let t=new URL(e.$ref,r);t.hash=t.hash,Object.defineProperty(e,"__absolute_ref__",{enumerable:!1,value:t.href})}// if a $recursiveRef is found, resolve its absolute URI.
if(e.$recursiveRef&&void 0===e.__absolute_recursive_ref__){let t=new URL(e.$recursiveRef,r);t.hash=t.hash,Object.defineProperty(e,"__absolute_recursive_ref__",{enumerable:!1,value:t.href})}// if an $anchor is found, compute its URI and add it to the mapping.
if(e.$anchor){let n=new URL("#"+e.$anchor,r);t[n.href]=e}// process subschemas.
for(let a in e){if(bz[a])continue;let i=`${n}/${bx(a)}`,o=e[a];if(Array.isArray(o)){if(bO[a]){let e=o.length;for(let n=0;n<e;n++)bL(o[n],t,r,`${i}/${n}`)}}else if(bT[a])for(let e in o)bL(o[e],t,r,`${i}/${bx(e)}`);else bL(o,t,r,i)}return t}// schema identification examples
// https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.appendix.A
// $ref delegation
// https://github.com/json-schema-org/json-schema-spec/issues/514
// output format
// https://json-schema.org/draft/2019-09/json-schema-core.html#output
// JSON pointer
// https://tools.ietf.org/html/rfc6901
// JSON relative pointer
// https://tools.ietf.org/html/draft-handrews-relative-json-pointer-01
var bE={};r(bE,"fullFormat",()=>bH),r(bE,"fastFormat",()=>bR);/* eslint-disable */// based on https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js
const bN=/^(\d\d\d\d)-(\d\d)-(\d\d)$/,bS=[0,31,28,31,30,31,30,31,31,30,31,30,31],bM=/^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;function bj(e){return e.test.bind(e)}const bH={date:bI,time:bB.bind(void 0,!1),"date-time":function(e){// http://tools.ietf.org/html/rfc3339#section-5.6
let t=e.split(bV);return 2==t.length&&bI(t[0])&&bB(!0,t[1])},duration:// https://github.com/ExodusMovement/schemasafe/blob/master/src/formats.js
function(e){return e.length>1&&e.length<80&&(/^P\d+([.,]\d+)?W$/.test(e)||/^P[\dYMDTHS]*(\d[.,]\d+)?[YMDHS]$/.test(e)&&/^P([.,\d]+Y)?([.,\d]+M)?([.,\d]+D)?(T([.,\d]+H)?([.,\d]+M)?([.,\d]+S)?)?$/.test(e))},uri:function(e){// http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
return bX.test(e)&&bU.test(e)},"uri-reference":bj(/^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i),"uri-template":bj(/^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i),url:bj(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu),email:// https://github.com/ExodusMovement/schemasafe/blob/master/src/formats.js
function(e){if('"'===e[0])return!1;let[t,r,...n]=e.split("@");return!(!t||!r||0!==n.length||t.length>64||r.length>253||"."===t[0]||t.endsWith(".")||t.includes(".."))&&!!/^[a-z0-9.-]+$/i.test(r)&&!!/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+$/i.test(t)&&r.split(".").every(e=>/^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$/i.test(e))},hostname:bj(/^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i),ipv4:bj(/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/),ipv6:bj(/^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i),regex:function(e){if(bA.test(e))return!1;try{return new RegExp(e),!0}catch(e){return!1}},uuid:bj(/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i),"json-pointer":bj(/^(?:\/(?:[^~/]|~0|~1)*)*$/),"json-pointer-uri-fragment":bj(/^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i),"relative-json-pointer":bj(/^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/)},bR={...bH,date:bj(/^\d\d\d\d-[0-1]\d-[0-3]\d$/),time:bj(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i),"date-time":bj(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i),"uri-reference":bj(/^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i)};function bI(e){var t;// full-date from http://tools.ietf.org/html/rfc3339#section-5.6
let r=e.match(bN);if(!r)return!1;let n=+r[1],a=+r[2],i=+r[3];return a>=1&&a<=12&&i>=1&&i<=(2==a&&(t=n)%4==0&&(t%100!=0||t%400==0)?29:bS[a])}function bB(e,t){let r=t.match(bM);if(!r)return!1;let n=+r[1],a=+r[2],i=+r[3],o=!!r[5];return(n<=23&&a<=59&&i<=59||23==n&&59==a&&60==i)&&(!e||o)}const bV=/t|\s/i,bX=/\/|:/,bU=/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,bA=/[^\\]\\Z/;var bD={};/* eslint-disable *//**
 * Get UCS-2 length of a string
 * https://mathiasbynens.be/notes/javascript-encoding
 * https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
 */function bC(e){let t,r=0,n=e.length,a=0;for(;a<n;)r++,(t=e.charCodeAt(a++))>=55296&&t<=56319&&a<n&&(64512&// high surrogate, and there is a next character
(t=e.charCodeAt(a)))==56320&&a++;return r}r(bD,"ucs2length",()=>bC);var bF={};/* eslint-disable */function bZ(e,t,r="2019-09",n=bL(t),a=!0,i=null,o="#",s="#",l=Object.create(null)){let c;if(!0===t)return{valid:!0,errors:[]};if(!1===t)return{valid:!1,errors:[{instanceLocation:o,keyword:"false",keywordLocation:o,error:"False boolean schema."}]};let u=typeof e;switch(u){case"boolean":case"number":case"string":c=u;break;case"object":c=null===e?"null":Array.isArray(e)?"array":"object";break;default:// undefined, bigint, function, symbol
throw Error(`Instances of "${u}" type are not supported.`)}let{$ref:d,$recursiveRef:f,$recursiveAnchor:p,type:h,const:b,enum:y,required:m,not:g,anyOf:v,allOf:x,oneOf:w,if:P,then:O,else:T,format:z,properties:k,patternProperties:L,additionalProperties:E,unevaluatedProperties:N,minProperties:S,maxProperties:M,propertyNames:j,dependentRequired:H,dependentSchemas:R,dependencies:I,prefixItems:B,items:V,additionalItems:X,unevaluatedItems:U,contains:A,minContains:D,maxContains:C,minItems:F,maxItems:Z,uniqueItems:q,minimum:G,maximum:W,exclusiveMinimum:Y,exclusiveMaximum:K,multipleOf:J,minLength:Q,maxLength:_,pattern:$,__absolute_ref__:ee,__absolute_recursive_ref__:et}=t,er=[];if(!0===p&&null===i&&(i=t),"#"===f){let c=null===i?n[et]:i,u=`${s}/$recursiveRef`,d=bZ(e,null===i?t:i,r,n,a,c,o,u,l);d.valid||er.push({instanceLocation:o,keyword:"$recursiveRef",keywordLocation:u,error:"A subschema had errors."},...d.errors)}if(void 0!==d){let t=n[ee||d];if(void 0===t){let e=`Unresolved $ref "${d}".`;throw ee&&ee!==d&&(e+=`  Absolute URI "${ee}".`),Error(e+=`
Known schemas:
- ${Object.keys(n).join("\n- ")}`)}let c=`${s}/$ref`,u=bZ(e,t,r,n,a,i,o,c,l);if(u.valid||er.push({instanceLocation:o,keyword:"$ref",keywordLocation:c,error:"A subschema had errors."},...u.errors),"4"===r||"7"===r)return{valid:0===er.length,errors:er}}if(Array.isArray(h)){let t=h.length,r=!1;for(let n=0;n<t;n++)if(c===h[n]||"integer"===h[n]&&"number"===c&&e%1==0&&e==e){r=!0;break}r||er.push({instanceLocation:o,keyword:"type",keywordLocation:`${s}/type`,error:`Instance type "${c}" is invalid. Expected "${h.join('", "')}".`})}else"integer"===h?("number"!==c||e%1||e!=e)&&er.push({instanceLocation:o,keyword:"type",keywordLocation:`${s}/type`,error:`Instance type "${c}" is invalid. Expected "${h}".`}):void 0!==h&&c!==h&&er.push({instanceLocation:o,keyword:"type",keywordLocation:`${s}/type`,error:`Instance type "${c}" is invalid. Expected "${h}".`});if(void 0===b||("object"===c||"array"===c?bm(e,b)||er.push({instanceLocation:o,keyword:"const",keywordLocation:`${s}/const`,error:`Instance does not match ${JSON.stringify(b)}.`}):e!==b&&er.push({instanceLocation:o,keyword:"const",keywordLocation:`${s}/const`,error:`Instance does not match ${JSON.stringify(b)}.`})),void 0===y||("object"===c||"array"===c?y.some(t=>bm(e,t))||er.push({instanceLocation:o,keyword:"enum",keywordLocation:`${s}/enum`,error:`Instance does not match any of ${JSON.stringify(y)}.`}):y.some(t=>e===t)||er.push({instanceLocation:o,keyword:"enum",keywordLocation:`${s}/enum`,error:`Instance does not match any of ${JSON.stringify(y)}.`})),void 0!==g){let t=`${s}/not`,l=bZ(e,g,r,n,a,i,o,t/*,
        evaluated*/);l.valid&&er.push({instanceLocation:o,keyword:"not",keywordLocation:t,error:'Instance matched "not" schema.'})}let en=[];if(void 0!==v){let t=`${s}/anyOf`,c=er.length,u=!1;for(let s=0;s<v.length;s++){let c=v[s],d=Object.create(l),f=bZ(e,c,r,n,a,!0===p?i:null,o,`${t}/${s}`,d);er.push(...f.errors),u=u||f.valid,f.valid&&en.push(d)}u?er.length=c:er.splice(c,0,{instanceLocation:o,keyword:"anyOf",keywordLocation:t,error:"Instance does not match any subschemas."})}if(void 0!==x){let t=`${s}/allOf`,c=er.length,u=!0;for(let s=0;s<x.length;s++){let c=x[s],d=Object.create(l),f=bZ(e,c,r,n,a,!0===p?i:null,o,`${t}/${s}`,d);er.push(...f.errors),u=u&&f.valid,f.valid&&en.push(d)}u?er.length=c:er.splice(c,0,{instanceLocation:o,keyword:"allOf",keywordLocation:t,error:"Instance does not match every subschema."})}if(void 0!==w){let t=`${s}/oneOf`,c=er.length,u=w.filter((s,c)=>{let u=Object.create(l),d=bZ(e,s,r,n,a,!0===p?i:null,o,`${t}/${c}`,u);return er.push(...d.errors),d.valid&&en.push(u),d.valid}).length;1===u?er.length=c:er.splice(c,0,{instanceLocation:o,keyword:"oneOf",keywordLocation:t,error:`Instance does not match exactly one subschema (${u} matches).`})}if(("object"===c||"array"===c)&&Object.assign(l,...en),void 0!==P){let t=`${s}/if`,c=bZ(e,P,r,n,a,i,o,t,l).valid;if(c){if(void 0!==O){let c=bZ(e,O,r,n,a,i,o,`${s}/then`,l);c.valid||er.push({instanceLocation:o,keyword:"if",keywordLocation:t,error:'Instance does not match "then" schema.'},...c.errors)}}else if(void 0!==T){let c=bZ(e,T,r,n,a,i,o,`${s}/else`,l);c.valid||er.push({instanceLocation:o,keyword:"if",keywordLocation:t,error:'Instance does not match "else" schema.'},...c.errors)}}if("object"===c){if(void 0!==m)for(let t of m)t in e||er.push({instanceLocation:o,keyword:"required",keywordLocation:`${s}/required`,error:`Instance does not have required property "${t}".`});let t=Object.keys(e);if(void 0!==S&&t.length<S&&er.push({instanceLocation:o,keyword:"minProperties",keywordLocation:`${s}/minProperties`,error:`Instance does not have at least ${S} properties.`}),void 0!==M&&t.length>M&&er.push({instanceLocation:o,keyword:"maxProperties",keywordLocation:`${s}/maxProperties`,error:`Instance does not have at least ${M} properties.`}),void 0!==j){let t=`${s}/propertyNames`;for(let s in e){let e=`${o}/${bx(s)}`,l=bZ(s,j,r,n,a,i,e,t);l.valid||er.push({instanceLocation:o,keyword:"propertyNames",keywordLocation:t,error:`Property name "${s}" does not match schema.`},...l.errors)}}if(void 0!==H){let t=`${s}/dependantRequired`;for(let r in H)if(r in e){let n=H[r];for(let a of n)a in e||er.push({instanceLocation:o,keyword:"dependentRequired",keywordLocation:t,error:`Instance has "${r}" but does not have "${a}".`})}}if(void 0!==R)for(let t in R){let c=`${s}/dependentSchemas`;if(t in e){let s=bZ(e,R[t],r,n,a,i,o,`${c}/${bx(t)}`,l);s.valid||er.push({instanceLocation:o,keyword:"dependentSchemas",keywordLocation:c,error:`Instance has "${t}" but does not match dependant schema.`},...s.errors)}}if(void 0!==I){let t=`${s}/dependencies`;for(let s in I)if(s in e){let l=I[s];if(Array.isArray(l))for(let r of l)r in e||er.push({instanceLocation:o,keyword:"dependencies",keywordLocation:t,error:`Instance has "${s}" but does not have "${r}".`});else{let c=bZ(e,l,r,n,a,i,o,`${t}/${bx(s)}`);c.valid||er.push({instanceLocation:o,keyword:"dependencies",keywordLocation:t,error:`Instance has "${s}" but does not match dependant schema.`},...c.errors)}}}let c=Object.create(null),u=!1;if(void 0!==k){let t=`${s}/properties`;for(let s in k){if(!(s in e))continue;let d=`${o}/${bx(s)}`,f=bZ(e[s],k[s],r,n,a,i,d,`${t}/${bx(s)}`);if(f.valid)l[s]=c[s]=!0;else if(u=a,er.push({instanceLocation:o,keyword:"properties",keywordLocation:t,error:`Property "${s}" does not match schema.`},...f.errors),u)break}}if(!u&&void 0!==L){let t=`${s}/patternProperties`;for(let s in L){let d=new RegExp(s),f=L[s];for(let p in e){if(!d.test(p))continue;let h=`${o}/${bx(p)}`,b=bZ(e[p],f,r,n,a,i,h,`${t}/${bx(s)}`);b.valid?l[p]=c[p]=!0:(u=a,er.push({instanceLocation:o,keyword:"patternProperties",keywordLocation:t,error:`Property "${p}" matches pattern "${s}" but does not match associated schema.`},...b.errors))}}}if(u||void 0===E){if(!u&&void 0!==N){let t=`${s}/unevaluatedProperties`;for(let s in e)if(!l[s]){let c=`${o}/${bx(s)}`,u=bZ(e[s],N,r,n,a,i,c,t);u.valid?l[s]=!0:er.push({instanceLocation:o,keyword:"unevaluatedProperties",keywordLocation:t,error:`Property "${s}" does not match unevaluated properties schema.`},...u.errors)}}}else{let t=`${s}/additionalProperties`;for(let s in e){if(c[s])continue;let d=`${o}/${bx(s)}`,f=bZ(e[s],E,r,n,a,i,d,t);f.valid?l[s]=!0:(u=a,er.push({instanceLocation:o,keyword:"additionalProperties",keywordLocation:t,error:`Property "${s}" does not match additional properties schema.`},...f.errors))}}}else if("array"===c){void 0!==Z&&e.length>Z&&er.push({instanceLocation:o,keyword:"maxItems",keywordLocation:`${s}/maxItems`,error:`Array has too many items (${e.length} > ${Z}).`}),void 0!==F&&e.length<F&&er.push({instanceLocation:o,keyword:"minItems",keywordLocation:`${s}/minItems`,error:`Array has too few items (${e.length} < ${F}).`});let t=e.length,c=0,u=!1;if(void 0!==B){let d=`${s}/prefixItems`,f=Math.min(B.length,t);for(;c<f;c++){let t=bZ(e[c],B[c],r,n,a,i,`${o}/${c}`,`${d}/${c}`);if(l[c]=!0,!t.valid&&(u=a,er.push({instanceLocation:o,keyword:"prefixItems",keywordLocation:d,error:"Items did not match schema."},...t.errors),u))break}}if(void 0!==V){let d=`${s}/items`;if(Array.isArray(V)){let s=Math.min(V.length,t);for(;c<s;c++){let t=bZ(e[c],V[c],r,n,a,i,`${o}/${c}`,`${d}/${c}`);if(l[c]=!0,!t.valid&&(u=a,er.push({instanceLocation:o,keyword:"items",keywordLocation:d,error:"Items did not match schema."},...t.errors),u))break}}else for(;c<t;c++){let t=bZ(e[c],V,r,n,a,i,`${o}/${c}`,d);if(l[c]=!0,!t.valid&&(u=a,er.push({instanceLocation:o,keyword:"items",keywordLocation:d,error:"Items did not match schema."},...t.errors),u))break}if(!u&&void 0!==X){let d=`${s}/additionalItems`;for(;c<t;c++){let t=bZ(e[c],X,r,n,a,i,`${o}/${c}`,d);l[c]=!0,t.valid||(u=a,er.push({instanceLocation:o,keyword:"additionalItems",keywordLocation:d,error:"Items did not match additional items schema."},...t.errors))}}}if(void 0!==A){if(0===t&&void 0===D)er.push({instanceLocation:o,keyword:"contains",keywordLocation:`${s}/contains`,error:"Array is empty. It must contain at least one item matching the schema."});else if(void 0!==D&&t<D)er.push({instanceLocation:o,keyword:"minContains",keywordLocation:`${s}/minContains`,error:`Array has less items (${t}) than minContains (${D}).`});else{let c=`${s}/contains`,u=er.length,d=0;for(let s=0;s<t;s++){let t=bZ(e[s],A,r,n,a,i,`${o}/${s}`,c);t.valid?(l[s]=!0,d++):er.push(...t.errors)}d>=(D||0)&&(er.length=u),void 0===D&&void 0===C&&0===d?er.splice(u,0,{instanceLocation:o,keyword:"contains",keywordLocation:c,error:"Array does not contain item matching schema."}):void 0!==D&&d<D?er.push({instanceLocation:o,keyword:"minContains",keywordLocation:`${s}/minContains`,error:`Array must contain at least ${D} items matching schema. Only ${d} items were found.`}):void 0!==C&&d>C&&er.push({instanceLocation:o,keyword:"maxContains",keywordLocation:`${s}/maxContains`,error:`Array may contain at most ${C} items matching schema. ${d} items were found.`})}}if(!u&&void 0!==U){let u=`${s}/unevaluatedItems`;for(;c<t;c++){if(l[c])continue;let t=bZ(e[c],U,r,n,a,i,`${o}/${c}`,u);l[c]=!0,t.valid||er.push({instanceLocation:o,keyword:"unevaluatedItems",keywordLocation:u,error:"Items did not match unevaluated items schema."},...t.errors)}}if(q)for(let r=0;r<t;r++){let n=e[r],a="object"==typeof n&&null!==n;for(let i=0;i<t;i++){if(r===i)continue;let t=e[i],l="object"==typeof t&&null!==t;(n===t||a&&l&&bm(n,t))&&(er.push({instanceLocation:o,keyword:"uniqueItems",keywordLocation:`${s}/uniqueItems`,error:`Duplicate items at indexes ${r} and ${i}.`}),r=Number.MAX_SAFE_INTEGER,i=Number.MAX_SAFE_INTEGER)}}}else if("number"===c){if("4"===r?(void 0!==G&&(!0===Y&&e<=G||e<G)&&er.push({instanceLocation:o,keyword:"minimum",keywordLocation:`${s}/minimum`,error:`${e} is less than ${Y?"or equal to ":""} ${G}.`}),void 0!==W&&(!0===K&&e>=W||e>W)&&er.push({instanceLocation:o,keyword:"maximum",keywordLocation:`${s}/maximum`,error:`${e} is greater than ${K?"or equal to ":""} ${W}.`})):(void 0!==G&&e<G&&er.push({instanceLocation:o,keyword:"minimum",keywordLocation:`${s}/minimum`,error:`${e} is less than ${G}.`}),void 0!==W&&e>W&&er.push({instanceLocation:o,keyword:"maximum",keywordLocation:`${s}/maximum`,error:`${e} is greater than ${W}.`}),void 0!==Y&&e<=Y&&er.push({instanceLocation:o,keyword:"exclusiveMinimum",keywordLocation:`${s}/exclusiveMinimum`,error:`${e} is less than ${Y}.`}),void 0!==K&&e>=K&&er.push({instanceLocation:o,keyword:"exclusiveMaximum",keywordLocation:`${s}/exclusiveMaximum`,error:`${e} is greater than or equal to ${K}.`})),void 0!==J){let t=e%J;Math.abs(0-t)>=11920929e-14&&Math.abs(J-t)>=11920929e-14&&er.push({instanceLocation:o,keyword:"multipleOf",keywordLocation:`${s}/multipleOf`,error:`${e} is not a multiple of ${J}.`})}}else if("string"===c){let t=void 0===Q&&void 0===_?0:bC(e);void 0!==Q&&t<Q&&er.push({instanceLocation:o,keyword:"minLength",keywordLocation:`${s}/minLength`,error:`String is too short (${t} < ${Q}).`}),void 0!==_&&t>_&&er.push({instanceLocation:o,keyword:"maxLength",keywordLocation:`${s}/maxLength`,error:`String is too long (${t} > ${_}).`}),void 0===$||new RegExp($).test(e)||er.push({instanceLocation:o,keyword:"pattern",keywordLocation:`${s}/pattern`,error:"String does not match pattern."}),void 0!==z&&bR[z]&&!bR[z](e)&&er.push({instanceLocation:o,keyword:"format",keywordLocation:`${s}/format`,error:`String does not match format "${z}".`})}return{valid:0===er.length,errors:er}}r(bF,"validate",()=>bZ);var bq={};r(bq,"Validator",()=>bG);/* eslint-disable */class bG{schema;draft;shortCircuit;lookup;constructor(e,t="2019-09",r=!0){this.schema=e,this.draft=t,this.shortCircuit=r,this.lookup=bL(e)}validate(e){return bZ(e,this.schema,this.draft,this.lookup,this.shortCircuit)}addSchema(e,t){t&&(e={...e,$id:t}),bL(e,this.lookup)}}V(bb,by),V(bb,bg),V(bb,bE),V(bb,bv),V(bb,{}),V(bb,bD),V(bb,bF),V(bb,bq);/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */// special import syntax as this is a pure cjs import
var bW={};bW=(()=>{var e={8599:e=>{let{AbortController:t,AbortSignal:r}="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0;e.exports=t,e.exports.AbortSignal=r,e.exports.default=t},9742:(e,t)=>{t.byteLength=function(e){var t=s(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,i=s(e),o=i[0],l=i[1],c=new a(3*(o+l)/4-l),u=0,d=l>0?o-4:o;for(r=0;r<d;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],c[u++]=t>>16&255,c[u++]=t>>8&255,c[u++]=255&t;return 2===l&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,c[u++]=255&t),1===l&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,c[u++]=t>>8&255,c[u++]=255&t),c},t.fromByteArray=function(e){for(var t,n=e.length,a=n%3,i=[],o=0,s=n-a;o<s;o+=16383)i.push(function(e,t,n){for(var a,i=[],o=t;o<n;o+=3)i.push(r[(a=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]))>>18&63]+r[a>>12&63]+r[a>>6&63]+r[63&a]);return i.join("")}(e,o,o+16383>s?s:o+16383));return 1===a?i.push(r[(t=e[n-1])>>2]+r[t<<4&63]+"=="):2===a&&i.push(r[(t=(e[n-2]<<8)+e[n-1])>>10]+r[t>>4&63]+r[t<<2&63]+"="),i.join("")};for(var r=[],n=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0;o<64;++o)r[o]=i[o],n[i.charCodeAt(o)]=o;function s(e){var t=e.length;if(t%4>0)throw Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return -1===r&&(r=t),[r,r===t?0:4-r%4]}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},8764:(e,t,r)=>{let n=r(9742),a=r(645),i="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;function o(e){if(e>2147483647)throw RangeError('The value "'+e+'" is invalid for option "size"');let t=new Uint8Array(e);return Object.setPrototypeOf(t,s.prototype),t}function s(e,t,r){if("number"==typeof e){if("string"==typeof t)throw TypeError('The "string" argument must be of type string. Received type number');return u(e)}return l(e,t,r)}function l(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!s.isEncoding(t))throw TypeError("Unknown encoding: "+t);let r=0|h(e,t),n=o(r),a=n.write(e,t);return a!==r&&(n=n.slice(0,a)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(X(e,Uint8Array)){let t=new Uint8Array(e);return f(t.buffer,t.byteOffset,t.byteLength)}return d(e)}(e);if(null==e)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(X(e,ArrayBuffer)||e&&X(e.buffer,ArrayBuffer)||"undefined"!=typeof SharedArrayBuffer&&(X(e,SharedArrayBuffer)||e&&X(e.buffer,SharedArrayBuffer)))return f(e,t,r);if("number"==typeof e)throw TypeError('The "value" argument must not be of type number. Received type number');let n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return s.from(n,t,r);let a=function(e){var t;if(s.isBuffer(e)){let t=0|p(e.length),r=o(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||(t=e.length)!=t?o(0):d(e):"Buffer"===e.type&&Array.isArray(e.data)?d(e.data):void 0}(e);if(a)return a;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return s.from(e[Symbol.toPrimitive]("string"),t,r);throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function c(e){if("number"!=typeof e)throw TypeError('"size" argument must be of type number');if(e<0)throw RangeError('The value "'+e+'" is invalid for option "size"')}function u(e){return c(e),o(e<0?0:0|p(e))}function d(e){let t=e.length<0?0:0|p(e.length),r=o(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function f(e,t,r){let n;if(t<0||e.byteLength<t)throw RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw RangeError('"length" is outside of buffer bounds');return Object.setPrototypeOf(n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),s.prototype),n}function p(e){if(e>=2147483647)throw RangeError("Attempt to allocate Buffer larger than maximum size: 0x7fffffff bytes");return 0|e}function h(e,t){if(s.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||X(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);let r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let a=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return I(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return B(e).length;default:if(a)return n?-1:I(e).length;t=(""+t).toLowerCase(),a=!0}}function b(e,t,r){let a=!1;if((void 0===t||t<0)&&(t=0),t>this.length||((void 0===r||r>this.length)&&(r=this.length),r<=0)||(r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return function(e,t,r){let n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let a="";for(let n=t;n<r;++n)a+=U[e[n]];return a}(this,t,r);case"utf8":case"utf-8":return v(this,t,r);case"ascii":return function(e,t,r){let n="";r=Math.min(e.length,r);for(let a=t;a<r;++a)n+=String.fromCharCode(127&e[a]);return n}(this,t,r);case"latin1":case"binary":return function(e,t,r){let n="";r=Math.min(e.length,r);for(let a=t;a<r;++a)n+=String.fromCharCode(e[a]);return n}(this,t,r);case"base64":var i,o;return i=t,o=r,0===i&&o===this.length?n.fromByteArray(this):n.fromByteArray(this.slice(i,o));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return function(e,t,r){let n=e.slice(t,r),a="";for(let e=0;e<n.length-1;e+=2)a+=String.fromCharCode(n[e]+256*n[e+1]);return a}(this,t,r);default:if(a)throw TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),a=!0}}function y(e,t,r){let n=e[t];e[t]=e[r],e[r]=n}function m(e,t,r,n,a){var i;if(0===e.length)return -1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),(i=r=+r)!=i&&(r=a?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(a)return -1;r=e.length-1}else if(r<0){if(!a)return -1;r=0}if("string"==typeof t&&(t=s.from(t,n)),s.isBuffer(t))return 0===t.length?-1:g(e,t,r,n,a);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?a?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):g(e,[t],r,n,a);throw TypeError("val must be string, number or Buffer")}function g(e,t,r,n,a){let i,o=1,s=e.length,l=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return -1;o=2,s/=2,l/=2,r/=2}function c(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(a){let n=-1;for(i=r;i<s;i++)if(c(e,i)===c(t,-1===n?0:i-n)){if(-1===n&&(n=i),i-n+1===l)return n*o}else -1!==n&&(i-=i-n),n=-1}else for(r+l>s&&(r=s-l),i=r;i>=0;i--){let r=!0;for(let n=0;n<l;n++)if(c(e,i+n)!==c(t,n)){r=!1;break}if(r)return i}return -1}function v(e,t,r){r=Math.min(e.length,r);let n=[],a=t;for(;a<r;){let t=e[a],i=null,o=t>239?4:t>223?3:t>191?2:1;if(a+o<=r){let r,n,s,l;switch(o){case 1:t<128&&(i=t);break;case 2:128==(192&(r=e[a+1]))&&(l=(31&t)<<6|63&r)>127&&(i=l);break;case 3:r=e[a+1],n=e[a+2],128==(192&r)&&128==(192&n)&&(l=(15&t)<<12|(63&r)<<6|63&n)>2047&&(l<55296||l>57343)&&(i=l);break;case 4:r=e[a+1],n=e[a+2],s=e[a+3],128==(192&r)&&128==(192&n)&&128==(192&s)&&(l=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&s)>65535&&l<1114112&&(i=l)}}null===i?(i=65533,o=1):i>65535&&(i-=65536,n.push(i>>>10&1023|55296),i=56320|1023&i),n.push(i),a+=o}return function(e){let t=e.length;if(t<=x)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=x));return r}(n)}t.Buffer=s,t.SlowBuffer=function(e){return+e!=e&&(e=0),s.alloc(+e)},t.INSPECT_MAX_BYTES=50,t.kMaxLength=2147483647,s.TYPED_ARRAY_SUPPORT=function(){try{let e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),s.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(s.prototype,"parent",{enumerable:!0,get:function(){if(s.isBuffer(this))return this.buffer}}),Object.defineProperty(s.prototype,"offset",{enumerable:!0,get:function(){if(s.isBuffer(this))return this.byteOffset}}),s.poolSize=8192,s.from=function(e,t,r){return l(e,t,r)},Object.setPrototypeOf(s.prototype,Uint8Array.prototype),Object.setPrototypeOf(s,Uint8Array),s.alloc=function(e,t,r){return c(e),e<=0?o(e):void 0!==t?"string"==typeof r?o(e).fill(t,r):o(e).fill(t):o(e)},s.allocUnsafe=function(e){return u(e)},s.allocUnsafeSlow=function(e){return u(e)},s.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==s.prototype},s.compare=function(e,t){if(X(e,Uint8Array)&&(e=s.from(e,e.offset,e.byteLength)),X(t,Uint8Array)&&(t=s.from(t,t.offset,t.byteLength)),!s.isBuffer(e)||!s.isBuffer(t))throw TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let a=0,i=Math.min(r,n);a<i;++a)if(e[a]!==t[a]){r=e[a],n=t[a];break}return r<n?-1:n<r?1:0},s.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(e,t){let r;if(!Array.isArray(e))throw TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return s.alloc(0);if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;let n=s.allocUnsafe(t),a=0;for(r=0;r<e.length;++r){let t=e[r];if(X(t,Uint8Array))a+t.length>n.length?(s.isBuffer(t)||(t=s.from(t)),t.copy(n,a)):Uint8Array.prototype.set.call(n,t,a);else{if(!s.isBuffer(t))throw TypeError('"list" argument must be an Array of Buffers');t.copy(n,a)}a+=t.length}return n},s.byteLength=h,s.prototype._isBuffer=!0,s.prototype.swap16=function(){let e=this.length;if(e%2!=0)throw RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)y(this,t,t+1);return this},s.prototype.swap32=function(){let e=this.length;if(e%4!=0)throw RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},s.prototype.swap64=function(){let e=this.length;if(e%8!=0)throw RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},s.prototype.toString=function(){let e=this.length;return 0===e?"":0==arguments.length?v(this,0,e):b.apply(this,arguments)},s.prototype.toLocaleString=s.prototype.toString,s.prototype.equals=function(e){if(!s.isBuffer(e))throw TypeError("Argument must be a Buffer");return this===e||0===s.compare(this,e)},s.prototype.inspect=function(){let e="",r=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},i&&(s.prototype[i]=s.prototype.inspect),s.prototype.compare=function(e,t,r,n,a){if(X(e,Uint8Array)&&(e=s.from(e,e.offset,e.byteLength)),!s.isBuffer(e))throw TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===a&&(a=this.length),t<0||r>e.length||n<0||a>this.length)throw RangeError("out of range index");if(n>=a&&t>=r)return 0;if(n>=a)return -1;if(t>=r)return 1;if(this===e)return 0;let i=(a>>>=0)-(n>>>=0),o=(r>>>=0)-(t>>>=0),l=Math.min(i,o),c=this.slice(n,a),u=e.slice(t,r);for(let e=0;e<l;++e)if(c[e]!==u[e]){i=c[e],o=u[e];break}return i<o?-1:o<i?1:0},s.prototype.includes=function(e,t,r){return -1!==this.indexOf(e,t,r)},s.prototype.indexOf=function(e,t,r){return m(this,e,t,r,!0)},s.prototype.lastIndexOf=function(e,t,r){return m(this,e,t,r,!1)},s.prototype.write=function(e,t,r,n){var a,i,o,s,l,c,u,d;if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}let f=this.length-t;if((void 0===r||r>f)&&(r=f),e.length>0&&(r<0||t<0)||t>this.length)throw RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let p=!1;for(;;)switch(n){case"hex":return function(e,t,r,n){let a;r=Number(r)||0;let i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;let o=t.length;for(n>o/2&&(n=o/2),a=0;a<n;++a){let n=parseInt(t.substr(2*a,2),16);if(n!=n)break;e[r+a]=n}return a}(this,e,t,r);case"utf8":case"utf-8":return a=t,i=r,V(I(e,this.length-a),this,a,i);case"ascii":case"latin1":case"binary":return o=t,s=r,V(function(e){let t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(e),this,o,s);case"base64":return l=t,c=r,V(B(e),this,l,c);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return u=t,d=r,V(function(e,t){let r,n;let a=[];for(let i=0;i<e.length&&!((t-=2)<0);++i)n=(r=e.charCodeAt(i))>>8,a.push(r%256),a.push(n);return a}(e,this.length-u),this,u,d);default:if(p)throw TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),p=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};let x=4096;function w(e,t,r){if(e%1!=0||e<0)throw RangeError("offset is not uint");if(e+t>r)throw RangeError("Trying to access beyond buffer length")}function P(e,t,r,n,a,i){if(!s.isBuffer(e))throw TypeError('"buffer" argument must be a Buffer instance');if(t>a||t<i)throw RangeError('"value" argument is out of bounds');if(r+n>e.length)throw RangeError("Index out of range")}function O(e,t,r,n,a){M(t,n,a,e,r,7);let i=Number(t&BigInt(4294967295));e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,r}function T(e,t,r,n,a){M(t,n,a,e,r,7);let i=Number(t&BigInt(4294967295));e[r+7]=i,i>>=8,e[r+6]=i,i>>=8,e[r+5]=i,i>>=8,e[r+4]=i;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=o,o>>=8,e[r+2]=o,o>>=8,e[r+1]=o,o>>=8,e[r]=o,r+8}function z(e,t,r,n,a,i){if(r+n>e.length||r<0)throw RangeError("Index out of range")}function k(e,t,r,n,i){return t=+t,r>>>=0,i||z(e,0,r,4),a.write(e,t,r,n,23,4),r+4}function L(e,t,r,n,i){return t=+t,r>>>=0,i||z(e,0,r,8),a.write(e,t,r,n,52,8),r+8}s.prototype.slice=function(e,t){let r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);let n=this.subarray(e,t);return Object.setPrototypeOf(n,s.prototype),n},s.prototype.readUintLE=s.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||w(e,t,this.length);let n=this[e],a=1,i=0;for(;++i<t&&(a*=256);)n+=this[e+i]*a;return n},s.prototype.readUintBE=s.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||w(e,t,this.length);let n=this[e+--t],a=1;for(;t>0&&(a*=256);)n+=this[e+--t]*a;return n},s.prototype.readUint8=s.prototype.readUInt8=function(e,t){return e>>>=0,t||w(e,1,this.length),this[e]},s.prototype.readUint16LE=s.prototype.readUInt16LE=function(e,t){return e>>>=0,t||w(e,2,this.length),this[e]|this[e+1]<<8},s.prototype.readUint16BE=s.prototype.readUInt16BE=function(e,t){return e>>>=0,t||w(e,2,this.length),this[e]<<8|this[e+1]},s.prototype.readUint32LE=s.prototype.readUInt32LE=function(e,t){return e>>>=0,t||w(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},s.prototype.readUint32BE=s.prototype.readUInt32BE=function(e,t){return e>>>=0,t||w(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},s.prototype.readBigUInt64LE=A(function(e){j(e>>>=0,"offset");let t=this[e],r=this[e+7];void 0!==t&&void 0!==r||H(e,this.length-8);let n=t+256*this[++e]+65536*this[++e]+16777216*this[++e],a=this[++e]+256*this[++e]+65536*this[++e]+16777216*r;return BigInt(n)+(BigInt(a)<<BigInt(32))}),s.prototype.readBigUInt64BE=A(function(e){j(e>>>=0,"offset");let t=this[e],r=this[e+7];void 0!==t&&void 0!==r||H(e,this.length-8);let n=16777216*t+65536*this[++e]+256*this[++e]+this[++e],a=16777216*this[++e]+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(a)}),s.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||w(e,t,this.length);let n=this[e],a=1,i=0;for(;++i<t&&(a*=256);)n+=this[e+i]*a;return n>=(a*=128)&&(n-=Math.pow(2,8*t)),n},s.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||w(e,t,this.length);let n=t,a=1,i=this[e+--n];for(;n>0&&(a*=256);)i+=this[e+--n]*a;return i>=(a*=128)&&(i-=Math.pow(2,8*t)),i},s.prototype.readInt8=function(e,t){return e>>>=0,t||w(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},s.prototype.readInt16LE=function(e,t){e>>>=0,t||w(e,2,this.length);let r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt16BE=function(e,t){e>>>=0,t||w(e,2,this.length);let r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt32LE=function(e,t){return e>>>=0,t||w(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},s.prototype.readInt32BE=function(e,t){return e>>>=0,t||w(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},s.prototype.readBigInt64LE=A(function(e){j(e>>>=0,"offset");let t=this[e],r=this[e+7];void 0!==t&&void 0!==r||H(e,this.length-8);let n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+16777216*this[++e])}),s.prototype.readBigInt64BE=A(function(e){j(e>>>=0,"offset");let t=this[e],r=this[e+7];void 0!==t&&void 0!==r||H(e,this.length-8);let n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(16777216*this[++e]+65536*this[++e]+256*this[++e]+r)}),s.prototype.readFloatLE=function(e,t){return e>>>=0,t||w(e,4,this.length),a.read(this,e,!0,23,4)},s.prototype.readFloatBE=function(e,t){return e>>>=0,t||w(e,4,this.length),a.read(this,e,!1,23,4)},s.prototype.readDoubleLE=function(e,t){return e>>>=0,t||w(e,8,this.length),a.read(this,e,!0,52,8)},s.prototype.readDoubleBE=function(e,t){return e>>>=0,t||w(e,8,this.length),a.read(this,e,!1,52,8)},s.prototype.writeUintLE=s.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||P(this,e,t,r,Math.pow(2,8*r)-1,0);let a=1,i=0;for(this[t]=255&e;++i<r&&(a*=256);)this[t+i]=e/a&255;return t+r},s.prototype.writeUintBE=s.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||P(this,e,t,r,Math.pow(2,8*r)-1,0);let a=r-1,i=1;for(this[t+a]=255&e;--a>=0&&(i*=256);)this[t+a]=e/i&255;return t+r},s.prototype.writeUint8=s.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,1,255,0),this[t]=255&e,t+1},s.prototype.writeUint16LE=s.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},s.prototype.writeUint16BE=s.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},s.prototype.writeUint32LE=s.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},s.prototype.writeUint32BE=s.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},s.prototype.writeBigUInt64LE=A(function(e,t=0){return O(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),s.prototype.writeBigUInt64BE=A(function(e,t=0){return T(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),s.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){let n=Math.pow(2,8*r-1);P(this,e,t,r,n-1,-n)}let a=0,i=1,o=0;for(this[t]=255&e;++a<r&&(i*=256);)e<0&&0===o&&0!==this[t+a-1]&&(o=1),this[t+a]=(e/i>>0)-o&255;return t+r},s.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){let n=Math.pow(2,8*r-1);P(this,e,t,r,n-1,-n)}let a=r-1,i=1,o=0;for(this[t+a]=255&e;--a>=0&&(i*=256);)e<0&&0===o&&0!==this[t+a+1]&&(o=1),this[t+a]=(e/i>>0)-o&255;return t+r},s.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},s.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},s.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},s.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},s.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||P(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},s.prototype.writeBigInt64LE=A(function(e,t=0){return O(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),s.prototype.writeBigInt64BE=A(function(e,t=0){return T(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),s.prototype.writeFloatLE=function(e,t,r){return k(this,e,t,!0,r)},s.prototype.writeFloatBE=function(e,t,r){return k(this,e,t,!1,r)},s.prototype.writeDoubleLE=function(e,t,r){return L(this,e,t,!0,r)},s.prototype.writeDoubleBE=function(e,t,r){return L(this,e,t,!1,r)},s.prototype.copy=function(e,t,r,n){if(!s.isBuffer(e))throw TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r||0===e.length||0===this.length)return 0;if(t<0)throw RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw RangeError("Index out of range");if(n<0)throw RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);let a=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),a},s.prototype.fill=function(e,t,r,n){let a;if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw TypeError("encoding must be a string");if("string"==typeof n&&!s.isEncoding(n))throw TypeError("Unknown encoding: "+n);if(1===e.length){let t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw RangeError("Out of range index");if(r<=t)return this;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{let i=s.isBuffer(e)?e:s.from(e,n),o=i.length;if(0===o)throw TypeError('The value "'+e+'" is invalid for argument "value"');for(a=0;a<r-t;++a)this[a+t]=i[a%o]}return this};let E={};function N(e,t,r){E[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function S(e){let t="",r=e.length,n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function M(e,t,r,n,a,i){if(e>r||e<t){let n;let a="bigint"==typeof t?"n":"";throw n=i>3?0===t||t===BigInt(0)?`>= 0${a} and < 2${a} ** ${8*(i+1)}${a}`:`>= -(2${a} ** ${8*(i+1)-1}${a}) and < 2 ** ${8*(i+1)-1}${a}`:`>= ${t}${a} and <= ${r}${a}`,new E.ERR_OUT_OF_RANGE("value",n,e)}j(a,"offset"),void 0!==n[a]&&void 0!==n[a+i]||H(a,n.length-(i+1))}function j(e,t){if("number"!=typeof e)throw new E.ERR_INVALID_ARG_TYPE(t,"number",e)}function H(e,t,r){if(Math.floor(e)!==e)throw j(e,r),new E.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new E.ERR_BUFFER_OUT_OF_BOUNDS;throw new E.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}N("ERR_BUFFER_OUT_OF_BOUNDS",function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),N("ERR_INVALID_ARG_TYPE",function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`},TypeError),N("ERR_OUT_OF_RANGE",function(e,t,r){let n=`The value of "${e}" is out of range.`,a=r;return Number.isInteger(r)&&Math.abs(r)>4294967296?a=S(String(r)):"bigint"==typeof r&&(a=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(a=S(a)),a+="n"),n+=` It must be ${t}. Received ${a}`},RangeError);let R=/[^+/0-9A-Za-z-_]/g;function I(e,t){let r;t=t||1/0;let n=e.length,a=null,i=[];for(let o=0;o<n;++o){if((r=e.charCodeAt(o))>55295&&r<57344){if(!a){if(r>56319||o+1===n){(t-=3)>-1&&i.push(239,191,189);continue}a=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),a=r;continue}r=65536+(a-55296<<10|r-56320)}else a&&(t-=3)>-1&&i.push(239,191,189);if(a=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function B(e){return n.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(R,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function V(e,t,r,n){let a;for(a=0;a<n&&!(a+r>=t.length||a>=e.length);++a)t[a+r]=e[a];return a}function X(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}let U=function(){let e="0123456789abcdef",t=Array(256);for(let r=0;r<16;++r){let n=16*r;for(let a=0;a<16;++a)t[n+a]=e[r]+e[a]}return t}();function A(e){return"undefined"==typeof BigInt?D:e}function D(){throw Error("BigInt not supported")}},2141:(e,t,r)=>{let n=r(2020),a=r(4694),i=r(6774),o=r(4666),s=r(9032),l=r(4785),c=r(3070),u=r(8112);e.exports={Commented:n,Diagnose:a,Decoder:i,Encoder:o,Simple:s,Tagged:l,Map:c,SharedValueEncoder:u,comment:n.comment,decodeAll:i.decodeAll,decodeFirst:i.decodeFirst,decodeAllSync:i.decodeAllSync,decodeFirstSync:i.decodeFirstSync,diagnose:a.diagnose,encode:o.encode,encodeCanonical:o.encodeCanonical,encodeOne:o.encodeOne,encodeAsync:o.encodeAsync,decode:i.decodeFirstSync,leveldb:{decode:i.decodeFirstSync,encode:o.encode,buffer:!0,name:"cbor"},reset(){o.reset(),l.reset()}}},2020:(e,t,r)=>{let n=r(2830),a=r(9873),i=r(6774),o=r(4202),{MT:s,NUMBYTES:l,SYMS:c}=r(9066),{Buffer:u}=r(8764);function d(e){return e>1?"s":""}class f extends n.Transform{constructor(e={}){let{depth:t=1,max_depth:r=10,no_summary:n=!1,tags:a={},preferWeb:s,encoding:l,...c}=e;super({...c,readableObjectMode:!1,writableObjectMode:!1}),this.depth=t,this.max_depth=r,this.all=new o,a[24]||(a[24]=this._tag_24.bind(this)),this.parser=new i({tags:a,max_depth:r,preferWeb:s,encoding:l}),this.parser.on("value",this._on_value.bind(this)),this.parser.on("start",this._on_start.bind(this)),this.parser.on("start-string",this._on_start_string.bind(this)),this.parser.on("stop",this._on_stop.bind(this)),this.parser.on("more-bytes",this._on_more.bind(this)),this.parser.on("error",this._on_error.bind(this)),n||this.parser.on("data",this._on_data.bind(this)),this.parser.bs.on("read",this._on_read.bind(this))}_tag_24(e){let t=new f({depth:this.depth+1,no_summary:!0});t.on("data",e=>this.push(e)),t.on("error",e=>this.emit("error",e)),t.end(e)}_transform(e,t,r){this.parser.write(e,t,r)}_flush(e){return this.parser._flush(e)}static comment(e,t={},r=null){if(null==e)throw Error("input required");({options:t,cb:r}=function(e,t){switch(typeof e){case"function":return{options:{},cb:e};case"string":return{options:{encoding:e},cb:t};case"number":return{options:{max_depth:e},cb:t};case"object":return{options:e||{},cb:t};default:throw TypeError("Unknown option type")}}(t,r));let n=new o,{encoding:i="hex",...s}=t,l=new f(s),c=null;return"function"==typeof r?(l.on("end",()=>{r(null,n.toString("utf8"))}),l.on("error",r)):c=new Promise((e,t)=>{l.on("end",()=>{e(n.toString("utf8"))}),l.on("error",t)}),l.pipe(n),a.guessEncoding(e,i).pipe(l),c}_on_error(e){this.push("ERROR: "),this.push(e.toString()),this.push("\n")}_on_read(e){this.all.write(e);let t=e.toString("hex");this.push(Array(this.depth+1).join("  ")),this.push(t);let r=2*(this.max_depth-this.depth)-t.length;r<1&&(r=1),this.push(Array(r+1).join(" ")),this.push("-- ")}_on_more(e,t,r,n){let a="";switch(this.depth++,e){case s.POS_INT:a="Positive number,";break;case s.NEG_INT:a="Negative number,";break;case s.ARRAY:a="Array, length";break;case s.MAP:a="Map, count";break;case s.BYTE_STRING:a="Bytes, length";break;case s.UTF8_STRING:a="String, length";break;case s.SIMPLE_FLOAT:a=1===t?"Simple value,":"Float,"}this.push(`${a} next ${t} byte${d(t)}
`)}_on_start_string(e,t,r,n){let a="";switch(this.depth++,e){case s.BYTE_STRING:a=`Bytes, length: ${t}`;break;case s.UTF8_STRING:a=`String, length: ${t.toString()}`}this.push(`${a}
`)}_on_start(e,t,r,n){switch(this.depth++,r){case s.ARRAY:this.push(`[${n}], `);break;case s.MAP:n%2?this.push(`{Val:${Math.floor(n/2)}}, `):this.push(`{Key:${Math.floor(n/2)}}, `)}switch(e){case s.TAG:this.push(`Tag #${t}`),24===t&&this.push(" Encoded CBOR data item");break;case s.ARRAY:t===c.STREAM?this.push("Array (streaming)"):this.push(`Array, ${t} item${d(t)}`);break;case s.MAP:t===c.STREAM?this.push("Map (streaming)"):this.push(`Map, ${t} pair${d(t)}`);break;case s.BYTE_STRING:this.push("Bytes (streaming)");break;case s.UTF8_STRING:this.push("String (streaming)")}this.push("\n")}_on_stop(e){this.depth--}_on_value(e,t,r,n){if(e!==c.BREAK)switch(t){case s.ARRAY:this.push(`[${r}], `);break;case s.MAP:r%2?this.push(`{Val:${Math.floor(r/2)}}, `):this.push(`{Key:${Math.floor(r/2)}}, `)}let i=a.cborValueToString(e,-1/0);switch("string"==typeof e||u.isBuffer(e)?(e.length>0&&(this.push(i),this.push("\n")),this.depth--):(this.push(i),this.push("\n")),n){case l.ONE:case l.TWO:case l.FOUR:case l.EIGHT:this.depth--}}_on_data(){this.push("0x"),this.push(this.all.read().toString("hex")),this.push("\n")}}e.exports=f},9066:(e,t)=>{t.MT={POS_INT:0,NEG_INT:1,BYTE_STRING:2,UTF8_STRING:3,ARRAY:4,MAP:5,TAG:6,SIMPLE_FLOAT:7},t.TAG={DATE_STRING:0,DATE_EPOCH:1,POS_BIGINT:2,NEG_BIGINT:3,DECIMAL_FRAC:4,BIGFLOAT:5,BASE64URL_EXPECTED:21,BASE64_EXPECTED:22,BASE16_EXPECTED:23,CBOR:24,URI:32,BASE64URL:33,BASE64:34,REGEXP:35,MIME:36,SET:258},t.NUMBYTES={ZERO:0,ONE:24,TWO:25,FOUR:26,EIGHT:27,INDEFINITE:31},t.SIMPLE={FALSE:20,TRUE:21,NULL:22,UNDEFINED:23},t.SYMS={NULL:Symbol.for("github.com/hildjj/node-cbor/null"),UNDEFINED:Symbol.for("github.com/hildjj/node-cbor/undef"),PARENT:Symbol.for("github.com/hildjj/node-cbor/parent"),BREAK:Symbol.for("github.com/hildjj/node-cbor/break"),STREAM:Symbol.for("github.com/hildjj/node-cbor/stream")},t.SHIFT32=4294967296,t.BI={MINUS_ONE:BigInt(-1),NEG_MAX:BigInt(-1)-BigInt(Number.MAX_SAFE_INTEGER),MAXINT32:BigInt("0xffffffff"),MAXINT64:BigInt("0xffffffffffffffff"),SHIFT32:BigInt(t.SHIFT32)}},6774:(e,t,r)=>{let n=r(71),a=r(4785),i=r(9032),o=r(9873),s=r(4202),l=(r(2830),r(9066)),{MT:c,NUMBYTES:u,SYMS:d,BI:f}=l,{Buffer:p}=r(8764),h=Symbol("count"),b=Symbol("major type"),y=Symbol("error"),m=Symbol("not found");function g(e,t,r){let n=[];return n[h]=r,n[d.PARENT]=e,n[b]=t,n}class v extends Error{constructor(e,t){super(`Unexpected data: 0x${e.toString(16)}`),this.name="UnexpectedDataError",this.byte=e,this.value=t}}function x(e,t){switch(typeof e){case"function":return{options:{},cb:e};case"string":return{options:{encoding:e},cb:t};case"object":return{options:e||{},cb:t};default:throw TypeError("Unknown option type")}}class w extends n{constructor(e={}){let{tags:t={},max_depth:r=-1,preferWeb:n=!1,required:a=!1,encoding:i="hex",extendedResults:o=!1,preventDuplicateKeys:l=!1,...c}=e;super({defaultEncoding:i,...c}),this.running=!0,this.max_depth=r,this.tags=t,this.preferWeb=n,this.extendedResults=o,this.required=a,this.preventDuplicateKeys=l,o&&(this.bs.on("read",this._onRead.bind(this)),this.valueBytes=new s)}static nullcheck(e){switch(e){case d.NULL:return null;case d.UNDEFINED:return;case m:throw Error("Value not found");default:return e}}static decodeFirstSync(e,t={}){if(null==e)throw TypeError("input required");({options:t}=x(t));let{encoding:r="hex",...n}=t,a=new w(n),i=o.guessEncoding(e,r),s=a._parse(),l=s.next();for(;!l.done;){let e=i.read(l.value);if(null==e||e.length!==l.value)throw Error("Insufficient data");a.extendedResults&&a.valueBytes.write(e),l=s.next(e)}let c=null;if(a.extendedResults)(c=l.value).unused=i.read();else if(c=w.nullcheck(l.value),i.length>0){let e=i.read(1);throw i.unshift(e),new v(e[0],c)}return c}static decodeAllSync(e,t={}){if(null==e)throw TypeError("input required");({options:t}=x(t));let{encoding:r="hex",...n}=t,a=new w(n),i=o.guessEncoding(e,r),s=[];for(;i.length>0;){let e=a._parse(),t=e.next();for(;!t.done;){let r=i.read(t.value);if(null==r||r.length!==t.value)throw Error("Insufficient data");a.extendedResults&&a.valueBytes.write(r),t=e.next(r)}s.push(w.nullcheck(t.value))}return s}static decodeFirst(e,t={},r=null){if(null==e)throw TypeError("input required");({options:t,cb:r}=x(t,r));let{encoding:n="hex",required:a=!1,...i}=t,s=new w(i),l=m,c=o.guessEncoding(e,n),u=new Promise((e,t)=>{s.on("data",e=>{l=w.nullcheck(e),s.close()}),s.once("error",r=>s.extendedResults&&r instanceof v?(l.unused=s.bs.slice(),e(l)):(l!==m&&(r.value=l),l=y,s.close(),t(r))),s.once("end",()=>{switch(l){case m:return a?t(Error("No CBOR found")):e(l);case y:return;default:return e(l)}})});return"function"==typeof r&&u.then(e=>r(null,e),r),c.pipe(s),u}static decodeAll(e,t={},r=null){if(null==e)throw TypeError("input required");({options:t,cb:r}=x(t,r));let{encoding:n="hex",...a}=t,i=new w(a),s=[];i.on("data",e=>s.push(w.nullcheck(e)));let l=new Promise((e,t)=>{i.on("error",t),i.on("end",()=>e(s))});return"function"==typeof r&&l.then(e=>r(void 0,e),e=>r(e,void 0)),o.guessEncoding(e,n).pipe(i),l}close(){this.running=!1,this.__fresh=!0}_onRead(e){this.valueBytes.write(e)}*_parse(){let e=null,t=0,r=null;for(;;){if(this.max_depth>=0&&t>this.max_depth)throw Error(`Maximum depth ${this.max_depth} exceeded`);let[n]=yield 1;if(!this.running)throw this.bs.unshift(p.from([n])),new v(n);let l=n>>5,y=31&n,m=null==e?void 0:e[b],x=null==e?void 0:e.length;switch(y){case u.ONE:this.emit("more-bytes",l,1,m,x),[r]=yield 1;break;case u.TWO:case u.FOUR:case u.EIGHT:{let e=1<<y-24;this.emit("more-bytes",l,e,m,x);let t=yield e;r=l===c.SIMPLE_FLOAT?t:o.parseCBORint(y,t);break}case 28:case 29:case 30:throw this.running=!1,Error(`Additional info not implemented: ${y}`);case u.INDEFINITE:switch(l){case c.POS_INT:case c.NEG_INT:case c.TAG:throw Error(`Invalid indefinite encoding for MT ${l}`)}r=-1;break;default:r=y}switch(l){case c.POS_INT:break;case c.NEG_INT:r=r===Number.MAX_SAFE_INTEGER?f.NEG_MAX:"bigint"==typeof r?f.MINUS_ONE-r:-1-r;break;case c.BYTE_STRING:case c.UTF8_STRING:switch(r){case 0:this.emit("start-string",l,r,m,x),r=l===c.UTF8_STRING?"":this.preferWeb?new Uint8Array(0):p.allocUnsafe(0);break;case -1:this.emit("start",l,d.STREAM,m,x),e=function(e,t){let r=new s;return r[h]=-1,r[d.PARENT]=e,r[b]=t,r}(e,l),t++;continue;default:this.emit("start-string",l,r,m,x),r=yield r,l===c.UTF8_STRING?r=o.utf8(r):this.preferWeb&&(r=new Uint8Array(r.buffer,r.byteOffset,r.length))}break;case c.ARRAY:case c.MAP:switch(r){case 0:r=l===c.MAP?{}:[];break;case -1:this.emit("start",l,d.STREAM,m,x),e=g(e,l,-1),t++;continue;default:this.emit("start",l,r,m,x),e=g(e,l,r*(l-3)),t++;continue}break;case c.TAG:this.emit("start",l,r,m,x),(e=g(e,l,1)).push(r),t++;continue;case c.SIMPLE_FLOAT:if("number"==typeof r){if(y===u.ONE&&r<32)throw Error(`Invalid two-byte encoding of simple value ${r}`);let t=null!=e;r=i.decode(r,t,t&&e[h]<0)}else r=o.parseCBORfloat(r)}this.emit("value",r,m,x,y);let P=!1;for(;null!=e;){if(r===d.BREAK)e[h]=1;else if(Array.isArray(e))e.push(r);else{let t=e[b];if(null!=t&&t!==l)throw this.running=!1,Error("Invalid major type in indefinite encoding");e.write(r)}if(0!=--e[h]){P=!0;break}if(--t,delete e[h],Array.isArray(e))switch(e[b]){case c.ARRAY:r=e;break;case c.MAP:{let t=!0;if(e.length%2!=0)throw Error(`Invalid map length: ${e.length}`);for(let r=0,n=e.length;r<n;r+=2)if("string"!=typeof e[r]||"__proto__"===e[r]){t=!1;break}if(t){r={};for(let t=0,n=e.length;t<n;t+=2){if(this.preventDuplicateKeys&&Object.prototype.hasOwnProperty.call(r,e[t]))throw Error("Duplicate keys in a map");r[e[t]]=e[t+1]}}else{r=new Map;for(let t=0,n=e.length;t<n;t+=2){if(this.preventDuplicateKeys&&r.has(e[t]))throw Error("Duplicate keys in a map");r.set(e[t],e[t+1])}}break}case c.TAG:r=new a(e[0],e[1]).convert(this.tags)}else if(e instanceof s)switch(e[b]){case c.BYTE_STRING:r=e.slice(),this.preferWeb&&(r=new Uint8Array(r.buffer,r.byteOffset,r.length));break;case c.UTF8_STRING:r=e.toString("utf-8")}this.emit("stop",e[b]);let n=e;e=e[d.PARENT],delete n[d.PARENT],delete n[b]}if(!P){if(this.extendedResults){let e=this.valueBytes.slice(),t={value:w.nullcheck(r),bytes:e,length:e.length};return this.valueBytes=new s,t}return r}}}}w.NOT_FOUND=m,e.exports=w},4694:(e,t,r)=>{let n=r(2830),a=r(6774),i=r(9873),o=r(4202),{MT:s,SYMS:l}=r(9066);class c extends n.Transform{constructor(e={}){let{separator:t="\n",stream_errors:r=!1,tags:n,max_depth:i,preferWeb:o,encoding:s,...l}=e;super({...l,readableObjectMode:!1,writableObjectMode:!1}),this.float_bytes=-1,this.separator=t,this.stream_errors=r,this.parser=new a({tags:n,max_depth:i,preferWeb:o,encoding:s}),this.parser.on("more-bytes",this._on_more.bind(this)),this.parser.on("value",this._on_value.bind(this)),this.parser.on("start",this._on_start.bind(this)),this.parser.on("stop",this._on_stop.bind(this)),this.parser.on("data",this._on_data.bind(this)),this.parser.on("error",this._on_error.bind(this))}_transform(e,t,r){this.parser.write(e,t,r)}_flush(e){this.parser._flush(t=>this.stream_errors?(t&&this._on_error(t),e()):e(t))}static diagnose(e,t={},r=null){if(null==e)throw TypeError("input required");({options:t,cb:r}=function(e,t){switch(typeof e){case"function":return{options:{},cb:e};case"string":return{options:{encoding:e},cb:t};case"object":return{options:e||{},cb:t};default:throw TypeError("Unknown option type")}}(t,r));let{encoding:n="hex",...a}=t,s=new o,l=new c(a),u=null;return"function"==typeof r?(l.on("end",()=>r(null,s.toString("utf8"))),l.on("error",r)):u=new Promise((e,t)=>{l.on("end",()=>e(s.toString("utf8"))),l.on("error",t)}),l.pipe(s),i.guessEncoding(e,n).pipe(l),u}_on_error(e){this.stream_errors?this.push(e.toString()):this.emit("error",e)}_on_more(e,t,r,n){e===s.SIMPLE_FLOAT&&(this.float_bytes=({2:1,4:2,8:3})[t])}_fore(e,t){switch(e){case s.BYTE_STRING:case s.UTF8_STRING:case s.ARRAY:t>0&&this.push(", ");break;case s.MAP:t>0&&(t%2?this.push(": "):this.push(", "))}}_on_value(e,t,r){if(e===l.BREAK)return;this._fore(t,r);let n=this.float_bytes;this.float_bytes=-1,this.push(i.cborValueToString(e,n))}_on_start(e,t,r,n){switch(this._fore(r,n),e){case s.TAG:this.push(`${t}(`);break;case s.ARRAY:this.push("[");break;case s.MAP:this.push("{");break;case s.BYTE_STRING:case s.UTF8_STRING:this.push("(")}t===l.STREAM&&this.push("_ ")}_on_stop(e){switch(e){case s.TAG:this.push(")");break;case s.ARRAY:this.push("]");break;case s.MAP:this.push("}");break;case s.BYTE_STRING:case s.UTF8_STRING:this.push(")")}}_on_data(){this.push(this.separator)}}e.exports=c},4666:(e,t,r)=>{let n=r(2830),a=r(4202),i=r(9873),o=r(9066),{MT:s,NUMBYTES:l,SHIFT32:c,SIMPLE:u,SYMS:d,TAG:f,BI:p}=o,{Buffer:h}=r(8764),b=s.SIMPLE_FLOAT<<5|l.TWO,y=s.SIMPLE_FLOAT<<5|l.FOUR,m=s.SIMPLE_FLOAT<<5|l.EIGHT,g=s.SIMPLE_FLOAT<<5|u.TRUE,v=s.SIMPLE_FLOAT<<5|u.FALSE,x=s.SIMPLE_FLOAT<<5|u.UNDEFINED,w=s.SIMPLE_FLOAT<<5|u.NULL,P=h.from([255]),O=h.from("f97e00","hex"),T=h.from("f9fc00","hex"),z=h.from("f97c00","hex"),k=h.from("f98000","hex"),L={},E={};class N extends n.Transform{constructor(e={}){let{canonical:t=!1,encodeUndefined:r,disallowUndefinedKeys:n=!1,dateType:a="number",collapseBigIntegers:i=!1,detectLoops:o=!1,omitUndefinedProperties:s=!1,genTypes:l=[],...c}=e;if(super({...c,readableObjectMode:!1,writableObjectMode:!0}),this.canonical=t,this.encodeUndefined=r,this.disallowUndefinedKeys=n,this.dateType=function(e){if(!e)return"number";switch(e.toLowerCase()){case"number":return"number";case"float":return"float";case"int":case"integer":return"int";case"string":return"string"}throw TypeError(`dateType invalid, got "${e}"`)}(a),this.collapseBigIntegers=!!this.canonical||i,this.detectLoops=void 0,"boolean"==typeof o)o&&(this.detectLoops=new WeakSet);else{if(!(o instanceof WeakSet))throw TypeError("detectLoops must be boolean or WeakSet");this.detectLoops=o}if(this.omitUndefinedProperties=s,this.semanticTypes={...N.SEMANTIC_TYPES},Array.isArray(l))for(let e=0,t=l.length;e<t;e+=2)this.addSemanticType(l[e],l[e+1]);else for(let[e,t]of Object.entries(l))this.addSemanticType(e,t)}_transform(e,t,r){r(!1===this.pushAny(e)?Error("Push Error"):void 0)}_flush(e){e()}_pushUInt8(e){let t=h.allocUnsafe(1);return t.writeUInt8(e,0),this.push(t)}_pushUInt16BE(e){let t=h.allocUnsafe(2);return t.writeUInt16BE(e,0),this.push(t)}_pushUInt32BE(e){let t=h.allocUnsafe(4);return t.writeUInt32BE(e,0),this.push(t)}_pushFloatBE(e){let t=h.allocUnsafe(4);return t.writeFloatBE(e,0),this.push(t)}_pushDoubleBE(e){let t=h.allocUnsafe(8);return t.writeDoubleBE(e,0),this.push(t)}_pushNaN(){return this.push(O)}_pushInfinity(e){let t=e<0?T:z;return this.push(t)}_pushFloat(e){if(this.canonical){let t=h.allocUnsafe(2);if(i.writeHalf(t,e))return this._pushUInt8(b)&&this.push(t)}return Math.fround(e)===e?this._pushUInt8(y)&&this._pushFloatBE(e):this._pushUInt8(m)&&this._pushDoubleBE(e)}_pushInt(e,t,r){let n=t<<5;if(e<24)return this._pushUInt8(n|e);if(e<=255)return this._pushUInt8(n|l.ONE)&&this._pushUInt8(e);if(e<=65535)return this._pushUInt8(n|l.TWO)&&this._pushUInt16BE(e);if(e<=4294967295)return this._pushUInt8(n|l.FOUR)&&this._pushUInt32BE(e);let a=Number.MAX_SAFE_INTEGER;return t===s.NEG_INT&&a--,e<=a?this._pushUInt8(n|l.EIGHT)&&this._pushUInt32BE(Math.floor(e/c))&&this._pushUInt32BE(e%c):t===s.NEG_INT?this._pushFloat(r):this._pushFloat(e)}_pushIntNum(e){return Object.is(e,-0)?this.push(k):e<0?this._pushInt(-e-1,s.NEG_INT,e):this._pushInt(e,s.POS_INT)}_pushNumber(e){return isNaN(e)?this._pushNaN():isFinite(e)?Math.round(e)===e?this._pushIntNum(e):this._pushFloat(e):this._pushInfinity(e)}_pushString(e){let t=h.byteLength(e,"utf8");return this._pushInt(t,s.UTF8_STRING)&&this.push(e,"utf8")}_pushBoolean(e){return this._pushUInt8(e?g:v)}_pushUndefined(e){switch(typeof this.encodeUndefined){case"undefined":return this._pushUInt8(x);case"function":return this.pushAny(this.encodeUndefined(e));case"object":{let e=i.bufferishToBuffer(this.encodeUndefined);if(e)return this.push(e)}}return this.pushAny(this.encodeUndefined)}_pushNull(e){return this._pushUInt8(w)}_pushTag(e){return this._pushInt(e,s.TAG)}_pushJSBigint(e){let t=s.POS_INT,r=f.POS_BIGINT;if(e<0&&(e=-e+p.MINUS_ONE,t=s.NEG_INT,r=f.NEG_BIGINT),this.collapseBigIntegers&&e<=p.MAXINT64)return e<=4294967295?this._pushInt(Number(e),t):this._pushUInt8(t<<5|l.EIGHT)&&this._pushUInt32BE(Number(e/p.SHIFT32))&&this._pushUInt32BE(Number(e%p.SHIFT32));let n=e.toString(16);n.length%2&&(n=`0${n}`);let a=h.from(n,"hex");return this._pushTag(r)&&N._pushBuffer(this,a)}_pushObject(e,t){if(!e)return this._pushNull(e);if(!(t={indefinite:!1,skipTypes:!1,...t}).indefinite&&this.detectLoops){if(this.detectLoops.has(e))throw Error("Loop detected while CBOR encoding.\nCall removeLoopDetectors before resuming.");this.detectLoops.add(e)}if(!t.skipTypes){let t=e.encodeCBOR;if("function"==typeof t)return t.call(e,this);let r=this.semanticTypes[e.constructor.name];if(r)return r.call(e,this,e)}let r=Object.keys(e).filter(t=>{let r=typeof e[t];return"function"!==r&&(!this.omitUndefinedProperties||"undefined"!==r)}),n={};if(this.canonical&&r.sort((e,t)=>{let r=n[e]||(n[e]=N.encode(e)),a=n[t]||(n[t]=N.encode(t));return r.compare(a)}),t.indefinite){if(!this._pushUInt8(s.MAP<<5|l.INDEFINITE))return!1}else if(!this._pushInt(r.length,s.MAP))return!1;let a=null;for(let t=0,i=r.length;t<i;t++){let i=r[t];if(this.canonical&&(a=n[i])){if(!this.push(a))return!1}else if(!this._pushString(i))return!1;if(!this.pushAny(e[i]))return!1}if(t.indefinite){if(!this.push(P))return!1}else this.detectLoops&&this.detectLoops.delete(e);return!0}_encodeAll(e){let t=new a({highWaterMark:this.readableHighWaterMark});for(let r of(this.pipe(t),e))this.pushAny(r);return this.end(),t.read()}addSemanticType(e,t){let r="string"==typeof e?e:e.name,n=this.semanticTypes[r];if(t){if("function"!=typeof t)throw TypeError("fun must be of type function");this.semanticTypes[r]=t}else n&&delete this.semanticTypes[r];return n}pushAny(e){switch(typeof e){case"number":return this._pushNumber(e);case"bigint":return this._pushJSBigint(e);case"string":return this._pushString(e);case"boolean":return this._pushBoolean(e);case"undefined":return this._pushUndefined(e);case"object":return this._pushObject(e);case"symbol":switch(e){case d.NULL:return this._pushNull(null);case d.UNDEFINED:return this._pushUndefined(void 0);default:throw TypeError(`Unknown symbol: ${e.toString()}`)}default:throw TypeError(`Unknown type: ${typeof e}, ${"function"==typeof e.toString?e.toString():""}`)}}static pushArray(e,t,r){r={indefinite:!1,...r};let n=t.length;if(r.indefinite){if(!e._pushUInt8(s.ARRAY<<5|l.INDEFINITE))return!1}else if(!e._pushInt(n,s.ARRAY))return!1;for(let r=0;r<n;r++)if(!e.pushAny(t[r]))return!1;return!(r.indefinite&&!e.push(P))}removeLoopDetectors(){return!!this.detectLoops&&(this.detectLoops=new WeakSet,!0)}static _pushDate(e,t){switch(e.dateType){case"string":return e._pushTag(f.DATE_STRING)&&e._pushString(t.toISOString());case"int":return e._pushTag(f.DATE_EPOCH)&&e._pushIntNum(Math.round(t.getTime()/1e3));case"float":return e._pushTag(f.DATE_EPOCH)&&e._pushFloat(t.getTime()/1e3);default:return e._pushTag(f.DATE_EPOCH)&&e.pushAny(t.getTime()/1e3)}}static _pushBuffer(e,t){return e._pushInt(t.length,s.BYTE_STRING)&&e.push(t)}static _pushNoFilter(e,t){return N._pushBuffer(e,t.slice())}static _pushRegexp(e,t){return e._pushTag(f.REGEXP)&&e.pushAny(t.source)}static _pushSet(e,t){if(!e._pushTag(f.SET)||!e._pushInt(t.size,s.ARRAY))return!1;for(let r of t)if(!e.pushAny(r))return!1;return!0}static _pushURL(e,t){return e._pushTag(f.URI)&&e.pushAny(t.toString())}static _pushBoxed(e,t){return e.pushAny(t.valueOf())}static _pushMap(e,t,r){r={indefinite:!1,...r};let n=[...t.entries()];if(e.omitUndefinedProperties&&(n=n.filter(([e,t])=>void 0!==t)),r.indefinite){if(!e._pushUInt8(s.MAP<<5|l.INDEFINITE))return!1}else if(!e._pushInt(n.length,s.MAP))return!1;if(e.canonical){let t=new N({genTypes:e.semanticTypes,canonical:e.canonical,detectLoops:!!e.detectLoops,dateType:e.dateType,disallowUndefinedKeys:e.disallowUndefinedKeys,collapseBigIntegers:e.collapseBigIntegers}),r=new a({highWaterMark:e.readableHighWaterMark});for(let[a,i]of(t.pipe(r),n.sort(([e],[n])=>{t.pushAny(e);let a=r.read();t.pushAny(n);let i=r.read();return a.compare(i)}),n)){if(e.disallowUndefinedKeys&&void 0===a)throw Error("Invalid Map key: undefined");if(!e.pushAny(a)||!e.pushAny(i))return!1}}else for(let[t,r]of n){if(e.disallowUndefinedKeys&&void 0===t)throw Error("Invalid Map key: undefined");if(!e.pushAny(t)||!e.pushAny(r))return!1}return!(r.indefinite&&!e.push(P))}static _pushTypedArray(e,t){let r=64,n=t.BYTES_PER_ELEMENT,{name:a}=t.constructor;return a.startsWith("Float")?(r|=16,n/=2):a.includes("U")||(r|=8),(a.includes("Clamped")||1!==n&&!i.isBigEndian())&&(r|=4),r|=({1:0,2:1,4:2,8:3})[n],!!e._pushTag(r)&&N._pushBuffer(e,h.from(t.buffer,t.byteOffset,t.byteLength))}static _pushArrayBuffer(e,t){return N._pushBuffer(e,h.from(t))}static encodeIndefinite(e,t,r={}){if(null==t){if(null==this)throw Error("No object to encode");t=this}let{chunkSize:n=4096}=r,a=!0,o=typeof t,c=null;if("string"===o){a=a&&e._pushUInt8(s.UTF8_STRING<<5|l.INDEFINITE);let r=0;for(;r<t.length;){let i=r+n;a=a&&e._pushString(t.slice(r,i)),r=i}a=a&&e.push(P)}else if(c=i.bufferishToBuffer(t)){a=a&&e._pushUInt8(s.BYTE_STRING<<5|l.INDEFINITE);let t=0;for(;t<c.length;){let r=t+n;a=a&&N._pushBuffer(e,c.slice(t,r)),t=r}a=a&&e.push(P)}else if(Array.isArray(t))a=a&&N.pushArray(e,t,{indefinite:!0});else if(t instanceof Map)a=a&&N._pushMap(e,t,{indefinite:!0});else{if("object"!==o)throw Error("Invalid indefinite encoding");a=a&&e._pushObject(t,{indefinite:!0,skipTypes:!0})}return a}static encode(...e){return(new N)._encodeAll(e)}static encodeCanonical(...e){return new N({canonical:!0})._encodeAll(e)}static encodeOne(e,t){return new N(t)._encodeAll([e])}static encodeAsync(e,t){return new Promise((r,n)=>{let a=[],i=new N(t);i.on("data",e=>a.push(e)),i.on("error",n),i.on("finish",()=>r(h.concat(a))),i.pushAny(e),i.end()})}static get SEMANTIC_TYPES(){return E}static set SEMANTIC_TYPES(e){E=e}static reset(){N.SEMANTIC_TYPES={...L}}}Object.assign(L,{Array:N.pushArray,Date:N._pushDate,Buffer:N._pushBuffer,[h.name]:N._pushBuffer,Map:N._pushMap,NoFilter:N._pushNoFilter,[a.name]:N._pushNoFilter,RegExp:N._pushRegexp,Set:N._pushSet,ArrayBuffer:N._pushArrayBuffer,Uint8ClampedArray:N._pushTypedArray,Uint8Array:N._pushTypedArray,Uint16Array:N._pushTypedArray,Uint32Array:N._pushTypedArray,Int8Array:N._pushTypedArray,Int16Array:N._pushTypedArray,Int32Array:N._pushTypedArray,Float32Array:N._pushTypedArray,Float64Array:N._pushTypedArray,URL:N._pushURL,Boolean:N._pushBoxed,Number:N._pushBoxed,String:N._pushBoxed}),"undefined"!=typeof BigUint64Array&&(L[BigUint64Array.name]=N._pushTypedArray),"undefined"!=typeof BigInt64Array&&(L[BigInt64Array.name]=N._pushTypedArray),N.reset(),e.exports=N},3070:(e,t,r)=>{let{Buffer:n}=r(8764),a=r(4666),i=r(6774),{MT:o}=r(9066);class s extends Map{constructor(e){super(e)}static _encode(e){return a.encodeCanonical(e).toString("base64")}static _decode(e){return i.decodeFirstSync(e,"base64")}get(e){return super.get(s._encode(e))}set(e,t){return super.set(s._encode(e),t)}delete(e){return super.delete(s._encode(e))}has(e){return super.has(s._encode(e))}*keys(){for(let e of super.keys())yield s._decode(e)}*entries(){for(let e of super.entries())yield[s._decode(e[0]),e[1]]}[Symbol.iterator](){return this.entries()}forEach(e,t){if("function"!=typeof e)throw TypeError("Must be function");for(let t of super.entries())e.call(this,t[1],s._decode(t[0]),this)}encodeCBOR(e){if(!e._pushInt(this.size,o.MAP))return!1;if(e.canonical){let t=Array.from(super.entries()).map(e=>[n.from(e[0],"base64"),e[1]]);for(let r of(t.sort((e,t)=>e[0].compare(t[0])),t))if(!e.push(r[0])||!e.pushAny(r[1]))return!1}else for(let t of super.entries())if(!e.push(n.from(t[0],"base64"))||!e.pushAny(t[1]))return!1;return!0}}e.exports=s},1226:e=>{class t{constructor(){this.clear()}clear(){this.map=new WeakMap,this.count=0,this.recording=!0}stop(){this.recording=!1}check(e){let r=this.map.get(e);if(r)return r.length>1?r[0]||this.recording?r[1]:(r[0]=!0,t.FIRST):this.recording?(r.push(this.count++),r[1]):t.NEVER;if(!this.recording)throw Error("New object detected when not recording");return this.map.set(e,[!1]),t.NEVER}}t.NEVER=-1,t.FIRST=-2,e.exports=t},8112:(e,t,r)=>{let n=r(4666),a=r(1226),{Buffer:i}=r(8764);class o extends n{constructor(e){super(e),this.valueSharing=new a}_pushObject(e,t){if(null!==e){let t=this.valueSharing.check(e);switch(t){case a.FIRST:this._pushTag(28);break;case a.NEVER:break;default:return this._pushTag(29)&&this._pushIntNum(t)}}return super._pushObject(e,t)}stopRecording(){this.valueSharing.stop()}clearRecording(){this.valueSharing.clear()}static encode(...e){let t=new o;for(let r of(t.on("data",()=>{}),e))t.pushAny(r);return t.stopRecording(),t.removeAllListeners("data"),t._encodeAll(e)}static encodeCanonical(...e){throw Error("Cannot encode canonically in a SharedValueEncoder, which serializes objects multiple times.")}static encodeOne(e,t){let r=new o(t);return r.on("data",()=>{}),r.pushAny(e),r.stopRecording(),r.removeAllListeners("data"),r._encodeAll([e])}static encodeAsync(e,t){return new Promise((r,n)=>{let a=[],s=new o(t);s.on("data",()=>{}),s.on("error",n),s.on("finish",()=>r(i.concat(a))),s.pushAny(e),s.stopRecording(),s.removeAllListeners("data"),s.on("data",e=>a.push(e)),s.pushAny(e),s.end()})}}e.exports=o},9032:(e,t,r)=>{let{MT:n,SIMPLE:a,SYMS:i}=r(9066);class o{constructor(e){if("number"!=typeof e)throw Error("Invalid Simple type: "+typeof e);if(e<0||e>255||(0|e)!==e)throw Error(`value must be a small positive integer: ${e}`);this.value=e}toString(){return`simple(${this.value})`}[Symbol.for("nodejs.util.inspect.custom")](e,t){return`simple(${this.value})`}encodeCBOR(e){return e._pushInt(this.value,n.SIMPLE_FLOAT)}static isSimple(e){return e instanceof o}static decode(e,t=!0,r=!1){switch(e){case a.FALSE:return!1;case a.TRUE:return!0;case a.NULL:return t?null:i.NULL;case a.UNDEFINED:if(t)return;return i.UNDEFINED;case -1:if(!t||!r)throw Error("Invalid BREAK");return i.BREAK;default:return new o(e)}}}e.exports=o},4785:(e,t,r)=>{let n=r(9066),a=r(9873),i=Symbol("INTERNAL_JSON");function o(e,t){if(a.isBufferish(e))e.toJSON=t;else if(Array.isArray(e))for(let r of e)o(r,t);else if(e&&"object"==typeof e&&(!(e instanceof h)||e.tag<21||e.tag>23))for(let r of Object.values(e))o(r,t)}function s(){return a.base64(this)}function l(){return a.base64url(this)}function c(){return this.toString("hex")}let u={0:e=>new Date(e),1:e=>new Date(1e3*e),2:e=>a.bufferToBigInt(e),3:e=>n.BI.MINUS_ONE-a.bufferToBigInt(e),21:(e,t)=>(a.isBufferish(e)?t[i]=l:o(e,l),t),22:(e,t)=>(a.isBufferish(e)?t[i]=s:o(e,s),t),23:(e,t)=>(a.isBufferish(e)?t[i]=c:o(e,c),t),32:e=>new URL(e),33:(e,t)=>{if(!e.match(/^[a-zA-Z0-9_-]+$/))throw Error("Invalid base64url characters");let r=e.length%4;if(1===r)throw Error("Invalid base64url length");if(2===r){if(-1==="AQgw".indexOf(e[e.length-1]))throw Error("Invalid base64 padding")}else if(3===r&&-1==="AEIMQUYcgkosw048".indexOf(e[e.length-1]))throw Error("Invalid base64 padding");return t},34:(e,t)=>{let r=e.match(/^[a-zA-Z0-9+/]+(?<padding>={0,2})$/);if(!r)throw Error("Invalid base64 characters");if(e.length%4!=0)throw Error("Invalid base64 length");if("="===r.groups.padding){if(-1==="AQgw".indexOf(e[e.length-2]))throw Error("Invalid base64 padding")}else if("=="===r.groups.padding&&-1==="AEIMQUYcgkosw048".indexOf(e[e.length-3]))throw Error("Invalid base64 padding");return t},35:e=>new RegExp(e),258:e=>new Set(e)},d={64:Uint8Array,65:Uint16Array,66:Uint32Array,68:Uint8ClampedArray,69:Uint16Array,70:Uint32Array,72:Int8Array,73:Int16Array,74:Int32Array,77:Int16Array,78:Int32Array,81:Float32Array,82:Float64Array,85:Float32Array,86:Float64Array};function f(e,t){if(!a.isBufferish(e))throw TypeError("val not a buffer");let{tag:r}=t,n=d[r];if(!n)throw Error(`Invalid typed array tag: ${r}`);let i=2**(((16&r)>>4)+(3&r));return!(4&r)!==a.isBigEndian()&&i>1&&function(e,t,r,n){let a=new DataView(e),[i,o]={2:[a.getUint16,a.setUint16],4:[a.getUint32,a.setUint32],8:[a.getBigUint64,a.setBigUint64]}[t],s=r+n;for(let e=r;e<s;e+=t)o.call(a,e,i.call(a,e,!0))}(e.buffer,i,e.byteOffset,e.byteLength),new n(e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength))}for(let e of("undefined"!=typeof BigUint64Array&&(d[67]=BigUint64Array,d[71]=BigUint64Array),"undefined"!=typeof BigInt64Array&&(d[75]=BigInt64Array,d[79]=BigInt64Array),Object.keys(d)))u[e]=f;let p={};class h{constructor(e,t,r){if(this.tag=e,this.value=t,this.err=r,"number"!=typeof this.tag)throw Error(`Invalid tag type (${typeof this.tag})`);if(this.tag<0||(0|this.tag)!==this.tag)throw Error(`Tag must be a positive integer: ${this.tag}`)}toJSON(){if(this[i])return this[i].call(this.value);let e={tag:this.tag,value:this.value};return this.err&&(e.err=this.err),e}toString(){return`${this.tag}(${JSON.stringify(this.value)})`}encodeCBOR(e){return e._pushTag(this.tag),e.pushAny(this.value)}convert(e){let t=null==e?void 0:e[this.tag];if(null===t||"function"!=typeof t&&"function"!=typeof(t=h.TAGS[this.tag]))return this;try{return t.call(this,this.value,this)}catch(e){return e&&e.message&&e.message.length>0?this.err=e.message:this.err=e,this}}static get TAGS(){return p}static set TAGS(e){p=e}static reset(){h.TAGS={...u}}}h.INTERNAL_JSON=i,h.reset(),e.exports=h},9873:(e,t,r)=>{let{Buffer:n}=r(8764),a=r(4202),i=r(2830),o=r(9066),{NUMBYTES:s,SHIFT32:l,BI:c,SYMS:u}=o,d=new TextDecoder("utf8",{fatal:!0,ignoreBOM:!0});t.utf8=e=>d.decode(e),t.utf8.checksUTF8=!0,t.isBufferish=function(e){return e&&"object"==typeof e&&(n.isBuffer(e)||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof ArrayBuffer||e instanceof DataView)},t.bufferishToBuffer=function(e){return n.isBuffer(e)?e:ArrayBuffer.isView(e)?n.from(e.buffer,e.byteOffset,e.byteLength):e instanceof ArrayBuffer?n.from(e):null},t.parseCBORint=function(e,t){switch(e){case s.ONE:return t.readUInt8(0);case s.TWO:return t.readUInt16BE(0);case s.FOUR:return t.readUInt32BE(0);case s.EIGHT:{let e=t.readUInt32BE(0),r=t.readUInt32BE(4);return e>2097151?BigInt(e)*c.SHIFT32+BigInt(r):e*l+r}default:throw Error(`Invalid additional info for int: ${e}`)}},t.writeHalf=function(e,t){let r=n.allocUnsafe(4);r.writeFloatBE(t,0);let a=r.readUInt32BE(0);if(0!=(8191&a))return!1;let i=a>>16&32768,o=a>>23&255,s=8388607&a;if(o>=113&&o<=142)i+=(o-112<<10)+(s>>13);else{if(!(o>=103&&o<113)||s&(1<<126-o)-1)return!1;i+=s+8388608>>126-o}return e.writeUInt16BE(i),!0},t.parseHalf=function(e){let t=128&e[0]?-1:1,r=(124&e[0])>>2,n=(3&e[0])<<8|e[1];return r?31===r?t*(n?NaN:1/0):t*2**(r-25)*(1024+n):5960464477539063e-23*t*n},t.parseCBORfloat=function(e){switch(e.length){case 2:return t.parseHalf(e);case 4:return e.readFloatBE(0);case 8:return e.readDoubleBE(0);default:throw Error(`Invalid float size: ${e.length}`)}},t.hex=function(e){return n.from(e.replace(/^0x/,""),"hex")},t.bin=function(e){let t=0,r=(e=e.replace(/\s/g,"")).length%8||8,a=[];for(;r<=e.length;)a.push(parseInt(e.slice(t,r),2)),t=r,r+=8;return n.from(a)},t.arrayEqual=function(e,t){return null==e&&null==t||null!=e&&null!=t&&e.length===t.length&&e.every((e,r)=>e===t[r])},t.bufferToBigInt=function(e){return BigInt(`0x${e.toString("hex")}`)},t.cborValueToString=function(e,r=-1){switch(typeof e){case"symbol":{switch(e){case u.NULL:return"null";case u.UNDEFINED:return"undefined";case u.BREAK:return"BREAK"}if(e.description)return e.description;let t=e.toString().match(/^Symbol\((?<name>.*)\)/);return t&&t.groups.name?t.groups.name:"Symbol"}case"string":return JSON.stringify(e);case"bigint":return e.toString();case"number":{let t=Object.is(e,-0)?"-0":String(e);return r>0?`${t}_${r}`:t}case"object":{let n=t.bufferishToBuffer(e);if(n){let e=n.toString("hex");return r===-1/0?e:`h'${e}'`}return"function"==typeof e[Symbol.for("nodejs.util.inspect.custom")]?e[Symbol.for("nodejs.util.inspect.custom")]():Array.isArray(e)?"[]":"{}"}}return String(e)},t.guessEncoding=function(e,r){if("string"==typeof e)return new a(e,null==r?"hex":r);let n=t.bufferishToBuffer(e);if(n)return new a(n);if(e instanceof i.Readable||["read","on","pipe"].every(t=>"function"==typeof e[t]))return e;throw Error("Unknown input type")};let f={"=":"","+":"-","/":"_"};t.base64url=function(e){return t.bufferishToBuffer(e).toString("base64").replace(/[=+/]/g,e=>f[e])},t.base64=function(e){return t.bufferishToBuffer(e).toString("base64")},t.isBigEndian=function(){let e=new Uint8Array(4);return!((new Uint32Array(e.buffer)[0]=1)&e[0])}},4202:(e,t,r)=>{let n=r(2830),{Buffer:a}=r(8764),i=new TextDecoder("utf8",{fatal:!0,ignoreBOM:!0});class o extends n.Transform{constructor(e,t,r={}){let n=null,i=null;switch(typeof e){case"object":a.isBuffer(e)?n=e:e&&(r=e);break;case"string":n=e;break;case"undefined":break;default:throw TypeError("Invalid input")}switch(typeof t){case"object":t&&(r=t);break;case"string":i=t;break;case"undefined":break;default:throw TypeError("Invalid inputEncoding")}if(!r||"object"!=typeof r)throw TypeError("Invalid options");null==n&&(n=r.input),null==i&&(i=r.inputEncoding),delete r.input,delete r.inputEncoding;let o=null==r.watchPipe||r.watchPipe;delete r.watchPipe;let s=!!r.readError;delete r.readError,super(r),this.readError=s,o&&this.on("pipe",e=>{let t=e._readableState.objectMode;if(this.length>0&&t!==this._readableState.objectMode)throw Error("Do not switch objectMode in the middle of the stream");this._readableState.objectMode=t,this._writableState.objectMode=t}),null!=n&&this.end(n,i)}static isNoFilter(e){return e instanceof this}static compare(e,t){if(!(e instanceof this))throw TypeError("Arguments must be NoFilters");return e===t?0:e.compare(t)}static concat(e,t){if(!Array.isArray(e))throw TypeError("list argument must be an Array of NoFilters");if(0===e.length||0===t)return a.alloc(0);null==t&&(t=e.reduce((e,t)=>{if(!(t instanceof o))throw TypeError("list argument must be an Array of NoFilters");return e+t.length},0));let r=!0,n=!0,i=e.map(e=>{if(!(e instanceof o))throw TypeError("list argument must be an Array of NoFilters");let t=e.slice();return a.isBuffer(t)?n=!1:r=!1,t});if(r)return a.concat(i,t);if(n)return[].concat(...i).slice(0,t);throw Error("Concatenating mixed object and byte streams not supported")}_transform(e,t,r){this._readableState.objectMode||a.isBuffer(e)||(e=a.from(e,t)),this.push(e),r()}_bufArray(){let e=this._readableState.buffer;if(!Array.isArray(e)){let t=e.head;for(e=[];null!=t;)e.push(t.data),t=t.next}return e}read(e){let t=super.read(e);if(null!=t){if(this.emit("read",t),this.readError&&t.length<e)throw Error(`Read ${t.length}, wanted ${e}`)}else if(this.readError)throw Error(`No data available, wanted ${e}`);return t}readFull(e){let t=null,r=null,n=null;return new Promise((a,i)=>{this.length>=e?a(this.read(e)):this.writableFinished?i(Error(`Stream finished before ${e} bytes were available`)):(t=t=>{this.length>=e&&a(this.read(e))},r=()=>{i(Error(`Stream finished before ${e} bytes were available`))},n=i,this.on("readable",t),this.on("error",n),this.on("finish",r))}).finally(()=>{t&&(this.removeListener("readable",t),this.removeListener("error",n),this.removeListener("finish",r))})}promise(e){let t=!1;return new Promise((r,n)=>{this.on("finish",()=>{let n=this.read();null==e||t||(t=!0,e(null,n)),r(n)}),this.on("error",r=>{null==e||t||(t=!0,e(r)),n(r)})})}compare(e){if(!(e instanceof o))throw TypeError("Arguments must be NoFilters");if(this===e)return 0;let t=this.slice(),r=e.slice();if(a.isBuffer(t)&&a.isBuffer(r))return t.compare(r);throw Error("Cannot compare streams in object mode")}equals(e){return 0===this.compare(e)}slice(e,t){if(this._readableState.objectMode)return this._bufArray().slice(e,t);let r=this._bufArray();switch(r.length){case 0:return a.alloc(0);case 1:return r[0].slice(e,t);default:return a.concat(r).slice(e,t)}}get(e){return this.slice()[e]}toJSON(){let e=this.slice();return a.isBuffer(e)?e.toJSON():e}toString(e,t,r){let n=this.slice(t,r);return a.isBuffer(n)?e&&"utf8"!==e?n.toString(e):i.decode(n):JSON.stringify(n)}[Symbol.for("nodejs.util.inspect.custom")](e,t){let r=this._bufArray().map(e=>a.isBuffer(e)?t.stylize(e.toString("hex"),"string"):JSON.stringify(e)).join(", ");return`${this.constructor.name} [${r}]`}get length(){return this._readableState.length}writeBigInt(e){let t=e.toString(16);if(e<0){let r=BigInt(Math.floor(t.length/2));t=(e=(BigInt(1)<<r*BigInt(8))+e).toString(16)}return t.length%2&&(t=`0${t}`),this.push(a.from(t,"hex"))}readUBigInt(e){let t=this.read(e);return a.isBuffer(t)?BigInt(`0x${t.toString("hex")}`):null}readBigInt(e){let t=this.read(e);if(!a.isBuffer(t))return null;let r=BigInt(`0x${t.toString("hex")}`);return 128&t[0]&&(r-=BigInt(1)<<BigInt(t.length)*BigInt(8)),r}writeUInt8(e){let t=a.from([e]);return this.push(t)}writeUInt16LE(e){let t=a.alloc(2);return t.writeUInt16LE(e),this.push(t)}writeUInt16BE(e){let t=a.alloc(2);return t.writeUInt16BE(e),this.push(t)}writeUInt32LE(e){let t=a.alloc(4);return t.writeUInt32LE(e),this.push(t)}writeUInt32BE(e){let t=a.alloc(4);return t.writeUInt32BE(e),this.push(t)}writeInt8(e){let t=a.from([e]);return this.push(t)}writeInt16LE(e){let t=a.alloc(2);return t.writeUInt16LE(e),this.push(t)}writeInt16BE(e){let t=a.alloc(2);return t.writeUInt16BE(e),this.push(t)}writeInt32LE(e){let t=a.alloc(4);return t.writeUInt32LE(e),this.push(t)}writeInt32BE(e){let t=a.alloc(4);return t.writeUInt32BE(e),this.push(t)}writeFloatLE(e){let t=a.alloc(4);return t.writeFloatLE(e),this.push(t)}writeFloatBE(e){let t=a.alloc(4);return t.writeFloatBE(e),this.push(t)}writeDoubleLE(e){let t=a.alloc(8);return t.writeDoubleLE(e),this.push(t)}writeDoubleBE(e){let t=a.alloc(8);return t.writeDoubleBE(e),this.push(t)}writeBigInt64LE(e){let t=a.alloc(8);return t.writeBigInt64LE(e),this.push(t)}writeBigInt64BE(e){let t=a.alloc(8);return t.writeBigInt64BE(e),this.push(t)}writeBigUInt64LE(e){let t=a.alloc(8);return t.writeBigUInt64LE(e),this.push(t)}writeBigUInt64BE(e){let t=a.alloc(8);return t.writeBigUInt64BE(e),this.push(t)}readUInt8(){let e=this.read(1);return a.isBuffer(e)?e.readUInt8():null}readUInt16LE(){let e=this.read(2);return a.isBuffer(e)?e.readUInt16LE():null}readUInt16BE(){let e=this.read(2);return a.isBuffer(e)?e.readUInt16BE():null}readUInt32LE(){let e=this.read(4);return a.isBuffer(e)?e.readUInt32LE():null}readUInt32BE(){let e=this.read(4);return a.isBuffer(e)?e.readUInt32BE():null}readInt8(){let e=this.read(1);return a.isBuffer(e)?e.readInt8():null}readInt16LE(){let e=this.read(2);return a.isBuffer(e)?e.readInt16LE():null}readInt16BE(){let e=this.read(2);return a.isBuffer(e)?e.readInt16BE():null}readInt32LE(){let e=this.read(4);return a.isBuffer(e)?e.readInt32LE():null}readInt32BE(){let e=this.read(4);return a.isBuffer(e)?e.readInt32BE():null}readFloatLE(){let e=this.read(4);return a.isBuffer(e)?e.readFloatLE():null}readFloatBE(){let e=this.read(4);return a.isBuffer(e)?e.readFloatBE():null}readDoubleLE(){let e=this.read(8);return a.isBuffer(e)?e.readDoubleLE():null}readDoubleBE(){let e=this.read(8);return a.isBuffer(e)?e.readDoubleBE():null}readBigInt64LE(){let e=this.read(8);return a.isBuffer(e)?e.readBigInt64LE():null}readBigInt64BE(){let e=this.read(8);return a.isBuffer(e)?e.readBigInt64BE():null}readBigUInt64LE(){let e=this.read(8);return a.isBuffer(e)?e.readBigUInt64LE():null}readBigUInt64BE(){let e=this.read(8);return a.isBuffer(e)?e.readBigUInt64BE():null}}e.exports=o},71:(e,t,r)=>{let n=r(2830),a=r(4202);class i extends n.Transform{constructor(e){super(e),this._writableState.objectMode=!1,this._readableState.objectMode=!0,this.bs=new a,this.__restart()}_transform(e,t,r){for(this.bs.write(e);this.bs.length>=this.__needed;){let e=null,t=null===this.__needed?void 0:this.bs.read(this.__needed);try{e=this.__parser.next(t)}catch(e){return r(e)}this.__needed&&(this.__fresh=!1),e.done?(this.push(e.value),this.__restart()):this.__needed=e.value||1/0}return r()}*_parse(){throw Error("Must be implemented in subclass")}__restart(){this.__needed=null,this.__parser=this._parse(),this.__fresh=!0}_flush(e){e(this.__fresh?null:Error("unexpected end of input"))}}e.exports=i},7187:e=>{var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise(function(r,n){function a(r){e.removeListener(t,i),n(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",a),r([].slice.call(arguments))}b(e,t,i,{once:!0}),"error"!==t&&"function"==typeof e.on&&b(e,"error",a,{once:!0})})},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function s(e){if("function"!=typeof e)throw TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function c(e,t,r,n){var a,i,o;if(s(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),o=i[t]),void 0===o)o=i[t]=r,++e._eventsCount;else if("function"==typeof o?o=i[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),(a=l(e))>0&&o.length>a&&!o.warned){o.warned=!0;var c=Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=o.length,console&&console.warn&&console.warn(c)}return e}function u(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0==arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},a=u.bind(n);return a.listener=r,n.wrapFn=a,a}function f(e,t,r){var n=e._events;if(void 0===n)return[];var a=n[t];return void 0===a?[]:"function"==typeof a?r?[a.listener||a]:[a]:r?function(e){for(var t=Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(a):h(a,a.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function h(e,t){for(var r=Array(t),n=0;n<t;++n)r[n]=e[n];return r}function b(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,function a(i){n.once&&e.removeEventListener(t,a),r(i)})}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||a(e))throw RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var a="error"===e,i=this._events;if(void 0!==i)a=a&&void 0===i.error;else if(!a)return!1;if(a){if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var o,s=Error("Unhandled error."+(o?" ("+o.message+")":""));throw s.context=o,s}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)n(l,this,t);else{var c=l.length,u=h(l,c);for(r=0;r<c;++r)n(u[r],this,t)}return!0},i.prototype.addListener=function(e,t){return c(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return c(this,e,t,!0)},i.prototype.once=function(e,t){return s(t),this.on(e,d(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return s(t),this.prependListener(e,d(this,e,t)),this},i.prototype.removeListener=function(e,t){var r,n,a,i,o;if(s(t),void 0===(n=this._events)||void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(a=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){o=r[i].listener,a=i;break}if(a<0)return this;0===a?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,a),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,o||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0==arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0==arguments.length){var a,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(a=i[n])&&this.removeAllListeners(a);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},i.prototype.listeners=function(e){return f(this,e,!0)},i.prototype.rawListeners=function(e){return f(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},645:(e,t)=>{t.read=function(e,t,r,n,a){var i,o,s=8*a-n-1,l=(1<<s)-1,c=l>>1,u=-7,d=r?a-1:0,f=r?-1:1,p=e[t+d];for(d+=f,i=p&(1<<-u)-1,p>>=-u,u+=s;u>0;i=256*i+e[t+d],d+=f,u-=8);for(o=i&(1<<-u)-1,i>>=-u,u+=n;u>0;o=256*o+e[t+d],d+=f,u-=8);if(0===i)i=1-c;else{if(i===l)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,n),i-=c}return(p?-1:1)*o*Math.pow(2,i-n)},t.write=function(e,t,r,n,a,i){var o,s,l,c=8*i-a-1,u=(1<<c)-1,d=u>>1,f=23===a?5960464477539062e-23:0,p=n?0:i-1,h=n?1:-1,b=t<0||0===t&&1/t<0?1:0;for(isNaN(t=Math.abs(t))||t===1/0?(s=isNaN(t)?1:0,o=u):(o=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-o))<1&&(o--,l*=2),(t+=o+d>=1?f/l:f*Math.pow(2,1-d))*l>=2&&(o++,l/=2),o+d>=u?(s=0,o=u):o+d>=1?(s=(t*l-1)*Math.pow(2,a),o+=d):(s=t*Math.pow(2,d-1)*Math.pow(2,a),o=0));a>=8;e[r+p]=255&s,p+=h,s/=256,a-=8);for(o=o<<a|s,c+=a;c>0;e[r+p]=255&o,p+=h,o/=256,c-=8);e[r+p-h]|=128*b}},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},4155:e=>{var t,r,n=e.exports={};function a(){throw Error("setTimeout has not been defined")}function i(){throw Error("clearTimeout has not been defined")}function o(e){if(t===setTimeout)return setTimeout(e,0);if((t===a||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:a}catch(e){t=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var s,l=[],c=!1,u=-1;function d(){c&&s&&(c=!1,s.length?l=s.concat(l):u=-1,l.length&&f())}function f(){if(!c){var e=o(d);c=!0;for(var t=l.length;t;){for(s=l,l=[];++u<t;)s&&s[u].run();u=-1,t=l.length}s=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function h(){}n.nextTick=function(e){var t=Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];l.push(new p(e,t)),1!==l.length||c||o(f)},p.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=h,n.addListener=h,n.once=h,n.off=h,n.removeListener=h,n.removeAllListeners=h,n.emit=h,n.prependListener=h,n.prependOnceListener=h,n.listeners=function(e){return[]},n.binding=function(e){throw Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw Error("process.chdir is not supported")},n.umask=function(){return 0}},6753:(e,t,r)=>{e.exports=r(5099).Duplex},2725:(e,t,r)=>{e.exports=r(5099).PassThrough},9481:(e,t,r)=>{e.exports=r(5099).Readable},4605:(e,t,r)=>{e.exports=r(5099).Transform},4229:(e,t,r)=>{e.exports=r(5099).Writable},196:(e,t,r)=>{let{AbortError:n,codes:a}=r(4381),{isNodeStream:i,isWebStream:o,kControllerErrorFunction:s}=r(5874),l=r(8610),{ERR_INVALID_ARG_TYPE:c}=a;e.exports.addAbortSignal=function(t,r){if(((e,t)=>{if("object"!=typeof e||!("aborted"in e))throw new c("signal","AbortSignal",e)})(t),!i(r)&&!o(r))throw new c("stream",["ReadableStream","WritableStream","Stream"],r);return e.exports.addAbortSignalNoValidate(t,r)},e.exports.addAbortSignalNoValidate=function(e,t){if("object"!=typeof e||!("aborted"in e))return t;let r=i(t)?()=>{t.destroy(new n(void 0,{cause:e.reason}))}:()=>{t[s](new n(void 0,{cause:e.reason}))};return e.aborted?r():(e.addEventListener("abort",r),l(t,()=>e.removeEventListener("abort",r))),t}},7327:(e,t,r)=>{let{StringPrototypeSlice:n,SymbolIterator:a,TypedArrayPrototypeSet:i,Uint8Array:o}=r(9061),{Buffer:s}=r(8764),{inspect:l}=r(6087);e.exports=class{constructor(){this.head=null,this.tail=null,this.length=0}push(e){let t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}unshift(e){let t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}shift(){if(0===this.length)return;let e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}clear(){this.head=this.tail=null,this.length=0}join(e){if(0===this.length)return"";let t=this.head,r=""+t.data;for(;null!==(t=t.next);)r+=e+t.data;return r}concat(e){if(0===this.length)return s.alloc(0);let t=s.allocUnsafe(e>>>0),r=this.head,n=0;for(;r;)i(t,r.data,n),n+=r.data.length,r=r.next;return t}consume(e,t){let r=this.head.data;if(e<r.length){let t=r.slice(0,e);return this.head.data=r.slice(e),t}return e===r.length?this.shift():t?this._getString(e):this._getBuffer(e)}first(){return this.head.data}*[a](){for(let e=this.head;e;e=e.next)yield e.data}_getString(e){let t="",r=this.head,a=0;do{let i=r.data;if(!(e>i.length)){e===i.length?(t+=i,++a,r.next?this.head=r.next:this.head=this.tail=null):(t+=n(i,0,e),this.head=r,r.data=n(i,e));break}t+=i,e-=i.length,++a}while(null!==(r=r.next))return this.length-=a,t}_getBuffer(e){let t=s.allocUnsafe(e),r=e,n=this.head,a=0;do{let s=n.data;if(!(e>s.length)){e===s.length?(i(t,s,r-e),++a,n.next?this.head=n.next:this.head=this.tail=null):(i(t,new o(s.buffer,s.byteOffset,e),r-e),this.head=n,n.data=s.slice(e));break}i(t,s,r-e),e-=s.length,++a}while(null!==(n=n.next))return this.length-=a,t}[Symbol.for("nodejs.util.inspect.custom")](e,t){return l(this,{...t,depth:0,customInspect:!1})}}},299:(e,t,r)=>{let{pipeline:n}=r(9946),a=r(8672),{destroyer:i}=r(1195),{isNodeStream:o,isReadable:s,isWritable:l,isWebStream:c,isTransformStream:u,isWritableStream:d,isReadableStream:f}=r(5874),{AbortError:p,codes:{ERR_INVALID_ARG_VALUE:h,ERR_MISSING_ARGS:b}}=r(4381),y=r(8610);e.exports=function(...e){let t,r,m,g,v;if(0===e.length)throw new b("streams");if(1===e.length)return a.from(e[0]);let x=[...e];if("function"==typeof e[0]&&(e[0]=a.from(e[0])),"function"==typeof e[e.length-1]){let t=e.length-1;e[t]=a.from(e[t])}for(let t=0;t<e.length;++t)if(o(e[t])||c(e[t])){if(t<e.length-1&&!(s(e[t])||f(e[t])||u(e[t])))throw new h(`streams[${t}]`,x[t],"must be readable");if(t>0&&!(l(e[t])||d(e[t])||u(e[t])))throw new h(`streams[${t}]`,x[t],"must be writable")}let w=e[0],P=n(e,function(e){let t=g;g=null,t?t(e):e?v.destroy(e):T||O||v.destroy()}),O=!!(l(w)||d(w)||u(w)),T=!!(s(P)||f(P)||u(P));if(v=new a({writableObjectMode:!(null==w||!w.writableObjectMode),readableObjectMode:!(null==P||!P.writableObjectMode),writable:O,readable:T}),O){if(o(w))v._write=function(e,r,n){w.write(e,r)?n():t=n},v._final=function(e){w.end(),r=e},w.on("drain",function(){if(t){let e=t;t=null,e()}});else if(c(w)){let e=(u(w)?w.writable:w).getWriter();v._write=async function(t,r,n){try{await e.ready,e.write(t).catch(()=>{}),n()}catch(e){n(e)}},v._final=async function(t){try{await e.ready,e.close().catch(()=>{}),r=t}catch(e){t(e)}}}let e=u(P)?P.readable:P;y(e,()=>{if(r){let e=r;r=null,e()}})}if(T){if(o(P))P.on("readable",function(){if(m){let e=m;m=null,e()}}),P.on("end",function(){v.push(null)}),v._read=function(){for(;;){let e=P.read();if(null===e)return void(m=v._read);if(!v.push(e))return}};else if(c(P)){let e=(u(P)?P.readable:P).getReader();v._read=async function(){for(;;)try{let{value:t,done:r}=await e.read();if(!v.push(t))return;if(r)return void v.push(null)}catch{return}}}}return v._destroy=function(e,n){e||null===g||(e=new p),m=null,t=null,r=null,null===g?n(e):(g=n,o(P)&&i(P,e))},v}},1195:(e,t,r)=>{let n=r(4155),{aggregateTwoErrors:a,codes:{ERR_MULTIPLE_CALLBACK:i},AbortError:o}=r(4381),{Symbol:s}=r(9061),{kDestroyed:l,isDestroyed:c,isFinished:u,isServerRequest:d}=r(5874),f=s("kDestroy"),p=s("kConstruct");function h(e,t,r){e&&(e.stack,t&&!t.errored&&(t.errored=e),r&&!r.errored&&(r.errored=e))}function b(e,t,r){let a=!1;function i(t){if(a)return;a=!0;let i=e._readableState,o=e._writableState;h(t,o,i),o&&(o.closed=!0),i&&(i.closed=!0),"function"==typeof r&&r(t),t?n.nextTick(y,e,t):n.nextTick(m,e)}try{e._destroy(t||null,i)}catch(e){i(e)}}function y(e,t){g(e,t),m(e)}function m(e){let t=e._readableState,r=e._writableState;r&&(r.closeEmitted=!0),t&&(t.closeEmitted=!0),(null!=r&&r.emitClose||null!=t&&t.emitClose)&&e.emit("close")}function g(e,t){let r=e._readableState,n=e._writableState;null!=n&&n.errorEmitted||null!=r&&r.errorEmitted||(n&&(n.errorEmitted=!0),r&&(r.errorEmitted=!0),e.emit("error",t))}function v(e,t,r){let a=e._readableState,i=e._writableState;if(null!=i&&i.destroyed||null!=a&&a.destroyed)return this;null!=a&&a.autoDestroy||null!=i&&i.autoDestroy?e.destroy(t):t&&(t.stack,i&&!i.errored&&(i.errored=t),a&&!a.errored&&(a.errored=t),r?n.nextTick(g,e,t):g(e,t))}function x(e){let t=!1;function r(r){if(t)return void v(e,null!=r?r:new i);t=!0;let a=e._readableState,o=e._writableState,s=o||a;a&&(a.constructed=!0),o&&(o.constructed=!0),s.destroyed?e.emit(f,r):r?v(e,r,!0):n.nextTick(w,e)}try{e._construct(e=>{n.nextTick(r,e)})}catch(e){n.nextTick(r,e)}}function w(e){e.emit(p)}function P(e){return(null==e?void 0:e.setHeader)&&"function"==typeof e.abort}function O(e){e.emit("close")}function T(e,t){e.emit("error",t),n.nextTick(O,e)}e.exports={construct:function(e,t){if("function"!=typeof e._construct)return;let r=e._readableState,a=e._writableState;r&&(r.constructed=!1),a&&(a.constructed=!1),e.once(p,t),e.listenerCount(p)>1||n.nextTick(x,e)},destroyer:function(e,t){e&&!c(e)&&(t||u(e)||(t=new o),d(e)?(e.socket=null,e.destroy(t)):P(e)?e.abort():P(e.req)?e.req.abort():"function"==typeof e.destroy?e.destroy(t):"function"==typeof e.close?e.close():t?n.nextTick(T,e,t):n.nextTick(O,e),e.destroyed||(e[l]=!0))},destroy:function(e,t){let r=this._readableState,n=this._writableState,i=n||r;return null!=n&&n.destroyed||null!=r&&r.destroyed?"function"==typeof t&&t():(h(e,n,r),n&&(n.destroyed=!0),r&&(r.destroyed=!0),i.constructed?b(this,e,t):this.once(f,function(r){b(this,a(r,e),t)})),this},undestroy:function(){let e=this._readableState,t=this._writableState;e&&(e.constructed=!0,e.closed=!1,e.closeEmitted=!1,e.destroyed=!1,e.errored=null,e.errorEmitted=!1,e.reading=!1,e.ended=!1===e.readable,e.endEmitted=!1===e.readable),t&&(t.constructed=!0,t.destroyed=!1,t.closed=!1,t.closeEmitted=!1,t.errored=null,t.errorEmitted=!1,t.finalCalled=!1,t.prefinished=!1,t.ended=!1===t.writable,t.ending=!1===t.writable,t.finished=!1===t.writable)},errorOrDestroy:v}},8672:(e,t,r)=>{let n,a;let{ObjectDefineProperties:i,ObjectGetOwnPropertyDescriptor:o,ObjectKeys:s,ObjectSetPrototypeOf:l}=r(9061);e.exports=d;let c=r(911),u=r(6304);l(d.prototype,c.prototype),l(d,c);{let e=s(u.prototype);for(let t=0;t<e.length;t++){let r=e[t];d.prototype[r]||(d.prototype[r]=u.prototype[r])}}function d(e){if(!(this instanceof d))return new d(e);c.call(this,e),u.call(this,e),e?(this.allowHalfOpen=!1!==e.allowHalfOpen,!1===e.readable&&(this._readableState.readable=!1,this._readableState.ended=!0,this._readableState.endEmitted=!0),!1===e.writable&&(this._writableState.writable=!1,this._writableState.ending=!0,this._writableState.ended=!0,this._writableState.finished=!0)):this.allowHalfOpen=!0}function f(){return void 0===n&&(n={}),n}i(d.prototype,{writable:{__proto__:null,...o(u.prototype,"writable")},writableHighWaterMark:{__proto__:null,...o(u.prototype,"writableHighWaterMark")},writableObjectMode:{__proto__:null,...o(u.prototype,"writableObjectMode")},writableBuffer:{__proto__:null,...o(u.prototype,"writableBuffer")},writableLength:{__proto__:null,...o(u.prototype,"writableLength")},writableFinished:{__proto__:null,...o(u.prototype,"writableFinished")},writableCorked:{__proto__:null,...o(u.prototype,"writableCorked")},writableEnded:{__proto__:null,...o(u.prototype,"writableEnded")},writableNeedDrain:{__proto__:null,...o(u.prototype,"writableNeedDrain")},destroyed:{__proto__:null,get(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set(e){this._readableState&&this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}}),d.fromWeb=function(e,t){return f().newStreamDuplexFromReadableWritablePair(e,t)},d.toWeb=function(e){return f().newReadableWritablePairFromDuplex(e)},d.from=function(e){return a||(a=r(7946)),a(e,"body")}},7946:(e,t,r)=>{let n=r(4155),a=r(8764),{isReadable:i,isWritable:o,isIterable:s,isNodeStream:l,isReadableNodeStream:c,isWritableNodeStream:u,isDuplexNodeStream:d}=r(5874),f=r(8610),{AbortError:p,codes:{ERR_INVALID_ARG_TYPE:h,ERR_INVALID_RETURN_VALUE:b}}=r(4381),{destroyer:y}=r(1195),m=r(8672),g=r(911),{createDeferredPromise:v}=r(6087),x=r(6307),w=globalThis.Blob||a.Blob,P=void 0!==w?function(e){return e instanceof w}:function(e){return!1},O=globalThis.AbortController||r(8599).AbortController,{FunctionPrototypeCall:T}=r(9061);class z extends m{constructor(e){super(e),!1===(null==e?void 0:e.readable)&&(this._readableState.readable=!1,this._readableState.ended=!0,this._readableState.endEmitted=!0),!1===(null==e?void 0:e.writable)&&(this._writableState.writable=!1,this._writableState.ending=!0,this._writableState.ended=!0,this._writableState.finished=!0)}}function k(e){let t=e.readable&&"function"!=typeof e.readable.read?g.wrap(e.readable):e.readable,r=e.writable,n,a,s,l,c,u=!!i(t),d=!!o(r);function h(e){let t=l;l=null,t?t(e):e&&c.destroy(e)}return c=new z({readableObjectMode:!(null==t||!t.readableObjectMode),writableObjectMode:!(null==r||!r.writableObjectMode),readable:u,writable:d}),d&&(f(r,e=>{d=!1,e&&y(t,e),h(e)}),c._write=function(e,t,a){r.write(e,t)?a():n=a},c._final=function(e){r.end(),a=e},r.on("drain",function(){if(n){let e=n;n=null,e()}}),r.on("finish",function(){if(a){let e=a;a=null,e()}})),u&&(f(t,e=>{u=!1,e&&y(t,e),h(e)}),t.on("readable",function(){if(s){let e=s;s=null,e()}}),t.on("end",function(){c.push(null)}),c._read=function(){for(;;){let e=t.read();if(null===e)return void(s=c._read);if(!c.push(e))return}}),c._destroy=function(e,i){e||null===l||(e=new p),s=null,n=null,a=null,null===l?i(e):(l=i,y(r,e),y(t,e))},c}e.exports=function e(t,r){if(d(t))return t;if(c(t))return k({readable:t});if(u(t))return k({writable:t});if(l(t))return k({writable:!1,readable:!1});if("function"==typeof t){let{value:e,write:a,final:i,destroy:o}=function(e){let{promise:t,resolve:r}=v(),a=new O,i=a.signal;return{value:e(async function*(){for(;;){let e=t;t=null;let{chunk:a,done:o,cb:s}=await e;if(n.nextTick(s),o)return;if(i.aborted)throw new p(void 0,{cause:i.reason});({promise:t,resolve:r}=v()),yield a}}(),{signal:i}),write(e,t,n){let a=r;r=null,a({chunk:e,done:!1,cb:n})},final(e){let t=r;r=null,t({done:!0,cb:e})},destroy(e,t){a.abort(),t(e)}}}(t);if(s(e))return x(z,e,{objectMode:!0,write:a,final:i,destroy:o});let l=null==e?void 0:e.then;if("function"==typeof l){let t;let r=T(l,e,e=>{if(null!=e)throw new b("nully","body",e)},e=>{y(t,e)});return t=new z({objectMode:!0,readable:!1,write:a,final(e){i(async()=>{try{await r,n.nextTick(e,null)}catch(t){n.nextTick(e,t)}})},destroy:o})}throw new b("Iterable, AsyncIterable or AsyncFunction",r,e)}if(P(t))return e(t.arrayBuffer());if(s(t))return x(z,t,{objectMode:!0,writable:!1});if("object"==typeof(null==t?void 0:t.writable)||"object"==typeof(null==t?void 0:t.readable))return k({readable:null!=t&&t.readable?c(null==t?void 0:t.readable)?null==t?void 0:t.readable:e(t.readable):void 0,writable:null!=t&&t.writable?u(null==t?void 0:t.writable)?null==t?void 0:t.writable:e(t.writable):void 0});let a=null==t?void 0:t.then;if("function"==typeof a){let e;return T(a,t,t=>{null!=t&&e.push(t),e.push(null)},t=>{y(e,t)}),e=new z({objectMode:!0,writable:!1,read(){}})}throw new h(r,["Blob","ReadableStream","WritableStream","Stream","Iterable","AsyncIterable","Function","{ readable, writable } pair","Promise"],t)}},8610:(e,t,r)=>{let n=r(4155),{AbortError:a,codes:i}=r(4381),{ERR_INVALID_ARG_TYPE:o,ERR_STREAM_PREMATURE_CLOSE:s}=i,{kEmptyObject:l,once:c}=r(6087),{validateAbortSignal:u,validateFunction:d,validateObject:f,validateBoolean:p}=r(6547),{Promise:h,PromisePrototypeThen:b}=r(9061),{isClosed:y,isReadable:m,isReadableNodeStream:g,isReadableStream:v,isReadableFinished:x,isReadableErrored:w,isWritable:P,isWritableNodeStream:O,isWritableStream:T,isWritableFinished:z,isWritableErrored:k,isNodeStream:L,willEmitClose:E,kIsClosedPromise:N}=r(5874),S=()=>{};function M(e,t,r){var i,p;if(2==arguments.length?(r=t,t=l):null==t?t=l:f(t,"options"),d(r,"callback"),u(t.signal,"options.signal"),r=c(r),v(e)||T(e))return function(e,t,r){let i=!1,o=S;if(t.signal){if(o=()=>{i=!0,r.call(e,new a(void 0,{cause:t.signal.reason}))},t.signal.aborted)n.nextTick(o);else{let n=r;r=c((...r)=>{t.signal.removeEventListener("abort",o),n.apply(e,r)}),t.signal.addEventListener("abort",o)}}let s=(...t)=>{i||n.nextTick(()=>r.apply(e,t))};return b(e[N].promise,s,s),S}(e,t,r);if(!L(e))throw new o("stream",["ReadableStream","WritableStream","Stream"],e);let h=null!==(i=t.readable)&&void 0!==i?i:g(e),M=null!==(p=t.writable)&&void 0!==p?p:O(e),j=e._writableState,H=e._readableState,R=()=>{e.writable||V()},I=E(e)&&g(e)===h&&O(e)===M,B=z(e,!1),V=()=>{B=!0,e.destroyed&&(I=!1),I&&(!e.readable||h)||h&&!X||r.call(e)},X=x(e,!1),U=()=>{X=!0,e.destroyed&&(I=!1),I&&(!e.writable||M)||M&&!B||r.call(e)},A=t=>{r.call(e,t)},D=y(e),C=()=>{D=!0;let t=k(e)||w(e);return t&&"boolean"!=typeof t?r.call(e,t):h&&!X&&g(e,!0)&&!x(e,!1)?r.call(e,new s):!M||B||z(e,!1)?void r.call(e):r.call(e,new s)},F=()=>{D=!0;let t=k(e)||w(e);if(t&&"boolean"!=typeof t)return r.call(e,t);r.call(e)},Z=()=>{e.req.on("finish",V)};e.setHeader&&"function"==typeof e.abort?(e.on("complete",V),I||e.on("abort",C),e.req?Z():e.on("request",Z)):M&&!j&&(e.on("end",R),e.on("close",R)),I||"boolean"!=typeof e.aborted||e.on("aborted",C),e.on("end",U),e.on("finish",V),!1!==t.error&&e.on("error",A),e.on("close",C),D?n.nextTick(C):null!=j&&j.errorEmitted||null!=H&&H.errorEmitted?I||n.nextTick(F):(h||I&&!m(e)||!B&&!1!==P(e))&&(M||I&&!P(e)||!X&&!1!==m(e))?H&&e.req&&e.aborted&&n.nextTick(F):n.nextTick(F);let q=()=>{r=S,e.removeListener("aborted",C),e.removeListener("complete",V),e.removeListener("abort",C),e.removeListener("request",Z),e.req&&e.req.removeListener("finish",V),e.removeListener("end",R),e.removeListener("close",R),e.removeListener("finish",V),e.removeListener("end",U),e.removeListener("error",A),e.removeListener("close",C)};if(t.signal&&!D){let i=()=>{let n=r;q(),n.call(e,new a(void 0,{cause:t.signal.reason}))};if(t.signal.aborted)n.nextTick(i);else{let n=r;r=c((...r)=>{t.signal.removeEventListener("abort",i),n.apply(e,r)}),t.signal.addEventListener("abort",i)}}return q}e.exports=M,e.exports.finished=function(e,t){var r;let n=!1;return null===t&&(t=l),null!==(r=t)&&void 0!==r&&r.cleanup&&(p(t.cleanup,"cleanup"),n=t.cleanup),new h((r,a)=>{let i=M(e,t,e=>{n&&i(),e?a(e):r()})})}},6307:(e,t,r)=>{let n=r(4155),{PromisePrototypeThen:a,SymbolAsyncIterator:i,SymbolIterator:o}=r(9061),{Buffer:s}=r(8764),{ERR_INVALID_ARG_TYPE:l,ERR_STREAM_NULL_VALUES:c}=r(4381).codes;e.exports=function(e,t,r){let u,d;if("string"==typeof t||t instanceof s)return new e({objectMode:!0,...r,read(){this.push(t),this.push(null)}});if(t&&t[i])d=!0,u=t[i]();else{if(!t||!t[o])throw new l("iterable",["Iterable"],t);d=!1,u=t[o]()}let f=new e({objectMode:!0,highWaterMark:1,...r}),p=!1;return f._read=function(){p||(p=!0,async function(){for(;;){try{let{value:e,done:t}=d?await u.next():u.next();if(t)f.push(null);else{let t=e&&"function"==typeof e.then?await e:e;if(null===t)throw p=!1,new c;if(f.push(t))continue;p=!1}}catch(e){f.destroy(e)}break}}())},f._destroy=function(e,t){a(async function(e){let t=null!=e,r="function"==typeof u.throw;if(t&&r){let{value:t,done:r}=await u.throw(e);if(await t,r)return}if("function"==typeof u.return){let{value:e}=await u.return();await e}}(e),()=>n.nextTick(t,e),r=>n.nextTick(t,r||e))},f}},4870:(e,t,r)=>{let{ArrayIsArray:n,ObjectSetPrototypeOf:a}=r(9061),{EventEmitter:i}=r(7187);function o(e){i.call(this,e)}function s(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?n(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}a(o.prototype,i.prototype),a(o,i),o.prototype.pipe=function(e,t){let r=this;function n(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function a(){r.readable&&r.resume&&r.resume()}r.on("data",n),e.on("drain",a),e._isStdio||t&&!1===t.end||(r.on("end",l),r.on("close",c));let o=!1;function l(){o||(o=!0,e.end())}function c(){o||(o=!0,"function"==typeof e.destroy&&e.destroy())}function u(e){d(),0===i.listenerCount(this,"error")&&this.emit("error",e)}function d(){r.removeListener("data",n),e.removeListener("drain",a),r.removeListener("end",l),r.removeListener("close",c),r.removeListener("error",u),e.removeListener("error",u),r.removeListener("end",d),r.removeListener("close",d),e.removeListener("close",d)}return s(r,"error",u),s(e,"error",u),r.on("end",d),r.on("close",d),e.on("close",d),e.emit("pipe",r),e},e.exports={Stream:o,prependListener:s}},4382:(e,t,r)=>{let n=globalThis.AbortController||r(8599).AbortController,{codes:{ERR_INVALID_ARG_VALUE:a,ERR_INVALID_ARG_TYPE:i,ERR_MISSING_ARGS:o,ERR_OUT_OF_RANGE:s},AbortError:l}=r(4381),{validateAbortSignal:c,validateInteger:u,validateObject:d}=r(6547),f=r(9061).Symbol("kWeak"),{finished:p}=r(8610),h=r(299),{addAbortSignalNoValidate:b}=r(196),{isWritable:y,isNodeStream:m}=r(5874),{ArrayPrototypePush:g,MathFloor:v,Number:x,NumberIsNaN:w,Promise:P,PromiseReject:O,PromisePrototypeThen:T,Symbol:z}=r(9061),k=z("kEmpty"),L=z("kEof");function E(e,t){if("function"!=typeof e)throw new i("fn",["Function","AsyncFunction"],e);null!=t&&d(t,"options"),null!=(null==t?void 0:t.signal)&&c(t.signal,"options.signal");let r=1;return null!=(null==t?void 0:t.concurrency)&&(r=v(t.concurrency)),u(r,"concurrency",1),(async function*(){var a,i;let o,s;let c=new n,u=this,d=[],f=c.signal,p={signal:f},h=()=>c.abort();null!=t&&null!==(a=t.signal)&&void 0!==a&&a.aborted&&h(),null==t||null===(i=t.signal)||void 0===i||i.addEventListener("abort",h);let b=!1;function y(){b=!0}!async function(){var n,a;try{for await(let t of u){if(b)return;if(f.aborted)throw new l;try{t=e(t,p)}catch(e){t=O(e)}t!==k&&("function"==typeof(null===(n=t)||void 0===n?void 0:n.catch)&&t.catch(y),d.push(t),o&&(o(),o=null),!b&&d.length&&d.length>=r&&await new P(e=>{s=e}))}d.push(L)}catch(t){let e=O(t);T(e,void 0,y),d.push(e)}finally{b=!0,o&&(o(),o=null),null==t||null===(a=t.signal)||void 0===a||a.removeEventListener("abort",h)}}();try{for(;;){for(;d.length>0;){let e=await d[0];if(e===L)return;if(f.aborted)throw new l;e!==k&&(yield e),d.shift(),s&&(s(),s=null)}await new P(e=>{o=e})}}finally{c.abort(),b=!0,s&&(s(),s=null)}}).call(this)}async function N(e,t){for await(let r of S.call(this,e,t))return!0;return!1}function S(e,t){if("function"!=typeof e)throw new i("fn",["Function","AsyncFunction"],e);return E.call(this,async function(t,r){return await e(t,r)?t:k},t)}class M extends o{constructor(){super("reduce"),this.message="Reduce of an empty stream requires an initial value"}}function j(e){if(w(e=x(e)))return 0;if(e<0)throw new s("number",">= 0",e);return e}e.exports.streamReturningOperators={asIndexedPairs:function(e){return null!=e&&d(e,"options"),null!=(null==e?void 0:e.signal)&&c(e.signal,"options.signal"),(async function*(){let t=0;for await(let n of this){var r;if(null!=e&&null!==(r=e.signal)&&void 0!==r&&r.aborted)throw new l({cause:e.signal.reason});yield[t++,n]}}).call(this)},drop:function(e,t){return null!=t&&d(t,"options"),null!=(null==t?void 0:t.signal)&&c(t.signal,"options.signal"),e=j(e),(async function*(){var r,n;if(null!=t&&null!==(r=t.signal)&&void 0!==r&&r.aborted)throw new l;for await(let r of this){if(null!=t&&null!==(n=t.signal)&&void 0!==n&&n.aborted)throw new l;e--<=0&&(yield r)}}).call(this)},filter:S,flatMap:function(e,t){let r=E.call(this,e,t);return(async function*(){for await(let e of r)yield*e}).call(this)},map:E,take:function(e,t){return null!=t&&d(t,"options"),null!=(null==t?void 0:t.signal)&&c(t.signal,"options.signal"),e=j(e),(async function*(){var r,n;if(null!=t&&null!==(r=t.signal)&&void 0!==r&&r.aborted)throw new l;for await(let r of this){if(null!=t&&null!==(n=t.signal)&&void 0!==n&&n.aborted)throw new l;if(!(e-- >0))return;yield r}}).call(this)},compose:function(e,t){if(null!=t&&d(t,"options"),null!=(null==t?void 0:t.signal)&&c(t.signal,"options.signal"),m(e)&&!y(e))throw new a("stream",e,"must be writable");let r=h(this,e);return null!=t&&t.signal&&b(t.signal,r),r}},e.exports.promiseReturningOperators={every:async function(e,t){if("function"!=typeof e)throw new i("fn",["Function","AsyncFunction"],e);return!await N.call(this,async(...t)=>!await e(...t),t)},forEach:async function(e,t){if("function"!=typeof e)throw new i("fn",["Function","AsyncFunction"],e);for await(let r of E.call(this,async function(t,r){return await e(t,r),k},t));},reduce:async function(e,t,r){var a,o;if("function"!=typeof e)throw new i("reducer",["Function","AsyncFunction"],e);null!=r&&d(r,"options"),null!=(null==r?void 0:r.signal)&&c(r.signal,"options.signal");let s=arguments.length>1;if(null!=r&&null!==(a=r.signal)&&void 0!==a&&a.aborted){let e=new l(void 0,{cause:r.signal.reason});throw this.once("error",()=>{}),await p(this.destroy(e)),e}let u=new n,h=u.signal;null!=r&&r.signal&&r.signal.addEventListener("abort",()=>u.abort(),{once:!0,[f]:this});let b=!1;try{for await(let n of this){if(b=!0,null!=r&&null!==(o=r.signal)&&void 0!==o&&o.aborted)throw new l;s?t=await e(t,n,{signal:h}):(t=n,s=!0)}if(!b&&!s)throw new M}finally{u.abort()}return t},toArray:async function(e){null!=e&&d(e,"options"),null!=(null==e?void 0:e.signal)&&c(e.signal,"options.signal");let t=[];for await(let n of this){var r;if(null!=e&&null!==(r=e.signal)&&void 0!==r&&r.aborted)throw new l(void 0,{cause:e.signal.reason});g(t,n)}return t},some:N,find:async function(e,t){for await(let r of S.call(this,e,t))return r}}},917:(e,t,r)=>{let{ObjectSetPrototypeOf:n}=r(9061);e.exports=i;let a=r(1161);function i(e){if(!(this instanceof i))return new i(e);a.call(this,e)}n(i.prototype,a.prototype),n(i,a),i.prototype._transform=function(e,t,r){r(null,e)}},9946:(e,t,r)=>{let n,a;let i=r(4155),{ArrayIsArray:o,Promise:s,SymbolAsyncIterator:l}=r(9061),c=r(8610),{once:u}=r(6087),d=r(1195),f=r(8672),{aggregateTwoErrors:p,codes:{ERR_INVALID_ARG_TYPE:h,ERR_INVALID_RETURN_VALUE:b,ERR_MISSING_ARGS:y,ERR_STREAM_DESTROYED:m,ERR_STREAM_PREMATURE_CLOSE:g},AbortError:v}=r(4381),{validateFunction:x,validateAbortSignal:w}=r(6547),{isIterable:P,isReadable:O,isReadableNodeStream:T,isNodeStream:z,isTransformStream:k,isWebStream:L,isReadableStream:E,isReadableEnded:N}=r(5874),S=globalThis.AbortController||r(8599).AbortController;function M(e,t,r){let n=!1;return e.on("close",()=>{n=!0}),{destroy:t=>{n||(n=!0,d.destroyer(e,t||new m("pipe")))},cleanup:c(e,{readable:t,writable:r},e=>{n=!e})}}function j(e){if(P(e))return e;if(T(e))return async function*(e){a||(a=r(911)),yield*a.prototype[l].call(e)}(e);throw new h("val",["Readable","Iterable","AsyncIterable"],e)}async function H(e,t,r,{end:n}){let a,i=null,o=e=>{if(e&&(a=e),i){let e=i;i=null,e()}},l=()=>new s((e,t)=>{a?t(a):i=()=>{a?t(a):e()}});t.on("drain",o);let u=c(t,{readable:!1},o);try{for await(let r of(t.writableNeedDrain&&await l(),e))t.write(r)||await l();n&&t.end(),await l(),r()}catch(e){r(a!==e?p(a,e):e)}finally{u(),t.off("drain",o)}}async function R(e,t,r,{end:n}){k(t)&&(t=t.writable);let a=t.getWriter();try{for await(let t of e)await a.ready,a.write(t).catch(()=>{});await a.ready,n&&await a.close(),r()}catch(e){try{await a.abort(e),r(e)}catch(e){r(e)}}}function I(e,t,a){let s,l;if(1===e.length&&o(e[0])&&(e=e[0]),e.length<2)throw new y("streams");let u=new S,d=u.signal,p=null==a?void 0:a.signal,m=[];function x(){U(new v)}w(p,"options.signal"),null==p||p.addEventListener("abort",x);let I=[],B,V=0;function X(e){U(e,0==--V)}function U(e,r){if(!e||s&&"ERR_STREAM_PREMATURE_CLOSE"!==s.code||(s=e),s||r){for(;I.length;)I.shift()(s);null==p||p.removeEventListener("abort",x),u.abort(),r&&(s||m.forEach(e=>e()),i.nextTick(t,s,l))}}for(let t=0;t<e.length;t++){let o=e[t],s=t<e.length-1,u=t>0,p=s||!1!==(null==a?void 0:a.end),y=t===e.length-1;if(z(o)){if(p){let{destroy:e,cleanup:t}=M(o,s,u);I.push(e),O(o)&&y&&m.push(t)}function A(e){e&&"AbortError"!==e.name&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code&&X(e)}o.on("error",A),O(o)&&y&&m.push(()=>{o.removeListener("error",A)})}if(0===t){if("function"==typeof o){if(!P(B=o({signal:d})))throw new b("Iterable, AsyncIterable or Stream","source",B)}else B=P(o)||T(o)||k(o)?o:f.from(o)}else if("function"==typeof o){var D,C;if(B=o(B=k(B)?j(null===(D=B)||void 0===D?void 0:D.readable):j(B),{signal:d}),s){if(!P(B,!0))throw new b("AsyncIterable",`transform[${t-1}]`,B)}else{n||(n=r(917));let e=new n({objectMode:!0}),t=null===(C=B)||void 0===C?void 0:C.then;if("function"==typeof t)V++,t.call(B,t=>{l=t,null!=t&&e.write(t),p&&e.end(),i.nextTick(X)},t=>{e.destroy(t),i.nextTick(X,t)});else if(P(B,!0))V++,H(B,e,X,{end:p});else{if(!E(B)&&!k(B))throw new b("AsyncIterable or Promise","destination",B);{let t=B.readable||B;V++,H(t,e,X,{end:p})}}B=e;let{destroy:a,cleanup:o}=M(B,!1,!0);I.push(a),y&&m.push(o)}}else if(z(o)){if(T(B)){V+=2;let e=function(e,t,r,{end:n}){let a=!1;if(t.on("close",()=>{a||r(new g)}),e.pipe(t,{end:!1}),n){function o(){a=!0,t.end()}N(e)?i.nextTick(o):e.once("end",o)}else r();return c(e,{readable:!0,writable:!1},t=>{let n=e._readableState;t&&"ERR_STREAM_PREMATURE_CLOSE"===t.code&&n&&n.ended&&!n.errored&&!n.errorEmitted?e.once("end",r).once("error",r):r(t)}),c(t,{readable:!1,writable:!0},r)}(B,o,X,{end:p});O(o)&&y&&m.push(e)}else if(k(B)||E(B)){let e=B.readable||B;V++,H(e,o,X,{end:p})}else{if(!P(B))throw new h("val",["Readable","Iterable","AsyncIterable","ReadableStream","TransformStream"],B);V++,H(B,o,X,{end:p})}B=o}else if(L(o)){if(T(B))V++,R(j(B),o,X,{end:p});else if(E(B)||P(B))V++,R(B,o,X,{end:p});else{if(!k(B))throw new h("val",["Readable","Iterable","AsyncIterable","ReadableStream","TransformStream"],B);V++,R(B.readable,o,X,{end:p})}B=o}else B=f.from(o)}return(null!=d&&d.aborted||null!=p&&p.aborted)&&i.nextTick(x),B}e.exports={pipelineImpl:I,pipeline:function(...e){return I(e,u((x(e[e.length-1],"streams[stream.length - 1]"),e.pop())))}}},911:(e,t,r)=>{let n;let a=r(4155),{ArrayPrototypeIndexOf:i,NumberIsInteger:o,NumberIsNaN:s,NumberParseInt:l,ObjectDefineProperties:c,ObjectKeys:u,ObjectSetPrototypeOf:d,Promise:f,SafeSet:p,SymbolAsyncIterator:h,Symbol:b}=r(9061);e.exports=A,A.ReadableState=U;let{EventEmitter:y}=r(7187),{Stream:m,prependListener:g}=r(4870),{Buffer:v}=r(8764),{addAbortSignal:x}=r(196),w=r(8610),P=r(6087).debuglog("stream",e=>{P=e}),O=r(7327),T=r(1195),{getHighWaterMark:z,getDefaultHighWaterMark:k}=r(2457),{aggregateTwoErrors:L,codes:{ERR_INVALID_ARG_TYPE:E,ERR_METHOD_NOT_IMPLEMENTED:N,ERR_OUT_OF_RANGE:S,ERR_STREAM_PUSH_AFTER_EOF:M,ERR_STREAM_UNSHIFT_AFTER_END_EVENT:j}}=r(4381),{validateObject:H}=r(6547),R=b("kPaused"),{StringDecoder:I}=r(2553),B=r(6307);d(A.prototype,m.prototype),d(A,m);let V=()=>{},{errorOrDestroy:X}=T;function U(e,t,n){"boolean"!=typeof n&&(n=t instanceof r(8672)),this.objectMode=!(!e||!e.objectMode),n&&(this.objectMode=this.objectMode||!(!e||!e.readableObjectMode)),this.highWaterMark=e?z(this,e,"readableHighWaterMark",n):k(!1),this.buffer=new O,this.length=0,this.pipes=[],this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.constructed=!0,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this[R]=null,this.errorEmitted=!1,this.emitClose=!e||!1!==e.emitClose,this.autoDestroy=!e||!1!==e.autoDestroy,this.destroyed=!1,this.errored=null,this.closed=!1,this.closeEmitted=!1,this.defaultEncoding=e&&e.defaultEncoding||"utf8",this.awaitDrainWriters=null,this.multiAwaitDrain=!1,this.readingMore=!1,this.dataEmitted=!1,this.decoder=null,this.encoding=null,e&&e.encoding&&(this.decoder=new I(e.encoding),this.encoding=e.encoding)}function A(e){if(!(this instanceof A))return new A(e);let t=this instanceof r(8672);this._readableState=new U(e,this,t),e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.construct&&(this._construct=e.construct),e.signal&&!t&&x(e.signal,this)),m.call(this,e),T.construct(this,()=>{this._readableState.needReadable&&G(this,this._readableState)})}function D(e,t,r,n){let a;P("readableAddChunk",t);let i=e._readableState;if(i.objectMode||("string"==typeof t?(r=r||i.defaultEncoding,i.encoding!==r&&(n&&i.encoding?t=v.from(t,r).toString(i.encoding):(t=v.from(t,r),r=""))):t instanceof v?r="":m._isUint8Array(t)?(t=m._uint8ArrayToBuffer(t),r=""):null!=t&&(a=new E("chunk",["string","Buffer","Uint8Array"],t))),a)X(e,a);else if(null===t)i.reading=!1,function(e,t){if(P("onEofChunk"),!t.ended){if(t.decoder){let e=t.decoder.end();e&&e.length&&(t.buffer.push(e),t.length+=t.objectMode?1:e.length)}t.ended=!0,t.sync?Z(e):(t.needReadable=!1,t.emittedReadable=!0,q(e))}}(e,i);else if(i.objectMode||t&&t.length>0){if(n){if(i.endEmitted)X(e,new j);else{if(i.destroyed||i.errored)return!1;C(e,i,t,!0)}}else if(i.ended)X(e,new M);else{if(i.destroyed||i.errored)return!1;i.reading=!1,i.decoder&&!r?(t=i.decoder.write(t),i.objectMode||0!==t.length?C(e,i,t,!1):G(e,i)):C(e,i,t,!1)}}else n||(i.reading=!1,G(e,i));return!i.ended&&(i.length<i.highWaterMark||0===i.length)}function C(e,t,r,n){t.flowing&&0===t.length&&!t.sync&&e.listenerCount("data")>0?(t.multiAwaitDrain?t.awaitDrainWriters.clear():t.awaitDrainWriters=null,t.dataEmitted=!0,e.emit("data",r)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&Z(e)),G(e,t)}function F(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:s(e)?t.flowing&&t.length?t.buffer.first().length:t.length:e<=t.length?e:t.ended?t.length:0}function Z(e){let t=e._readableState;P("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(P("emitReadable",t.flowing),t.emittedReadable=!0,a.nextTick(q,e))}function q(e){let t=e._readableState;P("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||t.errored||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,Q(e)}function G(e,t){!t.readingMore&&t.constructed&&(t.readingMore=!0,a.nextTick(W,e,t))}function W(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){let r=t.length;if(P("maybeReadMore read 0"),e.read(0),r===t.length)break}t.readingMore=!1}function Y(e){let t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!1===t[R]?t.flowing=!0:e.listenerCount("data")>0?e.resume():t.readableListening||(t.flowing=null)}function K(e){P("readable nexttick read 0"),e.read(0)}function J(e,t){P("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),Q(e),t.flowing&&!t.reading&&e.read(0)}function Q(e){let t=e._readableState;for(P("flow",t.flowing);t.flowing&&null!==e.read(););}function _(e,t){"function"!=typeof e.read&&(e=A.wrap(e,{objectMode:!0}));let r=async function*(e,t){let r,n=V;function a(t){this===e?(n(),n=V):n=t}e.on("readable",a);let i=w(e,{writable:!1},e=>{r=e?L(r,e):null,n(),n=V});try{for(;;){let t=e.destroyed?null:e.read();if(null!==t)yield t;else{if(r)throw r;if(null===r)return;await new f(a)}}}catch(e){throw r=L(r,e)}finally{(r||!1!==(null==t?void 0:t.destroyOnReturn))&&(void 0===r||e._readableState.autoDestroy)?T.destroyer(e,null):(e.off("readable",a),i())}}(e,t);return r.stream=e,r}function $(e,t){let r;return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):r=t.buffer.consume(e,t.decoder),r)}function ee(e){let t=e._readableState;P("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,a.nextTick(et,t,e))}function et(e,t){if(P("endReadableNT",e.endEmitted,e.length),!e.errored&&!e.closeEmitted&&!e.endEmitted&&0===e.length){if(e.endEmitted=!0,t.emit("end"),t.writable&&!1===t.allowHalfOpen)a.nextTick(er,t);else if(e.autoDestroy){let e=t._writableState;(!e||e.autoDestroy&&(e.finished||!1===e.writable))&&t.destroy()}}}function er(e){!e.writable||e.writableEnded||e.destroyed||e.end()}function en(){return void 0===n&&(n={}),n}A.prototype.destroy=T.destroy,A.prototype._undestroy=T.undestroy,A.prototype._destroy=function(e,t){t(e)},A.prototype[y.captureRejectionSymbol]=function(e){this.destroy(e)},A.prototype.push=function(e,t){return D(this,e,t,!1)},A.prototype.unshift=function(e,t){return D(this,e,t,!0)},A.prototype.isPaused=function(){let e=this._readableState;return!0===e[R]||!1===e.flowing},A.prototype.setEncoding=function(e){let t=new I(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;let r=this._readableState.buffer,n="";for(let e of r)n+=t.write(e);return r.clear(),""!==n&&r.push(n),this._readableState.length=n.length,this},A.prototype.read=function(e){P("read",e),void 0===e?e=NaN:o(e)||(e=l(e,10));let t=this._readableState,r=e;if(e>t.highWaterMark&&(t.highWaterMark=function(e){if(e>1073741824)throw new S("size","<= 1GiB",e);return e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,++e}(e)),0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return P("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?ee(this):Z(this),null;if(0===(e=F(e,t))&&t.ended)return 0===t.length&&ee(this),null;let n,a=t.needReadable;if(P("need readable",a),(0===t.length||t.length-e<t.highWaterMark)&&P("length less than watermark",a=!0),t.ended||t.reading||t.destroyed||t.errored||!t.constructed)P("reading, ended or constructing",a=!1);else if(a){P("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0);try{this._read(t.highWaterMark)}catch(e){X(this,e)}t.sync=!1,t.reading||(e=F(r,t))}return null===(n=e>0?$(e,t):null)?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.multiAwaitDrain?t.awaitDrainWriters.clear():t.awaitDrainWriters=null),0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&ee(this)),null===n||t.errorEmitted||t.closeEmitted||(t.dataEmitted=!0,this.emit("data",n)),n},A.prototype._read=function(e){throw new N("_read()")},A.prototype.pipe=function(e,t){let r;let n=this,i=this._readableState;1===i.pipes.length&&(i.multiAwaitDrain||(i.multiAwaitDrain=!0,i.awaitDrainWriters=new p(i.awaitDrainWriters?[i.awaitDrainWriters]:[]))),i.pipes.push(e),P("pipe count=%d opts=%j",i.pipes.length,t);let o=t&&!1===t.end||e===a.stdout||e===a.stderr?b:s;function s(){P("onend"),e.end()}i.endEmitted?a.nextTick(o):n.once("end",o),e.on("unpipe",function t(a,o){P("onunpipe"),a===n&&o&&!1===o.hasUnpiped&&(o.hasUnpiped=!0,P("cleanup"),e.removeListener("close",f),e.removeListener("finish",h),r&&e.removeListener("drain",r),e.removeListener("error",d),e.removeListener("unpipe",t),n.removeListener("end",s),n.removeListener("end",b),n.removeListener("data",u),l=!0,r&&i.awaitDrainWriters&&(!e._writableState||e._writableState.needDrain)&&r())});let l=!1;function c(){l||(1===i.pipes.length&&i.pipes[0]===e?(P("false write response, pause",0),i.awaitDrainWriters=e,i.multiAwaitDrain=!1):i.pipes.length>1&&i.pipes.includes(e)&&(P("false write response, pause",i.awaitDrainWriters.size),i.awaitDrainWriters.add(e)),n.pause()),r||(r=function(){let t=n._readableState;t.awaitDrainWriters===e?(P("pipeOnDrain",1),t.awaitDrainWriters=null):t.multiAwaitDrain&&(P("pipeOnDrain",t.awaitDrainWriters.size),t.awaitDrainWriters.delete(e)),t.awaitDrainWriters&&0!==t.awaitDrainWriters.size||!n.listenerCount("data")||n.resume()},e.on("drain",r))}function u(t){P("ondata");let r=e.write(t);P("dest.write",r),!1===r&&c()}function d(t){if(P("onerror",t),b(),e.removeListener("error",d),0===e.listenerCount("error")){let r=e._writableState||e._readableState;r&&!r.errorEmitted?X(e,t):e.emit("error",t)}}function f(){e.removeListener("finish",h),b()}function h(){P("onfinish"),e.removeListener("close",f),b()}function b(){P("unpipe"),n.unpipe(e)}return n.on("data",u),g(e,"error",d),e.once("close",f),e.once("finish",h),e.emit("pipe",n),!0===e.writableNeedDrain?i.flowing&&c():i.flowing||(P("pipe resume"),n.resume()),e},A.prototype.unpipe=function(e){let t=this._readableState;if(0===t.pipes.length)return this;if(!e){let e=t.pipes;t.pipes=[],this.pause();for(let t=0;t<e.length;t++)e[t].emit("unpipe",this,{hasUnpiped:!1});return this}let r=i(t.pipes,e);return -1===r||(t.pipes.splice(r,1),0===t.pipes.length&&this.pause(),e.emit("unpipe",this,{hasUnpiped:!1})),this},A.prototype.on=function(e,t){let r=m.prototype.on.call(this,e,t),n=this._readableState;return"data"===e?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===e&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,P("on readable",n.length,n.reading),n.length?Z(this):n.reading||a.nextTick(K,this))),r},A.prototype.addListener=A.prototype.on,A.prototype.removeListener=function(e,t){let r=m.prototype.removeListener.call(this,e,t);return"readable"===e&&a.nextTick(Y,this),r},A.prototype.off=A.prototype.removeListener,A.prototype.removeAllListeners=function(e){let t=m.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||a.nextTick(Y,this),t},A.prototype.resume=function(){let e=this._readableState;return e.flowing||(P("resume"),e.flowing=!e.readableListening,e.resumeScheduled||(e.resumeScheduled=!0,a.nextTick(J,this,e))),e[R]=!1,this},A.prototype.pause=function(){return P("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(P("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState[R]=!0,this},A.prototype.wrap=function(e){let t=!1;e.on("data",r=>{!this.push(r)&&e.pause&&(t=!0,e.pause())}),e.on("end",()=>{this.push(null)}),e.on("error",e=>{X(this,e)}),e.on("close",()=>{this.destroy()}),e.on("destroy",()=>{this.destroy()}),this._read=()=>{t&&e.resume&&(t=!1,e.resume())};let r=u(e);for(let t=1;t<r.length;t++){let n=r[t];void 0===this[n]&&"function"==typeof e[n]&&(this[n]=e[n].bind(e))}return this},A.prototype[h]=function(){return _(this)},A.prototype.iterator=function(e){return void 0!==e&&H(e,"options"),_(this,e)},c(A.prototype,{readable:{__proto__:null,get(){let e=this._readableState;return!(!e||!1===e.readable||e.destroyed||e.errorEmitted||e.endEmitted)},set(e){this._readableState&&(this._readableState.readable=!!e)}},readableDidRead:{__proto__:null,enumerable:!1,get:function(){return this._readableState.dataEmitted}},readableAborted:{__proto__:null,enumerable:!1,get:function(){return!(!1===this._readableState.readable||!this._readableState.destroyed&&!this._readableState.errored||this._readableState.endEmitted)}},readableHighWaterMark:{__proto__:null,enumerable:!1,get:function(){return this._readableState.highWaterMark}},readableBuffer:{__proto__:null,enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}},readableFlowing:{__proto__:null,enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}},readableLength:{__proto__:null,enumerable:!1,get(){return this._readableState.length}},readableObjectMode:{__proto__:null,enumerable:!1,get(){return!!this._readableState&&this._readableState.objectMode}},readableEncoding:{__proto__:null,enumerable:!1,get(){return this._readableState?this._readableState.encoding:null}},errored:{__proto__:null,enumerable:!1,get(){return this._readableState?this._readableState.errored:null}},closed:{__proto__:null,get(){return!!this._readableState&&this._readableState.closed}},destroyed:{__proto__:null,enumerable:!1,get(){return!!this._readableState&&this._readableState.destroyed},set(e){this._readableState&&(this._readableState.destroyed=e)}},readableEnded:{__proto__:null,enumerable:!1,get(){return!!this._readableState&&this._readableState.endEmitted}}}),c(U.prototype,{pipesCount:{__proto__:null,get(){return this.pipes.length}},paused:{__proto__:null,get(){return!1!==this[R]},set(e){this[R]=!!e}}}),A._fromList=$,A.from=function(e,t){return B(A,e,t)},A.fromWeb=function(e,t){return en().newStreamReadableFromReadableStream(e,t)},A.toWeb=function(e,t){return en().newReadableStreamFromStreamReadable(e,t)},A.wrap=function(e,t){var r,n;return new A({objectMode:null===(r=null!==(n=e.readableObjectMode)&&void 0!==n?n:e.objectMode)||void 0===r||r,...t,destroy(t,r){T.destroyer(e,t),r(t)}}).wrap(e)}},2457:(e,t,r)=>{let{MathFloor:n,NumberIsInteger:a}=r(9061),{ERR_INVALID_ARG_VALUE:i}=r(4381).codes;function o(e){return e?16:16384}e.exports={getHighWaterMark:function(e,t,r,s){let l=null!=t.highWaterMark?t.highWaterMark:s?t[r]:null;if(null!=l){if(!a(l)||l<0)throw new i(s?`options.${r}`:"options.highWaterMark",l);return n(l)}return o(e.objectMode)},getDefaultHighWaterMark:o}},1161:(e,t,r)=>{let{ObjectSetPrototypeOf:n,Symbol:a}=r(9061);e.exports=c;let{ERR_METHOD_NOT_IMPLEMENTED:i}=r(4381).codes,o=r(8672),{getHighWaterMark:s}=r(2457);n(c.prototype,o.prototype),n(c,o);let l=a("kCallback");function c(e){if(!(this instanceof c))return new c(e);let t=e?s(this,e,"readableHighWaterMark",!0):null;0===t&&(e={...e,highWaterMark:null,readableHighWaterMark:t,writableHighWaterMark:e.writableHighWaterMark||0}),o.call(this,e),this._readableState.sync=!1,this[l]=null,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",d)}function u(e){"function"!=typeof this._flush||this.destroyed?(this.push(null),e&&e()):this._flush((t,r)=>{t?e?e(t):this.destroy(t):(null!=r&&this.push(r),this.push(null),e&&e())})}function d(){this._final!==u&&u.call(this)}c.prototype._final=u,c.prototype._transform=function(e,t,r){throw new i("_transform()")},c.prototype._write=function(e,t,r){let n=this._readableState,a=this._writableState,i=n.length;this._transform(e,t,(e,t)=>{e?r(e):(null!=t&&this.push(t),a.ended||i===n.length||n.length<n.highWaterMark?r():this[l]=r)})},c.prototype._read=function(){if(this[l]){let e=this[l];this[l]=null,e()}}},5874:(e,t,r)=>{let{Symbol:n,SymbolAsyncIterator:a,SymbolIterator:i,SymbolFor:o}=r(9061),s=n("kDestroyed"),l=n("kIsErrored"),c=n("kIsReadable"),u=n("kIsDisturbed"),d=o("nodejs.webstream.isClosedPromise"),f=o("nodejs.webstream.controllerErrorFunction");function p(e,t=!1){var r;return!(!e||"function"!=typeof e.pipe||"function"!=typeof e.on||t&&("function"!=typeof e.pause||"function"!=typeof e.resume)||e._writableState&&!1===(null===(r=e._readableState)||void 0===r?void 0:r.readable)||e._writableState&&!e._readableState)}function h(e){var t;return!(!e||"function"!=typeof e.write||"function"!=typeof e.on||e._readableState&&!1===(null===(t=e._writableState)||void 0===t?void 0:t.writable))}function b(e){return e&&(e._readableState||e._writableState||"function"==typeof e.write&&"function"==typeof e.on||"function"==typeof e.pipe&&"function"==typeof e.on)}function y(e){return!(!e||b(e)||"function"!=typeof e.pipeThrough||"function"!=typeof e.getReader||"function"!=typeof e.cancel)}function m(e){return!(!e||b(e)||"function"!=typeof e.getWriter||"function"!=typeof e.abort)}function g(e){return!(!e||b(e)||"object"!=typeof e.readable||"object"!=typeof e.writable)}function v(e){if(!b(e))return null;let t=e._writableState,r=e._readableState,n=t||r;return!!(e.destroyed||e[s]||null!=n&&n.destroyed)}function x(e){if(!h(e))return null;if(!0===e.writableEnded)return!0;let t=e._writableState;return(null==t||!t.errored)&&("boolean"!=typeof(null==t?void 0:t.ended)?null:t.ended)}function w(e,t){if(!p(e))return null;let r=e._readableState;return(null==r||!r.errored)&&("boolean"!=typeof(null==r?void 0:r.endEmitted)?null:!!(r.endEmitted||!1===t&&!0===r.ended&&0===r.length))}function P(e){return e&&null!=e[c]?e[c]:"boolean"!=typeof(null==e?void 0:e.readable)?null:!v(e)&&p(e)&&e.readable&&!w(e)}function O(e){return"boolean"!=typeof(null==e?void 0:e.writable)?null:!v(e)&&h(e)&&e.writable&&!x(e)}function T(e){return"boolean"==typeof e._closed&&"boolean"==typeof e._defaultKeepAlive&&"boolean"==typeof e._removedConnection&&"boolean"==typeof e._removedContLen}function z(e){return"boolean"==typeof e._sent100&&T(e)}e.exports={kDestroyed:s,isDisturbed:function(e){var t;return!(!e||!(null!==(t=e[u])&&void 0!==t?t:e.readableDidRead||e.readableAborted))},kIsDisturbed:u,isErrored:function(e){var t,r,n,a,i,o,s,c,u,d;return!(!e||!(null!==(t=null!==(r=null!==(n=null!==(a=null!==(i=null!==(o=e[l])&&void 0!==o?o:e.readableErrored)&&void 0!==i?i:e.writableErrored)&&void 0!==a?a:null===(s=e._readableState)||void 0===s?void 0:s.errorEmitted)&&void 0!==n?n:null===(c=e._writableState)||void 0===c?void 0:c.errorEmitted)&&void 0!==r?r:null===(u=e._readableState)||void 0===u?void 0:u.errored)&&void 0!==t?t:null===(d=e._writableState)||void 0===d?void 0:d.errored))},kIsErrored:l,isReadable:P,kIsReadable:c,kIsClosedPromise:d,kControllerErrorFunction:f,isClosed:function(e){if(!b(e))return null;if("boolean"==typeof e.closed)return e.closed;let t=e._writableState,r=e._readableState;return"boolean"==typeof(null==t?void 0:t.closed)||"boolean"==typeof(null==r?void 0:r.closed)?(null==t?void 0:t.closed)||(null==r?void 0:r.closed):"boolean"==typeof e._closed&&T(e)?e._closed:null},isDestroyed:v,isDuplexNodeStream:function(e){return!(!e||"function"!=typeof e.pipe||!e._readableState||"function"!=typeof e.on||"function"!=typeof e.write)},isFinished:function(e,t){return b(e)?!(!v(e)&&(!1!==(null==t?void 0:t.readable)&&P(e)||!1!==(null==t?void 0:t.writable)&&O(e))):null},isIterable:function(e,t){return null!=e&&(!0===t?"function"==typeof e[a]:!1===t?"function"==typeof e[i]:"function"==typeof e[a]||"function"==typeof e[i])},isReadableNodeStream:p,isReadableStream:y,isReadableEnded:function(e){if(!p(e))return null;if(!0===e.readableEnded)return!0;let t=e._readableState;return!(!t||t.errored)&&("boolean"!=typeof(null==t?void 0:t.ended)?null:t.ended)},isReadableFinished:w,isReadableErrored:function(e){var t,r;return b(e)?e.readableErrored?e.readableErrored:null!==(t=null===(r=e._readableState)||void 0===r?void 0:r.errored)&&void 0!==t?t:null:null},isNodeStream:b,isWebStream:function(e){return y(e)||m(e)||g(e)},isWritable:O,isWritableNodeStream:h,isWritableStream:m,isWritableEnded:x,isWritableFinished:function(e,t){if(!h(e))return null;if(!0===e.writableFinished)return!0;let r=e._writableState;return(null==r||!r.errored)&&("boolean"!=typeof(null==r?void 0:r.finished)?null:!!(r.finished||!1===t&&!0===r.ended&&0===r.length))},isWritableErrored:function(e){var t,r;return b(e)?e.writableErrored?e.writableErrored:null!==(t=null===(r=e._writableState)||void 0===r?void 0:r.errored)&&void 0!==t?t:null:null},isServerRequest:function(e){var t;return"boolean"==typeof e._consuming&&"boolean"==typeof e._dumped&&void 0===(null===(t=e.req)||void 0===t?void 0:t.upgradeOrConnect)},isServerResponse:z,willEmitClose:function(e){if(!b(e))return null;let t=e._writableState,r=e._readableState,n=t||r;return!n&&z(e)||!!(n&&n.autoDestroy&&n.emitClose&&!1===n.closed)},isTransformStream:g}},6304:(e,t,r)=>{let n;let a=r(4155),{ArrayPrototypeSlice:i,Error:o,FunctionPrototypeSymbolHasInstance:s,ObjectDefineProperty:l,ObjectDefineProperties:c,ObjectSetPrototypeOf:u,StringPrototypeToLowerCase:d,Symbol:f,SymbolHasInstance:p}=r(9061);e.exports=I,I.WritableState=H;let{EventEmitter:h}=r(7187),b=r(4870).Stream,{Buffer:y}=r(8764),m=r(1195),{addAbortSignal:g}=r(196),{getHighWaterMark:v,getDefaultHighWaterMark:x}=r(2457),{ERR_INVALID_ARG_TYPE:w,ERR_METHOD_NOT_IMPLEMENTED:P,ERR_MULTIPLE_CALLBACK:O,ERR_STREAM_CANNOT_PIPE:T,ERR_STREAM_DESTROYED:z,ERR_STREAM_ALREADY_FINISHED:k,ERR_STREAM_NULL_VALUES:L,ERR_STREAM_WRITE_AFTER_END:E,ERR_UNKNOWN_ENCODING:N}=r(4381).codes,{errorOrDestroy:S}=m;function M(){}u(I.prototype,b.prototype),u(I,b);let j=f("kOnFinished");function H(e,t,n){"boolean"!=typeof n&&(n=t instanceof r(8672)),this.objectMode=!(!e||!e.objectMode),n&&(this.objectMode=this.objectMode||!(!e||!e.writableObjectMode)),this.highWaterMark=e?v(this,e,"writableHighWaterMark",n):x(!1),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;let a=!(!e||!1!==e.decodeStrings);this.decodeStrings=!a,this.defaultEncoding=e&&e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=U.bind(void 0,t),this.writecb=null,this.writelen=0,this.afterWriteTickInfo=null,R(this),this.pendingcb=0,this.constructed=!0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!e||!1!==e.emitClose,this.autoDestroy=!e||!1!==e.autoDestroy,this.errored=null,this.closed=!1,this.closeEmitted=!1,this[j]=[]}function R(e){e.buffered=[],e.bufferedIndex=0,e.allBuffers=!0,e.allNoop=!0}function I(e){let t=this instanceof r(8672);if(!t&&!s(I,this))return new I(e);this._writableState=new H(e,this,t),e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final),"function"==typeof e.construct&&(this._construct=e.construct),e.signal&&g(e.signal,this)),b.call(this,e),m.construct(this,()=>{let e=this._writableState;e.writing||F(this,e),q(this,e)})}function B(e,t,r,n){let i;let o=e._writableState;if("function"==typeof r)n=r,r=o.defaultEncoding;else{if(r){if("buffer"!==r&&!y.isEncoding(r))throw new N(r)}else r=o.defaultEncoding;"function"!=typeof n&&(n=M)}if(null===t)throw new L;if(!o.objectMode){if("string"==typeof t)!1!==o.decodeStrings&&(t=y.from(t,r),r="buffer");else if(t instanceof y)r="buffer";else{if(!b._isUint8Array(t))throw new w("chunk",["string","Buffer","Uint8Array"],t);t=b._uint8ArrayToBuffer(t),r="buffer"}}return o.ending?i=new E:o.destroyed&&(i=new z("write")),i?(a.nextTick(n,i),S(e,i,!0),i):(o.pendingcb++,function(e,t,r,n,a){let i=t.objectMode?1:r.length;t.length+=i;let o=t.length<t.highWaterMark;return o||(t.needDrain=!0),t.writing||t.corked||t.errored||!t.constructed?(t.buffered.push({chunk:r,encoding:n,callback:a}),t.allBuffers&&"buffer"!==n&&(t.allBuffers=!1),t.allNoop&&a!==M&&(t.allNoop=!1)):(t.writelen=i,t.writecb=a,t.writing=!0,t.sync=!0,e._write(r,n,t.onwrite),t.sync=!1),o&&!t.errored&&!t.destroyed}(e,o,t,r,n))}function V(e,t,r,n,a,i,o){t.writelen=n,t.writecb=o,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new z("write")):r?e._writev(a,t.onwrite):e._write(a,i,t.onwrite),t.sync=!1}function X(e,t,r,n){--t.pendingcb,n(r),C(t),S(e,r)}function U(e,t){let r=e._writableState,n=r.sync,i=r.writecb;"function"==typeof i?(r.writing=!1,r.writecb=null,r.length-=r.writelen,r.writelen=0,t?(t.stack,r.errored||(r.errored=t),e._readableState&&!e._readableState.errored&&(e._readableState.errored=t),n?a.nextTick(X,e,r,t,i):X(e,r,t,i)):(r.buffered.length>r.bufferedIndex&&F(e,r),n?null!==r.afterWriteTickInfo&&r.afterWriteTickInfo.cb===i?r.afterWriteTickInfo.count++:(r.afterWriteTickInfo={count:1,cb:i,stream:e,state:r},a.nextTick(A,r.afterWriteTickInfo)):D(e,r,1,i))):S(e,new O)}function A({stream:e,state:t,count:r,cb:n}){return t.afterWriteTickInfo=null,D(e,t,r,n)}function D(e,t,r,n){for(t.ending||e.destroyed||0!==t.length||!t.needDrain||(t.needDrain=!1,e.emit("drain"));r-- >0;)t.pendingcb--,n();t.destroyed&&C(t),q(e,t)}function C(e){var t,r;if(e.writing)return;for(let r=e.bufferedIndex;r<e.buffered.length;++r){let{chunk:n,callback:a}=e.buffered[r],i=e.objectMode?1:n.length;e.length-=i,a(null!==(t=e.errored)&&void 0!==t?t:new z("write"))}let n=e[j].splice(0);for(let t=0;t<n.length;t++)n[t](null!==(r=e.errored)&&void 0!==r?r:new z("end"));R(e)}function F(e,t){if(t.corked||t.bufferProcessing||t.destroyed||!t.constructed)return;let{buffered:r,bufferedIndex:n,objectMode:a}=t,o=r.length-n;if(!o)return;let s=n;if(t.bufferProcessing=!0,o>1&&e._writev){t.pendingcb-=o-1;let n=t.allNoop?M:e=>{for(let t=s;t<r.length;++t)r[t].callback(e)},a=t.allNoop&&0===s?r:i(r,s);a.allBuffers=t.allBuffers,V(e,t,!0,t.length,a,"",n),R(t)}else{do{let{chunk:n,encoding:i,callback:o}=r[s];r[s++]=null,V(e,t,!1,a?1:n.length,n,i,o)}while(s<r.length&&!t.writing)s===r.length?R(t):s>256?(r.splice(0,s),t.bufferedIndex=0):t.bufferedIndex=s}t.bufferProcessing=!1}function Z(e){return e.ending&&!e.destroyed&&e.constructed&&0===e.length&&!e.errored&&0===e.buffered.length&&!e.finished&&!e.writing&&!e.errorEmitted&&!e.closeEmitted}function q(e,t,r){Z(t)&&(t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.finalCalled=!0,function(e,t){let r=!1;function n(n){if(r)S(e,null!=n?n:O());else if(r=!0,t.pendingcb--,n){let r=t[j].splice(0);for(let e=0;e<r.length;e++)r[e](n);S(e,n,t.sync)}else Z(t)&&(t.prefinished=!0,e.emit("prefinish"),t.pendingcb++,a.nextTick(G,e,t))}t.sync=!0,t.pendingcb++;try{e._final(n)}catch(e){n(e)}t.sync=!1}(e,t))),0===t.pendingcb&&(r?(t.pendingcb++,a.nextTick((e,t)=>{Z(t)?G(e,t):t.pendingcb--},e,t)):Z(t)&&(t.pendingcb++,G(e,t))))}function G(e,t){t.pendingcb--,t.finished=!0;let r=t[j].splice(0);for(let e=0;e<r.length;e++)r[e]();if(e.emit("finish"),t.autoDestroy){let t=e._readableState;(!t||t.autoDestroy&&(t.endEmitted||!1===t.readable))&&e.destroy()}}H.prototype.getBuffer=function(){return i(this.buffered,this.bufferedIndex)},l(H.prototype,"bufferedRequestCount",{__proto__:null,get(){return this.buffered.length-this.bufferedIndex}}),l(I,p,{__proto__:null,value:function(e){return!!s(this,e)||this===I&&e&&e._writableState instanceof H}}),I.prototype.pipe=function(){S(this,new T)},I.prototype.write=function(e,t,r){return!0===B(this,e,t,r)},I.prototype.cork=function(){this._writableState.corked++},I.prototype.uncork=function(){let e=this._writableState;e.corked&&(e.corked--,e.writing||F(this,e))},I.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=d(e)),!y.isEncoding(e))throw new N(e);return this._writableState.defaultEncoding=e,this},I.prototype._write=function(e,t,r){if(!this._writev)throw new P("_write()");this._writev([{chunk:e,encoding:t}],r)},I.prototype._writev=null,I.prototype.end=function(e,t,r){let n;let i=this._writableState;if("function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e){let r=B(this,e,t);r instanceof o&&(n=r)}return i.corked&&(i.corked=1,this.uncork()),n||(i.errored||i.ending?i.finished?n=new k("end"):i.destroyed&&(n=new z("end")):(i.ending=!0,q(this,i,!0),i.ended=!0)),"function"==typeof r&&(n||i.finished?a.nextTick(r,n):i[j].push(r)),this},c(I.prototype,{closed:{__proto__:null,get(){return!!this._writableState&&this._writableState.closed}},destroyed:{__proto__:null,get(){return!!this._writableState&&this._writableState.destroyed},set(e){this._writableState&&(this._writableState.destroyed=e)}},writable:{__proto__:null,get(){let e=this._writableState;return!(!e||!1===e.writable||e.destroyed||e.errored||e.ending||e.ended)},set(e){this._writableState&&(this._writableState.writable=!!e)}},writableFinished:{__proto__:null,get(){return!!this._writableState&&this._writableState.finished}},writableObjectMode:{__proto__:null,get(){return!!this._writableState&&this._writableState.objectMode}},writableBuffer:{__proto__:null,get(){return this._writableState&&this._writableState.getBuffer()}},writableEnded:{__proto__:null,get(){return!!this._writableState&&this._writableState.ending}},writableNeedDrain:{__proto__:null,get(){let e=this._writableState;return!!e&&!e.destroyed&&!e.ending&&e.needDrain}},writableHighWaterMark:{__proto__:null,get(){return this._writableState&&this._writableState.highWaterMark}},writableCorked:{__proto__:null,get(){return this._writableState?this._writableState.corked:0}},writableLength:{__proto__:null,get(){return this._writableState&&this._writableState.length}},errored:{__proto__:null,enumerable:!1,get(){return this._writableState?this._writableState.errored:null}},writableAborted:{__proto__:null,enumerable:!1,get:function(){return!(!1===this._writableState.writable||!this._writableState.destroyed&&!this._writableState.errored||this._writableState.finished)}}});let W=m.destroy;function Y(){return void 0===n&&(n={}),n}I.prototype.destroy=function(e,t){let r=this._writableState;return!r.destroyed&&(r.bufferedIndex<r.buffered.length||r[j].length)&&a.nextTick(C,r),W.call(this,e,t),this},I.prototype._undestroy=m.undestroy,I.prototype._destroy=function(e,t){t(e)},I.prototype[h.captureRejectionSymbol]=function(e){this.destroy(e)},I.fromWeb=function(e,t){return Y().newStreamWritableFromWritableStream(e,t)},I.toWeb=function(e){return Y().newWritableStreamFromStreamWritable(e)}},6547:(e,t,r)=>{let{ArrayIsArray:n,ArrayPrototypeIncludes:a,ArrayPrototypeJoin:i,ArrayPrototypeMap:o,NumberIsInteger:s,NumberIsNaN:l,NumberMAX_SAFE_INTEGER:c,NumberMIN_SAFE_INTEGER:u,NumberParseInt:d,ObjectPrototypeHasOwnProperty:f,RegExpPrototypeExec:p,String:h,StringPrototypeToUpperCase:b,StringPrototypeTrim:y}=r(9061),{hideStackFrames:m,codes:{ERR_SOCKET_BAD_PORT:g,ERR_INVALID_ARG_TYPE:v,ERR_INVALID_ARG_VALUE:x,ERR_OUT_OF_RANGE:w,ERR_UNKNOWN_SIGNAL:P}}=r(4381),{normalizeEncoding:O}=r(6087),{isAsyncFunction:T,isArrayBufferView:z}=r(6087).types,k={},L=/^[0-7]+$/,E=m((e,t,r=u,n=c)=>{if("number"!=typeof e)throw new v(t,"number",e);if(!s(e))throw new w(t,"an integer",e);if(e<r||e>n)throw new w(t,`>= ${r} && <= ${n}`,e)}),N=m((e,t,r=-2147483648,n=2147483647)=>{if("number"!=typeof e)throw new v(t,"number",e);if(!s(e))throw new w(t,"an integer",e);if(e<r||e>n)throw new w(t,`>= ${r} && <= ${n}`,e)}),S=m((e,t,r=!1)=>{if("number"!=typeof e)throw new v(t,"number",e);if(!s(e))throw new w(t,"an integer",e);let n=r?1:0;if(e<n||e>4294967295)throw new w(t,`>= ${n} && <= 4294967295`,e)});function M(e,t){if("string"!=typeof e)throw new v(t,"string",e)}let j=m((e,t,r)=>{if(!a(r,e)){let n=i(o(r,e=>"string"==typeof e?`'${e}'`:h(e)),", ");throw new x(t,e,"must be one of: "+n)}});function H(e,t){if("boolean"!=typeof e)throw new v(t,"boolean",e)}function R(e,t,r){return null!=e&&f(e,t)?e[t]:r}let I=m((e,t,r=null)=>{let a=R(r,"allowArray",!1),i=R(r,"allowFunction",!1);if(!R(r,"nullable",!1)&&null===e||!a&&n(e)||"object"!=typeof e&&(!i||"function"!=typeof e))throw new v(t,"Object",e)}),B=m((e,t)=>{if(null!=e&&"object"!=typeof e&&"function"!=typeof e)throw new v(t,"a dictionary",e)}),V=m((e,t,r=0)=>{if(!n(e))throw new v(t,"Array",e);if(e.length<r)throw new x(t,e,`must be longer than ${r}`)}),X=m((e,t="buffer")=>{if(!z(e))throw new v(t,["Buffer","TypedArray","DataView"],e)}),U=m((e,t)=>{if(void 0!==e&&(null===e||"object"!=typeof e||!("aborted"in e)))throw new v(t,"AbortSignal",e)}),A=m((e,t)=>{if("function"!=typeof e)throw new v(t,"Function",e)}),D=m((e,t)=>{if("function"!=typeof e||T(e))throw new v(t,"Function",e)}),C=m((e,t)=>{if(void 0!==e)throw new v(t,"undefined",e)}),F=/^(?:<[^>]*>)(?:\s*;\s*[^;"\s]+(?:=(")?[^;"\s]*\1)?)*$/;function Z(e,t){if(void 0===e||!p(F,e))throw new x(t,e,'must be an array or string of format "</styles.css>; rel=preload; as=style"')}e.exports={isInt32:function(e){return e===(0|e)},isUint32:function(e){return e===e>>>0},parseFileMode:function(e,t,r){if(void 0===e&&(e=r),"string"==typeof e){if(null===p(L,e))throw new x(t,e,"must be a 32-bit unsigned integer or an octal string");e=d(e,8)}return S(e,t),e},validateArray:V,validateStringArray:function(e,t){V(e,t);for(let r=0;r<e.length;r++)M(e[r],`${t}[${r}]`)},validateBooleanArray:function(e,t){V(e,t);for(let r=0;r<e.length;r++)H(e[r],`${t}[${r}]`)},validateBoolean:H,validateBuffer:X,validateDictionary:B,validateEncoding:function(e,t){let r=O(t),n=e.length;if("hex"===r&&n%2!=0)throw new x("encoding",t,`is invalid for data of length ${n}`)},validateFunction:A,validateInt32:N,validateInteger:E,validateNumber:function(e,t,r,n){if("number"!=typeof e)throw new v(t,"number",e);if(null!=r&&e<r||null!=n&&e>n||(null!=r||null!=n)&&l(e))throw new w(t,`${null!=r?`>= ${r}`:""}${null!=r&&null!=n?" && ":""}${null!=n?`<= ${n}`:""}`,e)},validateObject:I,validateOneOf:j,validatePlainFunction:D,validatePort:function(e,t="Port",r=!0){if("number"!=typeof e&&"string"!=typeof e||"string"==typeof e&&0===y(e).length||+e!=+e>>>0||e>65535||0===e&&!r)throw new g(t,e,r);return 0|e},validateSignalName:function(e,t="signal"){if(M(e,t),void 0===k[e]){if(void 0!==k[b(e)])throw new P(e+" (signals must use all capital letters)");throw new P(e)}},validateString:M,validateUint32:S,validateUndefined:C,validateUnion:function(e,t,r){if(!a(r,e))throw new v(t,`('${i(r,"|")}')`,e)},validateAbortSignal:U,validateLinkHeaderValue:function(e){if("string"==typeof e)return Z(e,"hints"),e;if(n(e)){let t=e.length,r="";if(0===t)return r;for(let n=0;n<t;n++){let a=e[n];Z(a,"hints"),r+=a,n!==t-1&&(r+=", ")}return r}throw new x("hints",e,'must be an array or string of format "</styles.css>; rel=preload; as=style"')}}},4381:(e,t,r)=>{let{format:n,inspect:a,AggregateError:i}=r(6087),o=globalThis.AggregateError||i,s=Symbol("kIsNodeError"),l=["string","function","number","object","Function","Object","boolean","bigint","symbol"],c=/^([A-Z][a-z0-9]*)+$/,u={};function d(e,t){if(!e)throw new u.ERR_INTERNAL_ASSERTION(t)}function f(e){let t="",r=e.length,n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function p(e,t,r){r||(r=Error);class a extends r{constructor(...r){super(function(e,t,r){if("function"==typeof t)return d(t.length<=r.length,`Code: ${e}; The provided arguments length (${r.length}) does not match the required ones (${t.length}).`),t(...r);let a=(t.match(/%[dfijoOs]/g)||[]).length;return d(a===r.length,`Code: ${e}; The provided arguments length (${r.length}) does not match the required ones (${a}).`),0===r.length?t:n(t,...r)}(e,t,r))}toString(){return`${this.name} [${e}]: ${this.message}`}}Object.defineProperties(a.prototype,{name:{value:r.name,writable:!0,enumerable:!1,configurable:!0},toString:{value(){return`${this.name} [${e}]: ${this.message}`},writable:!0,enumerable:!1,configurable:!0}}),a.prototype.code=e,a.prototype[s]=!0,u[e]=a}function h(e){let t="__node_internal_"+e.name;return Object.defineProperty(e,"name",{value:t}),e}p("ERR_ASSERTION","%s",Error),p("ERR_INVALID_ARG_TYPE",(e,t,r)=>{d("string"==typeof e,"'name' must be a string"),Array.isArray(t)||(t=[t]);let n="The ";e.endsWith(" argument")?n+=`${e} `:n+=`"${e}" ${e.includes(".")?"property":"argument"} `,n+="must be ";let i=[],o=[],s=[];for(let e of t)d("string"==typeof e,"All expected entries have to be of type string"),l.includes(e)?i.push(e.toLowerCase()):c.test(e)?o.push(e):(d("object"!==e,'The value "object" should be written as "Object"'),s.push(e));if(o.length>0){let e=i.indexOf("object");-1!==e&&(i.splice(i,e,1),o.push("Object"))}if(i.length>0){switch(i.length){case 1:n+=`of type ${i[0]}`;break;case 2:n+=`one of type ${i[0]} or ${i[1]}`;break;default:{let e=i.pop();n+=`one of type ${i.join(", ")}, or ${e}`}}(o.length>0||s.length>0)&&(n+=" or ")}if(o.length>0){switch(o.length){case 1:n+=`an instance of ${o[0]}`;break;case 2:n+=`an instance of ${o[0]} or ${o[1]}`;break;default:{let e=o.pop();n+=`an instance of ${o.join(", ")}, or ${e}`}}s.length>0&&(n+=" or ")}switch(s.length){case 0:break;case 1:s[0].toLowerCase()!==s[0]&&(n+="an "),n+=`${s[0]}`;break;case 2:n+=`one of ${s[0]} or ${s[1]}`;break;default:{let e=s.pop();n+=`one of ${s.join(", ")}, or ${e}`}}if(null==r)n+=`. Received ${r}`;else if("function"==typeof r&&r.name)n+=`. Received function ${r.name}`;else if("object"==typeof r){var u;null!==(u=r.constructor)&&void 0!==u&&u.name?n+=`. Received an instance of ${r.constructor.name}`:n+=`. Received ${a(r,{depth:-1})}`}else{let e=a(r,{colors:!1});e.length>25&&(e=`${e.slice(0,25)}...`),n+=`. Received type ${typeof r} (${e})`}return n},TypeError),p("ERR_INVALID_ARG_VALUE",(e,t,r="is invalid")=>{let n=a(t);return n.length>128&&(n=n.slice(0,128)+"..."),`The ${e.includes(".")?"property":"argument"} '${e}' ${r}. Received ${n}`},TypeError),p("ERR_INVALID_RETURN_VALUE",(e,t,r)=>{var n;return`Expected ${e} to be returned from the "${t}" function but got ${null!=r&&null!==(n=r.constructor)&&void 0!==n&&n.name?`instance of ${r.constructor.name}`:"type "+typeof r}.`},TypeError),p("ERR_MISSING_ARGS",(...e)=>{let t;d(e.length>0,"At least one arg needs to be specified");let r=e.length;switch(e=(Array.isArray(e)?e:[e]).map(e=>`"${e}"`).join(" or "),r){case 1:t+=`The ${e[0]} argument`;break;case 2:t+=`The ${e[0]} and ${e[1]} arguments`;break;default:{let r=e.pop();t+=`The ${e.join(", ")}, and ${r} arguments`}}return`${t} must be specified`},TypeError),p("ERR_OUT_OF_RANGE",(e,t,r)=>{let n;return d(t,'Missing "range" argument'),Number.isInteger(r)&&Math.abs(r)>4294967296?n=f(String(r)):"bigint"==typeof r?(n=String(r),(r>2n**32n||r<-(2n**32n))&&(n=f(n)),n+="n"):n=a(r),`The value of "${e}" is out of range. It must be ${t}. Received ${n}`},RangeError),p("ERR_MULTIPLE_CALLBACK","Callback called multiple times",Error),p("ERR_METHOD_NOT_IMPLEMENTED","The %s method is not implemented",Error),p("ERR_STREAM_ALREADY_FINISHED","Cannot call %s after a stream was finished",Error),p("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable",Error),p("ERR_STREAM_DESTROYED","Cannot call %s after a stream was destroyed",Error),p("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),p("ERR_STREAM_PREMATURE_CLOSE","Premature close",Error),p("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF",Error),p("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event",Error),p("ERR_STREAM_WRITE_AFTER_END","write after end",Error),p("ERR_UNKNOWN_ENCODING","Unknown encoding: %s",TypeError),e.exports={AbortError:class extends Error{constructor(e="The operation was aborted",t){if(void 0!==t&&"object"!=typeof t)throw new u.ERR_INVALID_ARG_TYPE("options","Object",t);super(e,t),this.code="ABORT_ERR",this.name="AbortError"}},aggregateTwoErrors:h(function(e,t){if(e&&t&&e!==t){if(Array.isArray(t.errors))return t.errors.push(e),t;let r=new o([t,e],t.message);return r.code=t.code,r}return e||t}),hideStackFrames:h,codes:u}},9061:e=>{e.exports={ArrayIsArray:e=>Array.isArray(e),ArrayPrototypeIncludes:(e,t)=>e.includes(t),ArrayPrototypeIndexOf:(e,t)=>e.indexOf(t),ArrayPrototypeJoin:(e,t)=>e.join(t),ArrayPrototypeMap:(e,t)=>e.map(t),ArrayPrototypePop:(e,t)=>e.pop(t),ArrayPrototypePush:(e,t)=>e.push(t),ArrayPrototypeSlice:(e,t,r)=>e.slice(t,r),Error:Error,FunctionPrototypeCall:(e,t,...r)=>e.call(t,...r),FunctionPrototypeSymbolHasInstance:(e,t)=>Function.prototype[Symbol.hasInstance].call(e,t),MathFloor:Math.floor,Number:Number,NumberIsInteger:Number.isInteger,NumberIsNaN:Number.isNaN,NumberMAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER,NumberMIN_SAFE_INTEGER:Number.MIN_SAFE_INTEGER,NumberParseInt:Number.parseInt,ObjectDefineProperties:(e,t)=>Object.defineProperties(e,t),ObjectDefineProperty:(e,t,r)=>Object.defineProperty(e,t,r),ObjectGetOwnPropertyDescriptor:(e,t)=>Object.getOwnPropertyDescriptor(e,t),ObjectKeys:e=>Object.keys(e),ObjectSetPrototypeOf:(e,t)=>Object.setPrototypeOf(e,t),Promise:Promise,PromisePrototypeCatch:(e,t)=>e.catch(t),PromisePrototypeThen:(e,t,r)=>e.then(t,r),PromiseReject:e=>Promise.reject(e),ReflectApply:Reflect.apply,RegExpPrototypeTest:(e,t)=>e.test(t),SafeSet:Set,String:String,StringPrototypeSlice:(e,t,r)=>e.slice(t,r),StringPrototypeToLowerCase:e=>e.toLowerCase(),StringPrototypeToUpperCase:e=>e.toUpperCase(),StringPrototypeTrim:e=>e.trim(),Symbol:Symbol,SymbolFor:Symbol.for,SymbolAsyncIterator:Symbol.asyncIterator,SymbolHasInstance:Symbol.hasInstance,SymbolIterator:Symbol.iterator,TypedArrayPrototypeSet:(e,t,r)=>e.set(t,r),Uint8Array:Uint8Array}},6087:(e,t,r)=>{let n=r(8764),a=Object.getPrototypeOf(async function(){}).constructor,i=globalThis.Blob||n.Blob;e.exports={AggregateError:class extends Error{constructor(e){if(!Array.isArray(e))throw TypeError("Expected input to be an Array, got "+typeof e);let t="";for(let r=0;r<e.length;r++)t+=`    ${e[r].stack}
`;super(t),this.name="AggregateError",this.errors=e}},kEmptyObject:Object.freeze({}),once(e){let t=!1;return function(...r){t||(t=!0,e.apply(this,r))}},createDeferredPromise:function(){let e,t;return{promise:new Promise((r,n)=>{e=r,t=n}),resolve:e,reject:t}},promisify:e=>new Promise((t,r)=>{e((e,...n)=>e?r(e):t(...n))}),debuglog:()=>function(){},format:(e,...t)=>e.replace(/%([sdifj])/g,function(...[e,r]){let n=t.shift();return"f"===r?n.toFixed(6):"j"===r?JSON.stringify(n):"s"===r&&"object"==typeof n?`${n.constructor!==Object?n.constructor.name:""} {}`.trim():n.toString()}),inspect(e){switch(typeof e){case"string":if(e.includes("'")){if(!e.includes('"'))return`"${e}"`;if(!e.includes("`")&&!e.includes("${"))return`\`${e}\``}return`'${e}'`;case"number":return isNaN(e)?"NaN":Object.is(e,-0)?String(e):e;case"bigint":return`${String(e)}n`;case"boolean":case"undefined":return String(e);case"object":return"{}"}},types:{isAsyncFunction:e=>e instanceof a,isArrayBufferView:e=>ArrayBuffer.isView(e)},isBlob:void 0!==i?function(e){return e instanceof i}:function(e){return!1}},e.exports.promisify.custom=Symbol.for("nodejs.util.promisify.custom")},5099:(e,t,r)=>{let{Buffer:n}=r(8764),{ObjectDefineProperty:a,ObjectKeys:i,ReflectApply:o}=r(9061),{promisify:{custom:s}}=r(6087),{streamReturningOperators:l,promiseReturningOperators:c}=r(4382),{codes:{ERR_ILLEGAL_CONSTRUCTOR:u}}=r(4381),d=r(299),{pipeline:f}=r(9946),{destroyer:p}=r(1195),h=r(8610),b=r(7854),y=r(5874),m=e.exports=r(4870).Stream;for(let e of(m.isDisturbed=y.isDisturbed,m.isErrored=y.isErrored,m.isReadable=y.isReadable,m.Readable=r(911),i(l))){let t=l[e];function g(...e){if(new.target)throw u();return m.Readable.from(o(t,this,e))}a(g,"name",{__proto__:null,value:t.name}),a(g,"length",{__proto__:null,value:t.length}),a(m.Readable.prototype,e,{__proto__:null,value:g,enumerable:!1,configurable:!0,writable:!0})}for(let e of i(c)){let t=c[e];function g(...e){if(new.target)throw u();return o(t,this,e)}a(g,"name",{__proto__:null,value:t.name}),a(g,"length",{__proto__:null,value:t.length}),a(m.Readable.prototype,e,{__proto__:null,value:g,enumerable:!1,configurable:!0,writable:!0})}m.Writable=r(6304),m.Duplex=r(8672),m.Transform=r(1161),m.PassThrough=r(917),m.pipeline=f;let{addAbortSignal:v}=r(196);m.addAbortSignal=v,m.finished=h,m.destroy=p,m.compose=d,a(m,"promises",{__proto__:null,configurable:!0,enumerable:!0,get:()=>b}),a(f,s,{__proto__:null,enumerable:!0,get:()=>b.pipeline}),a(h,s,{__proto__:null,enumerable:!0,get:()=>b.finished}),m.Stream=m,m._isUint8Array=function(e){return e instanceof Uint8Array},m._uint8ArrayToBuffer=function(e){return n.from(e.buffer,e.byteOffset,e.byteLength)}},7854:(e,t,r)=>{let{ArrayPrototypePop:n,Promise:a}=r(9061),{isIterable:i,isNodeStream:o,isWebStream:s}=r(5874),{pipelineImpl:l}=r(9946),{finished:c}=r(8610);r(2830),e.exports={finished:c,pipeline:function(...e){return new a((t,r)=>{let a,c;let u=e[e.length-1];if(u&&"object"==typeof u&&!o(u)&&!i(u)&&!s(u)){let t=n(e);a=t.signal,c=t.end}l(e,(e,n)=>{e?r(e):t(n)},{signal:a,end:c})})}}},9509:(e,t,r)=>{var n=r(8764),a=n.Buffer;function i(e,t){for(var r in e)t[r]=e[r]}function o(e,t,r){return a(e,t,r)}a.from&&a.alloc&&a.allocUnsafe&&a.allocUnsafeSlow?e.exports=n:(i(n,t),t.Buffer=o),o.prototype=Object.create(a.prototype),i(a,o),o.from=function(e,t,r){if("number"==typeof e)throw TypeError("Argument must not be a number");return a(e,t,r)},o.alloc=function(e,t,r){if("number"!=typeof e)throw TypeError("Argument must be a number");var n=a(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},o.allocUnsafe=function(e){if("number"!=typeof e)throw TypeError("Argument must be a number");return a(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw TypeError("Argument must be a number");return n.SlowBuffer(e)}},2830:(e,t,r)=>{e.exports=a;var n=r(7187).EventEmitter;function a(){n.call(this)}r(5717)(a,n),a.Readable=r(9481),a.Writable=r(4229),a.Duplex=r(6753),a.Transform=r(4605),a.PassThrough=r(2725),a.finished=r(8610),a.pipeline=r(9946),a.Stream=a,a.prototype.pipe=function(e,t){var r=this;function a(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function i(){r.readable&&r.resume&&r.resume()}r.on("data",a),e.on("drain",i),e._isStdio||t&&!1===t.end||(r.on("end",s),r.on("close",l));var o=!1;function s(){o||(o=!0,e.end())}function l(){o||(o=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(u(),0===n.listenerCount(this,"error"))throw e}function u(){r.removeListener("data",a),e.removeListener("drain",i),r.removeListener("end",s),r.removeListener("close",l),r.removeListener("error",c),e.removeListener("error",c),r.removeListener("end",u),r.removeListener("close",u),e.removeListener("close",u)}return r.on("error",c),e.on("error",c),r.on("end",u),r.on("close",u),e.on("close",u),e.emit("pipe",r),e}},2553:(e,t,r)=>{var n=r(9509).Buffer,a=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function i(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===a||!a(e)))throw Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=l,this.end=c,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=u,this.end=d,t=3;break;default:return this.write=f,void(this.end=p)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function o(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function l(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function c(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function u(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function d(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function f(e){return e.toString(this.encoding)}function p(e){return e&&e.length?this.write(e):""}t.StringDecoder=i,i.prototype.write=function(e){var t,r;if(0===e.length)return"";if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},i.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},i.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var a=o(t[n]);return a>=0?(a>0&&(e.lastNeed=a-1),a):--n<r||-2===a?0:(a=o(t[n]))>=0?(a>0&&(e.lastNeed=a-2),a):--n<r||-2===a?0:(a=o(t[n]))>=0?(a>0&&(2===a?a=0:e.lastNeed=a-3),a):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},i.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{r.r(n);var e=r(2141),t={};for(let r in e)"default"!==r&&(t[r]=()=>e[r]);r.d(n,t)})(),n})();const bY=bW?.default??bW,bK=["x25519"],bJ=/^did:kilt:(?<address>4[1-9a-km-zA-HJ-NP-Z]{47})(?<fragment>#[^#\n]+)?$/,bQ=/^did:kilt:light:(?<authKeyType>[0-9]{2})(?<address>4[1-9a-km-zA-HJ-NP-Z]{47,48})(:(?<encodedDetails>.+?))?(?<fragment>#[^#\n]+)?$/;function b_(e){let t=bJ.exec(e)?.groups;if(t){let{version:r,fragment:n}=t,a=t.address,i=r?parseInt(r,10):1;return{did:e.replace(n||"",""),version:i,type:"full",address:a,fragment:"#"===n?void 0:n}}if(// If it fails to parse full DID, try with light DID
t=bQ.exec(e)?.groups){let{authKeyType:r,version:n,encodedDetails:a,fragment:i}=t,o=t.address,s=n?parseInt(n,10):1;return{did:e.replace(i||"",""),version:s,type:"light",address:o,fragment:"#"===i?void 0:i,encodedDetails:a,authKeyTypeEncoding:r}}throw new hn.InvalidDidFormatError(e)}function b$(e,t){if("string"!=typeof e)throw TypeError(`DID string expected, got ${typeof e}`);let{address:r,fragment:n}=b_(e);if(n&&("Did"===t||// for backwards compatibility with previous implementations, `false` maps to `Did` while `true` maps to `undefined`.
"boolean"==typeof t&&!1===t))throw new hn.DidError("Expected a Kilt DidUri but got a DidResourceUri (containing a #fragment)");if(!n&&"ResourceUri"===t)throw new hn.DidError("Expected a Kilt DidResourceUri (containing a #fragment) but got a DidUri");bd.verifyKiltAddress(r)}function b0(e,t=1){let r=bd.isKiltAddress(e)?e:b_(e).address,n=1===t?"":`v${t}`;return`did:kilt:${n}${r}`}/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */var b1={},b2={},b5=b2={};function b3(){throw Error("setTimeout has not been defined")}function b8(){throw Error("clearTimeout has not been defined")}function b9(e){if(M===setTimeout)return setTimeout(e,0);// if setTimeout wasn't available but was latter defined
if((M===b3||!M)&&setTimeout)return M=setTimeout,setTimeout(e,0);try{// when when somebody has screwed with setTimeout but no I.E. maddness
return M(e,0)}catch(t){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
return M.call(null,e,0)}catch(t){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
return M.call(this,e,0)}}}!function(){try{M="function"==typeof setTimeout?setTimeout:b3}catch(e){M=b3}try{j="function"==typeof clearTimeout?clearTimeout:b8}catch(e){j=b8}}();var b6=[],b4=!1,b7=-1;function ye(){b4&&H&&(b4=!1,H.length?b6=H.concat(b6):b7=-1,b6.length&&yt())}function yt(){if(!b4){var e=b9(ye);b4=!0;for(var t=b6.length;t;){for(H=b6,b6=[];++b7<t;)H&&H[b7].run();b7=-1,t=b6.length}H=null,b4=!1,function(e){if(j===clearTimeout)return clearTimeout(e);// if clearTimeout wasn't available but was latter defined
if((j===b8||!j)&&clearTimeout)return j=clearTimeout,clearTimeout(e);try{// when when somebody has screwed with setTimeout but no I.E. maddness
j(e)}catch(t){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
return j.call(null,e)}catch(t){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
// Some versions of I.E. have different rules for clearTimeout vs setTimeout
return j.call(this,e)}}}(e)}}// v8 likes predictible objects
function yr(e,t){this.fun=e,this.array=t}function yn(){}b5.nextTick=function(e){var t=Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];b6.push(new yr(e,t)),1!==b6.length||b4||b9(yt)},yr.prototype.run=function(){this.fun.apply(null,this.array)},b5.title="browser",b5.browser=!0,b5.env={},b5.argv=[],b5.version="",b5.versions={},b5.on=yn,b5.addListener=yn,b5.once=yn,b5.off=yn,b5.removeListener=yn,b5.removeAllListeners=yn,b5.emit=yn,b5.prependListener=yn,b5.prependOnceListener=yn,b5.listeners=function(e){return[]},b5.binding=function(e){throw Error("process.binding is not supported")},b5.cwd=function(){return"/"},b5.chdir=function(e){throw Error("process.chdir is not supported")},b5.umask=function(){return 0},/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */Object.defineProperty(b1,"__esModule",{value:!0}),b1.LoggingFactory=b1.isSet=b1.unset=b1.set=b1.get=b1.modifyLogLevel=void 0;var ya={},yi=ya&&ya.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),yo=ya&&ya.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||yi(t,e,r)};Object.defineProperty(ya,"__esModule",{value:!0}),ya.getCategoryControl=ya.getLogControl=ya.help=ya.MessageFormatUtils=ya.LinkedList=ya.SimpleMap=ya.LogLevel=ya.LoggerType=ya.LogFormat=ya.DateFormatEnum=ya.DateFormat=ya.CategoryLogFormat=ya.MessageBufferLoggerImpl=ya.ConsoleLoggerImpl=ya.AbstractLogger=ya.LFService=ya.LogGroupRule=ya.LoggerFactoryOptions=ya.CategoryServiceFactory=ya.CategoryMessageBufferLoggerImpl=ya.CategoryConfiguration=ya.CategoryRuntimeSettings=ya.Category=ya.CategoryDelegateLoggerImpl=ya.CategoryConsoleLoggerImpl=ya.AbstractCategoryLogger=ya.ExtensionHelper=void 0;var ys={};Object.defineProperty(ys,"__esModule",{value:!0}),ys.LoggerControlImpl=void 0;var yl=A("cWKy2"),yc={};Object.defineProperty(yc,"__esModule",{value:!0}),yc.LFService=void 0;var yu=A("1Mugs"),yl=A("cWKy2"),yd={};Object.defineProperty(yd,"__esModule",{value:!0}),yd.LoggerFactoryImpl=void 0;var yu=A("1Mugs"),yl=A("cWKy2"),yf={},yp=yf&&yf.__extends||(f=function(e,t){return(f=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}f(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(yf,"__esModule",{value:!0}),yf.ConsoleLoggerImpl=void 0;var yh={};Object.defineProperty(yh,"__esModule",{value:!0}),yh.AbstractLogger=void 0;var yl=A("cWKy2"),yu=A("1Mugs"),yb={};Object.defineProperty(yb,"__esModule",{value:!0}),yb.MessageFormatUtils=void 0;var yy={};p=function(e,t,r){var n={filter:function(e){// Filter out stackframes for this library by default
return -1===(e.functionName||"").indexOf("StackTrace$$")&&-1===(e.functionName||"").indexOf("ErrorStackParser$$")&&-1===(e.functionName||"").indexOf("StackTraceGPS$$")&&-1===(e.functionName||"").indexOf("StackGenerator$$")},sourceCache:{}},a=function(){try{// Error must be thrown to get stack in IE
throw Error()}catch(e){return e}};/**
     * Merge 2 given Objects. If a conflict occurs the second object wins.
     * Does not do deep merges.
     *
     * @param {Object} first base object
     * @param {Object} second overrides
     * @returns {Object} merged first and second
     * @private
     */function i(e,t){var r={};return[e,t].forEach(function(e){for(var t in e)e.hasOwnProperty(t)&&(r[t]=e[t]);return r}),r}function o(e){return e.stack||e["opera#sourceloc"]}function s(e,t){return"function"==typeof t?e.filter(t):e}return{/**
         * Get a backtrace from invocation point.
         *
         * @param {Object} opts
         * @returns {Array} of StackFrame
         */get:function(e){var t=a();return o(t)?this.fromError(t,e):this.generateArtificially(e)},/**
         * Get a backtrace from invocation point.
         * IMPORTANT: Does not handle source maps or guess function names!
         *
         * @param {Object} opts
         * @returns {Array} of StackFrame
         */getSync:function(r){r=i(n,r);var l=a();return s(o(l)?e.parse(l):t.backtrace(r),r.filter)},/**
         * Given an error object, parse it.
         *
         * @param {Error} error object
         * @param {Object} opts
         * @returns {Promise} for Array[StackFrame}
         */fromError:function(t,a){var o=new r(a=i(n,a));return new Promise((function(r){r(Promise.all(s(e.parse(t),a.filter).map(function(e){return new Promise(function(t){function r(){t(e)}o.pinpoint(e).then(t,r).catch(r)})})))}).bind(this))},/**
         * Use StackGenerator to generate a backtrace.
         *
         * @param {Object} opts
         * @returns {Promise} of Array[StackFrame]
         */generateArtificially:function(e){e=i(n,e);var r=t.backtrace(e);return"function"==typeof e.filter&&(r=r.filter(e.filter)),Promise.resolve(r)},/**
         * Given a function, wrap it such that invocations trigger a callback that
         * is called with a stack trace.
         *
         * @param {Function} fn to be instrumented
         * @param {Function} callback function to call with a stack trace on invocation
         * @param {Function} errback optional function to call with error if unable to get stack trace.
         * @param {Object} thisArg optional context object (e.g. window)
         */instrument:function(e,t,r,n){if("function"!=typeof e)throw Error("Cannot instrument non-function object");if("function"==typeof e.__stacktraceOriginalFn)return e;var a=(function(){try{return this.get().then(t,r).catch(r),e.apply(n||this,arguments)}catch(e){throw o(e)&&this.fromError(e).then(t,r).catch(r),e}}).bind(this);return a.__stacktraceOriginalFn=e,a},/**
         * Given a function that has been instrumented,
         * revert the function to it's original (non-instrumented) state.
         *
         * @param {Function} fn to de-instrument
         */deinstrument:function(e){if("function"!=typeof e)throw Error("Cannot de-instrument non-function object");return"function"==typeof e.__stacktraceOriginalFn?e.__stacktraceOriginalFn:e},/**
         * Given an error message and Array of StackFrames, serialize and POST to given URL.
         *
         * @param {Array} stackframes
         * @param {String} url
         * @param {String} errorMsg
         */report:function(e,t,r){return new Promise(function(n,a){var i=new XMLHttpRequest;i.onerror=a,i.onreadystatechange=function(){4===i.readyState&&(i.status>=200&&i.status<400?n(i.responseText):a(Error("POST to "+t+" failed with status: "+i.status)))},i.open("post",t),i.setRequestHeader("Content-Type","application/json");var o={stack:e};void 0!==r&&(o.message=r),i.send(JSON.stringify(o))})}}},"function"==typeof define&&define.amd?define("stacktrace",["error-stack-parser","stack-generator","stacktrace-gps"],p):yy=p(A("hSUrg"),A("frA9s"),A("bYcmg"));var yl=A("cWKy2"),ym=/** @class */function(){function e(){}return(/**
     * Render given date in given DateFormat and return as String.
     * @param date Date
     * @param dateFormat Format
     * @returns {string} Formatted date
     */e.renderDate=function(e,t){var r=function(e,t,r){var n=t-e.length;if(n>0){for(var a="",i=0;i<n;i++)a+=r;return a+e}return e},n=function(e){return r(e.getFullYear().toString(),4,"0")},a=function(e){return r((e.getMonth()+1).toString(),2,"0")},i=function(e){return r(e.getDate().toString(),2,"0")},o=function(e){return r(e.getHours().toString(),2,"0")},s=function(e){return r(e.getMinutes().toString(),2,"0")},l=function(e){return r(e.getSeconds().toString(),2,"0")},c=function(e){return r(e.getMilliseconds().toString(),3,"0")},u=t.dateSeparator,d="";switch(t.formatEnum){case yl.DateFormatEnum.Default:// yyyy-mm-dd hh:mm:ss,m
d=n(e)+u+a(e)+u+i(e)+" "+o(e)+":"+s(e)+":"+l(e)+","+c(e);break;case yl.DateFormatEnum.YearMonthDayTime:d=n(e)+u+a(e)+u+i(e)+" "+o(e)+":"+s(e)+":"+l(e);break;case yl.DateFormatEnum.YearDayMonthWithFullTime:d=n(e)+u+i(e)+u+a(e)+" "+o(e)+":"+s(e)+":"+l(e)+","+c(e);break;case yl.DateFormatEnum.YearDayMonthTime:d=n(e)+u+i(e)+u+a(e)+" "+o(e)+":"+s(e)+":"+l(e);break;default:throw Error("Unsupported date format enum: "+t.formatEnum)}return d},/**
     * Renders given category log message in default format.
     * @param msg Message to format
     * @param addStack If true adds the stack to the output, otherwise skips it
     * @returns {string} Formatted message
     */e.renderDefaultMessage=function(t,r){var n="",a=t.logFormat;a.showTimeStamp&&(n+=e.renderDate(t.date,a.dateFormat)+" "),n+=yl.LogLevel[t.level].toUpperCase(),t.isResolvedErrorMessage&&(n+=" (resolved)"),n+=" ",a.showCategoryName&&(n+="[",t.categories.forEach(function(e,t){t>0&&(n+=", "),n+=e.name}),n+="]");// Get the normal string message first
var i="",o="",s=t.message;return"string"==typeof s?i=s:(i=s.msg,s.data&&(o=" [data]: "+(s.ds?s.ds(s.data):JSON.stringify(s.data)))),n+=" "+i+o,r&&null!==t.errorAsStack&&(n+="\n"+t.errorAsStack),n},/**
     * Renders given log4j log message in default format.
     * @param msg Message to format
     * @param addStack If true adds the stack to the output, otherwise skips it
     * @returns {string} Formatted message
     */e.renderDefaultLog4jMessage=function(t,r){var n=t.logGroupRule.logFormat,a="";n.showTimeStamp&&(a+=e.renderDate(t.date,n.dateFormat)+" "),a+=yl.LogLevel[t.level].toUpperCase()+" ",n.showLoggerName&&(a+="["+t.loggerName+"]");// Get the normal string message first
var i="",o="";if("string"==typeof t.message)i=t.message;else{var s=t.message;i=s.msg,s.data&&(o=" [data]: "+(s.ds?s.ds(s.data):JSON.stringify(s.data)))}return a+=" "+i+o,r&&null!==t.errorAsStack&&(a+="\n"+t.errorAsStack),a},/**
     * Render error as stack
     * @param error Return error as Promise
     * @returns {Promise<string>|Promise} Promise for stack
     */e.renderError=function(e){var t=e.name+": "+e.message+"\n@";return new Promise(function(r){// This one has a promise too
yy.fromError(e,{offline:!0}).then(function(e){var n=e.map(function(e){return e.toString()}).join("\n  ");// This resolves our returned promise
r(t+="\n"+n)}).catch(function(){t="Unexpected error object was passed in. ";try{t+="Could not resolve it, stringified object: "+JSON.stringify(e)}catch(e){// Cannot stringify can only tell something was wrong.
t+="Could not resolve it or stringify it."}r(t)})})},e)}();yb.MessageFormatUtils=ym;var yg=/** @class */function(){function e(e,t,r,n,a,i,o,s){this._errorAsStack=null,this._error=null,this._loggerName=e,this._message=t,this._errorAsStack=r,this._error=n,this._logGroupRule=a,this._date=i,this._level=o,this._ready=s}return Object.defineProperty(e.prototype,"loggerName",{get:function(){return this._loggerName},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"message",{get:function(){return this._message},set:function(e){this._message=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"errorAsStack",{get:function(){return this._errorAsStack},set:function(e){this._errorAsStack=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"error",{get:function(){return this._error},set:function(e){this._error=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"logGroupRule",{get:function(){return this._logGroupRule},set:function(e){this._logGroupRule=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"date",{get:function(){return this._date},set:function(e){this._date=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"level",{get:function(){return this._level},set:function(e){this._level=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isMessageLogData",{get:function(){return"string"!=typeof this._message},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"ready",{get:function(){return this._ready},set:function(e){this._ready=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"messageAsString",{get:function(){return"string"==typeof this._message?this._message:this._message.msg},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"logData",{get:function(){var e=null;return"string"!=typeof this._message&&(e=this.message),e},enumerable:!1,configurable:!0}),e}(),yv=/** @class */function(){function e(e,t){this._allMessages=new yu.LinkedList,this._open=!0,this._name=e,this._logGroupRuntimeSettings=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!1,configurable:!0}),e.prototype.trace=function(e,t){void 0===t&&(t=null),this._log(yl.LogLevel.Trace,e,t)},e.prototype.debug=function(e,t){void 0===t&&(t=null),this._log(yl.LogLevel.Debug,e,t)},e.prototype.info=function(e,t){void 0===t&&(t=null),this._log(yl.LogLevel.Info,e,t)},e.prototype.warn=function(e,t){void 0===t&&(t=null),this._log(yl.LogLevel.Warn,e,t)},e.prototype.error=function(e,t){void 0===t&&(t=null),this._log(yl.LogLevel.Error,e,t)},e.prototype.fatal=function(e,t){void 0===t&&(t=null),this._log(yl.LogLevel.Fatal,e,t)},e.prototype.isTraceEnabled=function(){return this._logGroupRuntimeSettings.level===yl.LogLevel.Trace},e.prototype.isDebugEnabled=function(){return this._logGroupRuntimeSettings.level<=yl.LogLevel.Debug},e.prototype.isInfoEnabled=function(){return this._logGroupRuntimeSettings.level<=yl.LogLevel.Info},e.prototype.isWarnEnabled=function(){return this._logGroupRuntimeSettings.level<=yl.LogLevel.Warn},e.prototype.isErrorEnabled=function(){return this._logGroupRuntimeSettings.level<=yl.LogLevel.Error},e.prototype.isFatalEnabled=function(){return this._logGroupRuntimeSettings.level<=yl.LogLevel.Fatal},e.prototype.getLogLevel=function(){return this._logGroupRuntimeSettings.level},e.prototype.isOpen=function(){return this._open},e.prototype.close=function(){this._open=!1,this._allMessages.clear()},e.prototype.createDefaultLogMessage=function(e){return yb.MessageFormatUtils.renderDefaultLog4jMessage(e,!0)},/**
     * Return optional message formatter. All LoggerTypes (except custom) will see if
     * they have this, and if so use it to log.
     * @returns {((message:LogMessage)=>string)|null}
     */e.prototype._getMessageFormatter=function(){return this._logGroupRuntimeSettings.formatterLogMessage},e.prototype._log=function(e,t,r){void 0===r&&(r=null),this._open&&this._logGroupRuntimeSettings.level<=e&&(this._allMessages.addTail(this.createMessage(e,function(){return"function"==typeof t?t():t},function(){return"function"==typeof r?r():r},new Date)),this.processMessages())},e.prototype.createMessage=function(e,t,r,n){var a=this,i=r();if(null!==i){var o=new yg(this._name,t(),null,i,this._logGroupRuntimeSettings.logGroupRule,n,e,!1);return yb.MessageFormatUtils.renderError(i).then(function(e){o.errorAsStack=e,o.ready=!0,a.processMessages()}).catch(function(){o.errorAsStack="<UNKNOWN> unable to get stack.",o.ready=!0,a.processMessages()}),o}return new yg(this._name,t(),null,i,this._logGroupRuntimeSettings.logGroupRule,n,e,!0)},e.prototype.processMessages=function(){// Basically we wait until errors are resolved (those messages
// may not be ready).
var e=this._allMessages;if(e.getSize()>0)do{var t=e.getHead();if(null!=t){if(!t.ready)break;e.removeHead(),null!==t.message&&this.doLog(t)}}while(e.getSize()>0)},e}();yh.AbstractLogger=yv;var yl=A("cWKy2"),yx=/** @class */function(e){function t(t,r){return e.call(this,t,r)||this}return yp(t,e),t.prototype.doLog=function(e){if(void 0!==console){var t=!1,r=e.level,n=this._getMessageFormatter(),a=void 0;/* tslint:disable:no-console */switch(a=null===n?this.createDefaultLogMessage(e):n(e),r){case yl.LogLevel.Trace:case yl.LogLevel.Debug:break;case yl.LogLevel.Info:console.info&&(console.info(a),t=!0);break;case yl.LogLevel.Warn:console.warn&&(console.warn(a),t=!0);break;case yl.LogLevel.Error:case yl.LogLevel.Fatal:console.error&&(console.error(a),t=!0);break;default:throw Error("Log level not supported: "+r)}t||console.log(a);/* tslint:enable:no-console */}else throw Error("Console is not defined, cannot log msg: "+e.message)},t}(yh.AbstractLogger);yf.ConsoleLoggerImpl=yx;var yw={},yP=yw&&yw.__extends||(h=function(e,t){return(h=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}h(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(yw,"__esModule",{value:!0}),yw.MessageBufferLoggerImpl=void 0;/**
 * Logger which buffers all messages, use with care due to possible high memory footprint.
 * Can be convenient in some cases. Call toString() for full output, or cast to this class
 * and call getMessages() to do something with it yourself.
 */var yO=/** @class */function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.messages=[],n}return yP(t,e),t.prototype.close=function(){this.messages=[],e.prototype.close.call(this)},t.prototype.getMessages=function(){return this.messages},t.prototype.toString=function(){return this.messages.map(function(e){return e}).join("\n")},t.prototype.doLog=function(e){var t,r=this._getMessageFormatter();t=null===r?this.createDefaultLogMessage(e):r(e),this.messages.push(t)},t}(yh.AbstractLogger);yw.MessageBufferLoggerImpl=yO;var yT={};Object.defineProperty(yT,"__esModule",{value:!0}),yT.LogGroupRuntimeSettings=void 0;var yl=A("cWKy2"),yz=/** @class */function(){function e(e){this._formatterLogMessage=null,this._logGroupRule=e,this._level=e.level,this._loggerType=e.loggerType,this._logFormat=new yl.LogFormat(new yl.DateFormat(e.logFormat.dateFormat.formatEnum,e.logFormat.dateFormat.dateSeparator),e.logFormat.showTimeStamp,e.logFormat.showLoggerName),this._callBackLogger=e.callBackLogger,this._formatterLogMessage=e.formatterLogMessage}return Object.defineProperty(e.prototype,"logGroupRule",{/**
         * Returns original LogGroupRule (so not runtime settings!)
         * @return {LogGroupRule}
         */get:function(){return this._logGroupRule},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"level",{get:function(){return this._level},set:function(e){this._level=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"loggerType",{get:function(){return this._loggerType},set:function(e){this._loggerType=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"logFormat",{get:function(){return this._logFormat},set:function(e){this._logFormat=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"callBackLogger",{get:function(){return this._callBackLogger},set:function(e){this._callBackLogger=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"formatterLogMessage",{get:function(){return this._formatterLogMessage},set:function(e){this._formatterLogMessage=e},enumerable:!1,configurable:!0}),e}();yT.LogGroupRuntimeSettings=yz;var yk=/** @class */function(){function e(e,t){this._loggers=new yu.SimpleMap,this._logGroupRuntimeSettingsIndexed=[],this._loggerToLogGroupSettings=new yu.SimpleMap,this._name=e,this.configure(t)}return e.prototype.configure=function(e){this._options=e,// Close any current open loggers.
this.closeLoggers(),this._loggerToLogGroupSettings.clear(),this._logGroupRuntimeSettingsIndexed=[];/* tslint:disable:prefer-for-of */for(var t=this._options.logGroupRules,r=0;r<t.length;r++)this._logGroupRuntimeSettingsIndexed.push(new yT.LogGroupRuntimeSettings(t[r]));/* tslint:enable:prefer-for-of */},e.prototype.getLogger=function(e){if(!this._options.enabled)throw Error("LoggerFactory is not enabled, please check your options passed in");var t=this._loggers.get(e);return void 0!==t||(// Initialize logger with appropriate level
t=this.loadLogger(e),this._loggers.put(e,t)),t},e.prototype.isEnabled=function(){return this._options.enabled},e.prototype.closeLoggers=function(){this._loggers.forEachValue(function(e){// We can only close if AbstractLogger is used (our loggers, but user loggers may not extend it, even though unlikely).
e instanceof yh.AbstractLogger&&e.close()}),this._loggers.clear()},e.prototype.getName=function(){return this._name},e.prototype.getLogGroupRuntimeSettingsByIndex=function(e){return e>=0&&e<this._logGroupRuntimeSettingsIndexed.length?this._logGroupRuntimeSettingsIndexed[e]:null},e.prototype.getLogGroupRuntimeSettingsByLoggerName=function(e){var t=this._loggerToLogGroupSettings.get(e);return void 0===t?null:t},e.prototype.getLogGroupRuntimeSettings=function(){return this._logGroupRuntimeSettingsIndexed.slice(0)},e.prototype.loadLogger=function(e){for(var t=this._options.logGroupRules,r=0;r<t.length;r++){var n=t[r];if(n.regExp.test(e)){var a=this._logGroupRuntimeSettingsIndexed[r],i=void 0;switch(n.loggerType){case yl.LoggerType.Console:i=new yf.ConsoleLoggerImpl(e,a);break;case yl.LoggerType.MessageBuffer:i=new yw.MessageBufferLoggerImpl(e,a);break;case yl.LoggerType.Custom:if(null!=n.callBackLogger)i=n.callBackLogger(e,a);else throw Error("Cannot create a custom logger, custom callback is null");break;default:throw Error("Cannot create a Logger for LoggerType: "+n.loggerType)}return(// For a new logger map it by its name
this._loggerToLogGroupSettings.put(e,a),i)}}throw Error("Failed to find a match to create a Logger for: "+e)},e}();yd.LoggerFactoryImpl=yk;var yL={};Object.defineProperty(yL,"__esModule",{value:!0}),yL.ExtensionHelper=void 0;var yE={};Object.defineProperty(yE,"__esModule",{value:!0}),yE.CategoryServiceImpl=void 0;var yu=A("1Mugs"),yl=A("cWKy2"),yN={},yS=yN&&yN.__extends||(b=function(e,t){return(b=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}b(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(yN,"__esModule",{value:!0}),yN.CategoryConsoleLoggerImpl=void 0;var yl=A("cWKy2"),yM={},yj=yM&&yM.__spreadArray||function(e,t,r){if(r||2==arguments.length)for(var n,a=0,i=t.length;a<i;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(yM,"__esModule",{value:!0}),yM.AbstractCategoryLogger=void 0;var yu=A("1Mugs"),yl=A("cWKy2"),yH=/** @class */function(){function e(e,t,r,n,a,i,o){this._resolvedErrorMessage=!1,this._errorAsStack=null,this._message=e,this._error=t,this._categories=r,this._date=n,this._level=a,this._logFormat=i,this._ready=o}return Object.defineProperty(e.prototype,"message",{get:function(){return this._message},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"error",{get:function(){return this._error},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"categories",{get:function(){return this._categories},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"date",{get:function(){return this._date},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"level",{get:function(){return this._level},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"logFormat",{get:function(){return this._logFormat},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isMessageLogData",{get:function(){return"string"!=typeof this._message},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"messageAsString",{get:function(){return"string"==typeof this._message?this._message:this._message.msg},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"logData",{get:function(){var e=null;return"string"!=typeof this._message&&(e=this.message),e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isResolvedErrorMessage",{get:function(){return this._resolvedErrorMessage},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"errorAsStack",{get:function(){return this._errorAsStack},set:function(e){this._errorAsStack=e},enumerable:!1,configurable:!0}),e.prototype.isReady=function(){return this._ready},e.prototype.setReady=function(e){this._ready=e},Object.defineProperty(e.prototype,"resolvedErrorMessage",{get:function(){return this._resolvedErrorMessage},set:function(e){this._resolvedErrorMessage=e},enumerable:!1,configurable:!0}),e}(),yR=/** @class */function(){function e(e,t){this.allMessages=new yu.LinkedList,this.rootCategory=e,this.runtimeSettings=t}return e.prototype.trace=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this._log.apply(this,yj([yl.LogLevel.Trace,e,null,!1],t,!1))},e.prototype.debug=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this._log.apply(this,yj([yl.LogLevel.Debug,e,null,!1],t,!1))},e.prototype.info=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this._log.apply(this,yj([yl.LogLevel.Info,e,null,!1],t,!1))},e.prototype.warn=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];this._log.apply(this,yj([yl.LogLevel.Warn,e,null,!1],t,!1))},e.prototype.error=function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];this._log.apply(this,yj([yl.LogLevel.Error,e,t,!1],r,!1))},e.prototype.fatal=function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];this._log.apply(this,yj([yl.LogLevel.Fatal,e,t,!1],r,!1))},e.prototype.resolved=function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];this._log.apply(this,yj([yl.LogLevel.Error,e,t,!0],r,!1))},e.prototype.log=function(e,t,r){for(var n=[],a=3;a<arguments.length;a++)n[a-3]=arguments[a];this._log.apply(this,yj([e,t,r,!1],n,!1))},e.prototype.getRootCategory=function(){return this.rootCategory},e.prototype.createDefaultLogMessage=function(e){return yb.MessageFormatUtils.renderDefaultMessage(e,!0)},/**
     * Return optional message formatter. All LoggerTypes (except custom) will see if
     * they have this, and if so use it to log.
     * @returns {((message:CategoryLogMessage)=>string)|null}
     */e.prototype._getMessageFormatter=function(){var e=this.runtimeSettings.getCategorySettings(this.rootCategory);// Should not happen but make ts happy
if(null===e)throw Error("Did not find CategorySettings for rootCategory: "+this.rootCategory.name);return e.formatterLogMessage},e.prototype._log=function(e,t,r,n){void 0===r&&(r=null),void 0===n&&(n=!1);for(var a=[],i=4;i<arguments.length;i++)a[i-4]=arguments[i];this._logInternal.apply(this,yj([e,function(){return"function"==typeof t?t():t},function(){return"function"==typeof r?r():r},n],a,!1))},e.prototype._logInternal=function(e,t,r,n){for(var a=this,i=[],o=4;o<arguments.length;o++)i[o-4]=arguments[o];var s=[this.rootCategory];// Log root category by default if none present
i.length>0&&(s=s.concat(i.filter(function(e){return e!==a.rootCategory})));// Get the runtime levels for given categories. If their level is lower than given level, we log.
// In addition we pass along which category/categories we log this statement for.
for(var l=this,c=0;c<s.length&&"break"!==function(i){var o=s[i];if(null===o)throw Error("Cannot have a null element within categories, at index="+i);var c=l.runtimeSettings.getCategorySettings(o);if(null===c)throw Error("Category with path: "+o.getCategoryPath()+" is not registered with this logger, maybe you registered it with a different root logger?");if(c.logLevel<=e){var u=null!==r?r():null;if(null===u){var d=new yH(t(),u,s,new Date,e,c.logFormat,!0);d.resolvedErrorMessage=n,l.allMessages.addTail(d),l.processMessages()}else{var f=new yH(t(),u,s,new Date,e,c.logFormat,!1);f.resolvedErrorMessage=n,l.allMessages.addTail(f),yb.MessageFormatUtils.renderError(u).then(function(e){f.errorAsStack=e,f.setReady(!0),a.processMessages()}).catch(function(){f.errorAsStack="<UNKNOWN> unable to get stack.",f.setReady(!0),a.processMessages()})}return"break"}}(c);c++);},e.prototype.processMessages=function(){// Basically we wait until errors are resolved (those messages
// may not be ready).
var e=this.allMessages;if(e.getSize()>0)do{var t=e.getHead();if(null!=t){if(!t.isReady())break;e.removeHead(),this.doLog(t)}}while(e.getSize()>0)},e}();yM.AbstractCategoryLogger=yR;/**
 * Simple logger, that logs to the console. If the console is unavailable will throw an exception.
 */var yI=/** @class */function(e){function t(t,r){return e.call(this,t,r)||this}return yS(t,e),t.prototype.doLog=function(e){if(void 0!==console){var t=this._getMessageFormatter(),r=void 0;r=null===t?this.createDefaultLogMessage(e):t(e);var n=!1;/* tslint:disable:no-console */switch(e.level){case yl.LogLevel.Trace:case yl.LogLevel.Debug:break;case yl.LogLevel.Info:console.info&&(console.info(r),n=!0);break;case yl.LogLevel.Warn:console.warn&&(console.warn(r),n=!0);break;case yl.LogLevel.Error:case yl.LogLevel.Fatal:console.error&&(console.error(r),n=!0);break;default:throw Error("Unsupported level: "+e.level)}n||console.log(r);/* tslint:enable:no-console */}else throw Error("Console is not defined, cannot log msg: "+e.messageAsString)},t}(yM.AbstractCategoryLogger);yN.CategoryConsoleLoggerImpl=yI;var yB={},yV=yB&&yB.__spreadArray||function(e,t,r){if(r||2==arguments.length)for(var n,a=0,i=t.length;a<i;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(yB,"__esModule",{value:!0}),yB.CategoryDelegateLoggerImpl=void 0;/**
 * Delegate logger, delegates logging to given logger (constructor).
 */var yX=/** @class */function(){function e(e){this._delegate=e}return Object.defineProperty(e.prototype,"delegate",{get:function(){return this._delegate},set:function(e){this._delegate=e},enumerable:!1,configurable:!0}),e.prototype.trace=function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];(t=this._delegate).trace.apply(t,yV([e],r,!1))},e.prototype.debug=function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];(t=this._delegate).debug.apply(t,yV([e],r,!1))},e.prototype.info=function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];(t=this._delegate).info.apply(t,yV([e],r,!1))},e.prototype.warn=function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];(t=this._delegate).warn.apply(t,yV([e],r,!1))},e.prototype.error=function(e,t){for(var r,n=[],a=2;a<arguments.length;a++)n[a-2]=arguments[a];(r=this._delegate).error.apply(r,yV([e,t],n,!1))},e.prototype.fatal=function(e,t){for(var r,n=[],a=2;a<arguments.length;a++)n[a-2]=arguments[a];(r=this._delegate).fatal.apply(r,yV([e,t],n,!1))},e.prototype.resolved=function(e,t){for(var r,n=[],a=2;a<arguments.length;a++)n[a-2]=arguments[a];(r=this._delegate).resolved.apply(r,yV([e,t],n,!1))},e.prototype.log=function(e,t,r){for(var n,a=[],i=3;i<arguments.length;i++)a[i-3]=arguments[i];(n=this._delegate).log.apply(n,yV([e,t,r],a,!1))},e}();yB.CategoryDelegateLoggerImpl=yX;var yU={},yA=yU&&yU.__extends||(y=function(e,t){return(y=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}y(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(yU,"__esModule",{value:!0}),yU.CategoryExtensionLoggerImpl=void 0;/**
 * This class should not be used directly, it is used for communication with the extension only.
 */var yD=/** @class */function(e){function t(t,r){return e.call(this,t,r)||this}return yA(t,e),t.prototype.doLog=function(e){"undefined"!=typeof window?yL.ExtensionHelper.sendCategoryLogMessage(e):/* tslint:disable:no-console */console.log("window is not available, you must be running in a browser for this. Dropped message.")},t}(yM.AbstractCategoryLogger);yU.CategoryExtensionLoggerImpl=yD;var yC={},yF=yC&&yC.__extends||(m=function(e,t){return(m=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}m(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(yC,"__esModule",{value:!0}),yC.CategoryMessageBufferLoggerImpl=void 0;/**
 * Logger which buffers all messages, use with care due to possible high memory footprint.
 * Can be convenient in some cases. Call toString() for full output, or cast to this class
 * and call getMessages() to do something with it yourself.
 */var yZ=/** @class */function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.messages=[],t}return yF(t,e),t.prototype.getMessages=function(){return this.messages},t.prototype.toString=function(){return this.messages.map(function(e){return e}).join("\n")},t.prototype.doLog=function(e){var t,r=this._getMessageFormatter();t=null===r?this.createDefaultLogMessage(e):r(e),this.messages.push(t)},t}(yM.AbstractCategoryLogger);yC.CategoryMessageBufferLoggerImpl=yZ;var yq={};Object.defineProperty(yq,"__esModule",{value:!0}),yq.CategoryRuntimeSettings=void 0;var yl=A("cWKy2"),yG=/** @class */function(){function e(e,t,r,n,a,i){void 0===t&&(t=yl.LogLevel.Error),void 0===r&&(r=yl.LoggerType.Console),void 0===n&&(n=new yl.CategoryLogFormat),void 0===a&&(a=null),void 0===i&&(i=null),this._formatterLogMessage=null,this._category=e,this._logLevel=t,this._loggerType=r,this._logFormat=n,this._callBackLogger=a,this._formatterLogMessage=i}return Object.defineProperty(e.prototype,"category",{get:function(){return this._category},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){this._logLevel=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"loggerType",{get:function(){return this._loggerType},set:function(e){this._loggerType=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"logFormat",{get:function(){return this._logFormat},set:function(e){this._logFormat=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"callBackLogger",{get:function(){return this._callBackLogger},set:function(e){this._callBackLogger=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"formatterLogMessage",{get:function(){return this._formatterLogMessage},set:function(e){this._formatterLogMessage=e},enumerable:!1,configurable:!0}),e}();yq.CategoryRuntimeSettings=yG;var yW={};Object.defineProperty(yW,"__esModule",{value:!0}),yW.CategoryConfiguration=void 0;var yl=A("cWKy2"),yY=/** @class */function(){/**
     * Create a new instance
     * @param logLevel Log level for all loggers, default is LogLevel.Error
     * @param loggerType Where to log, default is LoggerType.Console
     * @param logFormat What logging format to use, use default instance, for default values see CategoryLogFormat.
     * @param callBackLogger Optional callback, if LoggerType.Custom is used as loggerType. In that case must return a new Logger instance.
     *            It is recommended to extend AbstractCategoryLogger to make your custom logger.
     */function e(e,t,r,n){if(void 0===e&&(e=yl.LogLevel.Error),void 0===t&&(t=yl.LoggerType.Console),void 0===r&&(r=new yl.CategoryLogFormat),void 0===n&&(n=null),this._formatterLogMessage=null,this._logLevel=e,this._loggerType=t,this._logFormat=r,this._callBackLogger=n,this._loggerType===yl.LoggerType.Custom&&null===this.callBackLogger)throw Error("If you specify loggerType to be Custom, you must provide the callBackLogger argument")}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"loggerType",{get:function(){return this._loggerType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"logFormat",{get:function(){return this._logFormat},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"callBackLogger",{get:function(){return this._callBackLogger},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"formatterLogMessage",{/**
         * Get the formatterLogMessage function, see comment on the setter.
         * @returns {((message:CategoryLogMessage)=>string)|null}
         */get:function(){return this._formatterLogMessage},/**
         * Set the default formatterLogMessage function, if set it is applied to all type of loggers except for a custom logger.
         * By default this is null (not set). You can assign a function to allow custom formatting of a log message.
         * Each log message will call this function then and expects your function to format the message and return a string.
         * Will throw an error if you attempt to set a formatterLogMessage if the LoggerType is custom.
         * @param value The formatter function, or null to reset it.
         */set:function(e){if(null!==e&&this._loggerType===yl.LoggerType.Custom)throw Error("You cannot specify a formatter for log messages if your loggerType is Custom");this._formatterLogMessage=e},enumerable:!1,configurable:!0}),e.prototype.copy=function(){var t=new e(this.logLevel,this.loggerType,this.logFormat.copy(),this.callBackLogger);return t.formatterLogMessage=this.formatterLogMessage,t},e}();yW.CategoryConfiguration=yY;/**
 * The service (only available as singleton) for all category related stuff as
 * retrieving, registering a logger. You should normally NOT use this,
 * instead use CategoryServiceFactory which is meant for end users.
 */var yK=/** @class */function(){function e(){this._defaultConfig=new yW.CategoryConfiguration,this._mapState=new yu.SimpleMap,// Private constructor
yL.ExtensionHelper.register()}return e.getInstance=function(){return null===e._INSTANCE&&(e._INSTANCE=new e),e._INSTANCE},e.prototype.getLogger=function(e){return this.createOrGetCategoryState(e).logger},/**
     * Clears everything, including a default configuration you may have set.
     * After this you need to re-register your categories etc.
     */e.prototype.clear=function(){this._mapState.clear(),this.setDefaultConfiguration(new yW.CategoryConfiguration)},e.prototype.getCategorySettings=function(e){return this.createOrGetCategoryState(e).currentRuntimeSettings},e.prototype.getOriginalCategorySettings=function(e){return this.createOrGetCategoryState(e).originalRuntimeSettings},/**
     * Set the default configuration. New root loggers created get this
     * applied. If you want to reset all current loggers to have this
     * applied as well, pass in reset=true (the default is false). All
     * categories will be reset then as well.
     * @param config New config
     * @param reset Defaults to true. Set to true to reset all loggers and current runtimesettings.
     */e.prototype.setDefaultConfiguration=function(e,t){void 0===t&&(t=!0),this._defaultConfig=e,t&&this._mapState.forEachValue(function(t){t.updateSettings(e)})},/**
     * Set new configuration settings for a category (and possibly its child categories)
     * @param config Config
     * @param category Category
     * @param applyChildren True to apply to child categories, defaults to false.
     */e.prototype.setConfigurationCategory=function(e,t,r){var n=this;void 0===r&&(r=!1),this.createOrGetCategoryState(t).updateSettings(e),r&&t.children.forEach(function(t){// False flag, a child cannot reset a rootlogger
n.setConfigurationCategory(e,t,r)})},e.prototype.registerCategory=function(t){if(null==t)throw Error("Category CANNOT be null/undefined");if(this._mapState.exists(e.getCategoryKey(t)))throw Error("Cannot add this root category with name: "+t.name+", it already exists (same name in hierarchy).");this.createOrGetCategoryState(t)},/**
     * Used to enable integration with chrome extension. Do not use manually, the
     * extension and the logger framework deal with this.
     */e.prototype.enableExtensionIntegration=function(){var e=this;this._mapState.forEachValue(function(t){return t.enableForExtension(e)})},/**
     * Return all root categories currently registered.
     */e.prototype.getRootCategories=function(){return this._mapState.values().filter(function(e){return null==e.category.parent}).map(function(e){return e.category})},/**
     * Return Category by id
     * @param id The id of the category to find
     * @returns {Category} or null if not found
     */e.prototype.getCategoryById=function(e){var t=this._mapState.values().filter(function(t){return t.category.id===e}).map(function(e){return e.category});return 1===t.length?t[0]:null},e.prototype.createOrGetCategoryState=function(t){var r=e.getCategoryKey(t),n=this._mapState.get(r);if(void 0!==n)return n;var a=this.createState(t);return this._mapState.put(r,a),a},e.prototype.createState=function(e){var t=this;return new yJ(e,function(){return t._defaultConfig},function(e,r){return t.createLogger(e,r)})},e.prototype.createLogger=function(e,t){// Default is always a console logger
switch(e.loggerType){case yl.LoggerType.Console:return new yN.CategoryConsoleLoggerImpl(t,this);case yl.LoggerType.MessageBuffer:return new yC.CategoryMessageBufferLoggerImpl(t,this);case yl.LoggerType.Custom:if(null!==e.callBackLogger)return e.callBackLogger(t,this);throw Error("Cannot create custom logger, custom callback is null");default:throw Error("Cannot create a Logger for LoggerType: "+e.loggerType)}},e.getCategoryKey=function(e){return e.getCategoryPath()},// Singleton category service, used by CategoryServiceFactory as well as Categories.
// Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.
e._INSTANCE=null,e}();yE.CategoryServiceImpl=yK;var yJ=/** @class */function(){function e(e,t,r){this._category=e,this._lazyState=new yQ(e,t,r)}return Object.defineProperty(e.prototype,"category",{get:function(){return this._category},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"logger",{get:function(){return this._lazyState.getLogger()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"originalRuntimeSettings",{get:function(){return this._lazyState.getOriginalRuntimeSettings()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"currentRuntimeSettings",{get:function(){return this._lazyState.getCurrentRuntimeSettings()},enumerable:!1,configurable:!0}),e.prototype.enableForExtension=function(e){this._lazyState.enableForExtension(e)},e.prototype.updateSettings=function(e){this._lazyState.updateSettings(e)},e}(),yQ=/** @class */function(){function e(e,t,r){this._category=e,this._defaultConfig=t,this._createLogger=r}return e.prototype.isLoaded=function(){return void 0!==this._logger},e.prototype.getLogger=function(){return this.loadLoggerOnDemand(),this._delegateLogger},e.prototype.getOriginalRuntimeSettings=function(){return this.loadLoggerOnDemand(),this._originalRuntimeSettings},e.prototype.getCurrentRuntimeSettings=function(){return this.loadLoggerOnDemand(),this._currentRuntimeSettings},e.prototype.enableForExtension=function(e){this.loadLoggerOnDemand(),this._wrappedLogger instanceof yU.CategoryExtensionLoggerImpl||(/* tslint:disable no-console */console.log("Reconfiguring logger for extension for category: "+this._category.name),/* tslint:enable no-console */this._wrappedLogger=new yU.CategoryExtensionLoggerImpl(this._category,e),this._delegateLogger.delegate=this._wrappedLogger)},e.prototype.updateSettings=function(e){this.isLoaded()?(this._currentRuntimeSettings.logLevel=e.logLevel,this._currentRuntimeSettings.loggerType=e.loggerType,this._currentRuntimeSettings.logFormat=e.logFormat,this._currentRuntimeSettings.callBackLogger=e.callBackLogger,this._currentRuntimeSettings.formatterLogMessage=e.formatterLogMessage,// Replace the real logger, it may have changed.
this._logger=this._createLogger(e,this._category),this._wrappedLogger instanceof yU.CategoryExtensionLoggerImpl||(this._wrappedLogger=this._logger),this._delegateLogger.delegate=this._wrappedLogger):this._defaultConfig=function(){return e}},e.prototype.loadLoggerOnDemand=function(){this.isLoaded()||(this._logger=this._createLogger(this._defaultConfig(),this._category),this._wrappedLogger=this._logger,this._delegateLogger=new yB.CategoryDelegateLoggerImpl(this._wrappedLogger),this._originalRuntimeSettings=this.initNewSettings(),this._currentRuntimeSettings=this.initNewSettings())},e.prototype.initNewSettings=function(){var e=this._defaultConfig().copy();return new yq.CategoryRuntimeSettings(this._category,e.logLevel,e.loggerType,e.logFormat,e.callBackLogger,e.formatterLogMessage)},e}(),yl=A("cWKy2"),y_=/** @class */function(){function e(){// Private constructor
}return(/**
     * Enables the window event listener to listen to messages (from extensions).
     * Can be registered/enabled only once.
     */e.register=function(){if(!e.registered){var t=function(t){var r=t.data;null!==r&&e.processMessageFromExtension(r)};"undefined"!=typeof window&&void 0!==window.removeEventListener&&void 0!==window.addEventListener&&(window.removeEventListener("message",t),window.addEventListener("message",t),e.registered=!0)}},e.processMessageFromExtension=function(t){if(e.registered&&"tsl-extension"===t.from){var r=t.data;switch(r.type){case"register":e.enableExtensionIntegration();break;case"request-change-loglevel":var n=r.value,a=e.applyLogLevel(n.categoryId,n.logLevel,n.recursive);a.length>0&&e.sendCategoriesRuntimeUpdateMessage(a);break;default:console.log("Unknown command to process message from extension, command was: "+r.type)}}/* tslint:enable:no-console */},e.sendCategoryLogMessage=function(t){if(e.registered){var r={type:"log-message",value:{categories:t.categories.map(function(e){return e.id}),errorAsStack:t.errorAsStack,formattedMessage:yb.MessageFormatUtils.renderDefaultMessage(t,!1),logLevel:yl.LogLevel[t.level].toString(),message:t.messageAsString,resolvedErrorMessage:t.isResolvedErrorMessage}};e.sendMessage({data:r,from:"tsl-logging"})}},e.sendCategoriesRuntimeUpdateMessage=function(t){if(e.registered){var r=yE.CategoryServiceImpl.getInstance(),n={categories:[]};t.forEach(function(e){var t=r.getCategorySettings(e);null!=t&&n.categories.push({id:e.id,logLevel:yl.LogLevel[t.logLevel].toString()})}),e.sendMessage({data:{type:"categories-rt-update",value:n},from:"tsl-logging"})}},e.sendRootCategoriesToExtension=function(){if(e.registered){var t=yE.CategoryServiceImpl.getInstance().getRootCategories().map(function(t){return e.getCategoryAsJSON(t)});e.sendMessage({data:{type:"root-categories-tree",value:t},from:"tsl-logging"})}},/**
     * If extension integration is enabled, will send the root categories over to the extension.
     * Otherwise does nothing.
     */e.getCategoryAsJSON=function(t){return{children:t.children.map(function(t){return e.getCategoryAsJSON(t)}),id:t.id,logLevel:yl.LogLevel[t.logLevel].toString(),name:t.name,parentId:null!=t.parent?t.parent.id:null}},e.applyLogLevel=function(t,r,n){var a=[],i=yE.CategoryServiceImpl.getInstance().getCategoryById(t);return null!=i?e._applyLogLevelRecursive(i,yl.LogLevel.fromString(r),n,a):/* tslint:disable:no-console */console.log("Could not change log level, failed to find category with id: "+t),a},e._applyLogLevelRecursive=function(t,r,n,a){var i=yE.CategoryServiceImpl.getInstance().getCategorySettings(t);null!=i&&(i.logLevel=r,a.push(t),n&&t.children.forEach(function(t){e._applyLogLevelRecursive(t,r,n,a)}))},e.getAllCategories=function(){var e=[],t=function(e,r){r.push(e),e.children.forEach(function(e){t(e,r)})};return yE.CategoryServiceImpl.getInstance().getRootCategories().forEach(function(r){t(r,e)}),e},e.sendMessage=function(t){e.registered&&"undefined"!=typeof window&&void 0!==window.postMessage&&window.postMessage(t,"*")},/**
     *  Extension framework will call this to enable the integration between two,
     *  after this call the framework will respond with postMessage() messages.
     */e.enableExtensionIntegration=function(){if(e.registered){yE.CategoryServiceImpl.getInstance().enableExtensionIntegration(),// Send over all categories
e.sendRootCategoriesToExtension();// Send over the current runtime levels
var t=e.getAllCategories();e.sendCategoriesRuntimeUpdateMessage(t)}},e.registered=!1,e)}();yL.ExtensionHelper=y_;var y$={};Object.defineProperty(y$,"__esModule",{value:!0}),y$.LogGroupRule=void 0;var yl=A("cWKy2"),y0=/** @class */function(){/**
     * Create a LogGroupRule. Basically you define what logger name(s) match for this group, what level should be used what logger type (where to log)
     * and what format to write in. If the loggerType is custom, then the callBackLogger must be supplied as callback function to return a custom logger.
     * @param regExp Regular expression, what matches for your logger names for this group
     * @param level LogLevel
     * @param logFormat LogFormat
     * @param loggerType Type of logger, if Custom, make sure to implement callBackLogger and pass in, this will be called so you can return your own logger.
     * @param callBackLogger Callback function to return a new clean custom logger (yours!)
     */function e(e,t,r,n,a){void 0===r&&(r=new yl.LogFormat),void 0===n&&(n=yl.LoggerType.Console),void 0===a&&(a=null),this._formatterLogMessage=null,this._regExp=e,this._level=t,this._logFormat=r,this._loggerType=n,this._callBackLogger=a}return Object.defineProperty(e.prototype,"regExp",{get:function(){return this._regExp},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"level",{get:function(){return this._level},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"loggerType",{get:function(){return this._loggerType},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"logFormat",{get:function(){return this._logFormat},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"callBackLogger",{get:function(){return this._callBackLogger},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"formatterLogMessage",{/**
         * Get the formatterLogMessage function, see comment on the setter.
         * @returns {((message:LogMessage)=>string)|null}
         */get:function(){return this._formatterLogMessage},/**
         * Set the default formatterLogMessage function, if set it is applied to all type of loggers except for a custom logger.
         * By default this is null (not set). You can assign a function to allow custom formatting of a log message.
         * Each log message will call this function then and expects your function to format the message and return a string.
         * Will throw an error if you attempt to set a formatterLogMessage if the LoggerType is custom.
         * @param value The formatter function, or null to reset it.
         */set:function(e){if(null!==e&&this._loggerType===yl.LoggerType.Custom)throw Error("You cannot specify a formatter for log messages if your loggerType is Custom");this._formatterLogMessage=e},enumerable:!1,configurable:!0}),e}();y$.LogGroupRule=y0;var y1={};Object.defineProperty(y1,"__esModule",{value:!0}),y1.LoggerFactoryOptions=void 0;/**
 * Options object you can use to configure the LoggerFactory you create at LFService.
 */var y2=/** @class */function(){function e(){this._logGroupRules=[],this._enabled=!0}return(/**
     * Add LogGroupRule, see {LogGroupRule) for details
     * @param rule Rule to add
     * @returns {LoggerFactoryOptions} returns itself
     */e.prototype.addLogGroupRule=function(e){return this._logGroupRules.push(e),this},/**
     * Enable or disable logging completely for the LoggerFactory.
     * @param enabled True for enabled (default)
     * @returns {LoggerFactoryOptions} returns itself
     */e.prototype.setEnabled=function(e){return this._enabled=e,this},Object.defineProperty(e.prototype,"logGroupRules",{get:function(){return this._logGroupRules},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"enabled",{get:function(){return this._enabled},enumerable:!1,configurable:!0}),e)}();y1.LoggerFactoryOptions=y2;var y5=/** @class */function(){function e(){// Private constructor.
this._nameCounter=1,this._mapFactories=new yu.SimpleMap,yL.ExtensionHelper.register()}return e.getInstance=function(){return null===e._INSTANCE&&(e._INSTANCE=new e),e._INSTANCE},/**
     * Create a new LoggerFactory with given options (if any). If no options
     * are specified, the LoggerFactory, will accept any named logger and will
     * log on info level by default for, to the console.
     * @param options Options, optional.
     * @returns {LoggerFactory}
     */e.prototype.createLoggerFactory=function(e){void 0===e&&(e=null);var t="LoggerFactory"+this._nameCounter++;return this.createNamedLoggerFactory(t,e)},/**
     * Create a new LoggerFactory using given name (used for console api/extension).
     * @param name Name Pick something short but distinguishable.
     * @param options Options, optional
     * @return {LoggerFactory}
     */e.prototype.createNamedLoggerFactory=function(t,r){var n;if(void 0===r&&(r=null),this._mapFactories.exists(t))throw Error("LoggerFactory with name "+t+" already exists.");return n=null!==r?new yd.LoggerFactoryImpl(t,r):new yd.LoggerFactoryImpl(t,e.createDefaultOptions()),this._mapFactories.put(t,n),n},/**
     * Closes all Loggers for LoggerFactories that were created.
     * After this call, all previously fetched Loggers (from their
     * factories) are unusable. The factories remain as they were.
     */e.prototype.closeLoggers=function(){this._mapFactories.values().forEach(function(e){e.closeLoggers()}),this._mapFactories.clear(),this._nameCounter=1},e.prototype.getRuntimeSettingsForLoggerFactories=function(){var e=[];return this._mapFactories.forEachValue(function(t){return e.push(t)}),e},e.prototype.getLogGroupSettings=function(e,t){var r=this._mapFactories.get(e);return void 0===r?null:r.getLogGroupRuntimeSettingsByIndex(t)},e.prototype.getLoggerFactoryRuntimeSettingsByName=function(e){var t=this._mapFactories.get(e);return void 0===t?null:t},e.createDefaultOptions=function(){return new y1.LoggerFactoryOptions().addLogGroupRule(new y$.LogGroupRule(RegExp(".+"),yl.LogLevel.Info))},// Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.
e._INSTANCE=null,e}(),y3=/** @class */function(){function e(){}return(/**
     * Create a new LoggerFactory with given options (if any). If no options
     * are specified, the LoggerFactory, will accept any named logger and will
     * log on info level by default for, to the console.
     * @param options Options, optional.
     * @returns {LoggerFactory}
     */e.createLoggerFactory=function(t){return void 0===t&&(t=null),e.INSTANCE_SERVICE.createLoggerFactory(t)},/**
     * Create a new LoggerFactory using given name (used for console api/extension).
     * @param name Name Pick something short but distinguishable. The word "DEFAULT" is reserved and cannot be taken, it is used
     * for the default LoggerFactory.
     * @param options Options, optional
     * @return {LoggerFactory}
     */e.createNamedLoggerFactory=function(t,r){if(void 0===r&&(r=null),t===e.DEFAULT_LOGGER_FACTORY_NAME)throw Error("LoggerFactory name: "+e.DEFAULT_LOGGER_FACTORY_NAME+" is reserved and cannot be used.");return e.INSTANCE_SERVICE.createNamedLoggerFactory(t,r)},/**
     * Closes all Loggers for LoggerFactories that were created.
     * After this call, all previously fetched Loggers (from their
     * factories) are unusable. The factories remain as they were.
     */e.closeLoggers=function(){return e.INSTANCE_SERVICE.closeLoggers()},/**
     * Return LFServiceRuntimeSettings to retrieve information loggerfactories
     * and their runtime settings.
     * @returns {LFServiceRuntimeSettings}
     */e.getRuntimeSettings=function(){return e.INSTANCE_SERVICE},Object.defineProperty(e,"DEFAULT",{/**
         * This property returns the default LoggerFactory (if not yet initialized it is initialized).
         * This LoggerFactory can be used to share among multiple
         * applications/libraries - that way you can enable/change logging over everything from
         * your own application when required.
         * It is recommended to be used by library developers to make logging easily available for the
         * consumers of their libraries.
         * It is highly recommended to use Loggers from the LoggerFactory with unique grouping/names to prevent
         * clashes of Loggers between multiple projects.
         * @returns {LoggerFactory} Returns the default LoggerFactory
         */get:function(){return e.getDefault()},enumerable:!1,configurable:!0}),e.getDefault=function(){return null===e.DEFAULT_LOGGER_FACTORY&&(e.DEFAULT_LOGGER_FACTORY=e.DEFAULT_LOGGER_FACTORY=e.INSTANCE_SERVICE.createNamedLoggerFactory(e.DEFAULT_LOGGER_FACTORY_NAME,new y1.LoggerFactoryOptions().addLogGroupRule(new y$.LogGroupRule(RegExp(".+"),yl.LogLevel.Error)))),e.DEFAULT_LOGGER_FACTORY},e.DEFAULT_LOGGER_FACTORY_NAME="DEFAULT",e.INSTANCE_SERVICE=y5.getInstance(),e.DEFAULT_LOGGER_FACTORY=null,e)}();yc.LFService=y3;var yu=A("1Mugs"),y8=/** @class */function(){function e(){}return e.prototype.help=function(){/* tslint:disable:no-console */console.log(e._help);/* tslint:enable:no-console */},e.prototype.listFactories=function(){var t=e._getRuntimeSettingsLoggerFactories(),r=new yu.StringBuilder;r.appendLine("Registered LoggerFactories (index / name)");for(var n=0;n<t.length;n++){var a=t[n];r.append("  "+n).append(": "+a.getName()+"\n")}/* tslint:disable:no-console */console.log(r.toString());/* tslint:enable:no-console */},e.prototype.showSettings=function(t){void 0===t&&(t="all");var r=[];if("all"===t){var n=0;e._getRuntimeSettingsLoggerFactories().forEach(function(e){r.push(new yu.TuplePair(n++,e))})}else{var a=e._getRuntimeSettingsLoggerFactories();if(t>=0&&t<a.length)r.push(new yu.TuplePair(t,a[t]));else throw Error("Requested number: "+t+" was not found.")}for(var i=0;i<r.length;i++){var o=r[i];/* tslint:disable:no-console */console.log("  LoggerFactory: "+o.y.getName()+" (id="+o.x+")");for(var s=o.y.getLogGroupRuntimeSettings(),l=0;l<s.length;l++){var c=s[l];console.log("     LogGroup: (id="+l+")"),console.log("       RegExp: "+c.logGroupRule.regExp.source),console.log("       Level: "+yl.LogLevel[c.level].toString()),console.log("       LoggerType: "+yl.LoggerType[c.loggerType].toString())}/* tslint:enable:no-console */}},e.prototype.reset=function(t){void 0===t&&(t="all");var r=e._getRuntimeSettingsLoggerFactories(),n=[];"all"===t?n=r:t>=0&&t<r.length&&n.push(r[t]),n.forEach(function(e){/* tslint:disable:no-console */console.log("Reset all settings for factory "+t),new y9(e).reset()})},e.prototype.getLoggerFactoryControl=function(t){var r=e._getRuntimeSettingsLoggerFactories();if(t>=0&&t<r.length)return new y9(r[t]);throw Error("idFactory is invalid (less than 0) or non existing id.")},e._getRuntimeSettingsLoggerFactories=function(){return e._getSettings().getRuntimeSettingsForLoggerFactories()},e._getSettings=function(){return yc.LFService.getRuntimeSettings()},e._help='\n  help(): void\n    ** Shows this help.\n\n  listFactories(): void\n    ** List all registered LoggerFactories with associated log groups with respective ids (ids can be used to target a factory and/or group).\n\n  showSettings(idFactory: number | "all"): void\n    ** Show log group settings for idFactory (use listFactories to find id for a LoggerFactory). If idFactory is "all" shows all factories.\n\n  getLoggerFactoryControl(idFactory: number): LoggerFactoryControl\n    ** Return LoggerFactoryControl when found for given idFactory or throws Error if invalid or null, get the id by using listFactories()\n\n  reset(idFactory: number | "all"): void\n    ** Resets given factory or all factories back to original values.\n',e}();ys.LoggerControlImpl=y8;var y9=/** @class */function(){function e(e){this._settings=e}return e.prototype.help=function(){/* tslint:disable:no-console */console.log(e._help);/* tslint:enable:no-console */},e.prototype.example=function(){/* tslint:disable:no-console */console.log(e._example);/* tslint:enable:no-console */},e.prototype.showSettings=function(e){void 0===e&&(e="all");var t=new yu.StringBuilder,r=this._settings.getLogGroupRuntimeSettings();t.appendLine("Registered LogGroups (index / expression)");for(var n=0;n<r.length;n++){var a=r[n];t.appendLine("  "+n+": "+a.logGroupRule.regExp.source+", logLevel="+yl.LogLevel[a.level].toString()+", showTimestamp="+a.logFormat.showTimeStamp+", showLoggerName="+a.logFormat.showLoggerName+", format="+yl.DateFormatEnum[a.logFormat.dateFormat.formatEnum].toString())}/* tslint:disable:no-console */console.log(t.toString());/* tslint:enable:no-console */},e.prototype.change=function(e){var t=this._getLogGroupRunTimeSettingsFor(e.group),r=null,n=null,a=null,i=null,o=null,s=function(e){null!==o&&(o+=", "),null===o?o=e:o+=e};"string"==typeof e.logLevel&&(r=yl.LogLevel.fromString(e.logLevel),s("logLevel="+e.logLevel)),"string"==typeof e.logFormat&&(n=yl.DateFormatEnum.fromString(e.logFormat),s("logFormat="+e.logFormat)),"boolean"==typeof e.showLoggerName&&(a=e.showLoggerName,s("showLoggerName="+e.showLoggerName)),"boolean"==typeof e.showTimestamp&&(i=e.showTimestamp,s("showTimestamp="+e.showTimestamp)),t.forEach(function(e){null!==r&&(e.level=r),null!==n&&(e.logFormat.dateFormat.formatEnum=n),null!==i&&(e.logFormat.showTimeStamp=i),null!==a&&(e.logFormat.showLoggerName=a)}),/* tslint:disable:no-console */console.log("Applied changes: "+o+" to log groups '"+e.group+"'.");/* tslint:enable:no-console */},e.prototype.reset=function(e){void 0===e&&(e="all");for(var t=this._getLogGroupRunTimeSettingsFor(e),r=0;r<t.length;r++){var n=t[r];n.level=n.logGroupRule.level,n.logFormat.showTimeStamp=n.logGroupRule.logFormat.showTimeStamp,n.logFormat.showLoggerName=n.logGroupRule.logFormat.showLoggerName,n.logFormat.dateFormat.formatEnum=n.logGroupRule.logFormat.dateFormat.formatEnum}/* tslint:disable:no-console */console.log("Reset all settings for group "+e);/* tslint:enable:no-console */},e.prototype._getLogGroupRunTimeSettingsFor=function(e){var t=[];return"all"===e?t=this._settings.getLogGroupRuntimeSettings():(this._checkIndex(e),t.push(this._settings.getLogGroupRuntimeSettings()[e])),t},e.prototype._checkIndex=function(e){if(e<0||e>=this._settings.getLogGroupRuntimeSettings().length)throw Error("Invalid index, use listLogGroups to find out a valid one.")},e._help='\n  help(): void\n    ** Shows this help.\n\n  example(): void\n    ** Shows an example of usage.\n\n  showSettings(id: number | "all"): void\n    ** Prints settings for given group id, "all" for all group.\n\n  change(settings: LogGroupControlSettings): void\n    ** Changes the current settings for one or all log groups.\n    **\n       LogGroupControlSettings, properties of object:\n         group: number | "all"\n           ** Apply to specific group, or "all".\n           ** Required\n\n         logLevel: "Fatal" | "Error" | "Warn" | "Info" | "Debug" | "Trace" | undefined\n           ** Set log level, undefined will not change the setting.\n           ** Optional\n\n         logFormat: "Default" | "YearMonthDayTime" | "YearDayMonthWithFullTime" | "YearDayMonthTime" | undefined\n           ** Set the log format, undefined will not change the setting.\n           ** Optional\n\n         showTimestamp: boolean | undefined\n           ** Whether to show timestamp, undefined will not change the setting.\n           ** Optional\n\n         showLoggerName: boolean | undefined\n           ** Whether to show the logger name, undefined will not change the setting.\n           ** Optional\n\n  reset(id: number | "all"): void\n    ** Resets everything to original values, for one specific or for all groups.\n\n  help():\n    ** Shows this help.\n',e._example='\n  Examples:\n    change({group: "all", logLevel: "Info"})\n      ** Change loglevel to Info for all groups.\n\n    change({group: 1, recursive:false, logLevel: "Warn"})\n      ** Change logLevel for group 1 to Warn.\n\n    change({group: "all", logLevel: "Debug", logFormat: "YearDayMonthTime", showTimestamp:false, showLoggerName:false})\n      ** Change loglevel to Debug for all groups, apply format, do not show timestamp and logger names.\n',e}(),y6={};Object.defineProperty(y6,"__esModule",{value:!0}),y6.CategoryServiceControlImpl=void 0;var yl=A("cWKy2"),yu=A("1Mugs"),y4=/** @class */function(){function e(){}return e.prototype.help=function(){/* tslint:disable:no-console */console.log(e._help);/* tslint:enable:no-console */},e.prototype.example=function(){/* tslint:disable:no-console */console.log(e._example);/* tslint:enable:no-console */},e.prototype.showSettings=function(t){void 0===t&&(t="all");var r=new yu.StringBuilder,n=e._getCategoryService();e._getCategories(t).forEach(function(t){e._processCategory(n,t,r,0)}),/* tslint:disable:no-console */console.log(r.toString());/* tslint:enable:no-console */},e.prototype.change=function(t){var r=e._getCategoryService(),n=e._getCategories(t.category),a=null,i=null,o=null,s=null,l=null,c=function(e){null!==l&&(l+=", "),null===l?l=e:l+=e};c("recursive="+t.recursive),"string"==typeof t.logLevel&&(a=yl.LogLevel.fromString(t.logLevel),c("logLevel="+t.logLevel)),"string"==typeof t.logFormat&&(i=yl.DateFormatEnum.fromString(t.logFormat),c("logFormat="+t.logFormat)),"boolean"==typeof t.showCategoryName&&(o=t.showCategoryName,c("showCategoryName="+t.showCategoryName)),"boolean"==typeof t.showTimestamp&&(s=t.showTimestamp,c("showTimestamp="+t.showTimestamp));var u=function(e){var t=r.getCategorySettings(e);// Should not happen but make tslint happy
null!==t&&(null!==a&&(t.logLevel=a),null!==i&&(t.logFormat.dateFormat.formatEnum=i),null!==s&&(t.logFormat.showTimeStamp=s),null!==o&&(t.logFormat.showCategoryName=o))};n.forEach(function(r){return e._applyToCategory(r,t.recursive,u)}),/* tslint:disable:no-console */console.log("Applied changes: "+l+" to categories '"+t.category+"'.");/* tslint:enable:no-console */},e.prototype.reset=function(t){void 0===t&&(t="all");var r=e._getCategoryService(),n=e._getCategories(t),a=function(e){var t=r.getCategorySettings(e),n=r.getOriginalCategorySettings(e);// Should not happen but make tslint happy
null!==t&&null!==n&&(t.logLevel=n.logLevel,t.logFormat.dateFormat.formatEnum=n.logFormat.dateFormat.formatEnum,t.logFormat.showTimeStamp=n.logFormat.showTimeStamp,t.logFormat.showCategoryName=n.logFormat.showCategoryName)};n.forEach(function(t){return e._applyToCategory(t,!0,a)}),/* tslint:disable:no-console */console.log("Applied reset to category: "+t+".");/* tslint:enable:no-console */},e._processCategory=function(t,r,n,a){var i=t.getCategorySettings(r);if(null!==i){if(n.append("  "+r.id+": "),a>0)for(var o=0;o<a;o++)n.append("  ");n.append(r.name+" ("+yl.LogLevel[i.logLevel].toString()+"@"+yl.LoggerType[i.loggerType].toString()+")\n"),r.children.length>0&&r.children.forEach(function(r){e._processCategory(t,r,n,a+1)})}},e._applyToCategory=function(t,r,n){n(t),r&&t.children.forEach(function(t){e._applyToCategory(t,r,n)})},e._getCategoryService=function(){return yE.CategoryServiceImpl.getInstance()},e._getCategories=function(t){var r=e._getCategoryService(),n=[];if("all"===t)n=r.getRootCategories();else{var a=r.getCategoryById(t);if(null===a)throw Error("Failed to find category with id "+t);n.push(a)}return n},e._help='\n  help(): void\n    ** Shows this help.\n\n  example(): void\n    ** Shows an example on how to use this.\n\n  showSettings(id: number | "all" = "all"): void\n    ** Shows settings for a specific category, or for all. The id of categories can be found by calling this method without parameter.\n\n  change(settings: CategoryServiceControlSettings): void\n    ** Changes the current settings for one or all categories.\n    **\n       CategoryServiceControlSettings, properties of object:\n         category: number | "all"\n           ** Apply to specific category, or "all".\n           ** Required\n\n         recursive: boolean\n           ** Apply to child categories (true) or not.\n           ** Required\n\n         logLevel: "Fatal" | "Error" | "Warn" | "Info" | "Debug" | "Trace" | undefined\n           ** Set log level, undefined will not change the setting.\n           ** Optional\n\n         logFormat: "Default" | "YearMonthDayTime" | "YearDayMonthWithFullTime" | "YearDayMonthTime" | undefined\n           ** Set the log format, undefined will not change the setting.\n           ** Optional\n\n         showTimestamp: boolean | undefined\n           ** Whether to show timestamp, undefined will not change the setting.\n           ** Optional\n\n         showCategoryName: boolean | undefined\n           ** Whether to show the category name, undefined will not change the setting.\n           ** Optional\n\n   reset(id: number | "all"): void\n     ** Resets everything to original values, for one specific or for all categories.\n',e._example='\n  Examples:\n    change({category: "all", recursive:true, logLevel: "Info"})\n      ** Change loglevel to Info for all categories, apply to child categories as well.\n\n    change({category: 1, recursive:false, logLevel: "Warn"})\n      ** Change logLevel for category 1, do not recurse.\n\n    change({category: "all", recursive:true, logLevel: "Debug", logFormat: "YearDayMonthTime", showTimestamp:false, showCategoryName:false})\n      ** Change loglevel to Debug for all categories, apply format, do not show timestamp and category names - recursively to child categories.\n\n',e}();y6.CategoryServiceControlImpl=y4,// Public stuff we export for extension
yo(A("alFpf"),ya),yo(A("26zXT"),ya),yo(A("8CGwX"),ya),Object.defineProperty(ya,"ExtensionHelper",{enumerable:!0,get:function(){return yL.ExtensionHelper}}),Object.defineProperty(ya,"AbstractCategoryLogger",{enumerable:!0,get:function(){return yM.AbstractCategoryLogger}}),Object.defineProperty(ya,"CategoryConsoleLoggerImpl",{enumerable:!0,get:function(){return yN.CategoryConsoleLoggerImpl}}),Object.defineProperty(ya,"CategoryDelegateLoggerImpl",{enumerable:!0,get:function(){return yB.CategoryDelegateLoggerImpl}});var y7={},me=y7&&y7.__spreadArray||function(e,t,r){if(r||2==arguments.length)for(var n,a=0,i=t.length;a<i;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(y7,"__esModule",{value:!0}),y7.Category=void 0;var yl=A("cWKy2"),mt=/** @class */function(){function e(t,r){if(void 0===r&&(r=null),this._children=[],this._logLevel=yl.LogLevel.Error,-1!==t.indexOf("#"))throw Error("Cannot use # in a name of a Category");this._id=e.nextId(),this._name=t,this._parent=r,null!==this._parent&&this._parent._children.push(this),yE.CategoryServiceImpl.getInstance().registerCategory(this)}return Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return this._parent},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"children",{get:function(){return this._children},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},enumerable:!1,configurable:!0}),e.prototype.trace=function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];this.loadCategoryLogger(),(t=this._logger).trace.apply(t,me([e],r,!1))},e.prototype.debug=function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];this.loadCategoryLogger(),(t=this._logger).debug.apply(t,me([e],r,!1))},e.prototype.info=function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];this.loadCategoryLogger(),(t=this._logger).info.apply(t,me([e],r,!1))},e.prototype.warn=function(e){for(var t,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];this.loadCategoryLogger(),(t=this._logger).warn.apply(t,me([e],r,!1))},e.prototype.error=function(e,t){for(var r,n=[],a=2;a<arguments.length;a++)n[a-2]=arguments[a];this.loadCategoryLogger(),(r=this._logger).error.apply(r,me([e,t],n,!1))},e.prototype.fatal=function(e,t){for(var r,n=[],a=2;a<arguments.length;a++)n[a-2]=arguments[a];this.loadCategoryLogger(),(r=this._logger).fatal.apply(r,me([e,t],n,!1))},e.prototype.resolved=function(e,t){for(var r,n=[],a=2;a<arguments.length;a++)n[a-2]=arguments[a];this.loadCategoryLogger(),(r=this._logger).resolved.apply(r,me([e,t],n,!1))},e.prototype.log=function(e,t,r){for(var n,a=[],i=3;i<arguments.length;i++)a[i-3]=arguments[i];this.loadCategoryLogger(),(n=this._logger).log.apply(n,me([e,t,r],a,!1))},e.prototype.getCategoryPath=function(){for(var e=this.name,t=this.parent;null!=t;)e=t.name+"#"+e,t=t.parent;return e},Object.defineProperty(e.prototype,"id",{/**
         * Returns the id for this category (this
         * is for internal purposes only).
         * @returns {number} Id
         */get:function(){return this._id},enumerable:!1,configurable:!0}),e.prototype.loadCategoryLogger=function(){if(this._logger||(this._logger=yE.CategoryServiceImpl.getInstance().getLogger(this)),void 0===this._logger||null===this._logger)throw Error("Failed to load a logger for category (should not happen): "+this.name)},e.nextId=function(){return e.currentId++},e.currentId=1,e}();y7.Category=mt,Object.defineProperty(ya,"Category",{enumerable:!0,get:function(){return y7.Category}}),Object.defineProperty(ya,"CategoryRuntimeSettings",{enumerable:!0,get:function(){return yq.CategoryRuntimeSettings}}),Object.defineProperty(ya,"CategoryConfiguration",{enumerable:!0,get:function(){return yW.CategoryConfiguration}}),Object.defineProperty(ya,"CategoryMessageBufferLoggerImpl",{enumerable:!0,get:function(){return yC.CategoryMessageBufferLoggerImpl}});var mr={};Object.defineProperty(mr,"__esModule",{value:!0}),mr.CategoryServiceFactory=void 0;/**
 * Categorized service for logging, where logging is bound to categories which
 * can log horizontally through specific application logic (services, group(s) of components etc).
 * For the standard way of logging like most frameworks do these days, use LFService instead.
 * If you want fine grained control to divide sections of your application in
 * logical units to enable/disable logging for, this is the service you want to use instead.
 * Also for this type a browser plugin will be available.
 */var mn=/** @class */function(){function e(){// Private constructor.
}return(/**
     * Return a CategoryLogger for given ROOT category (thus has no parent).
     * You can only retrieve loggers for their root, when logging
     * you specify to log for what (child)categories.
     * @param root Category root (has no parent)
     * @returns {CategoryLogger}
     */e.getLogger=function(e){return yE.CategoryServiceImpl.getInstance().getLogger(e)},/**
     * Clears everything, any registered (root)categories and loggers
     * are discarded. Resets to default configuration.
     */e.clear=function(){return yE.CategoryServiceImpl.getInstance().clear()},/**
     * Set the default configuration. New root loggers created get this
     * applied. If you want to reset all current loggers to have this
     * applied as well, pass in reset=true (the default is false). All
     * categories runtimesettings will be reset then as well.
     * @param config The new default configuration
     * @param reset If true, will reset *all* runtimesettings for all loggers/categories to these. Default is true.
     */e.setDefaultConfiguration=function(e,t){void 0===t&&(t=!0),yE.CategoryServiceImpl.getInstance().setDefaultConfiguration(e,t)},/**
     * Set new configuration settings for a category (and possibly its child categories)
     * @param config Config
     * @param category Category
     * @param applyChildren True to apply to child categories, defaults to false.
     */e.setConfigurationCategory=function(e,t,r){void 0===r&&(r=!1),yE.CategoryServiceImpl.getInstance().setConfigurationCategory(e,t,r)},e)}();mr.CategoryServiceFactory=mn,Object.defineProperty(ya,"CategoryServiceFactory",{enumerable:!0,get:function(){return mr.CategoryServiceFactory}}),Object.defineProperty(ya,"LoggerFactoryOptions",{enumerable:!0,get:function(){return y1.LoggerFactoryOptions}}),Object.defineProperty(ya,"LogGroupRule",{enumerable:!0,get:function(){return y$.LogGroupRule}}),Object.defineProperty(ya,"LFService",{enumerable:!0,get:function(){return yc.LFService}}),Object.defineProperty(ya,"AbstractLogger",{enumerable:!0,get:function(){return yh.AbstractLogger}}),Object.defineProperty(ya,"ConsoleLoggerImpl",{enumerable:!0,get:function(){return yf.ConsoleLoggerImpl}}),Object.defineProperty(ya,"MessageBufferLoggerImpl",{enumerable:!0,get:function(){return yw.MessageBufferLoggerImpl}});var yl=A("cWKy2");Object.defineProperty(ya,"CategoryLogFormat",{enumerable:!0,get:function(){return yl.CategoryLogFormat}}),Object.defineProperty(ya,"DateFormat",{enumerable:!0,get:function(){return yl.DateFormat}}),Object.defineProperty(ya,"DateFormatEnum",{enumerable:!0,get:function(){return yl.DateFormatEnum}}),Object.defineProperty(ya,"LogFormat",{enumerable:!0,get:function(){return yl.LogFormat}}),Object.defineProperty(ya,"LoggerType",{enumerable:!0,get:function(){return yl.LoggerType}}),Object.defineProperty(ya,"LogLevel",{enumerable:!0,get:function(){return yl.LogLevel}});var yu=A("1Mugs");Object.defineProperty(ya,"SimpleMap",{enumerable:!0,get:function(){return yu.SimpleMap}}),Object.defineProperty(ya,"LinkedList",{enumerable:!0,get:function(){return yu.LinkedList}}),yo(A("9Cxbq"),ya),Object.defineProperty(ya,"MessageFormatUtils",{enumerable:!0,get:function(){return yb.MessageFormatUtils}}),ya.help=/*
 Functions to export on TSL libarary var.
*/// Export help function
function(){/* tslint:disable:no-console */console.log("help()\n   ** Shows this help\n\n getLogControl(): LoggerControl\n   ** Returns LoggerControl Object, use to dynamically change loglevels for log4j logging.\n   ** Call .help() on LoggerControl object for available options.\n\n getCategoryControl(): CategoryServiceControl\n   ** Returns CategoryServiceControl Object, use to dynamically change loglevels for category logging.\n   ** Call .help() on CategoryServiceControl object for available options.\n");/* tslint:enable:no-console */},ya.getLogControl=// Export LogControl function (log4j)
function(){return new ys.LoggerControlImpl},ya.getCategoryControl=// Export CategoryControl function
function(){return new y6.CategoryServiceControlImpl};const ma=ya.LogLevel.Error;/**
 * Changes all existing Loggers of our default Factory with id 0 to the intended Level.
 *
 * @param level The intended LogLevel. LogLevel has a range of 0 to 5.
 * @returns The new set level.
 */function mi(e){// eslint-disable-next-line no-nested-ternary
let t=e>0?e>5?5:e:0;return(0,ya.getLogControl)().getLoggerFactoryControl(0).change({group:"all",logLevel:ya.LogLevel[t]}),t}b1.modifyLogLevel=mi;const mo={logLevel:ma};let ms={...mo};/**
 * Get the value set for a configuration.
 *
 * @param configOpt Key of the configuration.
 * @returns Value for this key.
 */function ml(e){if(void 0===ms[e]){if("api"===e)throw Error("The blockchain API is not set. Did you forget to call `Kilt.connect(…)` or `Kilt.init(…)`?");throw Error(`GENERIC NOT CONFIGURED ERROR FOR KEY: "${e}"`)}return ms[e]}b1.get=ml,b1.set=/**
 * Set values for one or multiple configurations.
 *
 * @param opts Object of configurations as key-value pairs.
 */function(e){var t;void 0!==(t=(ms={...ms,...e}).logLevel)&&mi(t)},b1.unset=/**
 * Set the value for a configuration to its default (which may be `undefined`).
 *
 * @param key Key identifying the configuration option.
 */function(e){Object.prototype.hasOwnProperty.call(mo,e)?ms[e]=mo[e]:delete ms[e]},b1.isSet=/**
 * Indicates whether a configuration option is set.
 *
 * @param key Key identifying the configuration option.
 * @returns True if this value is set, false otherwise.
 */function(e){return void 0!==ms[e]};// Create options instance and specify 1 LogGroupRule:
// * LogLevel Error on default, env DEBUG = 'true' changes Level to Debug.throws
const mc=new ya.LoggerFactoryOptions().addLogGroupRule(new ya.LogGroupRule(RegExp(".+"),ml("logLevel")));function mu(e){return b_(e).address}function md(e){return e.replace(/^#/,"")}// Create a named logging factory and pass in the options and export the factory.
// Named is since version 0.2.+ (it's recommended for future usage)
b1.LoggingFactory=ya.LFService.createNamedLoggerFactory("LoggerFactory",mc);const mf=/^[a-zA-Z0-9._~%+,;=*()'&$!@:/?-]+$/,mp={sr25519:"00",ed25519:"01"},mh={"00":"sr25519","01":"ed25519"};function mb({authentication:e,keyAgreement:t,service:r}){!function({authentication:e,keyAgreement:t,service:r}){// Check authentication key type
let n=mp[e[0].type];if(!n)throw new hn.UnsupportedKeyError(e[0].type);if(t?.[0].type&&!bK.includes(t[0].type))throw new hn.DidError(`Encryption key type "${t[0].type}" is not supported`);// Checks that for all service IDs have regular strings as their ID and not a full DID.
// Plus, we forbid a service ID to be `authentication` or `encryption` as that would create confusion
// when upgrading to a full DID.
r?.forEach(e=>{// A service ID cannot have a reserved ID that is used for key IDs.
if("#authentication"===e.id||"#encryption"===e.id)throw new hn.DidError(`Cannot specify a service ID with the name "${e.id}" as it is a reserved keyword`);!function(e){let{id:t,serviceEndpoint:r}=e;if(t.startsWith("did:kilt"))throw new hn.DidError(`This function requires only the URI fragment part (following '#') of the service ID, not the full DID URI, which is violated by id "${t}"`);if(!/**
 * Checks if a string is a valid URI fragment according to RFC#3986.
 *
 * @param str String to be checked.
 * @returns Whether `str` is a valid URI fragment.
 */function(e){try{return mf.test(e)&&!!decodeURIComponent(e)}catch{return!1}}(md(t)))throw new hn.DidError(`The service ID must be valid as a URI fragment according to RFC#3986, which "${t}" is not. Make sure not to use disallowed characters (e.g. whitespace) or consider URL-encoding the desired id.`);r.forEach(e=>{if(!/**
 * Checks if a string is a valid URI according to RFC#3986.
 *
 * @param str String to be checked.
 * @returns Whether `str` is a valid URI.
 */function(e){try{let t=new URL(e);// this actually accepts any URI but throws if it can't be parsed
return t.href===e||encodeURI(decodeURI(e))===e;// make sure our URI has not been converted implicitly by URL
}catch{return!1}}(e))throw new hn.DidError(`A service URI must be a URI according to RFC#3986, which "${e}" (service id "${t}") is not. Make sure not to use disallowed characters (e.g. whitespace) or consider URL-encoding resource locators beforehand.`)})}(e)})}({authentication:e,keyAgreement:t,service:r});let n=/**
 * Serialize the optional encryption key and service endpoints of an off-chain DID using the CBOR serialization algorithm
 * and encoding the result in Base58 format with a multibase prefix.
 *
 * @param details The light DID details to encode.
 * @param details.keyAgreement The DID encryption key.
 * @param details.service The DID service endpoints.
 * @returns The Base58-encoded and CBOR-serialized off-chain DID optional details.
 */function({keyAgreement:e,service:t}){let r={};if(e){let t=e[0];r.e=t}if(t&&t.length>0&&(r.s=t.map(({id:e,...t})=>({id:md(e),...t}))),0===Object.keys(r).length)return;let n=bY.encode(r);return ta([0,...n],!0)}({keyAgreement:t,service:r}),a=mp[e[0].type],i=function({publicKey:e,type:t}){if("ed25519"===t||"sr25519"===t)return ni(e,38);// Otherwise it’s ecdsa.
// Taken from https://github.com/polkadot-js/common/blob/master/packages/keyring/src/pair/index.ts#L44
let r=e.length>32?r0(e):e;return ni(r,38)}(e[0]),o=n?`:${n}`:"",s=`did:kilt:light:${a}${i}${o}`,l={uri:s,authentication:[{id:"#authentication",type:e[0].type,publicKey:e[0].publicKey}],service:r};return void 0!==t&&(l.keyAgreement=[{id:"#encryption",type:t[0].type,publicKey:t[0].publicKey}]),l}/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */var oI=A("dEXSZ");function my(e,t=38){let{identifier:r,accounts:n,w3n:a,serviceEndpoints:i,details:o}=e.unwrap(),s=function(e){let{publicKeys:t,authenticationKey:r,attestationKey:n,delegationKey:a,keyAgreementKeys:i,lastTxCounter:o,deposit:s}=e,l=[...t.entries()].map(([e,t])=>(function(e,t){let r=t.key.isPublicEncryptionKey?t.key.asPublicEncryptionKey:t.key.asPublicVerificationKey;return{id:`#${e.toHex()}`,type:r.type.toLowerCase(),publicKey:r.value.toU8a()}})(e,t)).reduce((e,t)=>(e[t.id.replace(/^#/,"")]=t,e),{}),c=l[r.toHex()],u={authentication:[c],lastTxCounter:o.toBn(),deposit:{owner:eV.encodeAddress(s.owner,38),amount:s.amount.toBn()}};if(n.isSome){let e=l[n.unwrap().toHex()];u.assertionMethod=[e]}if(a.isSome){let e=l[a.unwrap().toHex()];u.capabilityDelegation=[e]}let d=[...i.values()].map(e=>e.toHex());return d.length>0&&(u.keyAgreement=d.map(e=>l[e])),u}(o),l={uri:b0(eV.encodeAddress(r,38)),authentication:s.authentication,assertionMethod:s.assertionMethod,capabilityDelegation:s.capabilityDelegation,keyAgreement:s.keyAgreement},c=i.map(e=>(function(e){let{id:t,serviceTypes:r,urls:n}=e;return{id:`#${t6(t)}`,type:r.map(t6),serviceEndpoint:n.map(t6)}})(e));c.length>0&&(l.service=c);let u=a.isNone?void 0:a.unwrap().toHuman(),d=function(e,t=38){return e.map(e=>(function(e,t=38){if("isAccountId32"in e&&"isAccountId20"in e){// linked account is substrate address (ethereum-enabled storage version)
    if(e.isAccountId32)return ni(e.asAccountId32,t);// linked account is ethereum address (ethereum-enabled storage version)
    if(e.isAccountId20)return function(e){var t;if(!e)return"0x";let r=e5(e);if(![20,32,33,65].includes(r.length))throw Error(`Invalid address or publicKey provided, received ${r.length} bytes input`);let n=r_(([33,65].includes((t=r).length)&&(t=iK(oZ(t))),t.slice(-20)),-1,!1),a=r_(iK(n),-1,!1),i="";for(let e=0;e<40;e++)i=`${i}${parseInt(a[e],16)>7?n[e].toUpperCase():n[e]}`;return`0x${i}`}(e.asAccountId20)}// linked account is substrate account (legacy storage version)
    return ni(e.toU8a(),t)})(e,t))}(n,t);return{document:l,web3Name:u,accounts:d}}async function mm(e){let{type:t}=b_(e),r=b1.get("api"),n=r.call.did?.query??r.call.didApi.queryDid,{section:a,version:i}=n?.meta??{};if(i>2)throw Error(`This version of the KILT sdk supports runtime api '${a}' <=v2 , but the blockchain runtime implements ${i}. Please upgrade!`);let{document:o,web3Name:s}=await n(mu(e)).then(my).catch(()=>({document:void 0,web3Name:void 0}));if("full"===t&&o)return{document:o,metadata:{deactivated:!1},...s&&{web3Name:s}};// If the full DID has been deleted (or the light DID was upgraded and deleted),
// return the info in the resolution metadata.
let l=(await r.query.did.didBlacklist(mu(e))).isSome;if(l)return{// No canonicalId and no details are returned as we consider this DID deactivated/deleted.
metadata:{deactivated:!0}};if("full"===t)return null;let c=function(e,t=!0){let{address:r,version:n,encodedDetails:a,fragment:i,type:o,authKeyTypeEncoding:s}=b_(e);if("light"!==o)throw new hn.DidError(`Cannot build a light DID from the provided URI "${e}" because it does not refer to a light DID`);if(i&&t)throw new hn.DidError(`Cannot build a light DID from the provided URI "${e}" because it has a fragment`);let l=s&&mh[s];if(void 0===l)throw new hn.DidError(`Authentication key encoding "${s}" does not match any supported key type`);let c=na(r,!1,38),u=[{publicKey:c,type:l}];if(!a)return mb({authentication:u});let{keyAgreement:d,service:f}=function(e,t=1){if(1!==t)throw new hn.DidError("Serialization version not supported");let r=tn(e,!0),n=r[0],a=r.slice(1);if(0!==n)throw new hn.DidError("Serialization algorithm not supported");let i=bY.decode(a),o=i.e;return{keyAgreement:o&&[o],service:i.s?.map(({id:e,type:t,serviceEndpoint:r,types:n,urls:a})=>({id:`#${e}`,// types for retro-compatibility
    type:t??n,// urls for retro-compatibility
    serviceEndpoint:r??a}))}}(a,n);return mb({authentication:u,keyAgreement:d,service:f})}(e,!1);return(// If a full DID with same subject is present, return the resolution metadata accordingly.
o?{metadata:{canonicalId:b0(e),deactivated:!1}}:{document:c,metadata:{deactivated:!1}})}async function mg(e,t){let{did:r,fragment:n}=b_(e);// A fragment (keyId) IS expected to resolve a key.
if(!n)throw new hn.DidError(`Key URI "${e}" is not a valid DID resource`);let a=await mm(r);if(!a)throw new hn.DidNotFoundError;let{document:i,metadata:{canonicalId:o}}=a;// If the light DID has been upgraded we consider the old key URI invalid, the full DID URI should be used instead.
if(o)throw new hn.DidResolveUpgradedDidError;if(!i)throw new hn.DidDeactivatedError;let s=[...i.authentication,...i.assertionMethod||[],...i.capabilityDelegation||[],...i.keyAgreement||[]].find(e=>e.id===n);if(!s)throw new hn.DidNotFoundError("Key not found in DID");// Check whether the provided key ID is within the keys for a given verification relationship, if provided.
if(t&&!i[t]?.some(({id:e})=>n===e))throw new hn.DidError(`No key "${e}" for the verification method "${t}"`);return function(e,t){let{id:r,publicKey:n,includedAt:a,type:i}=e;return{controller:t,id:`${t}${r}`,publicKey:n,type:i,...a&&{includedAt:a}}}(s,r)}async function mv({message:e,signature:t,keyUri:r,expectedSigner:n,allowUpgraded:a=!1,expectedVerificationMethod:i,didResolveKey:o=mg}){// checks if key uri points to the right did; alternatively we could check the key's controller
let s=b_(r);if(n&&n!==s.did){// check for allowable exceptions
let e=b_(n),t=e.address===s.address&&e.version===s.version,r=a&&"full"===s.type,i="light"===s.type&&"light"===e.type&&e.authKeyTypeEncoding===s.authKeyTypeEncoding;if(!(t&&(r||i)))throw new hn.DidSubjectMismatchError(s.did,e.did)}let{publicKey:l}=await o(r,i);eV.verify(e,t,l)}new/*@__PURE__*/(n(oI))(2).pow(new/*@__PURE__*/(n(oI))(64)).subn(1);/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */const mx=b1.LoggingFactory.getLogger("Attestation");b1.LoggingFactory.getLogger("DelegationNode"),b1.LoggingFactory.getLogger("DelegationNode");var mw={},mP={};r(mP,"calculateRootHash",()=>mZ),r(mP,"removeClaimProperties",()=>mq),r(mP,"makeSigningData",()=>mG),r(mP,"verifyRootHash",()=>mW),r(mP,"verifyDataIntegrity",()=>mY),r(mP,"verifyDataStructure",()=>mK),r(mP,"verifySignature",()=>mJ),r(mP,"fromClaim",()=>mQ),r(mP,"verifyWellFormed",()=>m_),r(mP,"verifyAttested",()=>m$),r(mP,"refreshRevocationStatus",()=>m0),r(mP,"verifyCredential",()=>m1),r(mP,"verifyPresentation",()=>m2),r(mP,"isICredential",()=>m5),r(mP,"isPresentation",()=>m3),r(mP,"getHash",()=>m8),r(mP,"createPresentation",()=>m9);/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Credentials are a core building block of the KILT SDK.
 * A Credential represents a [[Claim]] which needs to be validated. In practice, the Credential is sent from a claimer to an attester for attesting and to a verifier for verification.
 *
 * A Credential object contains the [[Claim]] and its hash, and legitimations/delegationId of the attester.
 * The credential is made tamper-proof by hashing the claim properties and generating a digest from that, which is used to reference the Credential.
 * It can be signed by the claimer, to authenticate the holder and to prevent replay attacks.
 * A Credential also supports hiding of claim data during a credential presentation.
 *
 * @packageDocumentation
 */var mO={},mT={};r(mT,"toJsonLD",()=>mI),r(mT,"hashClaimContents",()=>mV),r(mT,"verifyDisclosedAttributes",()=>mX),r(mT,"verifyDataStructure",()=>mU),r(mT,"verify",()=>mA),r(mT,"fromNestedCTypeClaim",()=>mD),r(mT,"fromCTypeAndClaimContents",()=>mC),r(mT,"isIClaim",()=>mF);/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Claims are a core building block of the KILT SDK. A claim represents **something an entity claims about itself**. Once created, a claim can be used to create a [[Credential]].
 *
 * A claim object has:
 * * contents - among others, the pure content of a claim, for example `"isOver18": true`;
 * * a [[CType]] that represents its data structure.
 *
 * A claim object's owner is (should be) the same entity as the claimer.
 *
 * @packageDocumentation
 *//**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */const mz={// $id is not contained in schema when fetched from ipfs bc that is impossible with a content-addressed system
$id:"ipfs://bafybeiah66wbkhqbqn7idkostj2iqyan2tstc4tpqt65udlhimd7hcxjyq/",$schema:"http://json-schema.org/draft-07/schema#",title:"CType Metaschema (V1)",description:"Describes a CType, which is a JSON schema for validating KILT claim types.",type:"object",properties:{$id:{pattern:"^kilt:ctype:0x[0-9a-f]+$",type:"string"},$schema:{type:"string"},title:{type:"string"},type:{const:"object",type:"string"},properties:{patternProperties:{"^.+$":{oneOf:[{$ref:"#/definitions/string"},{$ref:"#/definitions/number"},{$ref:"#/definitions/boolean"},{$ref:"#/definitions/cTypeReference"},{$ref:"#/definitions/array"}],type:"object"}},type:"object"},additionalProperties:{const:!1,type:"boolean"}},additionalProperties:!1,required:["$id","$schema","additionalProperties","properties","title","type"],definitions:{cTypeReference:{additionalProperties:!1,properties:{$ref:{pattern:"^kilt:ctype:0x[0-9a-f]+(#/properties/.+)?$",format:"uri",type:"string"}},required:["$ref"]},string:{additionalProperties:!1,properties:{type:{const:"string"},format:{enum:["date","time","uri"]},enum:{type:"array",items:{type:"string"}},minLength:{type:"number"},maxLength:{type:"number"}},required:["type"]},boolean:{additionalProperties:!1,properties:{type:{const:"boolean"}},required:["type"]},number:{additionalProperties:!1,properties:{type:{enum:["integer","number"]},enum:{type:"array",items:{type:"number"}},minimum:{type:"number"},maximum:{type:"number"}},required:["type"]},array:{additionalProperties:!1,properties:{type:{const:"array"},items:{oneOf:[{$ref:"#/definitions/string"},{$ref:"#/definitions/number"},{$ref:"#/definitions/boolean"},{$ref:"#/definitions/cTypeReference"}]},minItems:{type:"number"},maxItems:{type:"number"}},required:["type","items"]}}},mk={$id:"http://kilt-protocol.org/draft-01/ctype#",$schema:"http://json-schema.org/draft-07/schema#",title:"CType Metaschema (draft-01)",description:`Describes a CType, which is a JSON schema for validating KILT claim types. This version has known issues, the use of schema ${mz.$id} is recommended instead.`,type:"object",properties:{$id:{type:"string",format:"uri",pattern:"^kilt:ctype:0x[0-9a-f]+$"},$schema:{type:"string",format:"uri",const:"http://kilt-protocol.org/draft-01/ctype#"},title:{type:"string"},type:{type:"string",const:"object"},properties:{type:"object",patternProperties:{"^.*$":{type:"object",properties:{type:{type:"string",enum:["string","integer","number","boolean"]},$ref:{type:"string",format:"uri"},format:{type:"string",enum:["date","time","uri"]}},additionalProperties:!1,oneOf:[{required:["type"]},{required:["$ref"]}]}}}},additionalProperties:!1,required:["$id","title","$schema","properties","type"]},mL={$schema:"http://json-schema.org/draft-07/schema",oneOf:[// Option A): conforms to draft-01 of the CType meta sschema, which defines that the CType's $schema property must be equal to the CType meta schema's $id.
{$ref:mk.$id},// Option B): The CType's $schema property references V1 of the CType meta schema, in which case this meta schema must apply.
// The structure is different because V1 does not define the exact value of the $schema property because its $id is derived from the hash of its contents.
{allOf:[// verifies that both of two (sub-)schemas validate against CType object.
{// subschema 1: $schema is equal to CType meta schema V1's $id.
properties:{$schema:{type:"string",const:mz.$id}}},{// subschema 2: CType meta schema V1.
$ref:mz.$id}]}],// CType meta schemas are embedded here, so that the references ($ref) can be resolved without having to load them first.
definitions:{[mk.$id]:mk,[mz.$id]:mz}};let mE=()=>{// do nothing
};function mN(e){return`kilt:ctype:${e}`}function mS(e){let t=e.match(/kilt:ctype:(0x[0-9a-f]+)/i);if(!t)throw new hn.CTypeHashMissingError(`The string ${e} is not a valid CType id`);return t[1]}function mM(e,t,r,n){let a=new bb.Validator(t,"7",!1);n&&n.forEach(e=>a.addSchema(e));let{valid:i,errors:o}=a.validate(e);if(!0!==i)throw r&&o.forEach(e=>{r.push(e.error)}),new hn.ObjectUnverifiableError("JSON schema verification failed for object",{cause:o})}function mj(e,t,r){mM(t,mL,r),t.$schema===mk.$id&&mE(t.$id),mM(e,t,r)}void 0!==b2&&b2.env?.NODE_ENV,mk.$id,mz.$id;const mH="https://www.w3.org/2018/credentials#";/**
 * Produces JSON-LD readable representations of [[IClaim]]['contents']. This is done by implicitly or explicitly transforming property keys to globally unique predicates.
 * Where possible these predicates are taken directly from the Verifiable Credentials vocabulary. Properties that are unique to a [[CType]] are transformed into predicates by prepending the [[CType]][schema][$id].
 *
 * @param claim A (partial) [[IClaim]] from to build a JSON-LD representation from. The `cTypeHash` property is required.
 * @param expanded Return an expanded instead of a compacted representation. While property transformation is done explicitly in the expanded format, it is otherwise done implicitly via adding JSON-LD's reserved `@context` properties while leaving [[IClaim]][contents] property keys untouched.
 * @returns An object which can be serialized into valid JSON-LD representing an [[IClaim]]'s ['contents'].
 */function mR(e,t=!0){let{cTypeHash:r,contents:n,owner:a}=e;if(!r)throw new hn.CTypeHashMissingError;let i=`${mN(r)}#`,o={};return(a&&(o["@id"]=a),t)?(Object.entries(n||{}).forEach(([e,t])=>{o[i+e]=t}),o):{...o,"@context":{"@vocab":i},...n}}function mI(e,t=!0){let r=mR(e,t),n=t?mH:"",a={[`${n}credentialSubject`]:r};return a[`${n}credentialSchema`]={"@id":mN(e.cTypeHash)},t||(a["@context"]={"@vocab":mH}),a}function mB(e){let t=mR(e,!0);return Object.entries(t).map(([e,t])=>JSON.stringify({[e]:t}))}function mV(e,t={}){let r=t.canonicalisation||mB,n=r(e),a=eV.hashStatements(n,t),i=a.map(({saltedHash:e})=>e).sort((e,t)=>oB(e).cmp(oB(t))),o={};return a.forEach(({digest:e,nonce:t,statement:r})=>{// throw if we can't map a digest to a nonce - this should not happen if the nonce map is complete and the credential has not been tampered with
if(!t)throw new hn.ClaimNonceMapMalformedError(r);o[e]=t},{}),{hashes:i,nonceMap:o}}function mX(e,t,r={}){let n=r.canonicalisation||mB,{nonces:a}=t,i=n(e),o=eV.hashStatements(i,{...r,nonces:a}),s=Object.keys(a),{verified:l,errors:c}=o.reduce((e,{saltedHash:r,statement:n,digest:a,nonce:i})=>// check if the statement digest was contained in the proof and mapped it to a nonce
    s.includes(a)&&i?t.hashes.includes(r)?e:(e.errors.push(new hn.InvalidProofForStatementError(n)),{...e,verified:!1}):(e.errors.push(new hn.NoProofForStatementError(n)),{...e,verified:!1}),{verified:!0,errors:[]});if(!0!==l)throw new hn.ClaimUnverifiableError("One or more statements in the claim could not be verified",{cause:c})}function mU(e){if(!e.cTypeHash)throw new hn.CTypeHashMissingError;"owner"in e&&b$(e.owner,"Did"),void 0!==e.contents&&Object.entries(e.contents).forEach(([e,t])=>{if(!e||"string"!=typeof e||!["string","number","boolean","object"].includes(typeof t))throw new hn.ClaimContentsMalformedError}),bd.verifyIsHex(e.cTypeHash,256)}function mA(e,t){mj(e.contents,t),mU(e)}function mD(e,t,r,n){var a;mM(e,mL,a),mM(r,e,a,t);let i={cTypeHash:mS(e.$id),contents:r,owner:n};return mU(i),i}function mC(e,t,r){!function(e){mM(e,mL),e.$schema===mk.$id&&mE(e.$id);let t=mN(function(e){let t=function(e){// eslint-disable-next-line @typescript-eslint/no-unused-vars
let{$id:t,...r}=e;return eV.encodeObjectAsStr(r)}(e);return eV.hashStr(t)}(e));if(t!==e.$id)throw new hn.CTypeIdMismatchError(t,e.$id)}(e),mj(t,e);let n={cTypeHash:mS(e.$id),contents:t,owner:r};return mU(n),n}function mF(e){try{mU(e)}catch(e){return!1}return!0}function mZ(e){let t=function(e,t,r){let n=e.map(e=>eV.coToUInt8(e));return t&&t.forEach(e=>{n.push(eV.coToUInt8(e.rootHash))}),r&&n.push(eV.coToUInt8(r)),n}(e.claimHashes||[],e.legitimations||[],e.delegationId||null),r=function(e){let t=eV.u8aConcat(...e);return eV.hash(t)}(t);return eV.u8aToHex(r)}function mq(e,t){let r=// TODO: find a nice way to clone stuff
JSON.parse(JSON.stringify(e));return t.forEach(e=>{delete r.claim.contents[e]}),r.claimNonceMap=mV(r.claim,{nonces:r.claimNonceMap}).nonceMap,r}function mG(e,t){return new Uint8Array([...eV.coToUInt8(e.rootHash),...eV.coToUInt8(t)])}function mW(e){if(e.rootHash!==mZ(e))throw new hn.RootHashUnverifiableError}function mY(e){// check claim hash
mW(e),// verify properties against selective disclosure proof
mX(e.claim,{nonces:e.claimNonceMap,hashes:e.claimHashes}),// check legitimations
e.legitimations.forEach(mY)}function mK(e){if("claim"in e)mU(e.claim);else throw new hn.ClaimMissingError;if(!e.claim.owner)throw new hn.OwnerMissingError;if(!Array.isArray(e.legitimations))throw new hn.LegitimationsMissingError;if(!("claimNonceMap"in e))throw new hn.ClaimNonceMapMissingError;if("object"!=typeof e.claimNonceMap)throw new hn.ClaimNonceMapMalformedError;if(Object.entries(e.claimNonceMap).forEach(([e,t])=>{if(bd.verifyIsHex(e,256),!e||"string"!=typeof t||!t)throw new hn.ClaimNonceMapMalformedError}),!("claimHashes"in e))throw new hn.DataStructureError("claim hashes not provided");if("string"!=typeof e.delegationId&&null!==e.delegationId)throw new hn.DelegationIdTypeError}async function mJ(e,{challenge:t,didResolveKey:r=mg}={}){let{claimerSignature:n}=e;if(t&&t!==n.challenge)throw new hn.SignatureUnverifiableError("Challenge differs from expected");let a=mG(e,n.challenge);await mv({...function(e){let t="keyUri"in e?e.keyUri:e.keyId,r=eV.coToUInt8(e.signature);return{signature:r,keyUri:t}}(n),message:a,// check if credential owner matches signer
expectedSigner:e.claim.owner,// allow full did to sign presentation if owned by corresponding light did
allowUpgraded:!0,expectedVerificationMethod:"authentication",didResolveKey:r})}function mQ(e,{legitimations:t=[],delegationId:r=null}={}){let{hashes:n,nonceMap:a}=mV(e),i=mZ({legitimations:t,claimHashes:n,delegationId:r}),o={claim:e,legitimations:t,claimHashes:n,claimNonceMap:a,rootHash:i,delegationId:r};return mK(o),o}function m_(e,{ctype:t}={}){mK(e),mY(e),t&&mj(e.claim.contents,t)}async function m$(e){let t=b1.get("api"),{rootHash:r}=e,n=await t.query.attestation.attestations(r);if(n.isNone)throw new hn.CredentialUnverifiableError("Attestation not found");let a=function(e,t// all the other decoders do not use extra data; they just return partial types
){var r;let n=e.unwrap(),a=n.authorizationId.unwrapOr(void 0)?.value.toHex(),i={claimHash:t,cTypeHash:n.ctypeHash.toHex(),owner:(r=n.attester,b0(eV.encodeAddress(r,38))),delegationId:a||null,revoked:n.revoked.valueOf()};return mx.info(`Decoded attestation: ${JSON.stringify(i)}`),i}(n,e.rootHash);!function(e,t){let r=t.claim.cTypeHash!==e.cTypeHash,n=t.rootHash!==e.claimHash,a=t.delegationId!==e.delegationId;if(r||n||a)throw new hn.CredentialUnverifiableError(`Some attributes of the on-chain attestation diverge from the credential: ${["cTypeHash","delegationId","claimHash"].filter((e,t)=>[n,a,r][t]).join(", ")}`);mY(t)}(a,e);let{owner:i,revoked:o}=a;return{attester:i,revoked:o}}async function m0(e){if("string"!=typeof e.attester||"boolean"!=typeof e.revoked)throw TypeError("This function expects a VerifiedCredential with properties `revoked` (boolean) and `attester` (string)");let{revoked:t,attester:r}=await m$(e);if(r!==e.attester)throw new hn.CredentialUnverifiableError("Attester has changed since first verification");return{...e,revoked:t}}async function m1(e,{ctype:t}={}){m_(e,{ctype:t});let{revoked:r,attester:n}=await m$(e);return{...e,revoked:r,attester:n}}async function m2(e,{ctype:t,challenge:r,didResolveKey:n=mg}={}){return await mJ(e,{challenge:r,didResolveKey:n}),m1(e,{ctype:t})}function m5(e){try{mK(e)}catch(e){return!1}return!0}function m3(e){return m5(e)&&function(e){try{return!/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Checks whether the input is a valid DidSignature object, consisting of a signature as hex and the uri of the signing key.
 * Does not cryptographically verify the signature itself!
 *
 * @param input Arbitrary input.
 */function(e){let t="keyUri"in e?e.keyUri:e.keyId;if(!eA(e.signature))throw new hn.SignatureMalformedError(`Expected signature as a hex string, got ${e.signature}`);b$(t,"ResourceUri")}(e),!0}catch(e){return!1}}(e.claimerSignature)}function m8(e){return e.rootHash}async function m9({credential:e,signCallback:t,selectedAttributes:r,challenge:n}){// filter attributes that are not in public attributes
let a=r?Array.from(new Set(Object.keys(e.claim.contents))).filter(e=>!r.includes(e)):[],i=mq(e,a),o=await t({data:mG(i,n),did:e.claim.owner,keyRelationship:"authentication"});return{...i,claimerSignature:{...function({signature:e,keyUri:t}){return{signature:eV.u8aToHex(e),keyUri:t}}(o),...n&&{challenge:n}}}}V(mO,mT),V(mw,mP);/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */var oI=A("dEXSZ");const m6=RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)","g"),m4=[{power:-24,text:"yocto",value:"y"},{power:-21,text:"zepto",value:"z"},{power:-18,text:"atto",value:"a"},{power:-15,text:"femto",value:"f"},{power:-12,text:"pico",value:"p"},{power:-9,text:"nano",value:"n"},{power:-6,text:"micro",value:"\xb5"},{power:-3,text:"milli",value:"m"},{power:0,text:"Unit",value:"-"},{power:3,text:"Kilo",value:"k"},{power:6,text:"Mill",value:"M"},{power:9,text:"Bill",value:"B"},{power:12,text:"Tril",value:"T"},{power:15,text:"Peta",value:"P"},{power:18,text:"Exa",value:"E"},{power:21,text:"Zeta",value:"Z"},{power:24,text:"Yotta",value:"Y"}];function m7(e){// use a loop here, better RN support (which doesn't have [].find)
for(let t=0,r=m4.length;t<r;t++)if(m4[t].value===e)return m4[t];return m4[8]}function ge(e,t,r){if(r)return m7(r);let n=7+Math.ceil((e.length-t)/3);return m4[n]||m4[n<0?0:m4.length-1]}const gt=m4[8].text;let gr=0,gn=gt;const ga=function(e,{decimals:t=gr,forceUnit:r,locale:n="en",withAll:a=!1,withSi:i=!0,withSiFull:o=!1,withUnit:s=!0,withZero:l=!0}={}){// we only work with string inputs here - convert anything
// into the string-only value
let c=oA(e).toString();if(0===c.length||"0"===c)return"0";// strip the negative sign so we can work with clean groupings, re-add this in the
// end when we return the result (from here on we work with positive numbers)
let u="";c[0].startsWith("-")&&(u="-",c=c.substring(1));// We start at midpoint (8) minus 1 - this means that values display as
// 123.4567 instead of 0.1234 k (so we always have the most relevant).
let d=ge(c,t,r),f=c.length-(t+d.power),p=f<=0?"0":c.substring(0,f),h=c.padStart(f<0?t:1,"0").substring(f<0?0:f).padEnd(a?Math.max(t,4):4,"0").substring(0,a?Math.max(4,t+d.power):4);// remove all trailing 0's (if required via flag)
if(!l){let e=h.length-1;// This looks inefficient, however it is better to do the checks and
// only make one final slice than it is to do it in multiples
do"0"===h[e]&&e--;while("0"===h[e])h=h.substring(0,e+1)}// the display unit
let b="boolean"==typeof s?m4[8].text:s,y=i||o?"-"===d.value?s?` ${b}`:"":` ${o?`${d.text}${s?" ":""}`:d.value}${s?b:""}`:"",{decimal:m,thousand:g}={decimal:.1.toLocaleString(n).substring(1,2),thousand:1e3.toLocaleString(n).substring(1,2)};return`${u}${function(e,t=","){// We can do this by adjusting the regx, however for the sake of clarity
// we rather strip and re-add the negative sign in the output
let r=e[0].startsWith("-"),n=r?e.substring(1).match(m6):e.match(m6);return n?`${r?"-":""}${n.join(t)}`:e}(p,g)}${h&&`${m}${h}`}${y}`};ga.calcSi=(e,t=gr)=>ge(e,t),ga.findSi=m7,ga.getDefaults=()=>({decimals:gr,unit:gn}),ga.getOptions=(e=gr)=>m4.filter(({power:t})=>!(t<0)||e+t>=0),ga.setDefaults=({decimals:e,unit:t})=>{gr=(Array.isArray(e)?e[0]:e)??gr,gn=(Array.isArray(t)?t[0]:t)??gn,m4[8].text=gn},new/*@__PURE__*/(n(oI))(1),g=new/*@__PURE__*/(n(oI))(125),new/*@__PURE__*/(n(oI))(g).mul(new/*@__PURE__*/(n(oI))(10).pow(new/*@__PURE__*/(n(oI))(6)));/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Crypto provides KILT with the utility types and methods useful for cryptographic operations, such as signing/verifying, encrypting/decrypting and hashing.
 *
 * The utility types and methods are wrappers for existing Polkadot functions and imported throughout KILT's protocol for various cryptographic needs.
 *
 * @packageDocumentation
 */const gi="0123456789abcdef",go=new Uint8Array(256),gs=new Uint8Array(65536);for(let e=0,t=gi.length;e<t;e++)go[0|gi[e].charCodeAt(0)]=0|e,e>9&&(go[0|gi[e].toUpperCase().charCodeAt(0)]=0|e);for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)gs[t|r]=go[e]<<4|go[r]}function gl(e,t=-1){if(!e)return new Uint8Array;let r=e.startsWith("0x")?2:0,n=Math.ceil((e.length-r)/2),a=Math.ceil(-1===t?n:t/8),i=new Uint8Array(a),o=a>n?a-n:0;for(let t=o;t<a;t++,r+=2)// HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
// same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
// also the faster operation by at least 2x with the character map above
i[t]=gs[e.charCodeAt(r)<<8|e.charCodeAt(r+1)];return i}const gc=/^0x[\da-fA-F]+$/,gu=/^[\da-fA-F]+$/;function gd(e,t=-1,r){return"string"==typeof e&&("0x"===e||gc.test(e))&&(-1===t?r||e.length%2==0:e.length===2+Math.ceil(t/4))}var gf={};Object.defineProperty(gf,"__esModule",{value:!0}),gf.TextEncoder=gf.packageInfo=void 0;const gp=/*#__PURE__*/"undefined"!=typeof globalThis?globalThis:void 0!==B?B:"undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this");function gh(e,t){// Not quite sure why this is here - snuck in with TS 4.7.2 with no real idea
// (as of now) as to why this looks like an "any" when we do cast it to a T
//
// eslint-disable-next-line @typescript-eslint/no-unsafe-return
return void 0===gp[e]?t:gp[e]}var gb={};Object.defineProperty(gb,"__esModule",{value:!0}),gb.TextEncoder=void 0,gb.TextEncoder=class{encode(e){let t=e.length,r=new Uint8Array(t);for(let n=0;n<t;n++)r[n]=e.charCodeAt(n);return r}};var gy={},gm="node_modules/@kiltprotocol/asset-did/node_modules/@polkadot/x-textencoder/cjs";Object.defineProperty(gy,"__esModule",{value:!0}),gy.packageInfo=void 0,gy.packageInfo={name:"@polkadot/x-textencoder",path:"string"==typeof gm?gm:"auto",type:"cjs",version:"12.6.2"},Object.defineProperty(gf,"packageInfo",{enumerable:!0,get:function(){return gy.packageInfo}}),gf.TextEncoder=gh("TextEncoder",gb.TextEncoder);const gg=new gf.TextEncoder;function gv(e){return e?gg.encode(e.toString()):new Uint8Array}const gx=gh("BigInt",/**
 * @internal
 *
 * There are _still_ some older environments (specifically RN < 0.70), that does
 * not have proper BigInt support - a non-working fallback is provided for those.
 *
 * We detect availability of BigInt upon usage, so this is purely to allow functional
 * compilation & bundling. Since we have operators such as *+-/ top-level, a number-ish
 * result is used here.
 */function(){return Number.NaN}),gw="function"==typeof gx&&"function"==typeof gx.asIntN,gP="function"==typeof gp.Buffer&&"function"==typeof gp.Buffer.isBuffer;/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */function gO(e){return"function"==typeof e}function gT(e){return(e&&e.constructor)===Uint8Array||e instanceof Uint8Array?gP&&e&&gO(e.readDoubleLE)&&gp.Buffer.isBuffer(e)?new Uint8Array(e):e:gd(e)?gl(e):Array.isArray(e)?new Uint8Array(e):gv(e)}function gz(e,t=0){let r=e.length,n=0;if(!t)for(let n=0;n<r;n++)t+=e[n].length;let a=new Uint8Array(t);for(let t=0;t<r;t++)a.set(e[t],n),n+=e[t].length;return a}gp.process;var gk={};Object.defineProperty(gk,"__esModule",{value:!0}),gk.TextDecoder=gk.packageInfo=void 0;var gL={};Object.defineProperty(gL,"__esModule",{value:!0}),gL.TextDecoder=void 0,gL.TextDecoder=class{__encoding;constructor(e){this.__encoding=e}decode(e){let t="";for(let r=0,n=e.length;r<n;r++)t+=String.fromCharCode(e[r]);return t}};var gE={},gN="node_modules/@kiltprotocol/asset-did/node_modules/@polkadot/x-textdecoder/cjs";Object.defineProperty(gE,"__esModule",{value:!0}),gE.packageInfo=void 0,gE.packageInfo={name:"@polkadot/x-textdecoder",path:"string"==typeof gN?gN:"auto",type:"cjs",version:"12.6.2"},Object.defineProperty(gk,"packageInfo",{enumerable:!0,get:function(){return gE.packageInfo}}),gk.TextDecoder=gh("TextDecoder",gL.TextDecoder);const gS=new gk.TextDecoder("utf-8");function gM(e){return e?gS.decode(e):""}var gj={};Object.defineProperty(gj,"__esModule",{value:!0}),gj.getRandomValues=gj.crypto=gj.packageInfo=void 0;var gH={},gR="node_modules/@kiltprotocol/asset-did/node_modules/@polkadot/api/node_modules/@polkadot/x-randomvalues/cjs";Object.defineProperty(gH,"__esModule",{value:!0}),gH.packageInfo=void 0,gH.packageInfo={name:"@polkadot/x-randomvalues",path:"string"==typeof gR?gR:"auto",type:"cjs",version:"12.6.2"},Object.defineProperty(gj,"packageInfo",{enumerable:!0,get:function(){return gH.packageInfo}}),gj.crypto=gp.crypto,gj.getRandomValues=function(e){return gj.crypto.getRandomValues(e)};const gI={getRandomValues:gj.getRandomValues},gB={crypto:gI};class gV{__internal__bridge;constructor(e){this.__internal__bridge=e}/** @internal */abort=()=>{throw Error("abort")};/** @internal */__wbindgen_is_undefined=e=>void 0===this.__internal__bridge.getObject(e);/** @internal */__wbindgen_throw=(e,t)=>{throw Error(this.__internal__bridge.getString(e,t))};/** @internal */__wbg_self_1b7a39e3a92c949c=()=>this.__internal__bridge.addObject(gB);/** @internal */__wbg_require_604837428532a733=(e,t)=>{throw Error(`Unable to require ${this.__internal__bridge.getString(e,t)}`)};/** @internal */__wbg_crypto_968f1772287e2df0=e=>this.__internal__bridge.addObject(gI);/** @internal */__wbg_getRandomValues_a3d34b4fee3c2869=e=>this.__internal__bridge.addObject(gI.getRandomValues);/** @internal */__wbg_getRandomValues_f5e14ab7ac8e995d=(e,t,r)=>{gI.getRandomValues(this.__internal__bridge.getU8a(t,r))};/** @internal */__wbg_randomFillSync_d5bd2d655fdf256a=(e,t,r)=>{throw Error("randomFillsync is not available");// getObject(idx).randomFillSync(getU8a(ptr, len));
};/** @internal */__wbindgen_object_drop_ref=e=>{this.__internal__bridge.takeObject(e)}}var gX={};Object.defineProperty(gX,"__esModule",{value:!0}),gX.createWasm=gX.packageInfo=void 0;const gU="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",gA=Array(256);for(let e=0,t=gU.length;e<t;e++)gA[gU.charCodeAt(e)]=e;const gD=Uint8Array,gC=Uint16Array,gF=Uint32Array,gZ=new gD([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),gq=new gD([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,/* unused */0,0,/* impossible */0]),gG=new gD([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,/* unused */0,0]),gW=(e,t)=>{let r=new gC(31);for(let n=0;n<31;++n)r[n]=t+=1<<e[n-1];// numbers here are at max 18 bits
let n=new gF(r[30]);for(let e=1;e<30;++e)for(let t=r[e];t<r[e+1];++t)n[t]=t-r[e]<<5|e;return[r,n]},[gY,gK]=gW(gq,2);gY[28]=258,gK[258]=28;const[gJ]=gW(gG,0),gQ=new gC(32768);for(let e=0;e<32768;++e){// reverse table algorithm from SO
let t=(43690&e)>>>1|(21845&e)<<1;t=(61680&(t=(52428&t)>>>2|(13107&t)<<2))>>>4|(3855&t)<<4,gQ[e]=((65280&t)>>>8|(255&t)<<8)>>>1}const g_=(e,t,r)=>{let n;let a=e.length,i=0,o=new gC(t);// length of cd must be 288 (total # of codes)
for(;i<a;++i)e[i]&&++o[e[i]-1];// u16 "map": index -> minimum code for bit length = index
let s=new gC(t);for(i=1;i<t;++i)s[i]=s[i-1]+o[i-1]<<1;if(r){// u16 "map": index -> number of actual bits, symbol for code
n=new gC(1<<t);// bits to remove for reverser
let r=15-t;for(i=0;i<a;++i)if(e[i]){// num encoding both symbol and bits read
let a=i<<4|e[i],o=t-e[i],l=s[e[i]-1]++<<o;// m is end value
for(let e=l|(1<<o)-1;l<=e;++l)n[gQ[l]>>r]=a}}else for(i=0,n=new gC(a);i<a;++i)e[i]&&(n[i]=gQ[s[e[i]-1]++]>>15-e[i]);return n},g$=new gD(288);for(let e=0;e<144;++e)g$[e]=8;for(let e=144;e<256;++e)g$[e]=9;for(let e=256;e<280;++e)g$[e]=7;for(let e=280;e<288;++e)g$[e]=8;const g0=new gD(32);for(let e=0;e<32;++e)g0[e]=5;const g1=g_(g$,9,1),g2=g_(g0,5,1),g5=(e,t,r)=>{let n=t>>>3;return(e[n]|e[n+1]<<8)>>>(7&t)&r},g3=(e,t)=>{let r=t>>>3;return(e[r]|e[r+1]<<8|e[r+2]<<16)>>>(7&t)},g8=e=>(e>>>3)+(7&e&&1),g9=(e,t,r)=>{(null==t||t<0)&&(t=0),(null==r||r>e.length)&&(r=e.length);// can't use .constructor in case user-supplied
let n=new(e instanceof gC?gC:e instanceof gF?gF:gD)(r-t);return n.set(e.subarray(t,r)),n},g6=e=>{let t=e[0];for(let r=1,n=e.length;r<n;++r)e[r]>t&&(t=e[r]);return t},g4=(v=function(e,t){let r=0,n=0,a=-1;for(let i=0,o=t.length-1;a!==o;i++)// each character represents 6 bits
r=r<<6|gA[e.charCodeAt(i)],(n+=6)>=8&&(t[++a]=r>>>(n-=8)&255);return t}("",new Uint8Array(171008)),x=new Uint8Array(339468),((e,t,r)=>{let n=!r||r.i;r||(r={});// source length
let a=e.length,i=!t||!n;// Assumes roughly 33% compression ratio average
t||(t=new gD(3*a));// ensure buffer can fit at least l elements
let o=e=>{let r=t.length;// need to increase size to fit
if(e>r){// Double or set to necessary, whichever is greater
let n=new gD(Math.max(r<<1,e));n.set(t),t=n}},s=r.f||0,l=r.p||0,c=r.b||0,u=r.l,d=r.d,f=r.m,p=r.n;if(s&&!u)return t;// total bits
let h=a<<3;do{if(!u){// BFINAL - this is only 1 when last chunk is next
r.f=s=g5(e,l,1);// type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
let b=g5(e,l+1,3);if(l+=3,b){if(1==b)u=g1,d=g2,f=9,p=5;else if(2==b){//  literal                            lengths
let t=g5(e,l,31)+257,r=g5(e,l+10,15)+4,a=t+g5(e,l+5,31)+1;l+=14;// length+distance tree
let i=new gD(a),o=new gD(19);for(let t=0;t<r;++t)o[gZ[t]]=g5(e,l+3*t,7);l+=3*r;// code lengths bits
let s=g6(o),c=(1<<s)-1;if(!n&&l+a*(s+7)>h)break;// code lengths map
let b=g_(o,s,1);for(let t=0;t<a;){let r=b[g5(e,l,c)];// bits read
l+=15&r;// symbol
let n=r>>>4;// code length to copy
if(n<16)i[t++]=n;else{//  copy   count
let r=0,a=0;for(16==n?(a=3+g5(e,l,3),l+=2,r=i[t-1]):17==n?(a=3+g5(e,l,7),l+=3):18==n&&(a=11+g5(e,l,127),l+=7);a--;)i[t++]=r}}//    length tree                 distance tree
let y=i.subarray(0,t),m=i.subarray(t);// max length bits
f=g6(y),// max dist bits
p=g6(m),u=g_(y,f,1),d=g_(m,p,1)}else throw"invalid block type"}else{// go to end of byte boundary
let s=g8(l)+4,u=e[s-4]|e[s-3]<<8,d=s+u;if(d>a){if(n)throw"unexpected EOF";break}i&&o(c+u),// Copy over uncompressed data
t.set(e.subarray(s,d),c),// Get new bitpos, update byte count
r.b=c+=u,r.p=l=d<<3;continue}if(l>h)throw"unexpected EOF"}i&&o(c+131072);let b=(1<<f)-1,y=(1<<p)-1,m=f+p+18;for(;n||l+m<h;){// bits read, code
let r=u[g3(e,l)&b],n=r>>>4;if((l+=15&r)>h)throw"unexpected EOF";if(!r)throw"invalid length/literal";if(n<256)t[c++]=n;else if(256==n){u=void 0;break}else{let r=n-254;// no extra bits needed if less
if(n>264){// index
let t=n-257,a=gq[t];r=g5(e,l,(1<<a)-1)+gY[t],l+=a}// dist
let a=d[g3(e,l)&y],s=a>>>4;if(!a)throw"invalid distance";l+=15&a;let u=gJ[s];if(s>3){let t=gG[s];u+=g3(e,l)&(1<<t)-1,l+=t}if(l>h)throw"unexpected EOF";i&&o(c+131072);let f=c+r;for(;c<f;c+=4)t[c]=t[c-u],t[c+1]=t[c+1-u],t[c+2]=t[c+2-u],t[c+3]=t[c+3-u];c=f}}r.l=u,r.p=l,r.b=c,u&&(s=1,r.m=f,r.d=d,r.n=p)}while(!s)return c==t.length?t:g9(t,0,c)})(((e=>{if((15&e[0])!=8||e[0]>>>4>7||(e[0]<<8|e[1])%31)throw"invalid zlib data";if(32&e[1])throw"invalid zlib data: preset dictionaries not supported"})(v),v.subarray(2,-4)),x));var g7={},ve="node_modules/@kiltprotocol/asset-did/node_modules/@polkadot/api/node_modules/@polkadot/wasm-crypto-init/cjs";Object.defineProperty(g7,"__esModule",{value:!0}),g7.packageInfo=void 0,g7.packageInfo={name:"@polkadot/wasm-crypto-init",path:"string"==typeof ve?ve:"auto",type:"cjs",version:"7.3.2"},Object.defineProperty(gX,"packageInfo",{enumerable:!0,get:function(){return g7.packageInfo}}),/**
 * @name createWasm
 * @description
 * Creates an interface using only WASM
 */gX.createWasm=async e=>{let t={error:null,type:"none",wasm:null};try{if(g4?.length){if("object"!=typeof WebAssembly||"function"!=typeof WebAssembly.instantiate)throw Error("WebAssembly is not available in your environment")}else throw Error("No WebAssembly provided for initialization");let r=await WebAssembly.instantiate(g4,{wbg:e});t.wasm=r.instance.exports,t.type="wasm"}catch(e){// if we have a valid supplied asm.js, return that
t.error=`FATAL: Unable to initialize @polkadot/wasm-crypto:: ${e.message}`,console.error(t.error)}return t};const vt=new class{__internal__createWasm;__internal__heap;__internal__wbg;__internal__cachegetInt32;__internal__cachegetUint8;__internal__heapNext;__internal__wasm;__internal__wasmError;__internal__wasmPromise;__internal__type;constructor(e){this.__internal__createWasm=e,this.__internal__cachegetInt32=null,this.__internal__cachegetUint8=null,this.__internal__heap=Array(32).fill(void 0).concat(void 0,null,!0,!1),this.__internal__heapNext=this.__internal__heap.length,this.__internal__type="none",this.__internal__wasm=null,this.__internal__wasmError=null,this.__internal__wasmPromise=null,this.__internal__wbg={...new gV(this)}}/** @description Returns the init error */get error(){return this.__internal__wasmError}/** @description Returns the init type */get type(){return this.__internal__type}/** @description Returns the created wasm interface */get wasm(){return this.__internal__wasm}/** @description Performs the wasm initialization */async init(e){(!this.__internal__wasmPromise||e)&&(this.__internal__wasmPromise=(e||this.__internal__createWasm)(this.__internal__wbg));let{error:t,type:r,wasm:n}=await this.__internal__wasmPromise;return this.__internal__type=r,this.__internal__wasm=n,this.__internal__wasmError=t,this.__internal__wasm}/**
     * @internal
     * @description Gets an object from the heap
     */getObject(e){return this.__internal__heap[e]}/**
     * @internal
     * @description Removes an object from the heap
     */dropObject(e){e<36||(this.__internal__heap[e]=this.__internal__heapNext,this.__internal__heapNext=e)}/**
     * @internal
     * @description Retrieves and removes an object to the heap
     */takeObject(e){let t=this.getObject(e);return this.dropObject(e),t}/**
     * @internal
     * @description Adds an object to the heap
     */addObject(e){this.__internal__heapNext===this.__internal__heap.length&&this.__internal__heap.push(this.__internal__heap.length+1);let t=this.__internal__heapNext;return this.__internal__heapNext=this.__internal__heap[t],this.__internal__heap[t]=e,t}/**
     * @internal
     * @description Retrieve an Int32 in the WASM interface
     */getInt32(){return(null===this.__internal__cachegetInt32||this.__internal__cachegetInt32.buffer!==this.__internal__wasm.memory.buffer)&&(this.__internal__cachegetInt32=new Int32Array(this.__internal__wasm.memory.buffer)),this.__internal__cachegetInt32}/**
     * @internal
     * @description Retrieve an Uint8Array in the WASM interface
     */getUint8(){return(null===this.__internal__cachegetUint8||this.__internal__cachegetUint8.buffer!==this.__internal__wasm.memory.buffer)&&(this.__internal__cachegetUint8=new Uint8Array(this.__internal__wasm.memory.buffer)),this.__internal__cachegetUint8}/**
     * @internal
     * @description Retrieves an Uint8Array in the WASM interface
     */getU8a(e,t){return this.getUint8().subarray(e/1,e/1+t)}/**
     * @internal
     * @description Retrieves a string in the WASM interface
     */getString(e,t){return gM(this.getU8a(e,t))}/**
     * @internal
     * @description Allocates an Uint8Array in the WASM interface
     */allocU8a(e){let t=this.__internal__wasm.__wbindgen_malloc(1*e.length);return this.getUint8().set(e,t/1),[t,e.length]}/**
     * @internal
     * @description Allocates a string in the WASM interface
     */allocString(e){return this.allocU8a(gv(e))}/**
     * @internal
     * @description Retrieves an Uint8Array from the WASM interface
     */resultU8a(){let e=this.getInt32()[2],t=this.getInt32()[3],r=this.getU8a(e,t).slice();return this.__internal__wasm.__wbindgen_free(e,1*t),r}/**
     * @internal
     * @description Retrieve a string from the WASM interface
     */resultString(){return gM(this.resultU8a())}}(gX.createWasm);/**
 * @internal
 * @description
 * This create an extenal interface function from the signature, all the while checking
 * the actual bridge wasm interface to ensure it has been initialized.
 *
 * This means that we can call it
 *
 *   withWasm(wasm: WasmCryptoInstance, a: number, b: string) => Uint8Array
 *
 * and in this case it will create an interface function with the signarure
 *
 *   (a: number, b: string) => Uint8Array
 */function vr(e){return(...t)=>{if(!vt.wasm)throw Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");return e(vt.wasm,...t)}}const vn=/*#__PURE__*/vr((e,t)=>(e.ext_secp_pub_compress(8,...vt.allocU8a(t)),vt.resultU8a())),va=/*#__PURE__*/vr((e,t)=>(e.ext_secp_pub_expand(8,...vt.allocU8a(t)),vt.resultU8a())),vi=/*#__PURE__*/vr((e,t,r,n)=>(e.ext_secp_recover(8,...vt.allocU8a(t),...vt.allocU8a(r),n),vt.resultU8a())),vo=/*#__PURE__*/vr((e,t,r,n)=>(e.ext_blake2b(8,...vt.allocU8a(t),...vt.allocU8a(r),n),vt.resultU8a())),vs=((e,t,r)=>(e.ext_hmac_sha256(8,...vt.allocU8a(t),...vt.allocU8a(r)),vt.resultU8a()),/*#__PURE__*/vr((e,t)=>(e.ext_keccak256(8,...vt.allocU8a(t)),vt.resultU8a()))),vl=/*#__PURE__*/vr((e,t)=>(e.ext_keccak512(8,...vt.allocU8a(t)),vt.resultU8a()));function vc(){return!!vt.wasm}const vu=Array(256),vd=Array(65536);for(let e=0;e<256;e++)vu[e]=e.toString(16).padStart(2,"0");for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)vd[t|r]=vu[e]+vu[r]}function vf(e,t=256,r,n){let a=Math.ceil(t/8),i=gT(e);return!gw||!n&&vc()?vo(i,gT(r),a):r?(0,sR.blake2b)(i,{dkLen:a,key:r}):(0,sR.blake2b)(i,{dkLen:a})}gv("SS58PRE");const vp={acala:["0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"],ajuna:["0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"],"aleph-node":["0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"],astar:["0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"],basilisk:["0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"],bifrost:["0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"],"bifrost-kusama":["0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"],bittensor:["0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"],centrifuge:["0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82","0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"],cere:["0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c"],composable:["0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"],darwinia:["0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"],"dock-mainnet":["0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae","0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"],edgeware:["0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"],enjin:["0xd8761d3c88f26dc12875c00d3165f7d67243d56fc85b4cf19937601a7916e5a9"],equilibrium:["0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"],genshiro:["0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"],hydradx:["0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d","0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc","0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9","0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047","0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"// Snakenet Gen1
],"interlay-parachain":["0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"],karura:["0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"],khala:["0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"],kulupu:["0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"],kusama:["0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe","0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636","0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"// Kusama CC1
],matrixchain:["0x3af4ff48ec76d2efc8476730f423ac07e25ad48f5f4c9dc39c778b164d808615"],nodle:["0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"],origintrail:["0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"],p3d:["0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"],parallel:["0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"],pendulum:["0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"],phala:["0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"],picasso:["0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc","0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"],polkadex:["0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"],polkadot:["0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"],polymesh:["0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"],quartz:["0xcd4d732201ebe5d6b014edda071c4203e16867305332301dc8d092044b28e554"],rococo:["0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e","0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897","0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770","0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff","0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a","0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9","0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779","0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215","0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9","0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147","0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd","0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"],sora:["0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"],stafi:["0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"],statemine:["0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"],statemint:["0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"],subsocial:["0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"],ternoa:["0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"],unique:["0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"],vtb:["0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f","0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"],westend:["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"],xxnetwork:["0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"],zeitgeist:["0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060"]},vh={centrifuge:"polkadot",kusama:"polkadot",polkadot:"polkadot",sora:"polkadot",statemine:"polkadot",statemint:"polkadot",westmint:"polkadot"},vb={acala:787,ajuna:354,"aleph-node":643,astar:810,bifrost:788,"bifrost-kusama":788,centrifuge:747,composable:354,darwinia:354,"dock-mainnet":594,edgeware:523,enjin:1155,equilibrium:99999997,genshiro:99999996,hydradx:354,"interlay-parachain":354,karura:686,khala:434,kusama:434,matrixchain:1155,nodle:1003,origintrail:354,parallel:354,pendulum:354,phala:354,picasso:434,polkadex:799,polkadot:354,polymesh:595,quartz:631,sora:617,stafi:907,statemine:434,statemint:354,ternoa:995,unique:661,vtb:694,xxnetwork:1955,zeitgeist:354},vy={"":!0,"cess-testnet":!0,"dock-testnet":!0,jupiter:!0,"mathchain-testnet":!0,p3dt:!0,subspace_testnet:!0,"zero-alphaville":!0},vm=[0,2,42],vg=["testnet"],vv=[{prefix:0,network:"polkadot",displayName:"Polkadot Relay Chain",symbols:["DOT"],decimals:[10],standardAccount:"*25519",website:"https://polkadot.network"},{prefix:1,network:"BareSr25519",displayName:"Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",symbols:[],decimals:[],standardAccount:"Sr25519",website:null},{prefix:2,network:"kusama",displayName:"Kusama Relay Chain",symbols:["KSM"],decimals:[12],standardAccount:"*25519",website:"https://kusama.network"},{prefix:3,network:"BareEd25519",displayName:"Bare 32-bit Ed25519 public key.",symbols:[],decimals:[],standardAccount:"Ed25519",website:null},{prefix:4,network:"katalchain",displayName:"Katal Chain",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:5,network:"astar",displayName:"Astar Network",symbols:["ASTR"],decimals:[18],standardAccount:"*25519",website:"https://astar.network"},{prefix:6,network:"bifrost",displayName:"Bifrost",symbols:["BNC"],decimals:[12],standardAccount:"*25519",website:"https://bifrost.finance/"},{prefix:7,network:"edgeware",displayName:"Edgeware",symbols:["EDG"],decimals:[18],standardAccount:"*25519",website:"https://edgewa.re"},{prefix:8,network:"karura",displayName:"Karura",symbols:["KAR"],decimals:[12],standardAccount:"*25519",website:"https://karura.network/"},{prefix:9,network:"reynolds",displayName:"Laminar Reynolds Canary",symbols:["REY"],decimals:[18],standardAccount:"*25519",website:"http://laminar.network/"},{prefix:10,network:"acala",displayName:"Acala",symbols:["ACA"],decimals:[12],standardAccount:"*25519",website:"https://acala.network/"},{prefix:11,network:"laminar",displayName:"Laminar",symbols:["LAMI"],decimals:[18],standardAccount:"*25519",website:"http://laminar.network/"},{prefix:12,network:"polymesh",displayName:"Polymesh",symbols:["POLYX"],decimals:[6],standardAccount:"*25519",website:"https://polymath.network/"},{prefix:13,network:"integritee",displayName:"Integritee",symbols:["TEER"],decimals:[12],standardAccount:"*25519",website:"https://integritee.network"},{prefix:14,network:"totem",displayName:"Totem",symbols:["TOTEM"],decimals:[0],standardAccount:"*25519",website:"https://totemaccounting.com"},{prefix:15,network:"synesthesia",displayName:"Synesthesia",symbols:["SYN"],decimals:[12],standardAccount:"*25519",website:"https://synesthesia.network/"},{prefix:16,network:"kulupu",displayName:"Kulupu",symbols:["KLP"],decimals:[12],standardAccount:"*25519",website:"https://kulupu.network/"},{prefix:17,network:"dark",displayName:"Dark Mainnet",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:18,network:"darwinia",displayName:"Darwinia Network",symbols:["RING"],decimals:[18],standardAccount:"secp256k1",website:"https://darwinia.network"},{prefix:19,network:"watr",displayName:"Watr Protocol",symbols:["WATR"],decimals:[18],standardAccount:"*25519",website:"https://www.watr.org"},{prefix:20,network:"stafi",displayName:"Stafi",symbols:["FIS"],decimals:[12],standardAccount:"*25519",website:"https://stafi.io"},{prefix:21,network:"karmachain",displayName:"Karmacoin",symbols:["KCOIN"],decimals:[6],standardAccount:"*25519",website:"https://karmaco.in"},{prefix:22,network:"dock-pos-mainnet",displayName:"Dock Mainnet",symbols:["DCK"],decimals:[6],standardAccount:"*25519",website:"https://dock.io"},{prefix:23,network:"shift",displayName:"ShiftNrg",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:24,network:"zero",displayName:"ZERO",symbols:["ZERO"],decimals:[18],standardAccount:"*25519",website:"https://zero.io"},{prefix:25,network:"zero-alphaville",displayName:"ZERO Alphaville",symbols:["ZERO"],decimals:[18],standardAccount:"*25519",website:"https://zero.io"},{prefix:26,network:"jupiter",displayName:"Jupiter",symbols:["jDOT"],decimals:[10],standardAccount:"*25519",website:"https://jupiter.patract.io"},{prefix:27,network:"kabocha",displayName:"Kabocha",symbols:["KAB"],decimals:[12],standardAccount:"*25519",website:"https://kabocha.network"},{prefix:28,network:"subsocial",displayName:"Subsocial",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:29,network:"cord",displayName:"CORD Network",symbols:["DHI","WAY"],decimals:[12,12],standardAccount:"*25519",website:"https://cord.network/"},{prefix:30,network:"phala",displayName:"Phala Network",symbols:["PHA"],decimals:[12],standardAccount:"*25519",website:"https://phala.network"},{prefix:31,network:"litentry",displayName:"Litentry Network",symbols:["LIT"],decimals:[12],standardAccount:"*25519",website:"https://litentry.com/"},{prefix:32,network:"robonomics",displayName:"Robonomics",symbols:["XRT"],decimals:[9],standardAccount:"*25519",website:"https://robonomics.network"},{prefix:33,network:"datahighway",displayName:"DataHighway",symbols:[],decimals:[],standardAccount:"*25519",website:null},{prefix:34,network:"ares",displayName:"Ares Protocol",symbols:["ARES"],decimals:[12],standardAccount:"*25519",website:"https://www.aresprotocol.com/"},{prefix:35,network:"vln",displayName:"Valiu Liquidity Network",symbols:["USDv"],decimals:[15],standardAccount:"*25519",website:"https://valiu.com/"},{prefix:36,network:"centrifuge",displayName:"Centrifuge Chain",symbols:["CFG"],decimals:[18],standardAccount:"*25519",website:"https://centrifuge.io/"},{prefix:37,network:"nodle",displayName:"Nodle Chain",symbols:["NODL"],decimals:[11],standardAccount:"*25519",website:"https://nodle.io/"},{prefix:38,network:"kilt",displayName:"KILT Spiritnet",symbols:["KILT"],decimals:[15],standardAccount:"*25519",website:"https://kilt.io/"},{prefix:39,network:"mathchain",displayName:"MathChain mainnet",symbols:["MATH"],decimals:[18],standardAccount:"*25519",website:"https://mathwallet.org"},{prefix:40,network:"mathchain-testnet",displayName:"MathChain testnet",symbols:["MATH"],decimals:[18],standardAccount:"*25519",website:"https://mathwallet.org"},{prefix:41,network:"polimec",displayName:"Polimec Protocol",symbols:["PLMC"],decimals:[10],standardAccount:"*25519",website:"https://www.polimec.org/"},{prefix:42,network:"substrate",displayName:"Substrate",symbols:[],decimals:[],standardAccount:"*25519",website:"https://substrate.io/"},{prefix:43,network:"BareSecp256k1",displayName:"Bare 32-bit ECDSA SECP-256k1 public key.",symbols:[],decimals:[],standardAccount:"secp256k1",website:null},{prefix:44,network:"chainx",displayName:"ChainX",symbols:["PCX"],decimals:[8],standardAccount:"*25519",website:"https://chainx.org/"},{prefix:45,network:"uniarts",displayName:"UniArts Network",symbols:["UART","UINK"],decimals:[12,12],standardAccount:"*25519",website:"https://uniarts.me"},{prefix:46,network:"reserved46",displayName:"This prefix is reserved.",symbols:[],decimals:[],standardAccount:null,website:null},{prefix:47,network:"reserved47",displayName:"This prefix is reserved.",symbols:[],decimals:[],standardAccount:null,website:null},{prefix:48,network:"neatcoin",displayName:"Neatcoin Mainnet",symbols:["NEAT"],decimals:[12],standardAccount:"*25519",website:"https://neatcoin.org"},{prefix:49,network:"picasso",displayName:"Picasso",symbols:["PICA"],decimals:[12],standardAccount:"*25519",website:"https://picasso.composable.finance"},{prefix:50,network:"composable",displayName:"Composable Finance",symbols:["LAYR"],decimals:[12],standardAccount:"*25519",website:"https://composable.finance"},{prefix:51,network:"oak",displayName:"OAK Network",symbols:["OAK","TUR"],decimals:[10,10],standardAccount:"*25519",website:"https://oak.tech"},{prefix:52,network:"KICO",displayName:"KICO",symbols:["KICO"],decimals:[14],standardAccount:"*25519",website:"https://dico.io"},{prefix:53,network:"DICO",displayName:"DICO",symbols:["DICO"],decimals:[14],standardAccount:"*25519",website:"https://dico.io"},{prefix:54,network:"cere",displayName:"Cere Network",symbols:["CERE"],decimals:[10],standardAccount:"*25519",website:"https://cere.network"},{prefix:55,network:"xxnetwork",displayName:"xx network",symbols:["XX"],decimals:[9],standardAccount:"*25519",website:"https://xx.network"},{prefix:56,network:"pendulum",displayName:"Pendulum chain",symbols:["PEN"],decimals:[12],standardAccount:"*25519",website:"https://pendulumchain.org/"},{prefix:57,network:"amplitude",displayName:"Amplitude chain",symbols:["AMPE"],decimals:[12],standardAccount:"*25519",website:"https://pendulumchain.org/"},{prefix:58,network:"eternal-civilization",displayName:"Eternal Civilization",symbols:["ECC"],decimals:[12],standardAccount:"*25519",website:"http://www.ysknfr.cn/"},{prefix:63,network:"hydradx",displayName:"HydraDX",symbols:["HDX"],decimals:[12],standardAccount:"*25519",website:"https://hydradx.io"},{prefix:65,network:"aventus",displayName:"Aventus Mainnet",symbols:["AVT"],decimals:[18],standardAccount:"*25519",website:"https://aventus.io"},{prefix:66,network:"crust",displayName:"Crust Network",symbols:["CRU"],decimals:[12],standardAccount:"*25519",website:"https://crust.network"},{prefix:67,network:"genshiro",displayName:"Genshiro Network",symbols:["GENS","EQD","LPT0"],decimals:[9,9,9],standardAccount:"*25519",website:"https://genshiro.equilibrium.io"},{prefix:68,network:"equilibrium",displayName:"Equilibrium Network",symbols:["EQ"],decimals:[9],standardAccount:"*25519",website:"https://equilibrium.io"},{prefix:69,network:"sora",displayName:"SORA Network",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:71,network:"p3d",displayName:"3DP network",symbols:["P3D"],decimals:[12],standardAccount:"*25519",website:"https://3dpass.org"},{prefix:72,network:"p3dt",displayName:"3DP test network",symbols:["P3Dt"],decimals:[12],standardAccount:"*25519",website:"https://3dpass.org"},{prefix:73,network:"zeitgeist",displayName:"Zeitgeist",symbols:["ZTG"],decimals:[10],standardAccount:"*25519",website:"https://zeitgeist.pm"},{prefix:77,network:"manta",displayName:"Manta network",symbols:["MANTA"],decimals:[18],standardAccount:"*25519",website:"https://manta.network"},{prefix:78,network:"calamari",displayName:"Calamari: Manta Canary Network",symbols:["KMA"],decimals:[12],standardAccount:"*25519",website:"https://manta.network"},{prefix:81,network:"sora_dot_para",displayName:"SORA Polkadot Parachain",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:88,network:"polkadex",displayName:"Polkadex Mainnet",symbols:["PDEX"],decimals:[12],standardAccount:"*25519",website:"https://polkadex.trade"},{prefix:89,network:"polkadexparachain",displayName:"Polkadex Parachain",symbols:["PDEX"],decimals:[12],standardAccount:"*25519",website:"https://polkadex.trade"},{prefix:90,network:"frequency",displayName:"Frequency",symbols:["FRQCY"],decimals:[8],standardAccount:"*25519",website:"https://www.frequency.xyz"},{prefix:92,network:"anmol",displayName:"Anmol Network",symbols:["ANML"],decimals:[18],standardAccount:"*25519",website:"https://anmol.network/"},{prefix:93,network:"fragnova",displayName:"Fragnova Network",symbols:["NOVA"],decimals:[12],standardAccount:"*25519",website:"https://fragnova.com"},{prefix:98,network:"polkasmith",displayName:"PolkaSmith Canary Network",symbols:["PKS"],decimals:[18],standardAccount:"*25519",website:"https://polkafoundry.com"},{prefix:99,network:"polkafoundry",displayName:"PolkaFoundry Network",symbols:["PKF"],decimals:[18],standardAccount:"*25519",website:"https://polkafoundry.com"},{prefix:100,network:"ibtida",displayName:"Anmol Network Ibtida Canary network",symbols:["IANML"],decimals:[18],standardAccount:"*25519",website:"https://anmol.network/"},{prefix:101,network:"origintrail-parachain",displayName:"OriginTrail Parachain",symbols:["OTP"],decimals:[12],standardAccount:"*25519",website:"https://parachain.origintrail.io/"},{prefix:105,network:"pontem-network",displayName:"Pontem Network",symbols:["PONT"],decimals:[10],standardAccount:"*25519",website:"https://pontem.network"},{prefix:110,network:"heiko",displayName:"Heiko",symbols:["HKO"],decimals:[12],standardAccount:"*25519",website:"https://parallel.fi/"},{prefix:113,network:"integritee-incognito",displayName:"Integritee Incognito",symbols:[],decimals:[],standardAccount:"*25519",website:"https://integritee.network"},{prefix:117,network:"tinker",displayName:"Tinker",symbols:["TNKR"],decimals:[12],standardAccount:"*25519",website:"https://invarch.network"},{prefix:126,network:"joystream",displayName:"Joystream",symbols:["JOY"],decimals:[10],standardAccount:"*25519",website:"https://www.joystream.org"},{prefix:128,network:"clover",displayName:"Clover Finance",symbols:["CLV"],decimals:[18],standardAccount:"*25519",website:"https://clover.finance"},{prefix:129,network:"dorafactory-polkadot",displayName:"Dorafactory Polkadot Network",symbols:["DORA"],decimals:[12],standardAccount:"*25519",website:"https://dorafactory.org"},{prefix:131,network:"litmus",displayName:"Litmus Network",symbols:["LIT"],decimals:[12],standardAccount:"*25519",website:"https://litentry.com/"},{prefix:136,network:"altair",displayName:"Altair",symbols:["AIR"],decimals:[18],standardAccount:"*25519",website:"https://centrifuge.io/"},{prefix:137,network:"vara",displayName:"Vara Network",symbols:["VARA"],decimals:[12],standardAccount:"*25519",website:"https://vara.network/"},{prefix:172,network:"parallel",displayName:"Parallel",symbols:["PARA"],decimals:[12],standardAccount:"*25519",website:"https://parallel.fi/"},{prefix:252,network:"social-network",displayName:"Social Network",symbols:["NET"],decimals:[18],standardAccount:"*25519",website:"https://social.network"},{prefix:255,network:"quartz_mainnet",displayName:"QUARTZ by UNIQUE",symbols:["QTZ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:268,network:"pioneer_network",displayName:"Pioneer Network by Bit.Country",symbols:["NEER"],decimals:[18],standardAccount:"*25519",website:"https://bit.country"},{prefix:420,network:"sora_kusama_para",displayName:"SORA Kusama Parachain",symbols:["XOR"],decimals:[18],standardAccount:"*25519",website:"https://sora.org"},{prefix:440,network:"allfeat_network",displayName:"Allfeat Network",symbols:["AFT"],decimals:[12],standardAccount:"*25519",website:"https://allfeat.network"},{prefix:666,network:"metaquity_network",displayName:"Metaquity Network",symbols:["MQTY"],decimals:[18],standardAccount:"*25519",website:"https://metaquity.xyz/"},{prefix:777,network:"curio",displayName:"Curio",symbols:["CGT"],decimals:[18],standardAccount:"*25519",website:"https://parachain.capitaldex.exchange/"},{prefix:789,network:"geek",displayName:"GEEK Network",symbols:["GEEK"],decimals:[18],standardAccount:"*25519",website:"https://geek.gl"},{prefix:995,network:"ternoa",displayName:"Ternoa",symbols:["CAPS"],decimals:[18],standardAccount:"*25519",website:"https://www.ternoa.network"},{prefix:1110,network:"efinity",displayName:"Efinity",symbols:["EFI"],decimals:[18],standardAccount:"*25519",website:"https://efinity.io/"},{prefix:1221,network:"peaq",displayName:"Peaq Network",symbols:["PEAQ"],decimals:[18],standardAccount:"Sr25519",website:"https://www.peaq.network/"},{prefix:1222,network:"krest",displayName:"Krest Network",symbols:["KREST"],decimals:[18],standardAccount:"Sr25519",website:"https://www.peaq.network/"},{prefix:1284,network:"moonbeam",displayName:"Moonbeam",symbols:["GLMR"],decimals:[18],standardAccount:"secp256k1",website:"https://moonbeam.network"},{prefix:1285,network:"moonriver",displayName:"Moonriver",symbols:["MOVR"],decimals:[18],standardAccount:"secp256k1",website:"https://moonbeam.network"},{prefix:1328,network:"ajuna",displayName:"Ajuna Network",symbols:["AJUN"],decimals:[12],standardAccount:"*25519",website:"https://ajuna.io"},{prefix:1337,network:"bajun",displayName:"Bajun Network",symbols:["BAJU"],decimals:[12],standardAccount:"*25519",website:"https://ajuna.io"},{prefix:1516,network:"societal",displayName:"Societal",symbols:["SCTL"],decimals:[12],standardAccount:"*25519",website:"https://www.sctl.xyz"},{prefix:1985,network:"seals",displayName:"Seals Network",symbols:["SEAL"],decimals:[9],standardAccount:"*25519",website:"https://seals.app"},{prefix:2007,network:"kapex",displayName:"Kapex",symbols:["KAPEX"],decimals:[12],standardAccount:"*25519",website:"https://totemaccounting.com"},{prefix:2009,network:"cloudwalk_mainnet",displayName:"CloudWalk Network Mainnet",symbols:["CWN"],decimals:[18],standardAccount:"*25519",website:"https://explorer.mainnet.cloudwalk.io"},{prefix:2021,network:"logion",displayName:"logion network",symbols:["LGNT"],decimals:[18],standardAccount:"*25519",website:"https://logion.network"},{prefix:2032,network:"interlay",displayName:"Interlay",symbols:["INTR"],decimals:[10],standardAccount:"*25519",website:"https://interlay.io/"},{prefix:2092,network:"kintsugi",displayName:"Kintsugi",symbols:["KINT"],decimals:[12],standardAccount:"*25519",website:"https://interlay.io/"},{prefix:2106,network:"bitgreen",displayName:"Bitgreen",symbols:["BBB"],decimals:[18],standardAccount:"*25519",website:"https://bitgreen.org/"},{prefix:2112,network:"chainflip",displayName:"Chainflip",symbols:["FLIP"],decimals:[18],standardAccount:"*25519",website:"https://chainflip.io/"},{prefix:2199,network:"moonsama",displayName:"Moonsama",symbols:["SAMA"],decimals:[18],standardAccount:"secp256k1",website:"https://moonsama.com"},{prefix:2206,network:"ICE",displayName:"ICE Network",symbols:["ICY"],decimals:[18],standardAccount:"*25519",website:"https://icenetwork.io"},{prefix:2207,network:"SNOW",displayName:"SNOW: ICE Canary Network",symbols:["ICZ"],decimals:[18],standardAccount:"*25519",website:"https://icenetwork.io"},{prefix:2254,network:"subspace_testnet",displayName:"Subspace testnet",symbols:["tSSC"],decimals:[18],standardAccount:"*25519",website:"https://subspace.network"},{prefix:3333,network:"peerplays",displayName:"Peerplays",symbols:["PPY"],decimals:[18],standardAccount:"secp256k1",website:"https://www.peerplays.com/"},{prefix:4450,network:"g1",displayName:"Ğ1",symbols:["G1"],decimals:[2],standardAccount:"*25519",website:"https://duniter.org"},{prefix:5234,network:"humanode",displayName:"Humanode Network",symbols:["HMND"],decimals:[18],standardAccount:"*25519",website:"https://humanode.io"},{prefix:5845,network:"tangle",displayName:"Tangle Network",symbols:["TNT"],decimals:[18],standardAccount:"*25519",website:"https://www.tangle.tools/"},{prefix:6094,network:"subspace",displayName:"Subspace",symbols:["SSC"],decimals:[18],standardAccount:"*25519",website:"https://subspace.network"},{prefix:7007,network:"tidefi",displayName:"Tidefi",symbols:["TDFY"],decimals:[12],standardAccount:"*25519",website:"https://tidefi.com"},{prefix:7013,network:"gm",displayName:"GM",symbols:["FREN","GM","GN"],decimals:[12,0,0],standardAccount:"*25519",website:"https://gmordie.com"},{prefix:7306,network:"krigan",displayName:"Krigan Network",symbols:["KRGN"],decimals:[9],standardAccount:"*25519",website:"https://krigan.network"},{prefix:7391,network:"unique_mainnet",displayName:"Unique Network",symbols:["UNQ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:8866,network:"golden_gate",displayName:"Golden Gate",symbols:["GGX"],decimals:[18],standardAccount:"*25519",website:"https://ggxchain.io/"},{prefix:8883,network:"sapphire_mainnet",displayName:"Sapphire by Unique",symbols:["QTZ"],decimals:[18],standardAccount:"*25519",website:"https://unique.network"},{prefix:8886,network:"golden_gate_sydney",displayName:"Golden Gate Sydney",symbols:["GGXT"],decimals:[18],standardAccount:"*25519",website:"https://ggxchain.io/"},{prefix:9072,network:"hashed",displayName:"Hashed Network",symbols:["HASH"],decimals:[18],standardAccount:"*25519",website:"https://hashed.network"},{prefix:9807,network:"dentnet",displayName:"DENTNet",symbols:["DENTX"],decimals:[18],standardAccount:"*25519",website:"https://www.dentnet.io"},{prefix:9935,network:"t3rn",displayName:"t3rn",symbols:["TRN"],decimals:[12],standardAccount:"*25519",website:"https://t3rn.io/"},{prefix:10041,network:"basilisk",displayName:"Basilisk",symbols:["BSX"],decimals:[12],standardAccount:"*25519",website:"https://bsx.fi"},{prefix:11330,network:"cess-testnet",displayName:"CESS Testnet",symbols:["TCESS"],decimals:[12],standardAccount:"*25519",website:"https://cess.cloud"},{prefix:11331,network:"cess",displayName:"CESS",symbols:["CESS"],decimals:[12],standardAccount:"*25519",website:"https://cess.cloud"},{prefix:11486,network:"luhn",displayName:"Luhn Network",symbols:["LUHN"],decimals:[18],standardAccount:"*25519",website:"https://luhn.network"},{prefix:11820,network:"contextfree",displayName:"Automata ContextFree",symbols:["CTX"],decimals:[18],standardAccount:"*25519",website:"https://ata.network"},{prefix:12155,network:"impact",displayName:"Impact Protocol Network",symbols:["BSTY"],decimals:[18],standardAccount:"*25519",website:"https://impactprotocol.network/"},{prefix:12191,network:"nftmart",displayName:"NFTMart",symbols:["NMT"],decimals:[12],standardAccount:"*25519",website:"https://nftmart.io"},{prefix:13116,network:"bittensor",displayName:"Bittensor",symbols:["TAO"],decimals:[9],standardAccount:"*25519",website:"https://bittensor.com"},{prefix:14697,network:"goro",displayName:"GORO Network",symbols:["GORO"],decimals:[9],standardAccount:"*25519",website:"https://goro.network"}].map(function(e){let t=e.network||"",r=t.replace(/_/g,"-").split("-");return(// ledger additions
e.slip44=vb[t],e.hasLedgerSupport=!!e.slip44,// general items
e.genesisHash=vp[t]||[],e.icon=vh[t]||"substrate",// filtering
e.isTestnet=!!vy[t]||vg.includes(r[r.length-1]),e.isIgnored=e.isTestnet||!(e.standardAccount&&e.decimals?.length&&e.symbols?.length)&&42!==e.prefix,e)}),vx=vv.filter(function(e){return!e.isIgnored&&!!e.network}).sort(function(e,t){let r=vm.includes(e.prefix),n=vm.includes(t.prefix);return r===n?r?0:e.displayName.localeCompare(t.displayName):r?-1:1});vx.filter(function({genesisHash:e,prefix:t}){return!!e.length||42===t}),vx.map(({prefix:e})=>e);var vw={};Object.defineProperty(vw,"__esModule",{value:!0}),vw.hash_to_ristretto255=vw.hashToRistretto255=vw.RistrettoPoint=vw.encodeToCurve=vw.hashToCurve=vw.edwardsToMontgomeryPriv=vw.edwardsToMontgomery=vw.edwardsToMontgomeryPub=vw.x25519=vw.ed25519ph=vw.ed25519ctx=vw.ed25519=vw.ED25519_TORSION_SUBGROUP=void 0;var vP={};Object.defineProperty(vP,"__esModule",{value:!0}),vP.twistedEdwards=void 0;var vO=A("5As9X"),vT=(A("c4RgN"),A("c4RgN")),vz=A("7QuGE");// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const vk=BigInt(0),vL=BigInt(1),vE=BigInt(2),vN=BigInt(8),vS={zip215:!0};vP.twistedEdwards=// It is not generic twisted curve for now, but ed25519/ed448 generic implementation
function(e){let t=function(e){let t=(0,vz.validateBasic)(e);// Set defaults
return vT.validateObject(e,{hash:"function",a:"bigint",d:"bigint",randomBytes:"function"},{adjustScalarBytes:"function",domain:"function",uvRatio:"function",mapToCurve:"function"}),Object.freeze({...t})}(e),{Fp:r,n:n,prehash:a,hash:i,randomBytes:o,nByteLength:s,h:l}=t,c=vE<<BigInt(8*s)-vL,u=r.create,d=t.uvRatio||((e,t)=>{try{return{isValid:!0,value:r.sqrt(e*r.inv(t))}}catch(e){return{isValid:!1,value:vk}}}),f=t.adjustScalarBytes||(e=>e),p=t.domain||((e,t,r)=>{if(t.length||r)throw Error("Contexts/pre-hash are not supported");return e}),h=e=>"bigint"==typeof e&&vk<e,b=(e,t)=>h(e)&&h(t)&&e<t,y=e=>e===vk||b(e,c);function m(e,t){// n in [1..max-1]
if(b(e,t))return e;throw Error(`Expected valid scalar < ${t}, got ${typeof e} ${e}`)}function g(e){// n in [0..CURVE_ORDER-1]
return e===vk?e:m(e,n);// GE = prime subgroup, not full group
}let v=new Map;function x(e){if(!(e instanceof w))throw Error("ExtendedPoint expected")}// Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).
// https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates
class w{constructor(e,t,r,n){if(this.ex=e,this.ey=t,this.ez=r,this.et=n,!y(e))throw Error("x required");if(!y(t))throw Error("y required");if(!y(r))throw Error("z required");if(!y(n))throw Error("t required")}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static fromAffine(e){if(e instanceof w)throw Error("extended point not allowed");let{x:t,y:r}=e||{};if(!y(t)||!y(r))throw Error("invalid affine point");return new w(t,r,vL,u(t*r))}static normalizeZ(e){let t=r.invertBatch(e.map(e=>e.ez));return e.map((e,r)=>e.toAffine(t[r])).map(w.fromAffine)}// "Private method", don't use it directly
_setWindowSize(e){this._WINDOW_SIZE=e,v.delete(this)}// Not required for fromHex(), which always creates valid points.
// Could be useful for fromAffine().
assertValidity(){let{a:e,d:r}=t;if(this.is0())throw Error("bad point: ZERO");// TODO: optimize, with vars below?
// Equation in affine coordinates: ax² + y² = 1 + dx²y²
// Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²
let{ex:n,ey:a,ez:i,et:o}=this,s=u(n*n),l=u(a*a),c=u(i*i),d=u(c*c),f=u(s*e),p=u(c*u(f+l)),h=u(d+u(r*u(s*l)));if(p!==h)throw Error("bad point: equation left != right (1)");// In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T
let b=u(n*a),y=u(i*o);if(b!==y)throw Error("bad point: equation left != right (2)")}// Compare one point to another.
equals(e){x(e);let{ex:t,ey:r,ez:n}=this,{ex:a,ey:i,ez:o}=e,s=u(t*o),l=u(a*n),c=u(r*o),d=u(i*n);return s===l&&c===d}is0(){return this.equals(w.ZERO)}negate(){// Flips point sign to a negative one (-x, y in affine coords)
return new w(u(-this.ex),this.ey,this.ez,u(-this.et))}// Fast algo for doubling Extended Point.
// https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd
// Cost: 4M + 4S + 1*a + 6add + 1*2.
double(){let{a:e}=t,{ex:r,ey:n,ez:a}=this,i=u(r*r),o=u(n*n),s=u(vE*u(a*a)),l=u(e*i),c=r+n,d=u(u(c*c)-i-o),f=l+o,p=f-s,h=l-o,b=u(d*p),y=u(f*h),m=u(d*h),g=u(p*f);return new w(b,y,g,m)}// Fast algo for adding 2 Extended Points.
// https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd
// Cost: 9M + 1*a + 1*d + 7add.
add(e){x(e);let{a:r,d:n}=t,{ex:a,ey:i,ez:o,et:s}=this,{ex:l,ey:c,ez:d,et:f}=e;// Faster algo for adding 2 Extended Points when curve's a=-1.
// http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4
// Cost: 8M + 8add + 2*2.
// Note: It does not check whether the `other` point is valid.
if(r===BigInt(-1)){let e=u((i-a)*(c+l)),t=u((i+a)*(c-l)),r=u(t-e);if(r===vk)return this.double();// Same point. Tests say it doesn't affect timing
let n=u(o*vE*f),p=u(s*vE*d),h=p+n,b=t+e,y=p-n,m=u(h*r),g=u(b*y),v=u(h*y),x=u(r*b);return new w(m,g,x,v)}let p=u(a*l),h=u(i*c),b=u(s*n*f),y=u(o*d),m=u((a+i)*(l+c)-p-h),g=y-b,v=y+b,P=u(h-r*p),O=u(m*g),T=u(v*P),z=u(m*P),k=u(g*v);// A = X1*X2
return new w(O,T,k,z)}subtract(e){return this.add(e.negate())}wNAF(e){return T.wNAFCached(this,v,e,w.normalizeZ)}// Constant-time multiplication.
multiply(e){let{p:t,f:r}=this.wNAF(m(e,n));return w.normalizeZ([t,r])[0]}// Non-constant-time multiplication. Uses double-and-add algorithm.
// It's faster, but should only be used when you don't care about
// an exposed private key e.g. sig verification.
// Does NOT allow scalars higher than CURVE.n.
multiplyUnsafe(e){let t=g(e);// 0 <= scalar < CURVE.n
return t===vk?O:this.equals(O)||t===vL?this:this.equals(P)?this.wNAF(t).p:T.unsafeLadder(this,t)}// Checks if point is of small order.
// If you add something to small order point, you will have "dirty"
// point with torsion component.
// Multiplies point by cofactor and checks if the result is 0.
isSmallOrder(){return this.multiplyUnsafe(l).is0()}// Multiplies point by curve order and checks if the result is 0.
// Returns `false` is the point is dirty.
isTorsionFree(){return T.unsafeLadder(this,n).is0()}// Converts Extended point to default (x, y) coordinates.
// Can accept precomputed Z^-1 - for example, from invertBatch.
toAffine(e){let{ex:t,ey:n,ez:a}=this,i=this.is0();null==e&&(e=i?vN:r.inv(a));// 8 was chosen arbitrarily
let o=u(t*e),s=u(n*e),l=u(a*e);if(i)return{x:vk,y:vL};if(l!==vL)throw Error("invZ was invalid");return{x:o,y:s}}clearCofactor(){let{h:e}=t;return e===vL?this:this.multiplyUnsafe(e)}// Converts hash string or Uint8Array to Point.
// Uses algo from RFC8032 5.1.3.
static fromHex(e,n=!1){let{d:a,a:i}=t,o=r.BYTES;e=(0,vT.ensureBytes)("pointHex",e,o);let s=e.slice(),l=e[o-1];// copy again, we'll manipulate it
s[o-1]=-129&l;let f=vT.bytesToNumberLE(s);f===vk||(n?m(f,c):m(f,r.ORDER));// Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:
// ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)
let p=u(f*f),h=u(p-vL),b=u(a*p-i),{isValid:y,value:g}=d(h,b);// denominator is always non-0 mod p.
if(!y)throw Error("Point.fromHex: invalid y coordinate");let v=(g&vL)===vL,x=(128&l)!=0;// There are 2 square roots. Use x_0 bit to select proper
if(!n&&g===vk&&x)throw Error("Point.fromHex: x=0 and x_0=1");return x!==v&&(g=u(-g)),w.fromAffine({x:g,y:f})}static fromPrivateKey(e){return L(e).point}toRawBytes(){let{x:e,y:t}=this.toAffine(),n=vT.numberToBytesLE(t,r.BYTES);return n[n.length-1]|=e&vL?128:0,n;// and use the last byte to encode sign of x
}toHex(){return vT.bytesToHex(this.toRawBytes());// Same as toRawBytes, but returns string.
}}w.BASE=new w(t.Gx,t.Gy,vL,u(t.Gx*t.Gy)),w.ZERO=new w(vk,vL,vL,vk);let{BASE:P,ZERO:O}=w,T=(0,vz.wNAF)(w,8*s);function z(e){return(0,vO.mod)(e,n)}// Little-endian SHA512 with modulo n
function k(e){return z(vT.bytesToNumberLE(e))}/** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */function L(e){e=(0,vT.ensureBytes)("private key",e,s);// Hash private key with curve's hash function to produce uniformingly random input
// Check byte lengths: ensure(64, h(ensure(32, key)))
let t=(0,vT.ensureBytes)("hashed private key",i(e),2*s),r=f(t.slice(0,s)),n=t.slice(s,2*s),a=k(r),o=P.multiply(a),l=o.toRawBytes();return{head:r,prefix:n,scalar:a,point:o,pointBytes:l}}// int('LE', SHA512(dom2(F, C) || msgs)) mod N
function E(e=new Uint8Array,...t){let r=vT.concatBytes(...t);return k(i(p(r,(0,vT.ensureBytes)("context",e),!!a)))}return P._setWindowSize(8),{CURVE:t,getPublicKey:// Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared
function(e){return L(e).pointBytes},sign:/** Signs message with privateKey. RFC8032 5.1.6 */function(e,t,n={}){e=(0,vT.ensureBytes)("message",e),a&&(e=a(e));let{prefix:i,scalar:o,pointBytes:l}=L(t),c=E(n.context,i,e),u=P.multiply(c).toRawBytes(),d=E(n.context,u,l,e),f=z(c+d*o);g(f);let p=vT.concatBytes(u,vT.numberToBytesLE(f,r.BYTES));return(0,vT.ensureBytes)("result",p,2*s);// 64-byte signature
},verify:function(e,t,n,i=vS){let o,s,l;let{context:c,zip215:u}=i,d=r.BYTES;e=(0,vT.ensureBytes)("signature",e,2*d),t=(0,vT.ensureBytes)("message",t),a&&(t=a(t));let f=vT.bytesToNumberLE(e.slice(d,2*d));try{o=w.fromHex(n,u),s=w.fromHex(e.slice(0,d),u),l=P.multiplyUnsafe(f)}catch(e){return!1}if(!u&&o.isSmallOrder())return!1;let p=E(c,s.toRawBytes(),o.toRawBytes(),t),h=s.add(o.multiplyUnsafe(p));// [8][S]B = [8]R + [8][k]A'
return h.subtract(l).clearCofactor().equals(w.ZERO)},ExtendedPoint:w,utils:{getExtendedPublicKey:L,// ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.
randomPrivateKey:()=>o(r.BYTES),/**
         * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT
         * values. This slows down first getPublicKey() by milliseconds (see Speed section),
         * but allows to speed-up subsequent getPublicKey() calls up to 20x.
         * @param windowSize 2, 4, 8, 16
         */precompute:(e=8,t=w.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)}}};var vM={};Object.defineProperty(vM,"__esModule",{value:!0}),vM.montgomery=void 0;var vO=A("5As9X"),vT=A("c4RgN");const vj=BigInt(0),vH=BigInt(1);vM.montgomery=// NOTE: not really montgomery curve, just bunch of very specific methods for X25519/X448 (RFC 7748, https://www.rfc-editor.org/rfc/rfc7748)
// Uses only one coordinate instead of two
function(e){let t=((0,vT.validateObject)(e,{a:"bigint"},{montgomeryBits:"isSafeInteger",nByteLength:"isSafeInteger",adjustScalarBytes:"function",domain:"function",powPminus2:"function",Gu:"bigint"}),Object.freeze({...e})),{P:r}=t,n=e=>(0,vO.mod)(e,r),a=t.montgomeryBits,i=Math.ceil(a/8),o=t.nByteLength,s=t.adjustScalarBytes||(e=>e),l=t.powPminus2||(e=>(0,vO.pow)(e,r-BigInt(2),r));// cswap from RFC7748. But it is not from RFC7748!
/*
      cswap(swap, x_2, x_3):
           dummy = mask(swap) AND (x_2 XOR x_3)
           x_2 = x_2 XOR dummy
           x_3 = x_3 XOR dummy
           Return (x_2, x_3)
    Where mask(swap) is the all-1 or all-0 word of the same length as x_2
     and x_3, computed, e.g., as mask(swap) = 0 - swap.
    */function c(e,t,r){let a=n(e*(t-r));return[t=n(t-a),r=n(r+a)]}// Accepts 0 as well
function u(e){if("bigint"==typeof e&&vj<=e&&e<r)return e;throw Error("Expected valid scalar 0 < scalar < CURVE.P")}// x25519 from 4
// The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519
let d=(t.a-BigInt(2))/BigInt(4);function f(e){return(0,vT.numberToBytesLE)(n(e),i)}function p(e,t){let r=function(e){// Section 5: When receiving such an array, implementations of X25519
// MUST mask the most significant bit in the final byte.
let t=(0,vT.ensureBytes)("u coordinate",e,i);return 32===o&&(t[31]&=127),(0,vT.bytesToNumberLE)(t)}(t),p=function(e){let t=(0,vT.ensureBytes)("scalar",e),r=t.length;if(r!==i&&r!==o)throw Error(`Expected ${i} or ${o} bytes, got ${r}`);return(0,vT.bytesToNumberLE)(s(t))}(e),h=/**
     *
     * @param pointU u coordinate (x) on Montgomery Curve 25519
     * @param scalar by which the point would be multiplied
     * @returns new Point on Montgomery curve
     */function(e,t){let r;let i=u(e),o=u(t),s=vH,f=vj,p=i,h=vH,b=vj;for(let e=BigInt(a-1);e>=vj;e--){let t=o>>e&vH;b^=t,s=(r=c(b,s,p))[0],p=r[1],f=(r=c(b,f,h))[0],h=r[1],b=t;let a=s+f,l=n(a*a),u=s-f,y=n(u*u),m=l-y,g=p+h,v=p-h,x=n(v*a),w=n(g*u),P=x+w,O=x-w;p=n(P*P),h=n(i*n(O*O)),s=n(l*y),f=n(m*(l+n(d*m)))}s=// (x_2, x_3) = cswap(swap, x_2, x_3)
(r=c(b,s,p))[0],p=r[1],f=// (z_2, z_3) = cswap(swap, z_2, z_3)
(r=c(b,f,h))[0],h=r[1];// z_2^(p - 2)
let y=l(f);// Return x_2 * (z_2^(p - 2))
return n(s*y)}(r,p);// The result was not contributory
// https://cr.yp.to/ecdh.html#validate
if(h===vj)throw Error("Invalid private or public key received");return f(h)}// Computes public key from private. By doing scalar multiplication of base point.
let h=f(t.Gu);function b(e){return p(e,h)}return{scalarMult:p,scalarMultBase:b,getSharedSecret:(e,t)=>p(e,t),getPublicKey:e=>b(e),utils:{randomPrivateKey:()=>t.randomBytes(t.nByteLength)},GuBytes:h}};var vO=A("5As9X"),vT=A("c4RgN"),vR={};Object.defineProperty(vR,"__esModule",{value:!0}),vR.createHasher=vR.isogenyMap=vR.hash_to_field=vR.expand_message_xof=vR.expand_message_xmd=void 0;var vO=A("5As9X"),vT=A("c4RgN");// Octet Stream to Integer. "spec" implementation of os2ip is 2.5x slower vs bytesToNumberBE.
const vI=vT.bytesToNumberBE;// Integer to Octet Stream (numberToBytesBE)
function vB(e,t){if(e<0||e>=1<<8*t)throw Error(`bad I2OSP call: value=${e} length=${t}`);let r=Array.from({length:t}).fill(0);for(let n=t-1;n>=0;n--)r[n]=255&e,e>>>=8;return new Uint8Array(r)}function vV(e){if(!(0,vT.isBytes)(e))throw Error("Uint8Array expected")}function vX(e){if(!Number.isSafeInteger(e))throw Error("number expected")}// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits
// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1
function vU(e,t,r,n){vV(e),vV(t),vX(r),t.length>255&&(t=n((0,vT.concatBytes)((0,vT.utf8ToBytes)("H2C-OVERSIZE-DST-"),t)));let{outputLen:a,blockLen:i}=n,o=Math.ceil(r/a);if(o>255)throw Error("Invalid xmd length");let s=(0,vT.concatBytes)(t,vB(t.length,1)),l=vB(0,i),c=vB(r,2),u=Array(o),d=n((0,vT.concatBytes)(l,e,c,vB(0,1),s));u[0]=n((0,vT.concatBytes)(d,vB(1,1),s));for(let e=1;e<=o;e++){let t=[function(e,t){let r=new Uint8Array(e.length);for(let n=0;n<e.length;n++)r[n]=e[n]^t[n];return r}(d,u[e-1]),vB(e+1,1),s];u[e]=n((0,vT.concatBytes)(...t))}let f=(0,vT.concatBytes)(...u);return f.slice(0,r)}// Produces a uniformly random byte string using an extendable-output function (XOF) H.
// 1. The collision resistance of H MUST be at least k bits.
// 2. H MUST be an XOF that has been proved indifferentiable from
//    a random oracle under a reasonable cryptographic assumption.
// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2
function vA(e,t,r,n,a){// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
// DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));
if(vV(e),vV(t),vX(r),t.length>255){let e=Math.ceil(2*n/8);t=a.create({dkLen:e}).update((0,vT.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(t).digest()}if(r>65535||t.length>255)throw Error("expand_message_xof: invalid lenInBytes");return a.create({dkLen:r}).update(e).update(vB(r,2))// 2. DST_prime = DST || I2OSP(len(DST), 1)
.update(t).update(vB(t.length,1)).digest()}/**
 * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F
 * https://www.rfc-editor.org/rfc/rfc9380#section-5.2
 * @param msg a byte string containing the message to hash
 * @param count the number of elements of F to output
 * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above
 * @returns [u_0, ..., u_(count - 1)], a list of field elements.
 */function vD(e,t,r){let n;(0,vT.validateObject)(r,{DST:"stringOrUint8Array",p:"bigint",m:"isSafeInteger",k:"isSafeInteger",hash:"hash"});let{p:a,k:i,m:o,hash:s,expand:l,DST:c}=r;vV(e),vX(t);let u=function(e){if((0,vT.isBytes)(e))return e;if("string"==typeof e)return(0,vT.utf8ToBytes)(e);throw Error("DST must be Uint8Array or string")}(c),d=a.toString(2).length,f=Math.ceil((d+i)/8),p=t*o*f;if("xmd"===l)n=vU(e,u,p,s);else if("xof"===l)n=vA(e,u,p,i,s);else if("_internal_pass"===l)n=e;else throw Error('expand must be "xmd" or "xof"');let h=Array(t);for(let e=0;e<t;e++){let t=Array(o);for(let r=0;r<o;r++){let i=f*(r+e*o),s=n.subarray(i,i+f);t[r]=(0,vO.mod)(vI(s),a)}h[e]=t}return h}vR.expand_message_xmd=vU,vR.expand_message_xof=vA,vR.hash_to_field=vD,vR.isogenyMap=function(e,t){// Make same order as in spec
let r=t.map(e=>Array.from(e).reverse());return(t,n)=>{let[a,i,o,s]=r.map(r=>r.reduce((r,n)=>e.add(e.mul(r,t),n)));return t=e.div(a,i),n=e.mul(n,e.div(o,s)),{x:t,y:n}}},vR.createHasher=function(e,t,r){if("function"!=typeof t)throw Error("mapToCurve() must be defined");return{// Encodes byte string to elliptic curve.
// hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
hashToCurve(n,a){let i=vD(n,2,{...r,DST:r.DST,...a}),o=e.fromAffine(t(i[0])),s=e.fromAffine(t(i[1])),l=o.add(s).clearCofactor();return l.assertValidity(),l},// Encodes byte string to elliptic curve.
// encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
encodeToCurve(n,a){let i=vD(n,1,{...r,DST:r.encodeDST,...a}),o=e.fromAffine(t(i[0])).clearCofactor();return o.assertValidity(),o}}};/**
 * ed25519 Twisted Edwards curve with following addons:
 * - X25519 ECDH
 * - Ristretto cofactor elimination
 * - Elligator hash-to-group / point indistinguishability
 */const vC=BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949"),vF=BigInt("19681161376707505956807079304988542015446066515923890162744021073123829784752"),vZ=BigInt(0),vq=BigInt(1),vG=BigInt(2),vW=BigInt(5),vY=BigInt(10),vK=BigInt(20),vJ=BigInt(40),vQ=BigInt(80);function v_(e){let t=e*e%vC,r=t*e%vC,n=(0,vO.pow2)(r,vG,vC)*r%vC,a=(0,vO.pow2)(n,vq,vC)*e%vC,i=(0,vO.pow2)(a,vW,vC)*a%vC,o=(0,vO.pow2)(i,vY,vC)*i%vC,s=(0,vO.pow2)(o,vK,vC)*o%vC,l=(0,vO.pow2)(s,vJ,vC)*s%vC,c=(0,vO.pow2)(l,vQ,vC)*l%vC,u=(0,vO.pow2)(c,vQ,vC)*l%vC,d=(0,vO.pow2)(u,vY,vC)*i%vC,f=(0,vO.pow2)(d,vG,vC)*e%vC;// ^ To pow to (p+3)/8, multiply it by x.
return{pow_p_5_8:f,b2:r}}function v$(e){return(// Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,
// set the three least significant bits of the first byte
e[0]&=248,// and the most significant bit of the last to zero,
e[31]&=127,// set the second most significant bit of the last byte to 1
e[31]|=64,e)}// sqrt(u/v)
function v0(e,t){let r=(0,vO.mod)(t*t*t,vC),n=(0,vO.mod)(r*r*t,vC),a=v_(e*n).pow_p_5_8,i=(0,vO.mod)(e*r*a,vC),o=(0,vO.mod)(t*i*i,vC),s=i,l=(0,vO.mod)(i*vF,vC),c=o===e,u=o===(0,vO.mod)(-e,vC),d=o===(0,vO.mod)(-e*vF,vC);// v³
return c&&(i=s),(u||d)&&(i=l),(0,vO.isNegativeLE)(i,vC)&&(i=(0,vO.mod)(-i,vC)),{isValid:c||u,value:i}}// Just in case
vw.ED25519_TORSION_SUBGROUP=["0100000000000000000000000000000000000000000000000000000000000000","c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a","0000000000000000000000000000000000000000000000000000000000000080","26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05","ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f","26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85","0000000000000000000000000000000000000000000000000000000000000000","c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa"];const v1=(0,vO.Field)(vC,void 0,!0),v2={// Param: a
a:BigInt(-1),// d is equal to -121665/121666 over finite field.
// Negative number is P - number, and division is invert(number, P)
d:BigInt("37095705934669439343138083508754565189542113879843219016388785533085940283555"),Fp:v1,// Subgroup order: how many points curve has
// 2n**252n + 27742317777372353535851937790883648493n;
n:BigInt("7237005577332262213973186563042994240857116359379907606001950938285454250989"),// Cofactor
h:BigInt(8),// Base point (x, y) aka generator point
Gx:BigInt("15112221349535400772501151409588531511454012693041857206046113283949847762202"),Gy:BigInt("46316835694926478169428394003475163141307993866256225615783033603165251855960"),hash:cW.sha512,randomBytes:sF.randomBytes,adjustScalarBytes:v$,uvRatio:// Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
// Constant-time, u/√v
v0};function v5(e,t,r){if(t.length>255)throw Error("Context is too big");return(0,sF.concatBytes)((0,sF.utf8ToBytes)("SigEd25519 no Ed25519 collisions"),new Uint8Array([r?1:0,t.length]),t,e)}/**
 * Converts ed25519 public key to x25519 public key. Uses formula:
 * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`
 * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`
 * @example
 *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());
 *   const aPriv = x25519.utils.randomPrivateKey();
 *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))
 */function v3(e){let{y:t}=vw.ed25519.ExtendedPoint.fromHex(e),r=BigInt(1);return v1.toBytes(v1.create((r+t)*v1.inv(r-t)))}vw.ed25519=(0,vP.twistedEdwards)(v2),vw.ed25519ctx=(0,vP.twistedEdwards)({...v2,domain:v5}),vw.ed25519ph=(0,vP.twistedEdwards)({...v2,domain:v5,prehash:cW.sha512}),vw.x25519=(0,vM.montgomery)({P:vC,a:BigInt(486662),montgomeryBits:255,nByteLength:32,Gu:BigInt(9),powPminus2:e=>{// x^(p-2) aka x^(2^255-21)
let{pow_p_5_8:t,b2:r}=v_(e);return(0,vO.mod)((0,vO.pow2)(t,BigInt(3),vC)*r,vC)},adjustScalarBytes:v$,randomBytes:sF.randomBytes}),vw.edwardsToMontgomeryPub=v3,vw.edwardsToMontgomery=v3,vw.edwardsToMontgomeryPriv=/**
 * Converts ed25519 secret key to x25519 secret key.
 * @example
 *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());
 *   const aPriv = ed25519.utils.randomPrivateKey();
 *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)
 */function(e){let t=v2.hash(e.subarray(0,32));return v2.adjustScalarBytes(t).subarray(0,32)};// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)
// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since
// SageMath returns different root first and everything falls apart
const v8=(v1.ORDER+BigInt(3))/BigInt(8),v9=v1.pow(vG,v8),v6=v1.sqrt(v1.neg(v1.ONE)),v4=(v1.ORDER-BigInt(5))/BigInt(8),v7=BigInt(486662),xe=(0,vO.FpSqrtEven)(v1,v1.neg(BigInt(486664))),xt=(0,vR.createHasher)(vw.ed25519.ExtendedPoint,e=>(function(e){let t,r,n,a,i,o,s,l,c,u,d,f,p,h,b,y,m,g,v,x,w;let{xMn:P,xMd:O,yMn:T,yMd:z}=(t=v1.sqr(e),t=v1.mul(t,vG),r=v1.add(t,v1.ONE),n=v1.neg(v7),a=v1.sqr(r),i=v1.mul(a,r),o=v1.mul(t,v7),o=v1.mul(o,n),o=v1.add(o,a),o=v1.mul(o,n),s=v1.sqr(i),a=v1.sqr(s),s=v1.mul(s,i),s=v1.mul(s,o),a=v1.mul(a,s),l=v1.pow(a,v4),l=v1.mul(l,s),c=v1.mul(l,v6),a=v1.sqr(l),a=v1.mul(a,i),u=v1.eql(a,o),d=v1.cmov(c,l,u),f=v1.mul(n,t),p=v1.mul(l,e),p=v1.mul(p,v9),h=v1.mul(p,v6),b=v1.mul(o,t),a=v1.sqr(p),a=v1.mul(a,i),y=v1.eql(a,b),m=v1.cmov(h,p,y),a=v1.sqr(d),a=v1.mul(a,i),g=v1.eql(a,o),v=v1.cmov(f,n,g),x=v1.cmov(m,d,g),w=v1.isOdd(x),{xMn:v,xMd:r,yMn:x=v1.cmov(x,v1.neg(x),g!==w),yMd:vq}),k=v1.mul(P,z);//  1.  (xMn, xMd, yMn, yMd) =
    k=v1.mul(k,xe);let L=v1.mul(O,T),E=v1.sub(P,O),N=v1.add(P,O),S=v1.mul(L,N),M=v1.eql(S,v1.ZERO);//  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM
    k=v1.cmov(k,v1.ZERO,M),L=v1.cmov(L,v1.ONE,M),E=v1.cmov(E,v1.ONE,M),N=v1.cmov(N,v1.ONE,M);let j=v1.invertBatch([L,N]);// batch division
    return{x:v1.mul(k,j[0]),y:v1.mul(E,j[1])};//  13. return (xn, xd, yn, yd)
    })(e[0]),{DST:"edwards25519_XMD:SHA-512_ELL2_RO_",encodeDST:"edwards25519_XMD:SHA-512_ELL2_NU_",p:v1.ORDER,m:1,k:128,expand:"xmd",hash:cW.sha512});// 1. c1 = (q + 3) / 8       # Integer arithmetic
function xr(e){if(!(e instanceof xd))throw Error("RistrettoPoint expected")}vw.hashToCurve=xt.hashToCurve,vw.encodeToCurve=xt.encodeToCurve;// √(ad - 1)
const xn=BigInt("25063068953384623474111414158702152701244531502492656460079210482610430750235"),xa=BigInt("54469307008909316920995813868745141605393597292927456921205312896311721017578"),xi=BigInt("1159843021668779879193775521855586647937357759715417654439879720876111806838"),xo=BigInt("40440834346308536858101042469323190826248399146238708352240133220865137265952"),xs=e=>v0(vq,e),xl=BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),xc=e=>vw.ed25519.CURVE.Fp.create((0,vT.bytesToNumberLE)(e)&xl);// Computes Elligator map for Ristretto
// https://ristretto.group/formulas/elligator.html
function xu(e){let{d:t}=vw.ed25519.CURVE,r=vw.ed25519.CURVE.Fp.ORDER,n=vw.ed25519.CURVE.Fp.create,a=n(vF*e*e),i=n((a+vq)*xi),o=BigInt(-1),s=n((o-t*a)*n(a+t)),{isValid:l,value:c}=v0(i,s),u=n(c*e);(0,vO.isNegativeLE)(u,r)||(u=n(-u)),l||(c=u),l||(o=a);let d=n(o*(a-vq)*xo-s),f=c*c,p=n((c+c)*s),h=n(d*xn),b=n(vq-f),y=n(vq+f);// 9
return new vw.ed25519.ExtendedPoint(n(p*y),n(b*h),n(h*y),n(p*b))}/**
 * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be
 * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.
 * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,
 * but it should work in its own namespace: do not combine those two.
 * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448
 */class xd{// Private property to discourage combining ExtendedPoint + RistrettoPoint
// Always use Ristretto encoding/decoding instead.
constructor(e){this.ep=e}static fromAffine(e){return new xd(vw.ed25519.ExtendedPoint.fromAffine(e))}/**
     * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.
     * The hash-to-group operation applies Elligator twice and adds the results.
     * **Note:** this is one-way map, there is no conversion from point to hash.
     * https://ristretto.group/formulas/elligator.html
     * @param hex 64-byte output of a hash function
     */static hashToCurve(e){e=(0,vT.ensureBytes)("ristrettoHash",e,64);let t=xc(e.slice(0,32)),r=xu(t),n=xc(e.slice(32,64)),a=xu(n);return new xd(r.add(a))}/**
     * Converts ristretto-encoded string to ristretto point.
     * https://ristretto.group/formulas/decoding.html
     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding
     */static fromHex(e){e=(0,vT.ensureBytes)("ristrettoHex",e,32);let{a:t,d:r}=vw.ed25519.CURVE,n=vw.ed25519.CURVE.Fp.ORDER,a=vw.ed25519.CURVE.Fp.create,i="RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint",o=xc(e);// 1. Check that s_bytes is the canonical encoding of a field element, or else abort.
// 3. Check that s is non-negative, or else abort
if(!(0,vT.equalBytes)((0,vT.numberToBytesLE)(o,32),e)||(0,vO.isNegativeLE)(o,n))throw Error(i);let s=a(o*o),l=a(vq+t*s),c=a(vq-t*s),u=a(l*l),d=a(c*c),f=a(t*r*u-d),{isValid:p,value:h}=xs(a(f*d)),b=a(h*c),y=a(h*b*f),m=a((o+o)*b);(0,vO.isNegativeLE)(m,n)&&(m=a(-m));// 10
let g=a(l*y),v=a(m*g);// 11
if(!p||(0,vO.isNegativeLE)(v,n)||g===vZ)throw Error(i);return new xd(new vw.ed25519.ExtendedPoint(m,g,vq,v))}/**
     * Encodes ristretto point to Uint8Array.
     * https://ristretto.group/formulas/encoding.html
     */toRawBytes(){let e,{ex:t,ey:r,ez:n,et:a}=this.ep,i=vw.ed25519.CURVE.Fp.ORDER,o=vw.ed25519.CURVE.Fp.create,s=o(o(n+r)*o(n-r)),l=o(t*r),c=o(l*l),{value:u}=xs(o(s*c)),d=o(u*s),f=o(u*l),p=o(d*f*a);if((0,vO.isNegativeLE)(a*p,i)){let n=o(r*vF),a=o(t*vF);t=n,r=a,e=o(d*xa)}else e=f;// 8
(0,vO.isNegativeLE)(t*p,i)&&(r=o(-r));let h=o((n-r)*e);// 10 (check footer's note, no sqrt(-a))
return(0,vO.isNegativeLE)(h,i)&&(h=o(-h)),(0,vT.numberToBytesLE)(h,32);// 11
}toHex(){return(0,vT.bytesToHex)(this.toRawBytes())}toString(){return this.toHex()}// Compare one point to another.
equals(e){xr(e);let{ex:t,ey:r}=this.ep,{ex:n,ey:a}=e.ep,i=vw.ed25519.CURVE.Fp.create,o=i(t*a)===i(r*n),s=i(r*a)===i(t*n);return o||s}add(e){return xr(e),new xd(this.ep.add(e.ep))}subtract(e){return xr(e),new xd(this.ep.subtract(e.ep))}multiply(e){return new xd(this.ep.multiply(e))}multiplyUnsafe(e){return new xd(this.ep.multiplyUnsafe(e))}double(){return new xd(this.ep.double())}negate(){return new xd(this.ep.negate())}}vw.RistrettoPoint=(xd.BASE||(xd.BASE=new xd(vw.ed25519.ExtendedPoint.BASE)),xd.ZERO||(xd.ZERO=new xd(vw.ed25519.ExtendedPoint.ZERO)),xd),vw.hashToRistretto255=(e,t)=>{let r=t.DST,n="string"==typeof r?(0,sF.utf8ToBytes)(r):r,a=(0,vR.expand_message_xmd)(e,n,64,cW.sha512),i=xd.hashToCurve(a);return i},vw.hash_to_ristretto255=vw.hashToRistretto255;const xf=(i={256:vs,512:vl},o={256:uK.keccak_256,512:uK.keccak_512},(e,t=256,r)=>{let n=gT(e);return!gw||!r&&vc()?i[t](n):o[t](n)});var xp={};Object.defineProperty(xp,"__esModule",{value:!0}),xp.encodeToCurve=xp.hashToCurve=xp.schnorr=xp.secp256k1=void 0;var vO=A("5As9X"),xh={};Object.defineProperty(xh,"__esModule",{value:!0}),xh.mapToCurveSimpleSWU=xh.SWUFpSqrtRatio=xh.weierstrass=xh.weierstrassPoints=xh.DER=void 0;var vO=A("5As9X"),vT=(A("c4RgN"),A("c4RgN")),vz=A("7QuGE");// ASN.1 DER encoding utilities
const{bytesToNumberBE:xb,hexToBytes:xy}=vT;xh.DER={// asn.1 DER encoding utils
Err:class extends Error{constructor(e=""){super(e)}},_parseInt(e){let{Err:t}=xh.DER;if(e.length<2||2!==e[0])throw new t("Invalid signature integer tag");let r=e[1],n=e.subarray(2,r+2);if(!r||n.length!==r)throw new t("Invalid signature integer: wrong length");// https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
// since we always use positive integers here. It must always be empty:
// - add zero byte if exists
// - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
if(128&n[0])throw new t("Invalid signature integer: negative");if(0===n[0]&&!(128&n[1]))throw new t("Invalid signature integer: unnecessary leading zero");return{d:xb(n),l:e.subarray(r+2)};// d is data, l is left
},toSig(e){// parse DER signature
let{Err:t}=xh.DER,r="string"==typeof e?xy(e):e;if(!vT.isBytes(r))throw Error("ui8a expected");let n=r.length;if(n<2||48!=r[0])throw new t("Invalid signature tag");if(r[1]!==n-2)throw new t("Invalid signature: incorrect length");let{d:a,l:i}=xh.DER._parseInt(r.subarray(2)),{d:o,l:s}=xh.DER._parseInt(i);if(s.length)throw new t("Invalid signature: left bytes after parsing");return{r:a,s:o}},hexFromSig(e){// Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
let t=e=>8&Number.parseInt(e[0],16)?"00"+e:e,r=e=>{let t=e.toString(16);return 1&t.length?`0${t}`:t},n=t(r(e.s)),a=t(r(e.r)),i=n.length/2,o=a.length/2,s=r(i),l=r(o);return`30${r(o+i+4)}02${l}${a}02${s}${n}`}};// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const xm=BigInt(0),xg=BigInt(1),xv=BigInt(2),xx=BigInt(3),xw=BigInt(4);function xP(e){let t=function(e){let t=(0,vz.validateBasic)(e);vT.validateObject(t,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});let{endo:r,Fp:n,a:a}=t;if(r){if(!n.eql(a,n.ZERO))throw Error("Endomorphism can only be defined for Koblitz curves that have a=0");if("object"!=typeof r||"bigint"!=typeof r.beta||"function"!=typeof r.splitScalar)throw Error("Expected endomorphism with beta: bigint and splitScalar: function")}return Object.freeze({...t})}(e),{Fp:r}=t,n=t.toBytes||((e,t,n)=>{let a=t.toAffine();return vT.concatBytes(Uint8Array.from([4]),r.toBytes(a.x),r.toBytes(a.y))}),a=t.fromBytes||(e=>{// const head = bytes[0];
let t=e.subarray(1),n=r.fromBytes(t.subarray(0,r.BYTES)),a=r.fromBytes(t.subarray(r.BYTES,2*r.BYTES));return{x:n,y:a}});/**
     * y² = x³ + ax + b: Short weierstrass curve formula
     * @returns y²
     */function i(e){let{a:n,b:a}=t,i=r.sqr(e),o=r.mul(i,e);return r.add(r.add(o,r.mul(e,n)),a);// x3 + a * x + b
}// Validate whether the passed curve params are valid.
// We check if curve equation works for generator point.
// `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
// ProjectivePoint class has not been initialized yet.
if(!r.eql(r.sqr(t.Gy),i(t.Gx)))throw Error("bad generator point: equation left != right");// Valid group elements reside in range 1..n-1
function o(e){return"bigint"==typeof e&&xm<e&&e<t.n}function s(e){if(!o(e))throw Error("Expected valid bigint: 0 < bigint < curve.n")}// Validates if priv key is valid and converts it to bigint.
// Supports options allowedPrivateKeyLengths and wrapPrivateKey.
function l(e){let r;let{allowedPrivateKeyLengths:n,nByteLength:a,wrapPrivateKey:i,n:o}=t;if(n&&"bigint"!=typeof e){// Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
if(vT.isBytes(e)&&(e=vT.bytesToHex(e)),"string"!=typeof e||!n.includes(e.length))throw Error("Invalid key");e=e.padStart(2*a,"0")}try{r="bigint"==typeof e?e:vT.bytesToNumberBE((0,vT.ensureBytes)("private key",e,a))}catch(t){throw Error(`private key must be ${a} bytes, hex or bigint, not ${typeof e}`)}return i&&(r=vO.mod(r,o)),s(r),r}let c=new Map;function u(e){if(!(e instanceof d))throw Error("ProjectivePoint expected")}/**
     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
     * Default Point works in 2d / affine coordinates: (x, y)
     * We're doing calculations in projective, because its operations don't require costly inversion.
     */class d{constructor(e,t,n){if(this.px=e,this.py=t,this.pz=n,null==e||!r.isValid(e))throw Error("x required");if(null==t||!r.isValid(t))throw Error("y required");if(null==n||!r.isValid(n))throw Error("z required")}// Does not validate if the point is on-curve.
// Use fromHex instead, or call assertValidity() later.
static fromAffine(e){let{x:t,y:n}=e||{};if(!e||!r.isValid(t)||!r.isValid(n))throw Error("invalid affine point");if(e instanceof d)throw Error("projective point not allowed");let a=e=>r.eql(e,r.ZERO);return(// fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
a(t)&&a(n)?d.ZERO:new d(t,n,r.ONE))}get x(){return this.toAffine().x}get y(){return this.toAffine().y}/**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */static normalizeZ(e){let t=r.invertBatch(e.map(e=>e.pz));return e.map((e,r)=>e.toAffine(t[r])).map(d.fromAffine)}/**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */static fromHex(e){let t=d.fromAffine(a((0,vT.ensureBytes)("pointHex",e)));return t.assertValidity(),t}// Multiplies generator point by privateKey.
static fromPrivateKey(e){return d.BASE.multiply(l(e))}// "Private method", don't use it directly
_setWindowSize(e){this._WINDOW_SIZE=e,c.delete(this)}// A point on curve is valid if it conforms to equation.
assertValidity(){if(this.is0()){// (0, 1, 0) aka ZERO is invalid in most contexts.
// In BLS, ZERO can be serialized, so we allow it.
// (0, 0, 0) is wrong representation of ZERO and is always invalid.
if(t.allowInfinityPoint&&!r.is0(this.py))return;throw Error("bad point: ZERO")}// Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
let{x:e,y:n}=this.toAffine();// Check if x, y are valid field elements
if(!r.isValid(e)||!r.isValid(n))throw Error("bad point: x or y not FE");let a=r.sqr(n),o=i(e);// y²
if(!r.eql(a,o))throw Error("bad point: equation left != right");if(!this.isTorsionFree())throw Error("bad point: not in prime-order subgroup")}hasEvenY(){let{y:e}=this.toAffine();if(r.isOdd)return!r.isOdd(e);throw Error("Field doesn't support isOdd")}/**
         * Compare one point to another.
         */equals(e){u(e);let{px:t,py:n,pz:a}=this,{px:i,py:o,pz:s}=e,l=r.eql(r.mul(t,s),r.mul(i,a)),c=r.eql(r.mul(n,s),r.mul(o,a));return l&&c}/**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */negate(){return new d(this.px,r.neg(this.py),this.pz)}// Renes-Costello-Batina exception-free doubling formula.
// There is 30% faster Jacobian formula, but it is not complete.
// https://eprint.iacr.org/2015/1060, algorithm 3
// Cost: 8M + 3S + 3*a + 2*b3 + 15add.
double(){let{a:e,b:n}=t,a=r.mul(n,xx),{px:i,py:o,pz:s}=this,l=r.ZERO,c=r.ZERO,u=r.ZERO,f=r.mul(i,i),p=r.mul(o,o),h=r.mul(s,s),b=r.mul(i,o);return b=r.add(b,b),u=r.mul(i,s),u=r.add(u,u),l=r.mul(e,u),c=r.mul(a,h),c=r.add(l,c),l=r.sub(p,c),c=r.add(p,c),c=r.mul(l,c),l=r.mul(b,l),u=r.mul(a,u),h=r.mul(e,h),b=r.sub(f,h),b=r.mul(e,b),b=r.add(b,u),u=r.add(f,f),f=r.add(u,f),f=r.add(f,h),f=r.mul(f,b),c=r.add(c,f),h=r.mul(o,s),h=r.add(h,h),f=r.mul(h,b),l=r.sub(l,f),u=r.mul(h,p),u=r.add(u,u),new d(l,c,u=r.add(u,u))}// Renes-Costello-Batina exception-free addition formula.
// There is 30% faster Jacobian formula, but it is not complete.
// https://eprint.iacr.org/2015/1060, algorithm 1
// Cost: 12M + 0S + 3*a + 3*b3 + 23add.
add(e){u(e);let{px:n,py:a,pz:i}=this,{px:o,py:s,pz:l}=e,c=r.ZERO,f=r.ZERO,p=r.ZERO,h=t.a,b=r.mul(t.b,xx),y=r.mul(n,o),m=r.mul(a,s),g=r.mul(i,l),v=r.add(n,a),x=r.add(o,s);v=r.mul(v,x),x=r.add(y,m),v=r.sub(v,x),x=r.add(n,i);let w=r.add(o,l);// step 10
return x=r.mul(x,w),w=r.add(y,g),x=r.sub(x,w),w=r.add(a,i),c=r.add(s,l),w=r.mul(w,c),c=r.add(m,g),w=r.sub(w,c),p=r.mul(h,x),c=r.mul(b,g),p=r.add(c,p),c=r.sub(m,p),p=r.add(m,p),f=r.mul(c,p),m=r.add(y,y),m=r.add(m,y),g=r.mul(h,g),x=r.mul(b,x),m=r.add(m,g),g=r.sub(y,g),g=r.mul(h,g),x=r.add(x,g),y=r.mul(m,x),f=r.add(f,y),y=r.mul(w,x),c=r.mul(v,c),c=r.sub(c,y),y=r.mul(v,m),p=r.mul(w,p),new d(c,f,p=r.add(p,y))}subtract(e){return this.add(e.negate())}is0(){return this.equals(d.ZERO)}wNAF(e){return p.wNAFCached(this,c,e,e=>{let t=r.invertBatch(e.map(e=>e.pz));return e.map((e,r)=>e.toAffine(t[r])).map(d.fromAffine)})}/**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */multiplyUnsafe(e){let n=d.ZERO;if(e===xm)return n;if(s(e),e===xg)return this;let{endo:a}=t;if(!a)return p.unsafeLadder(this,e);// Apply endomorphism
let{k1neg:i,k1:o,k2neg:l,k2:c}=a.splitScalar(e),u=n,f=n,h=this;for(;o>xm||c>xm;)o&xg&&(u=u.add(h)),c&xg&&(f=f.add(h)),h=h.double(),o>>=xg,c>>=xg;return i&&(u=u.negate()),l&&(f=f.negate()),f=new d(r.mul(f.px,a.beta),f.py,f.pz),u.add(f)}/**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */multiply(e){let n,a;s(e);let{endo:i}=t;if(i){let{k1neg:t,k1:o,k2neg:s,k2:l}=i.splitScalar(e),{p:c,f:u}=this.wNAF(o),{p:f,f:h}=this.wNAF(l);c=p.constTimeNegate(t,c),f=p.constTimeNegate(s,f),f=new d(r.mul(f.px,i.beta),f.py,f.pz),n=c.add(f),a=u.add(h)}else{let{p:t,f:r}=this.wNAF(e);n=t,a=r}// Normalize `z` for both points, but return only real one
return d.normalizeZ([n,a])[0]}/**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */multiplyAndAddUnsafe(e,t,r){let n=d.BASE,a=(e,t// Select faster multiply() method
)=>t!==xm&&t!==xg&&e.equals(n)?e.multiply(t):e.multiplyUnsafe(t),i=a(this,t).add(a(e,r));// No Strauss-Shamir trick: we have 10% faster G precomputes
return i.is0()?void 0:i}// Converts Projective point to affine (x, y) coordinates.
// Can accept precomputed Z^-1 - for example, from invertBatch.
// (x, y, z) ∋ (x=x/z, y=y/z)
toAffine(e){let{px:t,py:n,pz:a}=this,i=this.is0();// If invZ was 0, we return zero point. However we still want to execute
// all operations, so we replace invZ with a random number, 1.
null==e&&(e=i?r.ONE:r.inv(a));let o=r.mul(t,e),s=r.mul(n,e),l=r.mul(a,e);if(i)return{x:r.ZERO,y:r.ZERO};if(!r.eql(l,r.ONE))throw Error("invZ was invalid");return{x:o,y:s}}isTorsionFree(){let{h:e,isTorsionFree:r}=t;if(e===xg)return!0;// No subgroups, always torsion-free
if(r)return r(d,this);throw Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){let{h:e,clearCofactor:r}=t;return e===xg?this:r?r(d,this):this.multiplyUnsafe(t.h)// Fast-path
}toRawBytes(e=!0){return this.assertValidity(),n(d,this,e)}toHex(e=!0){return vT.bytesToHex(this.toRawBytes(e))}}d.BASE=new d(t.Gx,t.Gy,r.ONE),d.ZERO=new d(r.ZERO,r.ONE,r.ZERO);let f=t.nBitLength,p=(0,vz.wNAF)(d,t.endo?Math.ceil(f/2):f);// Validate if generator point is on curve
return{CURVE:t,ProjectivePoint:d,normPrivateKeyToScalar:l,weierstrassEquation:i,isWithinCurveOrder:o}}/**
 * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.
 * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.
 * b = True and y = sqrt(u / v) if (u / v) is square in F, and
 * b = False and y = sqrt(Z * (u / v)) otherwise.
 * @param Fp
 * @param Z
 * @returns
 */function xO(e,t){// Generic implementation
let r=e.ORDER,n=xm;for(let e=r-xg;e%xv===xm;e/=xv)n+=xg;let a=n,i=xv<<a-xg-xg,o=i*xv,s=(r-xg)/o,l=(s-xg)/xv,c=o-xg,u=e.pow(t,s),d=e.pow(t,(s+xg)/xv),f=(t,r)=>{let n=u,o=e.pow(r,c),s=e.sqr(o);// 1. tv1 = c6
s=e.mul(s,r);let f=e.mul(t,s);// 5. tv5 = u * tv3
f=e.pow(f,l),f=e.mul(f,o),o=e.mul(f,r),s=e.mul(f,t);let p=e.mul(s,o);// 10. tv4 = tv3 * tv2
f=e.pow(p,i);let h=e.eql(f,e.ONE);// 12. isQR = tv5 == 1
o=e.mul(s,d),f=e.mul(p,n),s=e.cmov(o,s,h),p=e.cmov(f,p,h);// 17. for i in (c1, c1 - 1, ..., 2):
for(let t=a;t>xg;t--){let r=t-xv;// 18.    tv5 = i - 2
r=xv<<r-xg;let a=e.pow(p,r),i=e.eql(a,e.ONE);// 20.    tv5 = tv4^tv5
o=e.mul(s,n),n=e.mul(n,n),a=e.mul(p,n),s=e.cmov(o,s,i),p=e.cmov(a,p,i)}return{isValid:h,value:s}};// 1. c1, the largest integer such that 2^c1 divides q - 1.
if(e.ORDER%xw===xx){// sqrt_ratio_3mod4(u, v)
let r=(e.ORDER-xx)/xw,n=e.sqrt(e.neg(t));// 1. c1 = (q - 3) / 4     # Integer arithmetic
f=(t,a)=>{let i=e.sqr(a),o=e.mul(t,a);// 1. tv1 = v^2
i=e.mul(i,o);// 3. tv1 = tv1 * tv2
let s=e.pow(i,r);// 4. y1 = tv1^c1
s=e.mul(s,o);// 5. y1 = y1 * tv2
let l=e.mul(s,n),c=e.mul(e.sqr(s),a),u=e.eql(c,t),d=e.cmov(l,s,u);// 6. y2 = y1 * c2
return{isValid:u,value:d};// 11. return (isQR, y) isQR ? y : y*c2
}}// No curves uses that
// if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8
return f}xh.weierstrassPoints=xP,xh.weierstrass=function(e){let t=function(e){let t=(0,vz.validateBasic)(e);return vT.validateObject(t,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...t})}(e),{Fp:r,n:n}=t,a=r.BYTES+1,i=2*r.BYTES+1;function o(e){return vO.mod(e,n)}function s(e){return vO.invert(e,n)}let{ProjectivePoint:l,normPrivateKeyToScalar:c,weierstrassEquation:u,isWithinCurveOrder:d}=xP({...t,toBytes(e,t,n){let a=t.toAffine(),i=r.toBytes(a.x),o=vT.concatBytes;return n?o(Uint8Array.from([t.hasEvenY()?2:3]),i):o(Uint8Array.from([4]),i,r.toBytes(a.y))},fromBytes(e){let t=e.length,n=e[0],o=e.subarray(1);// this.assertValidity() is done inside of fromHex
if(t===a&&(2===n||3===n)){let e=vT.bytesToNumberBE(o);if(!(xm<e&&e<r.ORDER))throw Error("Point is not on curve");let t=u(e),a=r.sqrt(t),i=(a&xg)===xg;// y² = x³ + ax + b
return(1&n)==1!==i&&(a=r.neg(a)),{x:e,y:a}}if(t===i&&4===n){let e=r.fromBytes(o.subarray(0,r.BYTES)),t=r.fromBytes(o.subarray(r.BYTES,2*r.BYTES));return{x:e,y:t}}throw Error(`Point of length ${t} was invalid. Expected ${a} compressed bytes or ${i} uncompressed bytes`)}}),f=e=>vT.bytesToHex(vT.numberToBytesBE(e,t.nByteLength));function p(e){let t=n>>xg;return e>t}// slice bytes num
let h=(e,t,r)=>vT.bytesToNumberBE(e.slice(t,r));/**
     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
     */class b{constructor(e,t,r){this.r=e,this.s=t,this.recovery=r,this.assertValidity()}// pair (bytes of r, bytes of s)
static fromCompact(e){let r=t.nByteLength;return new b(h(e=(0,vT.ensureBytes)("compactSignature",e,2*r),0,r),h(e,r,2*r))}// DER encoded ECDSA signature
// https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
static fromDER(e){let{r:t,s:r}=xh.DER.toSig((0,vT.ensureBytes)("DER",e));return new b(t,r)}assertValidity(){// can use assertGE here
if(!d(this.r))throw Error("r must be 0 < r < CURVE.n");if(!d(this.s))throw Error("s must be 0 < s < CURVE.n")}addRecoveryBit(e){return new b(this.r,this.s,e)}recoverPublicKey(e){let{r:n,s:a,recovery:i}=this,c=g((0,vT.ensureBytes)("msgHash",e));if(null==i||![0,1,2,3].includes(i))throw Error("recovery id invalid");let u=2===i||3===i?n+t.n:n;if(u>=r.ORDER)throw Error("recovery id 2 or 3 invalid");let d=(1&i)==0?"02":"03",p=l.fromHex(d+f(u)),h=s(u),b=o(-c*h),y=o(a*h),m=l.BASE.multiplyAndAddUnsafe(p,b,y);if(!m)throw Error("point at infinify");// unsafe is fine: no priv data leaked
return m.assertValidity(),m}// Signatures should be low-s, to prevent malleability.
hasHighS(){return p(this.s)}normalizeS(){return this.hasHighS()?new b(this.r,o(-this.s),this.recovery):this}// DER-encoded
toDERRawBytes(){return vT.hexToBytes(this.toDERHex())}toDERHex(){return xh.DER.hexFromSig({r:this.r,s:this.s})}// padded bytes of r, then padded bytes of s
toCompactRawBytes(){return vT.hexToBytes(this.toCompactHex())}toCompactHex(){return f(this.r)+f(this.s)}}/**
     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
     */function y(e){let t=vT.isBytes(e),r="string"==typeof e,n=(t||r)&&e.length;return t?n===a||n===i:r?n===2*a||n===2*i:e instanceof l}// RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
// FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
// bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
// int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
let m=t.bits2int||function(e){// For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
// for some cases, since bytes.length * 8 is not actual bitLength.
let r=vT.bytesToNumberBE(e),n=8*e.length-t.nBitLength;// check for == u8 done here
return n>0?r>>BigInt(n):r},g=t.bits2int_modN||function(e){return o(m(e));// can't use bytesToNumberBE here
},v=vT.bitMask(t.nBitLength);/**
     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
     */function x(e){if("bigint"!=typeof e)throw Error("bigint expected");if(!(xm<=e&&e<v))throw Error(`bigint expected < 2^${t.nBitLength}`);// works with order, can have different size than numToField!
return vT.numberToBytesBE(e,t.nByteLength)}let w={lowS:t.lowS,prehash:!1},P={lowS:t.lowS,prehash:!1};return(// Enable precomputes. Slows down first publicKey computation by 20ms.
l.BASE._setWindowSize(8),{CURVE:t,getPublicKey:/**
     * Computes public key for a private key. Checks for validity of the private key.
     * @param privateKey private key
     * @param isCompressed whether to return compact (default), or full key
     * @returns Public key, full when isCompressed=false; short when isCompressed=true
     */function(e,t=!0){return l.fromPrivateKey(e).toRawBytes(t)},getSharedSecret:/**
     * ECDH (Elliptic Curve Diffie Hellman).
     * Computes shared public key from private key and public key.
     * Checks: 1) private key validity 2) shared key is on-curve.
     * Does NOT hash the result.
     * @param privateA private key
     * @param publicB different public key
     * @param isCompressed whether to return compact (default), or full key
     * @returns shared public key
     */function(e,t,r=!0){if(y(e))throw Error("first arg must be private key");if(!y(t))throw Error("second arg must be public key");let n=l.fromHex(t);// check for being on-curve
return n.multiply(c(e)).toRawBytes(r)},sign:/**
     * Signs message hash with a private key.
     * ```
     * sign(m, d, k) where
     *   (x, y) = G × k
     *   r = x mod n
     *   s = (m + dr)/k mod n
     * ```
     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
     * @param privKey private key
     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
     * @returns signature with recovery param
     */function(e,n,a=w){let{seed:i,k2sig:u}=// Steps A, D of RFC6979 3.2
// Creates RFC6979 seed; converts msg/privKey to numbers.
// Used only in sign, not in verify.
// NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
// Also it can be bigger for P224 + SHA256
function(e,n,a=w){if(["recovered","canonical"].some(e=>e in a))throw Error("sign() legacy options not supported");let{hash:i,randomBytes:u}=t,{lowS:f,prehash:h,extraEntropy:y}=a;null==f&&(f=!0),e=(0,vT.ensureBytes)("msgHash",e),h&&(e=(0,vT.ensureBytes)("prehashed msgHash",i(e)));// We can't later call bits2octets, since nested bits2int is broken for curves
// with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
// const bits2octets = (bits) => int2octets(bits2int_modN(bits))
let v=g(e),P=c(n),O=[x(P),x(v)];// extraEntropy. RFC6979 3.6: additional k' (optional).
if(null!=y){// K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
let e=!0===y?u(r.BYTES):y;// generate random bytes OR pass as-is
O.push((0,vT.ensureBytes)("extraEntropy",e));// check for being bytes
}let T=vT.concatBytes(...O);// Step D of RFC6979 3.2
return{seed:T,k2sig:// Converts signature params into point w r/s, checks result for validity.
function(e){// RFC 6979 Section 3.2, step 3: k = bits2int(T)
let t=m(e);// Cannot use fields methods, since it is group element
if(!d(t))return;// Important: all mod() calls here must be done over N
let r=s(t),n=l.BASE.multiply(t).toAffine(),a=o(n.x);// k^-1 mod n
if(a===xm)return;// Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
// https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
// a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
let i=o(r*o(v+a*P));// Not using blinding here
if(i===xm)return;let c=(n.x===a?0:2)|Number(n.y&xg),u=i;// recovery bit (2 or 3, when q.x > n)
return f&&p(i)&&(u=p(i)?o(-i):i,c^=1),new b(a,u,c);// use normS, not s
}}}(e,n,a),f=vT.createHmacDrbg(t.hash.outputLen,t.nByteLength,t.hmac);// Steps A, D of RFC6979 3.2.
return f(i,u);// Steps B, C, D, E, F, G
},verify:// utils.precompute(8, ProjectivePoint.BASE)
/**
     * Verifies a signature against message hash and public key.
     * Rejects lowS signatures by default: to override,
     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
     *
     * ```
     * verify(r, s, h, P) where
     *   U1 = hs^-1 mod n
     *   U2 = rs^-1 mod n
     *   R = U1⋅G - U2⋅P
     *   mod(R.x, n) == r
     * ```
     */function(e,r,n,a=P){let i,c;if(r=(0,vT.ensureBytes)("msgHash",r),n=(0,vT.ensureBytes)("publicKey",n),"strict"in a)throw Error("options.strict was renamed to lowS");let{lowS:u,prehash:d}=a;try{if("string"==typeof e||vT.isBytes(e))// Since DER can also be 2*nByteLength bytes, we check for it first.
try{c=b.fromDER(e)}catch(t){if(!(t instanceof xh.DER.Err))throw t;c=b.fromCompact(e)}else if("object"==typeof e&&"bigint"==typeof e.r&&"bigint"==typeof e.s){let{r:t,s:r}=e;c=new b(t,r)}else throw Error("PARSE");i=l.fromHex(n)}catch(e){if("PARSE"===e.message)throw Error("signature must be Signature instance, Uint8Array or hex string");return!1}if(u&&c.hasHighS())return!1;d&&(r=t.hash(r));let{r:f,s:p}=c,h=g(r),y=s(p),m=o(h*y),v=o(f*y),x=l.BASE.multiplyAndAddUnsafe(i,m,v)?.toAffine();if(!x)return!1;let w=o(x.x);return w===f},ProjectivePoint:l,Signature:b,utils:{isValidPrivateKey(e){try{return c(e),!0}catch(e){return!1}},normPrivateKeyToScalar:c,/**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */randomPrivateKey:()=>{let e=vO.getMinHashLength(t.n);return vO.mapHashToField(t.randomBytes(e),t.n)},/**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */precompute:(e=8,t=l.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)}})},xh.SWUFpSqrtRatio=xO,xh.mapToCurveSimpleSWU=/**
 * Simplified Shallue-van de Woestijne-Ulas Method
 * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2
 */function(e,t){if(vO.validateField(e),!e.isValid(t.A)||!e.isValid(t.B)||!e.isValid(t.Z))throw Error("mapToCurveSimpleSWU: invalid opts");let r=xO(e,t.Z);if(!e.isOdd)throw Error("Fp.isOdd is not implemented!");// Input: u, an element of F.
// Output: (x, y), a point on E.
return n=>{let a,i,o,s,l,c,u,d;a=e.sqr(n),a=e.mul(a,t.Z),i=e.sqr(a),i=e.add(i,a),o=e.add(i,e.ONE),o=e.mul(o,t.B),s=e.cmov(t.Z,e.neg(i),!e.eql(i,e.ZERO)),s=e.mul(s,t.A),i=e.sqr(o),c=e.sqr(s),l=e.mul(c,t.A),i=e.add(i,l),i=e.mul(i,o),c=e.mul(c,s),l=e.mul(c,t.B),i=e.add(i,l),u=e.mul(a,o);let{isValid:f,value:p}=r(i,c);// 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)
d=e.mul(a,n),d=e.mul(d,p),u=e.cmov(u,o,f),d=e.cmov(d,p,f);let h=e.isOdd(n)===e.isOdd(d);// 23.  e1 = sgn0(u) == sgn0(y)
return d=e.cmov(e.neg(d),d,h),{x:u=e.div(u,s),y:d}}};var vT=A("c4RgN"),xT={};// connects noble-curves to noble-hashes
function xz(e){return{hash:e,hmac:(t,...r)=>(0,dz.hmac)(e,t,(0,sF.concatBytes)(...r)),randomBytes:sF.randomBytes}}Object.defineProperty(xT,"__esModule",{value:!0}),xT.createCurve=xT.getHash=void 0,xT.getHash=xz,xT.createCurve=function(e,t){let r=t=>(0,xh.weierstrass)({...e,...xz(t)});return Object.freeze({...r(t),create:r})};const xk=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),xL=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),xE=BigInt(1),xN=BigInt(2),xS=(e,t)=>(e+t/xN)/t;/**
 * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
 * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
 */function xM(e){// prettier-ignore
let t=BigInt(3),r=BigInt(6),n=BigInt(11),a=BigInt(22),i=BigInt(23),o=BigInt(44),s=BigInt(88),l=e*e*e%xk,c=l*l*e%xk,u=(0,vO.pow2)(c,t,xk)*c%xk,d=(0,vO.pow2)(u,t,xk)*c%xk,f=(0,vO.pow2)(d,xN,xk)*l%xk,p=(0,vO.pow2)(f,n,xk)*f%xk,h=(0,vO.pow2)(p,a,xk)*p%xk,b=(0,vO.pow2)(h,o,xk)*h%xk,y=(0,vO.pow2)(b,s,xk)*b%xk,m=(0,vO.pow2)(y,o,xk)*h%xk,g=(0,vO.pow2)(m,t,xk)*c%xk,v=(0,vO.pow2)(g,i,xk)*p%xk,x=(0,vO.pow2)(v,r,xk)*l%xk,w=(0,vO.pow2)(x,xN,xk);if(!xj.eql(xj.sqr(w),e))throw Error("Cannot find square root");return w}const xj=(0,vO.Field)(xk,void 0,void 0,{sqrt:xM});xp.secp256k1=(0,xT.createCurve)({a:BigInt(0),b:BigInt(7),Fp:xj,n:xL,// Base point (x, y) aka generator point
Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,/**
     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
     */endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:e=>{let t=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),r=-xE*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),n=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),a=BigInt("0x100000000000000000000000000000000"),i=xS(t*e,xL),o=xS(-r*e,xL),s=(0,vO.mod)(e-i*t-o*n,xL),l=(0,vO.mod)(-i*r-o*t,xL),c=s>a,u=l>a;if(c&&(s=xL-s),u&&(l=xL-l),s>a||l>a)throw Error("splitScalar: Endomorphism failed, k="+e);return{k1neg:c,k1:s,k2neg:u,k2:l}}}},di.sha256);// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
const xH=BigInt(0),xR=e=>"bigint"==typeof e&&xH<e&&e<xk,xI=e=>"bigint"==typeof e&&xH<e&&e<xL,xB={};function xV(e,...t){let r=xB[e];if(void 0===r){let t=(0,di.sha256)(Uint8Array.from(e,e=>e.charCodeAt(0)));r=(0,vT.concatBytes)(t,t),xB[e]=r}return(0,di.sha256)((0,vT.concatBytes)(r,...t))}// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03
const xX=e=>e.toRawBytes(!0).slice(1),xU=e=>(0,vT.numberToBytesBE)(e,32),xA=e=>(0,vO.mod)(e,xk),xD=e=>(0,vO.mod)(e,xL),xC=xp.secp256k1.ProjectivePoint,xF=(e,t,r)=>xC.BASE.multiplyAndAddUnsafe(e,t,r);// Calculate point, scalar and bytes
function xZ(e){let t=xp.secp256k1.utils.normPrivateKeyToScalar(e),r=xC.fromPrivateKey(t),n=r.hasEvenY()?t:xD(-t);// same method executed in fromPrivateKey
return{scalar:n,bytes:xX(r)}}/**
 * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.
 * @returns valid point checked for being on-curve
 */function xq(e){if(!xR(e))throw Error("bad x: need 0 < x < p");// Fail if x ≥ p.
let t=xA(e*e),r=xA(t*e+BigInt(7)),n=xM(r);n%xN!==xH&&(n=xA(-n));let a=new xC(e,n,xE);// y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.
return a.assertValidity(),a}/**
 * Create tagged hash, convert it to bigint, reduce modulo-n.
 */function xG(...e){return xD((0,vT.bytesToNumberBE)(xV("BIP0340/challenge",...e)))}/**
 * Verifies Schnorr signature.
 * Will swallow errors & return false except for initial type validation of arguments.
 */function xW(e,t,r){let n=(0,vT.ensureBytes)("signature",e,64),a=(0,vT.ensureBytes)("message",t),i=(0,vT.ensureBytes)("publicKey",r,32);try{let e=xq((0,vT.bytesToNumberBE)(i)),t=(0,vT.bytesToNumberBE)(n.subarray(0,32));// P = lift_x(int(pk)); fail if that fails
if(!xR(t))return!1;let r=(0,vT.bytesToNumberBE)(n.subarray(32,64));// Let s = int(sig[32:64]); fail if s ≥ n.
if(!xI(r))return!1;let o=xG(xU(t),xX(e),a),s=xF(e,r,xD(-o));// int(challenge(bytes(r)||bytes(P)||m))%n
if(!s||!s.hasEvenY()||s.toAffine().x!==t)return!1;// -eP == (n-e)P
return!0;// Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.
}catch(e){return!1}}xp.schnorr={getPublicKey:/**
 * Schnorr public key is just `x` coordinate of Point as per BIP340.
 */function(e){return xZ(e).bytes;// d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)
},sign:/**
 * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.
 * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.
 */function(e,t,r=(0,sF.randomBytes)(32)){let n=(0,vT.ensureBytes)("message",e),{bytes:a,scalar:i}=xZ(t),o=(0,vT.ensureBytes)("auxRand",r,32),s=xU(i^(0,vT.bytesToNumberBE)(xV("BIP0340/aux",o))),l=xV("BIP0340/nonce",s,a,n),c=xD((0,vT.bytesToNumberBE)(l));if(c===xH)throw Error("sign failed: k is zero");// Fail if k' = 0.
let{bytes:u,scalar:d}=xZ(c),f=xG(u,a,n),p=new Uint8Array(64);// Let R = k'⋅G.
// If Verify(bytes(P), m, sig) (see below) returns failure, abort
if(p.set(u,0),p.set(xU(xD(d+f*i)),32),!xW(p,n,a))throw Error("sign: Invalid signature produced");return p},verify:xW,utils:{randomPrivateKey:xp.secp256k1.utils.randomPrivateKey,lift_x:xq,pointToBytes:xX,numberToBytesBE:vT.numberToBytesBE,bytesToNumberBE:vT.bytesToNumberBE,taggedHash:xV,mod:vO.mod}};const xY=(0,vR.isogenyMap)(xj,[// xNum
["0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7","0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581","0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262","0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"],// xDen
["0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b","0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14","0x0000000000000000000000000000000000000000000000000000000000000001"],// yNum
["0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c","0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3","0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931","0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"],// yDen
["0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b","0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573","0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f","0x0000000000000000000000000000000000000000000000000000000000000001"]].map(e=>e.map(e=>BigInt(e)))),xK=(0,xh.mapToCurveSimpleSWU)(xj,{A:BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),B:BigInt("1771"),Z:xj.create(BigInt("-11"))}),xJ=(0,vR.createHasher)(xp.secp256k1.ProjectivePoint,e=>{let{x:t,y:r}=xK(xj.create(e[0]));return xY(t,r)},{DST:"secp256k1_XMD:SHA-256_SSWU_RO_",encodeDST:"secp256k1_XMD:SHA-256_SSWU_NU_",p:xj.ORDER,m:1,k:128,expand:"xmd",hash:di.sha256});xp.hashToCurve=xJ.hashToCurve,xp.encodeToCurve=xJ.encodeToCurve;var oI=A("dEXSZ");/**
 * @name isBigInt
 * @summary Tests for a `BigInt` object instance.
 * @description
 * Checks to see if the input object is an instance of `BigInt`
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBigInt } from '@polkadot/util';
 *
 * console.log('isBigInt', isBigInt(123_456n)); // => true
 * ```
 */function xQ(e){return"bigint"==typeof e}function x_(...e){return t=>(!!t&&"object"==typeof t||gO(t))&&e.every(e=>gO(t[e]))}const x$=x_("toBigInt"),x0=x_("toBn");var oI=A("dEXSZ");function x1(e){return e?/*@__PURE__*/n(oI).isBN(e)?e:gd(e)?function(e,{isLe:t=!1,isNegative:r=!1}={}){if(!e||"0x"===e)return new/*@__PURE__*/(n(oI))(0);let a=function(e){if(!e||"0x"===e)return"";if(gc.test(e))return e.substring(2);if(gu.test(e))return e;throw Error(`Expected hex value to convert, found '${e}'`)}(e),i=new/*@__PURE__*/(n(oI))(a,16,t?"le":"be");// fromTwos takes as parameter the number of bits, which is the hex length
// multiplied by 4 (2 bytes being 8 bits)
return r?i.fromTwos(4*a.length):i}(e.toString()):xQ(e)?new/*@__PURE__*/(n(oI))(e.toString()):x0(e)?e.toBn():new/*@__PURE__*/(n(oI))(x$(e)?e.toBigInt().toString():e):new/*@__PURE__*/(n(oI))(0)}const x2={bitLength:-1,isLe:!0,isNegative:!1};function x5(e,{bitLength:t=-1,isLe:r=!0,isNegative:n=!1}=x2){let a=x1(e),i=-1===t?Math.ceil(a.bitLength()/8):Math.ceil((t||0)/8);if(!e)return new Uint8Array(-1===t?1:i);let o=new Uint8Array(i),s=n?a.toTwos(8*i):a;return o.set(s.toArray(r?"le":"be",i),0),o}const x3={bitLength:256,isLe:!1},x8={bitLength:256,isLe:!0};di.sha256,cW.sha512;var oI=A("dEXSZ");gx(256),gx(65536),gx("0x10000000000000000");var oI=A("dEXSZ");gx(256),gx(255);const x9="ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141".replace(/ /g,"");gx(`0x${x9}`),new/*@__PURE__*/(n(oI))(x9,"hex"),gv("Bitcoin seed");var oI=(A("dEXSZ"),A("dEXSZ"),A("dEXSZ"));const x6=/*#__PURE__*/new/*@__PURE__*/(n(oI))(1),x4=/*#__PURE__*/new/*@__PURE__*/(n(oI))(2),x7=/*#__PURE__*/new/*@__PURE__*/(n(oI))(1e9);x7.mul(x7);const we=x4.pow(new/*@__PURE__*/(n(oI))(6)).isub(x6),wt=x4.pow(new/*@__PURE__*/(n(oI))(14)).isub(x6),wr=x4.pow(new/*@__PURE__*/(n(oI))(30)).isub(x6),wn={bitLength:16},wa={bitLength:32};function wi(e){return gz([function(e){let t=x1(e);if(t.lte(we))return new Uint8Array([t.toNumber()<<2]);if(t.lte(wt))return x5(t.shln(2).iadd(x6),wn);if(t.lte(wr))return x5(t.shln(2).iadd(x4),wa);let r=x5(t),n=r.length;// adjust to the minimum number of bytes
for(;0===r[n-1];)n--;if(n<4)throw Error("Invalid length, previous checks match anything less than 2^30");return gz([// subtract 4 as minimum (also catered for in decoding)
new Uint8Array([(n-4<<2)+3]),r.subarray(0,n)])}(e.length),e])}const wo=/^\d+$/;class ws{__internal__chainCode=new Uint8Array(32);__internal__isHard=!1;static from(e){let t=new ws,[r,a]=e.startsWith("/")?[e.substring(1),!0]:[e,!1];return t.soft(wo.test(r)?new/*@__PURE__*/(n(oI))(r,10):r),a?t.harden():t}get chainCode(){return this.__internal__chainCode}get isHard(){return this.__internal__isHard}get isSoft(){return!this.__internal__isHard}hard(e){return this.soft(e).harden()}harden(){return this.__internal__isHard=!0,this}soft(e){return"number"==typeof e||/*@__PURE__*/n(oI).isBN(e)||xQ(e)?this.soft(x5(e,x8)):gd(e)?this.soft(gl(e)):"string"==typeof e||e instanceof String?this.soft(wi(gv(e))):e.length>32?this.soft(vf(e)):(this.__internal__chainCode.fill(0),this.__internal__chainCode.set(e,0),this)}soften(){return this.__internal__isHard=!1,this}}function wl(e,t){let r=gT(e),n=gT(t);if(r.length===n.length){let e=new DataView(r.buffer,r.byteOffset),t=new DataView(n.buffer,n.byteOffset),a=r.length%4|0,i=r.length-a|0;for(let r=0;r<i;r+=4)if(e.getUint32(r)!==t.getUint32(r))return!1;for(let e=i,t=r.length;e<t;e++)if(r[e]!==n[e])return!1;return!0}return!1}function wc(e,t,r){return"keccak"===e?xf(t,void 0,r):vf(t,void 0,void 0,r)}wi(gv("Secp256k1HDKD")),wi(gv("Ed25519HDKD")),di.sha256,cW.sha512;const wu=gT("<Bytes>"),wd=gT("</Bytes>");wu.length,wd.length;const wf=e=>(t,r,n)=>(function(e,t,r,n="blake2",a){let i=gT(t);if(65!==i.length)throw Error(`Expected signature with 65 bytes, ${i.length} found instead`);let o=function(e,t,r,n="blake2",a){let i=gT(t).subarray(0,64),o=gT(e),s=!gw||!a&&vc()?vi(o,i,r):(0,xp.secp256k1).Signature.fromCompact(i).addRecoveryBit(r).recoverPublicKey(o).toRawBytes();if(!s)throw Error("Unable to recover publicKey from signature");return"keccak"===n?function(e,t){if(![33,65].includes(e.length))throw Error(`Invalid publicKey provided, received ${e.length} bytes input`);if(65===e.length)return e.subarray(1);if(!gw||!t&&vc())return va(e).subarray(1);let{px:r,py:n}=(0,xp.secp256k1).ProjectivePoint.fromHex(e);return function(...e){let t=e.length,r=Array(t),n=0;for(let a=0;a<t;a++)r[a]=gT(e[a]),n+=r[a].length;return gz(r,n)}(x5(r,x3),x5(n,x3))}(s,a):function(e,t){if(![33,65].includes(e.length))throw Error(`Invalid publicKey provided, received ${e.length} bytes input`);return 33===e.length?e:!gw||!t&&vc()?vn(e):(0,xp.secp256k1).ProjectivePoint.fromHex(e).toRawBytes(!0)}(s,a)}(wc(n,e),i,i[64],n,a),s=wc(n,o,a),l=gT(r);// for Ethereum (keccak) the last 20 bytes is the address
        return wl(o,l)||("keccak"===n?wl(s.slice(-20),l.slice(-20)):wl(s,l))})(t,r,n,e),wp=[["ecdsa",wf("blake2")],["ethereum",wf("keccak")]];[...wp],new Uint8Array,new Uint8Array,new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]),new Uint32Array([5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252]);var oI=A("dEXSZ");new Uint8Array([161,35,3,33,0]);const wh=new Uint8Array([48,83,2,1,1,48,5,6,3,43,101,112,4,34,4,32]);wh.length,new Uint8Array,new Uint8Array([2]),new Uint8Array([0]),new Uint8Array([2]),new Uint8Array([1]),!function(e){// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/
var t,r=function(e){var t,r=new Float64Array(16);if(e)for(t=0;t<e.length;t++)r[t]=e[t];return r},n=function(){throw Error("no PRNG")},a=new Uint8Array(16),i=new Uint8Array(32);i[0]=9;var o=r(),s=r([1]),l=r([56129,1]),c=r([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),u=r([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),d=r([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),f=r([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),p=r([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function h(e,t,r,n){e[t]=r>>24&255,e[t+1]=r>>16&255,e[t+2]=r>>8&255,e[t+3]=255&r,e[t+4]=n>>24&255,e[t+5]=n>>16&255,e[t+6]=n>>8&255,e[t+7]=255&n}function b(e,t,r,n,a){var i,o=0;for(i=0;i<a;i++)o|=e[t+i]^r[n+i];return(1&o-1>>>8)-1}function y(e,t,r,n){return b(e,t,r,n,16)}function m(e,t,r,n){return b(e,t,r,n,32)}function g(e,t,r,n){!function(e,t,r,n){for(var a,i=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,o=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,s=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,l=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,c=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,u=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,d=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,f=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,p=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,h=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,b=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,y=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,m=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,g=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,v=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,x=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,w=i,P=o,O=s,T=l,z=c,k=u,L=d,E=f,N=p,S=h,M=b,j=y,H=m,R=g,I=v,B=x,V=0;V<20;V+=2)z^=(a=w+H|0)<<7|a>>>25,N^=(a=z+w|0)<<9|a>>>23,H^=(a=N+z|0)<<13|a>>>19,w^=(a=H+N|0)<<18|a>>>14,S^=(a=k+P|0)<<7|a>>>25,R^=(a=S+k|0)<<9|a>>>23,P^=(a=R+S|0)<<13|a>>>19,k^=(a=P+R|0)<<18|a>>>14,I^=(a=M+L|0)<<7|a>>>25,O^=(a=I+M|0)<<9|a>>>23,L^=(a=O+I|0)<<13|a>>>19,M^=(a=L+O|0)<<18|a>>>14,T^=(a=B+j|0)<<7|a>>>25,E^=(a=T+B|0)<<9|a>>>23,j^=(a=E+T|0)<<13|a>>>19,B^=(a=j+E|0)<<18|a>>>14,P^=(a=w+T|0)<<7|a>>>25,O^=(a=P+w|0)<<9|a>>>23,T^=(a=O+P|0)<<13|a>>>19,w^=(a=T+O|0)<<18|a>>>14,L^=(a=k+z|0)<<7|a>>>25,E^=(a=L+k|0)<<9|a>>>23,z^=(a=E+L|0)<<13|a>>>19,k^=(a=z+E|0)<<18|a>>>14,j^=(a=M+S|0)<<7|a>>>25,N^=(a=j+M|0)<<9|a>>>23,S^=(a=N+j|0)<<13|a>>>19,M^=(a=S+N|0)<<18|a>>>14,H^=(a=B+I|0)<<7|a>>>25,R^=(a=H+B|0)<<9|a>>>23,I^=(a=R+H|0)<<13|a>>>19,B^=(a=I+R|0)<<18|a>>>14;w=w+i|0,P=P+o|0,O=O+s|0,T=T+l|0,z=z+c|0,k=k+u|0,L=L+d|0,E=E+f|0,N=N+p|0,S=S+h|0,M=M+b|0,j=j+y|0,H=H+m|0,R=R+g|0,I=I+v|0,B=B+x|0,e[0]=w>>>0&255,e[1]=w>>>8&255,e[2]=w>>>16&255,e[3]=w>>>24&255,e[4]=P>>>0&255,e[5]=P>>>8&255,e[6]=P>>>16&255,e[7]=P>>>24&255,e[8]=O>>>0&255,e[9]=O>>>8&255,e[10]=O>>>16&255,e[11]=O>>>24&255,e[12]=T>>>0&255,e[13]=T>>>8&255,e[14]=T>>>16&255,e[15]=T>>>24&255,e[16]=z>>>0&255,e[17]=z>>>8&255,e[18]=z>>>16&255,e[19]=z>>>24&255,e[20]=k>>>0&255,e[21]=k>>>8&255,e[22]=k>>>16&255,e[23]=k>>>24&255,e[24]=L>>>0&255,e[25]=L>>>8&255,e[26]=L>>>16&255,e[27]=L>>>24&255,e[28]=E>>>0&255,e[29]=E>>>8&255,e[30]=E>>>16&255,e[31]=E>>>24&255,e[32]=N>>>0&255,e[33]=N>>>8&255,e[34]=N>>>16&255,e[35]=N>>>24&255,e[36]=S>>>0&255,e[37]=S>>>8&255,e[38]=S>>>16&255,e[39]=S>>>24&255,e[40]=M>>>0&255,e[41]=M>>>8&255,e[42]=M>>>16&255,e[43]=M>>>24&255,e[44]=j>>>0&255,e[45]=j>>>8&255,e[46]=j>>>16&255,e[47]=j>>>24&255,e[48]=H>>>0&255,e[49]=H>>>8&255,e[50]=H>>>16&255,e[51]=H>>>24&255,e[52]=R>>>0&255,e[53]=R>>>8&255,e[54]=R>>>16&255,e[55]=R>>>24&255,e[56]=I>>>0&255,e[57]=I>>>8&255,e[58]=I>>>16&255,e[59]=I>>>24&255,e[60]=B>>>0&255,e[61]=B>>>8&255,e[62]=B>>>16&255,e[63]=B>>>24&255}(e,t,r,n)}function v(e,t,r,n){!function(e,t,r,n){for(var a,i=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,o=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,s=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,l=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,c=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,u=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,d=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,f=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,p=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,h=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,b=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,y=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,m=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,g=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,v=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,x=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,w=i,P=o,O=s,T=l,z=c,k=u,L=d,E=f,N=p,S=h,M=b,j=y,H=m,R=g,I=v,B=x,V=0;V<20;V+=2)z^=(a=w+H|0)<<7|a>>>25,N^=(a=z+w|0)<<9|a>>>23,H^=(a=N+z|0)<<13|a>>>19,w^=(a=H+N|0)<<18|a>>>14,S^=(a=k+P|0)<<7|a>>>25,R^=(a=S+k|0)<<9|a>>>23,P^=(a=R+S|0)<<13|a>>>19,k^=(a=P+R|0)<<18|a>>>14,I^=(a=M+L|0)<<7|a>>>25,O^=(a=I+M|0)<<9|a>>>23,L^=(a=O+I|0)<<13|a>>>19,M^=(a=L+O|0)<<18|a>>>14,T^=(a=B+j|0)<<7|a>>>25,E^=(a=T+B|0)<<9|a>>>23,j^=(a=E+T|0)<<13|a>>>19,B^=(a=j+E|0)<<18|a>>>14,P^=(a=w+T|0)<<7|a>>>25,O^=(a=P+w|0)<<9|a>>>23,T^=(a=O+P|0)<<13|a>>>19,w^=(a=T+O|0)<<18|a>>>14,L^=(a=k+z|0)<<7|a>>>25,E^=(a=L+k|0)<<9|a>>>23,z^=(a=E+L|0)<<13|a>>>19,k^=(a=z+E|0)<<18|a>>>14,j^=(a=M+S|0)<<7|a>>>25,N^=(a=j+M|0)<<9|a>>>23,S^=(a=N+j|0)<<13|a>>>19,M^=(a=S+N|0)<<18|a>>>14,H^=(a=B+I|0)<<7|a>>>25,R^=(a=H+B|0)<<9|a>>>23,I^=(a=R+H|0)<<13|a>>>19,B^=(a=I+R|0)<<18|a>>>14;e[0]=w>>>0&255,e[1]=w>>>8&255,e[2]=w>>>16&255,e[3]=w>>>24&255,e[4]=k>>>0&255,e[5]=k>>>8&255,e[6]=k>>>16&255,e[7]=k>>>24&255,e[8]=M>>>0&255,e[9]=M>>>8&255,e[10]=M>>>16&255,e[11]=M>>>24&255,e[12]=B>>>0&255,e[13]=B>>>8&255,e[14]=B>>>16&255,e[15]=B>>>24&255,e[16]=L>>>0&255,e[17]=L>>>8&255,e[18]=L>>>16&255,e[19]=L>>>24&255,e[20]=E>>>0&255,e[21]=E>>>8&255,e[22]=E>>>16&255,e[23]=E>>>24&255,e[24]=N>>>0&255,e[25]=N>>>8&255,e[26]=N>>>16&255,e[27]=N>>>24&255,e[28]=S>>>0&255,e[29]=S>>>8&255,e[30]=S>>>16&255,e[31]=S>>>24&255}(e,t,r,n)}var x=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);// "expand 32-byte k"
function w(e,t,r,n,a,i,o){var s,l,c=new Uint8Array(16),u=new Uint8Array(64);for(l=0;l<16;l++)c[l]=0;for(l=0;l<8;l++)c[l]=i[l];for(;a>=64;){for(g(u,c,o,x),l=0;l<64;l++)e[t+l]=r[n+l]^u[l];for(l=8,s=1;l<16;l++)s=s+(255&c[l])|0,c[l]=255&s,s>>>=8;a-=64,t+=64,n+=64}if(a>0)for(g(u,c,o,x),l=0;l<a;l++)e[t+l]=r[n+l]^u[l];return 0}function P(e,t,r,n,a){var i,o,s=new Uint8Array(16),l=new Uint8Array(64);for(o=0;o<16;o++)s[o]=0;for(o=0;o<8;o++)s[o]=n[o];for(;r>=64;){for(g(l,s,a,x),o=0;o<64;o++)e[t+o]=l[o];for(o=8,i=1;o<16;o++)i=i+(255&s[o])|0,s[o]=255&i,i>>>=8;r-=64,t+=64}if(r>0)for(g(l,s,a,x),o=0;o<r;o++)e[t+o]=l[o];return 0}function O(e,t,r,n,a){var i=new Uint8Array(32);v(i,n,a,x);for(var o=new Uint8Array(8),s=0;s<8;s++)o[s]=n[s+16];return P(e,t,r,o,i)}function T(e,t,r,n,a,i,o){var s=new Uint8Array(32);v(s,i,o,x);for(var l=new Uint8Array(8),c=0;c<8;c++)l[c]=i[c+16];return w(e,t,r,n,a,l,s)}/*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/var z=function(e){var t,r,n,a,i,o,s,l;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,t=255&e[0]|(255&e[1])<<8,this.r[0]=8191&t,r=255&e[2]|(255&e[3])<<8,this.r[1]=(t>>>13|r<<3)&8191,n=255&e[4]|(255&e[5])<<8,this.r[2]=(r>>>10|n<<6)&7939,a=255&e[6]|(255&e[7])<<8,this.r[3]=(n>>>7|a<<9)&8191,i=255&e[8]|(255&e[9])<<8,this.r[4]=(a>>>4|i<<12)&255,this.r[5]=i>>>1&8190,o=255&e[10]|(255&e[11])<<8,this.r[6]=(i>>>14|o<<2)&8191,s=255&e[12]|(255&e[13])<<8,this.r[7]=(o>>>11|s<<5)&8065,l=255&e[14]|(255&e[15])<<8,this.r[8]=(s>>>8|l<<8)&8191,this.r[9]=l>>>5&127,this.pad[0]=255&e[16]|(255&e[17])<<8,this.pad[1]=255&e[18]|(255&e[19])<<8,this.pad[2]=255&e[20]|(255&e[21])<<8,this.pad[3]=255&e[22]|(255&e[23])<<8,this.pad[4]=255&e[24]|(255&e[25])<<8,this.pad[5]=255&e[26]|(255&e[27])<<8,this.pad[6]=255&e[28]|(255&e[29])<<8,this.pad[7]=255&e[30]|(255&e[31])<<8};function k(e,t,r,n,a,i){var o=new z(i);return o.update(r,n,a),o.finish(e,t),0}function L(e,t,r,n,a,i){var o=new Uint8Array(16);return k(o,0,r,n,a,i),y(e,t,o,0)}function E(e,t,r,n,a){var i;if(r<32)return -1;for(T(e,0,t,0,r,n,a),k(e,16,e,32,r-32,e),i=0;i<16;i++)e[i]=0;return 0}function N(e,t,r,n,a){var i,o=new Uint8Array(32);if(r<32||(O(o,0,32,n,a),0!==L(t,16,t,32,r-32,o)))return -1;for(T(e,0,t,0,r,n,a),i=0;i<32;i++)e[i]=0;return 0}function S(e,t){var r;for(r=0;r<16;r++)e[r]=0|t[r]}function M(e){var t,r,n=1;for(t=0;t<16;t++)n=Math.floor((r=e[t]+n+65535)/65536),e[t]=r-65536*n;e[0]+=n-1+37*(n-1)}function j(e,t,r){for(var n,a=~(r-1),i=0;i<16;i++)n=a&(e[i]^t[i]),e[i]^=n,t[i]^=n}function H(e,t){var n,a,i,o=r(),s=r();for(n=0;n<16;n++)s[n]=t[n];for(M(s),M(s),M(s),a=0;a<2;a++){for(n=1,o[0]=s[0]-65517;n<15;n++)o[n]=s[n]-65535-(o[n-1]>>16&1),o[n-1]&=65535;o[15]=s[15]-32767-(o[14]>>16&1),i=o[15]>>16&1,o[14]&=65535,j(s,o,1-i)}for(n=0;n<16;n++)e[2*n]=255&s[n],e[2*n+1]=s[n]>>8}function R(e,t){var r=new Uint8Array(32),n=new Uint8Array(32);return H(r,e),H(n,t),m(r,0,n,0)}function I(e){var t=new Uint8Array(32);return H(t,e),1&t[0]}function B(e,t){var r;for(r=0;r<16;r++)e[r]=t[2*r]+(t[2*r+1]<<8);e[15]&=32767}function V(e,t,r){for(var n=0;n<16;n++)e[n]=t[n]+r[n]}function X(e,t,r){for(var n=0;n<16;n++)e[n]=t[n]-r[n]}function U(e,t,r){var n,a,i=0,o=0,s=0,l=0,c=0,u=0,d=0,f=0,p=0,h=0,b=0,y=0,m=0,g=0,v=0,x=0,w=0,P=0,O=0,T=0,z=0,k=0,L=0,E=0,N=0,S=0,M=0,j=0,H=0,R=0,I=0,B=r[0],V=r[1],X=r[2],U=r[3],A=r[4],D=r[5],C=r[6],F=r[7],Z=r[8],q=r[9],G=r[10],W=r[11],Y=r[12],K=r[13],J=r[14],Q=r[15];i+=(n=t[0])*B,o+=n*V,s+=n*X,l+=n*U,c+=n*A,u+=n*D,d+=n*C,f+=n*F,p+=n*Z,h+=n*q,b+=n*G,y+=n*W,m+=n*Y,g+=n*K,v+=n*J,x+=n*Q,o+=(n=t[1])*B,s+=n*V,l+=n*X,c+=n*U,u+=n*A,d+=n*D,f+=n*C,p+=n*F,h+=n*Z,b+=n*q,y+=n*G,m+=n*W,g+=n*Y,v+=n*K,x+=n*J,w+=n*Q,s+=(n=t[2])*B,l+=n*V,c+=n*X,u+=n*U,d+=n*A,f+=n*D,p+=n*C,h+=n*F,b+=n*Z,y+=n*q,m+=n*G,g+=n*W,v+=n*Y,x+=n*K,w+=n*J,P+=n*Q,l+=(n=t[3])*B,c+=n*V,u+=n*X,d+=n*U,f+=n*A,p+=n*D,h+=n*C,b+=n*F,y+=n*Z,m+=n*q,g+=n*G,v+=n*W,x+=n*Y,w+=n*K,P+=n*J,O+=n*Q,c+=(n=t[4])*B,u+=n*V,d+=n*X,f+=n*U,p+=n*A,h+=n*D,b+=n*C,y+=n*F,m+=n*Z,g+=n*q,v+=n*G,x+=n*W,w+=n*Y,P+=n*K,O+=n*J,T+=n*Q,u+=(n=t[5])*B,d+=n*V,f+=n*X,p+=n*U,h+=n*A,b+=n*D,y+=n*C,m+=n*F,g+=n*Z,v+=n*q,x+=n*G,w+=n*W,P+=n*Y,O+=n*K,T+=n*J,z+=n*Q,d+=(n=t[6])*B,f+=n*V,p+=n*X,h+=n*U,b+=n*A,y+=n*D,m+=n*C,g+=n*F,v+=n*Z,x+=n*q,w+=n*G,P+=n*W,O+=n*Y,T+=n*K,z+=n*J,k+=n*Q,f+=(n=t[7])*B,p+=n*V,h+=n*X,b+=n*U,y+=n*A,m+=n*D,g+=n*C,v+=n*F,x+=n*Z,w+=n*q,P+=n*G,O+=n*W,T+=n*Y,z+=n*K,k+=n*J,L+=n*Q,p+=(n=t[8])*B,h+=n*V,b+=n*X,y+=n*U,m+=n*A,g+=n*D,v+=n*C,x+=n*F,w+=n*Z,P+=n*q,O+=n*G,T+=n*W,z+=n*Y,k+=n*K,L+=n*J,E+=n*Q,h+=(n=t[9])*B,b+=n*V,y+=n*X,m+=n*U,g+=n*A,v+=n*D,x+=n*C,w+=n*F,P+=n*Z,O+=n*q,T+=n*G,z+=n*W,k+=n*Y,L+=n*K,E+=n*J,N+=n*Q,b+=(n=t[10])*B,y+=n*V,m+=n*X,g+=n*U,v+=n*A,x+=n*D,w+=n*C,P+=n*F,O+=n*Z,T+=n*q,z+=n*G,k+=n*W,L+=n*Y,E+=n*K,N+=n*J,S+=n*Q,y+=(n=t[11])*B,m+=n*V,g+=n*X,v+=n*U,x+=n*A,w+=n*D,P+=n*C,O+=n*F,T+=n*Z,z+=n*q,k+=n*G,L+=n*W,E+=n*Y,N+=n*K,S+=n*J,M+=n*Q,m+=(n=t[12])*B,g+=n*V,v+=n*X,x+=n*U,w+=n*A,P+=n*D,O+=n*C,T+=n*F,z+=n*Z,k+=n*q,L+=n*G,E+=n*W,N+=n*Y,S+=n*K,M+=n*J,j+=n*Q,g+=(n=t[13])*B,v+=n*V,x+=n*X,w+=n*U,P+=n*A,O+=n*D,T+=n*C,z+=n*F,k+=n*Z,L+=n*q,E+=n*G,N+=n*W,S+=n*Y,M+=n*K,j+=n*J,H+=n*Q,v+=(n=t[14])*B,x+=n*V,w+=n*X,P+=n*U,O+=n*A,T+=n*D,z+=n*C,k+=n*F,L+=n*Z,E+=n*q,N+=n*G,S+=n*W,M+=n*Y,j+=n*K,H+=n*J,R+=n*Q,x+=(n=t[15])*B,w+=n*V,P+=n*X,O+=n*U,T+=n*A,z+=n*D,k+=n*C,L+=n*F,E+=n*Z,N+=n*q,S+=n*G,M+=n*W,j+=n*Y,H+=n*K,R+=n*J,I+=n*Q,i+=38*w,o+=38*P,s+=38*O,l+=38*T,c+=38*z,u+=38*k,d+=38*L,f+=38*E,p+=38*N,h+=38*S,b+=38*M,y+=38*j,m+=38*H,g+=38*R,v+=38*I,a=Math.floor((n=i+// t15 left as is
// first car
(a=1)+65535)/65536),i=n-65536*a,a=Math.floor((n=o+a+65535)/65536),o=n-65536*a,a=Math.floor((n=s+a+65535)/65536),s=n-65536*a,a=Math.floor((n=l+a+65535)/65536),l=n-65536*a,a=Math.floor((n=c+a+65535)/65536),c=n-65536*a,a=Math.floor((n=u+a+65535)/65536),u=n-65536*a,a=Math.floor((n=d+a+65535)/65536),d=n-65536*a,a=Math.floor((n=f+a+65535)/65536),f=n-65536*a,a=Math.floor((n=p+a+65535)/65536),p=n-65536*a,a=Math.floor((n=h+a+65535)/65536),h=n-65536*a,a=Math.floor((n=b+a+65535)/65536),b=n-65536*a,a=Math.floor((n=y+a+65535)/65536),y=n-65536*a,a=Math.floor((n=m+a+65535)/65536),m=n-65536*a,a=Math.floor((n=g+a+65535)/65536),g=n-65536*a,a=Math.floor((n=v+a+65535)/65536),v=n-65536*a,a=Math.floor((n=x+a+65535)/65536),x=n-65536*a,i+=a-1+37*(a-1),a=Math.floor((n=i+// second car
(a=1)+65535)/65536),i=n-65536*a,a=Math.floor((n=o+a+65535)/65536),o=n-65536*a,a=Math.floor((n=s+a+65535)/65536),s=n-65536*a,a=Math.floor((n=l+a+65535)/65536),l=n-65536*a,a=Math.floor((n=c+a+65535)/65536),c=n-65536*a,a=Math.floor((n=u+a+65535)/65536),u=n-65536*a,a=Math.floor((n=d+a+65535)/65536),d=n-65536*a,a=Math.floor((n=f+a+65535)/65536),f=n-65536*a,a=Math.floor((n=p+a+65535)/65536),p=n-65536*a,a=Math.floor((n=h+a+65535)/65536),h=n-65536*a,a=Math.floor((n=b+a+65535)/65536),b=n-65536*a,a=Math.floor((n=y+a+65535)/65536),y=n-65536*a,a=Math.floor((n=m+a+65535)/65536),m=n-65536*a,a=Math.floor((n=g+a+65535)/65536),g=n-65536*a,a=Math.floor((n=v+a+65535)/65536),v=n-65536*a,a=Math.floor((n=x+a+65535)/65536),x=n-65536*a,i+=a-1+37*(a-1),e[0]=i,e[1]=o,e[2]=s,e[3]=l,e[4]=c,e[5]=u,e[6]=d,e[7]=f,e[8]=p,e[9]=h,e[10]=b,e[11]=y,e[12]=m,e[13]=g,e[14]=v,e[15]=x}function D(e,t){U(e,t,t)}function C(e,t){var n,a=r();for(n=0;n<16;n++)a[n]=t[n];for(n=253;n>=0;n--)D(a,a),2!==n&&4!==n&&U(a,a,t);for(n=0;n<16;n++)e[n]=a[n]}function F(e,t){var n,a=r();for(n=0;n<16;n++)a[n]=t[n];for(n=250;n>=0;n--)D(a,a),1!==n&&U(a,a,t);for(n=0;n<16;n++)e[n]=a[n]}function Z(e,t,n){var a,i,o=new Uint8Array(32),s=new Float64Array(80),c=r(),u=r(),d=r(),f=r(),p=r(),h=r();for(i=0;i<31;i++)o[i]=t[i];for(o[31]=127&t[31]|64,o[0]&=248,B(s,n),i=0;i<16;i++)u[i]=s[i],f[i]=c[i]=d[i]=0;for(i=254,c[0]=f[0]=1;i>=0;--i)j(c,u,a=o[i>>>3]>>>(7&i)&1),j(d,f,a),V(p,c,d),X(c,c,d),V(d,u,f),X(u,u,f),D(f,p),D(h,c),U(c,d,c),U(d,u,p),V(p,c,d),X(c,c,d),D(u,c),X(d,f,h),U(c,d,l),V(c,c,f),U(d,d,c),U(c,f,h),U(f,u,s),D(u,p),j(c,u,a),j(d,f,a);for(i=0;i<16;i++)s[i+16]=c[i],s[i+32]=d[i],s[i+48]=u[i],s[i+64]=f[i];var b=s.subarray(32),y=s.subarray(16);return C(b,b),U(y,y,b),H(e,y),0}function q(e,t){return Z(e,t,i)}function G(e,t){return n(t,32),q(e,t)}function W(e,t,r){var n=new Uint8Array(32);return Z(n,r,t),v(e,a,n,x)}z.prototype.blocks=function(e,t,r){for(var n,a,i,o,s,l,c,u,d,f,p,h,b,y,m,g,v,x,w,P=this.fin?0:2048,O=this.h[0],T=this.h[1],z=this.h[2],k=this.h[3],L=this.h[4],E=this.h[5],N=this.h[6],S=this.h[7],M=this.h[8],j=this.h[9],H=this.r[0],R=this.r[1],I=this.r[2],B=this.r[3],V=this.r[4],X=this.r[5],U=this.r[6],A=this.r[7],D=this.r[8],C=this.r[9];r>=16;)O+=8191&(n=255&e[t+0]|(255&e[t+1])<<8),T+=(n>>>13|(a=255&e[t+2]|(255&e[t+3])<<8)<<3)&8191,z+=(a>>>10|(i=255&e[t+4]|(255&e[t+5])<<8)<<6)&8191,k+=(i>>>7|(o=255&e[t+6]|(255&e[t+7])<<8)<<9)&8191,L+=(o>>>4|(s=255&e[t+8]|(255&e[t+9])<<8)<<12)&8191,E+=s>>>1&8191,N+=(s>>>14|(l=255&e[t+10]|(255&e[t+11])<<8)<<2)&8191,S+=(l>>>11|(c=255&e[t+12]|(255&e[t+13])<<8)<<5)&8191,M+=(c>>>8|(u=255&e[t+14]|(255&e[t+15])<<8)<<8)&8191,j+=u>>>5|P,d=(f=(d=0)+O*H+T*(5*C)+z*(5*D)+k*(5*A)+L*(5*U))>>>13,f&=8191,f+=E*(5*X)+N*(5*V)+S*(5*B)+M*(5*I)+j*(5*R),d+=f>>>13,f&=8191,d=(p=d+O*R+T*H+z*(5*C)+k*(5*D)+L*(5*A))>>>13,p&=8191,p+=E*(5*U)+N*(5*X)+S*(5*V)+M*(5*B)+j*(5*I),d+=p>>>13,p&=8191,d=(h=d+O*I+T*R+z*H+k*(5*C)+L*(5*D))>>>13,h&=8191,h+=E*(5*A)+N*(5*U)+S*(5*X)+M*(5*V)+j*(5*B),d+=h>>>13,h&=8191,d=(b=d+O*B+T*I+z*R+k*H+L*(5*C))>>>13,b&=8191,b+=E*(5*D)+N*(5*A)+S*(5*U)+M*(5*X)+j*(5*V),d+=b>>>13,b&=8191,d=(y=d+O*V+T*B+z*I+k*R+L*H)>>>13,y&=8191,y+=E*(5*C)+N*(5*D)+S*(5*A)+M*(5*U)+j*(5*X),d+=y>>>13,y&=8191,d=(m=d+O*X+T*V+z*B+k*I+L*R)>>>13,m&=8191,m+=E*H+N*(5*C)+S*(5*D)+M*(5*A)+j*(5*U),d+=m>>>13,m&=8191,d=(g=d+O*U+T*X+z*V+k*B+L*I)>>>13,g&=8191,g+=E*R+N*H+S*(5*C)+M*(5*D)+j*(5*A),d+=g>>>13,g&=8191,d=(v=d+O*A+T*U+z*X+k*V+L*B)>>>13,v&=8191,v+=E*I+N*R+S*H+M*(5*C)+j*(5*D),d+=v>>>13,v&=8191,d=(x=d+O*D+T*A+z*U+k*X+L*V)>>>13,x&=8191,x+=E*B+N*I+S*R+M*H+j*(5*C),d+=x>>>13,x&=8191,d=(w=d+O*C+T*D+z*A+k*U+L*X)>>>13,w&=8191,w+=E*V+N*B+S*I+M*R+j*H,d+=w>>>13,w&=8191,f=8191&(d=(d=(d<<2)+d|0)+f|0),d>>>=13,p+=d,O=f,T=p,z=h,k=b,L=y,E=m,N=g,S=v,M=x,j=w,t+=16,r-=16;this.h[0]=O,this.h[1]=T,this.h[2]=z,this.h[3]=k,this.h[4]=L,this.h[5]=E,this.h[6]=N,this.h[7]=S,this.h[8]=M,this.h[9]=j},z.prototype.finish=function(e,t){var r,n,a,i,o=new Uint16Array(10);if(this.leftover){for(i=this.leftover,this.buffer[i++]=1;i<16;i++)this.buffer[i]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(r=this.h[1]>>>13,this.h[1]&=8191,i=2;i<10;i++)this.h[i]+=r,r=this.h[i]>>>13,this.h[i]&=8191;for(this.h[0]+=5*r,r=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=r,r=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=r,o[0]=this.h[0]+5,r=o[0]>>>13,o[0]&=8191,i=1;i<10;i++)o[i]=this.h[i]+r,r=o[i]>>>13,o[i]&=8191;for(o[9]-=8192,n=(1^r)-1,i=0;i<10;i++)o[i]&=n;for(i=0,n=~n;i<10;i++)this.h[i]=this.h[i]&n|o[i];for(i=1,this.h[0]=(this.h[0]|this.h[1]<<13)&65535,this.h[1]=(this.h[1]>>>3|this.h[2]<<10)&65535,this.h[2]=(this.h[2]>>>6|this.h[3]<<7)&65535,this.h[3]=(this.h[3]>>>9|this.h[4]<<4)&65535,this.h[4]=(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14)&65535,this.h[5]=(this.h[6]>>>2|this.h[7]<<11)&65535,this.h[6]=(this.h[7]>>>5|this.h[8]<<8)&65535,this.h[7]=(this.h[8]>>>8|this.h[9]<<5)&65535,a=this.h[0]+this.pad[0],this.h[0]=65535&a;i<8;i++)a=(this.h[i]+this.pad[i]|0)+(a>>>16)|0,this.h[i]=65535&a;e[t+0]=this.h[0]>>>0&255,e[t+1]=this.h[0]>>>8&255,e[t+2]=this.h[1]>>>0&255,e[t+3]=this.h[1]>>>8&255,e[t+4]=this.h[2]>>>0&255,e[t+5]=this.h[2]>>>8&255,e[t+6]=this.h[3]>>>0&255,e[t+7]=this.h[3]>>>8&255,e[t+8]=this.h[4]>>>0&255,e[t+9]=this.h[4]>>>8&255,e[t+10]=this.h[5]>>>0&255,e[t+11]=this.h[5]>>>8&255,e[t+12]=this.h[6]>>>0&255,e[t+13]=this.h[6]>>>8&255,e[t+14]=this.h[7]>>>0&255,e[t+15]=this.h[7]>>>8&255},z.prototype.update=function(e,t,r){var n,a;if(this.leftover){for((a=16-this.leftover)>r&&(a=r),n=0;n<a;n++)this.buffer[this.leftover+n]=e[t+n];if(r-=a,t+=a,this.leftover+=a,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(r>=16&&(a=r-r%16,this.blocks(e,t,a),t+=a,r-=a),r){for(n=0;n<r;n++)this.buffer[this.leftover+n]=e[t+n];this.leftover+=r}};var Y=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function K(e,t,r,n){for(var a,i,o,s,l,c,u,d,f,p,h,b,y,m,g,v,x,w,P,O,T,z,k,L,E,N,S=new Int32Array(16),M=new Int32Array(16),j=e[0],H=e[1],R=e[2],I=e[3],B=e[4],V=e[5],X=e[6],U=e[7],A=t[0],D=t[1],C=t[2],F=t[3],Z=t[4],q=t[5],G=t[6],W=t[7],K=0;n>=128;){for(P=0;P<16;P++)O=8*P+K,S[P]=r[O+0]<<24|r[O+1]<<16|r[O+2]<<8|r[O+3],M[P]=r[O+4]<<24|r[O+5]<<16|r[O+6]<<8|r[O+7];for(P=0;P<80;P++)if(a=j,i=H,o=R,s=I,l=B,c=V,u=X,d=U,f=A,p=D,h=C,b=F,y=Z,m=q,g=G,v=W,// add
T=U,k=65535&(z=W),L=z>>>16,E=65535&T,N=T>>>16,// Sigma1
T=(B>>>14|Z<<18)^(B>>>18|Z<<14)^(Z>>>9|B<<23),k+=65535&(z=(Z>>>14|B<<18)^(Z>>>18|B<<14)^(B>>>9|Z<<23)),L+=z>>>16,E+=65535&T,N+=T>>>16,// Ch
T=B&V^~B&X,k+=65535&(z=Z&q^~Z&G),L+=z>>>16,E+=65535&T,N+=T>>>16,// K
T=Y[2*P],k+=65535&(z=Y[2*P+1]),L+=z>>>16,E+=65535&T,N+=T>>>16,// w
T=S[P%16],k+=65535&(z=M[P%16]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,x=65535&E|N<<16,w=65535&k|L<<16,// add
T=x,k=65535&(z=w),L=z>>>16,E=65535&T,N=T>>>16,// Sigma0
T=(j>>>28|A<<4)^(A>>>2|j<<30)^(A>>>7|j<<25),k+=65535&(z=(A>>>28|j<<4)^(j>>>2|A<<30)^(j>>>7|A<<25)),L+=z>>>16,E+=65535&T,N+=T>>>16,// Maj
T=j&H^j&R^H&R,k+=65535&(z=A&D^A&C^D&C),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,d=65535&E|N<<16,v=65535&k|L<<16,// add
T=s,k=65535&(z=b),L=z>>>16,E=65535&T,N=T>>>16,T=x,k+=65535&(z=w),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,s=65535&E|N<<16,b=65535&k|L<<16,H=a,R=i,I=o,B=s,V=l,X=c,U=u,j=d,D=f,C=p,F=h,Z=b,q=y,G=m,W=g,A=v,P%16==15)for(O=0;O<16;O++)// add
T=S[O],k=65535&(z=M[O]),L=z>>>16,E=65535&T,N=T>>>16,T=S[(O+9)%16],k+=65535&(z=M[(O+9)%16]),L+=z>>>16,E+=65535&T,N+=T>>>16,T=(// sigma0
(x=S[(O+1)%16])>>>1|(w=M[(O+1)%16])<<31)^(x>>>8|w<<24)^x>>>7,k+=65535&(z=(w>>>1|x<<31)^(w>>>8|x<<24)^(w>>>7|x<<25)),L+=z>>>16,E+=65535&T,N+=T>>>16,T=(// sigma1
(x=S[(O+14)%16])>>>19|(w=M[(O+14)%16])<<13)^(w>>>29|x<<3)^x>>>6,k+=65535&(z=(w>>>19|x<<13)^(x>>>29|w<<3)^(w>>>6|x<<26)),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,S[O]=65535&E|N<<16,M[O]=65535&k|L<<16;// add
T=j,k=65535&(z=A),L=z>>>16,E=65535&T,N=T>>>16,T=e[0],k+=65535&(z=t[0]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[0]=j=65535&E|N<<16,t[0]=A=65535&k|L<<16,T=H,k=65535&(z=D),L=z>>>16,E=65535&T,N=T>>>16,T=e[1],k+=65535&(z=t[1]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[1]=H=65535&E|N<<16,t[1]=D=65535&k|L<<16,T=R,k=65535&(z=C),L=z>>>16,E=65535&T,N=T>>>16,T=e[2],k+=65535&(z=t[2]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[2]=R=65535&E|N<<16,t[2]=C=65535&k|L<<16,T=I,k=65535&(z=F),L=z>>>16,E=65535&T,N=T>>>16,T=e[3],k+=65535&(z=t[3]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[3]=I=65535&E|N<<16,t[3]=F=65535&k|L<<16,T=B,k=65535&(z=Z),L=z>>>16,E=65535&T,N=T>>>16,T=e[4],k+=65535&(z=t[4]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[4]=B=65535&E|N<<16,t[4]=Z=65535&k|L<<16,T=V,k=65535&(z=q),L=z>>>16,E=65535&T,N=T>>>16,T=e[5],k+=65535&(z=t[5]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[5]=V=65535&E|N<<16,t[5]=q=65535&k|L<<16,T=X,k=65535&(z=G),L=z>>>16,E=65535&T,N=T>>>16,T=e[6],k+=65535&(z=t[6]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[6]=X=65535&E|N<<16,t[6]=G=65535&k|L<<16,T=U,k=65535&(z=W),L=z>>>16,E=65535&T,N=T>>>16,T=e[7],k+=65535&(z=t[7]),L+=z>>>16,E+=65535&T,N+=T>>>16,L+=k>>>16,E+=L>>>16,N+=E>>>16,e[7]=U=65535&E|N<<16,t[7]=W=65535&k|L<<16,K+=128,n-=128}return n}function J(e,t,r){var n,a=new Int32Array(8),i=new Int32Array(8),o=new Uint8Array(256),s=r;for(a[0]=1779033703,a[1]=3144134277,a[2]=1013904242,a[3]=2773480762,a[4]=1359893119,a[5]=2600822924,a[6]=528734635,a[7]=1541459225,i[0]=4089235720,i[1]=2227873595,i[2]=4271175723,i[3]=1595750129,i[4]=2917565137,i[5]=725511199,i[6]=4215389547,i[7]=327033209,K(a,i,t,r),r%=128,n=0;n<r;n++)o[n]=t[s-r+n];for(o[r]=128,o[(r=256-128*(r<112?1:0))-9]=0,h(o,r-8,s/536870912|0,s<<3),K(a,i,o,r),n=0;n<8;n++)h(e,8*n,a[n],i[n]);return 0}function Q(e,t){var n=r(),a=r(),i=r(),o=r(),s=r(),l=r(),c=r(),d=r(),f=r();X(n,e[1],e[0]),X(f,t[1],t[0]),U(n,n,f),V(a,e[0],e[1]),V(f,t[0],t[1]),U(a,a,f),U(i,e[3],t[3]),U(i,i,u),U(o,e[2],t[2]),V(o,o,o),X(s,a,n),X(l,o,i),V(c,o,i),V(d,a,n),U(e[0],s,l),U(e[1],d,c),U(e[2],c,l),U(e[3],s,d)}function _(e,t,r){var n;for(n=0;n<4;n++)j(e[n],t[n],r)}function $(e,t){var n=r(),a=r(),i=r();C(i,t[2]),U(n,t[0],i),U(a,t[1],i),H(e,a),e[31]^=I(n)<<7}function ee(e,t,r){var n,a;for(S(e[0],o),S(e[1],s),S(e[2],s),S(e[3],o),a=255;a>=0;--a)_(e,t,n=r[a/8|0]>>(7&a)&1),Q(t,e),Q(e,e),_(e,t,n)}function et(e,t){var n=[r(),r(),r(),r()];S(n[0],d),S(n[1],f),S(n[2],s),U(n[3],d,f),ee(e,n,t)}function er(e,t,a){var i,o=new Uint8Array(64),s=[r(),r(),r(),r()];for(a||n(t,32),J(o,t,32),o[0]&=248,o[31]&=127,o[31]|=64,et(s,o),$(e,s),i=0;i<32;i++)t[i+32]=e[i];return 0}var en=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function ea(e,t){var r,n,a,i;for(n=63;n>=32;--n){for(r=0,a=n-32,i=n-12;a<i;++a)t[a]+=r-16*t[n]*en[a-(n-32)],r=Math.floor((t[a]+128)/256),t[a]-=256*r;t[a]+=r,t[n]=0}for(a=0,r=0;a<32;a++)t[a]+=r-(t[31]>>4)*en[a],r=t[a]>>8,t[a]&=255;for(a=0;a<32;a++)t[a]-=r*en[a];for(n=0;n<32;n++)t[n+1]+=t[n]>>8,e[n]=255&t[n]}function ei(e){var t,r=new Float64Array(64);for(t=0;t<64;t++)r[t]=e[t];for(t=0;t<64;t++)e[t]=0;ea(e,r)}// Note: difference from C - smlen returned, not passed as argument.
function eo(e,t,n,a){var i,o,s=new Uint8Array(64),l=new Uint8Array(64),c=new Uint8Array(64),u=new Float64Array(64),d=[r(),r(),r(),r()];J(s,a,32),s[0]&=248,s[31]&=127,s[31]|=64;var f=n+64;for(i=0;i<n;i++)e[64+i]=t[i];for(i=0;i<32;i++)e[32+i]=s[32+i];for(J(c,e.subarray(32),n+32),ei(c),et(d,c),$(e,d),i=32;i<64;i++)e[i]=a[i];for(J(l,e,n+64),ei(l),i=0;i<64;i++)u[i]=0;for(i=0;i<32;i++)u[i]=c[i];for(i=0;i<32;i++)for(o=0;o<32;o++)u[i+o]+=l[i]*s[o];return ea(e.subarray(32),u),f}function es(e,t,n,a){var i,l,u,d,f,h,b,y,g=new Uint8Array(32),v=new Uint8Array(64),x=[r(),r(),r(),r()],w=[r(),r(),r(),r()];if(n<64||(i=r(),l=r(),u=r(),d=r(),f=r(),h=r(),b=r(),(S(w[2],s),B(w[1],a),D(u,w[1]),U(d,u,c),X(u,u,w[2]),V(d,w[2],d),D(f,d),D(h,f),U(b,h,f),U(i,b,u),U(i,i,d),F(i,i),U(i,i,u),U(i,i,d),U(i,i,d),U(w[0],i,d),D(l,w[0]),U(l,l,d),R(l,u)&&U(w[0],w[0],p),D(l,w[0]),U(l,l,d),R(l,u))?-1:(I(w[0])===a[31]>>7&&X(w[0],o,w[0]),U(w[3],w[0],w[1]),0)))return -1;for(y=0;y<n;y++)e[y]=t[y];for(y=0;y<32;y++)e[y+32]=a[y];if(J(v,e,n),ei(v),ee(x,w,v),et(w,t.subarray(32)),Q(x,w),$(g,x),n-=64,m(t,0,g,0)){for(y=0;y<n;y++)e[y]=0;return -1}for(y=0;y<n;y++)e[y]=t[y+64];return n}/* High-level API */function el(e,t){if(32!==e.length)throw Error("bad key size");if(24!==t.length)throw Error("bad nonce size")}function ec(){for(var e=0;e<arguments.length;e++)if(!(arguments[e]instanceof Uint8Array))throw TypeError("unexpected type, use Uint8Array")}function eu(e){for(var t=0;t<e.length;t++)e[t]=0}e.lowlevel={crypto_core_hsalsa20:v,crypto_stream_xor:T,crypto_stream:O,crypto_stream_salsa20_xor:w,crypto_stream_salsa20:P,crypto_onetimeauth:k,crypto_onetimeauth_verify:L,crypto_verify_16:y,crypto_verify_32:m,crypto_secretbox:E,crypto_secretbox_open:N,crypto_scalarmult:Z,crypto_scalarmult_base:q,crypto_box_beforenm:W,crypto_box_afternm:E,crypto_box:function(e,t,r,n,a,i){var o=new Uint8Array(32);return W(o,a,i),E(e,t,r,n,o)},crypto_box_open:function(e,t,r,n,a,i){var o=new Uint8Array(32);return W(o,a,i),N(e,t,r,n,o)},crypto_box_keypair:G,crypto_hash:J,crypto_sign:eo,crypto_sign_keypair:er,crypto_sign_open:es,crypto_secretbox_KEYBYTES:32,crypto_secretbox_NONCEBYTES:24,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:16,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:32,crypto_box_SECRETKEYBYTES:32,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:24,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:64,crypto_sign_PUBLICKEYBYTES:32,crypto_sign_SECRETKEYBYTES:64,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64,gf:r,D:c,L:en,pack25519:H,unpack25519:B,M:U,A:V,S:D,Z:X,pow2523:F,add:Q,set25519:S,modL:ea,scalarmult:ee,scalarbase:et},e.randomBytes=function(e){var t=new Uint8Array(e);return n(t,e),t},e.secretbox=function(e,t,r){ec(e,t,r),el(r,t);for(var n=new Uint8Array(32+e.length),a=new Uint8Array(n.length),i=0;i<e.length;i++)n[i+32]=e[i];return E(a,n,n.length,t,r),a.subarray(16)},e.secretbox.open=function(e,t,r){ec(e,t,r),el(r,t);for(var n=new Uint8Array(16+e.length),a=new Uint8Array(n.length),i=0;i<e.length;i++)n[i+16]=e[i];return n.length<32||0!==N(a,n,n.length,t,r)?null:a.subarray(32)},e.secretbox.keyLength=32,e.secretbox.nonceLength=24,e.secretbox.overheadLength=16,e.scalarMult=function(e,t){if(ec(e,t),32!==e.length)throw Error("bad n size");if(32!==t.length)throw Error("bad p size");var r=new Uint8Array(32);return Z(r,e,t),r},e.scalarMult.base=function(e){if(ec(e),32!==e.length)throw Error("bad n size");var t=new Uint8Array(32);return q(t,e),t},e.scalarMult.scalarLength=32,e.scalarMult.groupElementLength=32,e.box=function(t,r,n,a){var i=e.box.before(n,a);return e.secretbox(t,r,i)},e.box.before=function(e,t){ec(e,t),function(e,t){if(32!==e.length)throw Error("bad public key size");if(32!==t.length)throw Error("bad secret key size")}(e,t);var r=new Uint8Array(32);return W(r,e,t),r},e.box.after=e.secretbox,e.box.open=function(t,r,n,a){var i=e.box.before(n,a);return e.secretbox.open(t,r,i)},e.box.open.after=e.secretbox.open,e.box.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(32);return G(e,t),{publicKey:e,secretKey:t}},e.box.keyPair.fromSecretKey=function(e){if(ec(e),32!==e.length)throw Error("bad secret key size");var t=new Uint8Array(32);return q(t,e),{publicKey:t,secretKey:new Uint8Array(e)}},e.box.publicKeyLength=32,e.box.secretKeyLength=32,e.box.sharedKeyLength=32,e.box.nonceLength=24,e.box.overheadLength=e.secretbox.overheadLength,e.sign=function(e,t){if(ec(e,t),64!==t.length)throw Error("bad secret key size");var r=new Uint8Array(64+e.length);return eo(r,e,e.length,t),r},e.sign.open=function(e,t){if(ec(e,t),32!==t.length)throw Error("bad public key size");var r=new Uint8Array(e.length),n=es(r,e,e.length,t);if(n<0)return null;for(var a=new Uint8Array(n),i=0;i<a.length;i++)a[i]=r[i];return a},e.sign.detached=function(t,r){for(var n=e.sign(t,r),a=new Uint8Array(64),i=0;i<a.length;i++)a[i]=n[i];return a},e.sign.detached.verify=function(e,t,r){if(ec(e,t,r),64!==t.length)throw Error("bad signature size");if(32!==r.length)throw Error("bad public key size");var n,a=new Uint8Array(64+e.length),i=new Uint8Array(64+e.length);for(n=0;n<64;n++)a[n]=t[n];for(n=0;n<e.length;n++)a[n+64]=e[n];return es(i,a,a.length,r)>=0},e.sign.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(64);return er(e,t),{publicKey:e,secretKey:t}},e.sign.keyPair.fromSecretKey=function(e){if(ec(e),64!==e.length)throw Error("bad secret key size");for(var t=new Uint8Array(32),r=0;r<t.length;r++)t[r]=e[32+r];return{publicKey:t,secretKey:new Uint8Array(e)}},e.sign.keyPair.fromSeed=function(e){if(ec(e),32!==e.length)throw Error("bad seed size");for(var t=new Uint8Array(32),r=new Uint8Array(64),n=0;n<32;n++)r[n]=e[n];return er(t,r,!0),{publicKey:t,secretKey:r}},e.sign.publicKeyLength=32,e.sign.secretKeyLength=64,e.sign.seedLength=32,e.sign.signatureLength=64,e.hash=function(e){ec(e);var t=new Uint8Array(64);return J(t,e,e.length),t},e.hash.hashLength=64,e.verify=function(e,t){return(// Zero length arguments are considered not equal.
ec(e,t),0!==e.length&&0!==t.length&&e.length===t.length&&0===b(e,0,t,0,e.length))},e.setPRNG=function(e){n=e},(t="undefined"!=typeof self?self.crypto||self.msCrypto:null)&&t.getRandomValues?e.setPRNG(function(e,r){var n,a=new Uint8Array(r);for(n=0;n<r;n+=65536)t.getRandomValues(a.subarray(n,n+Math.min(r-n,65536)));for(n=0;n<r;n++)e[n]=a[n];eu(a)}):// Node.js.
(t=A("kjyEk"))&&t.randomBytes&&e.setPRNG(function(e,r){var n,a=t.randomBytes(r);for(n=0;n<r;n++)e[n]=a[n];eu(a)})}({});var wb={};r(wb,"SDKError",()=>wy),r(wb,"UnauthorizedError",()=>wm),r(wb,"CTypeHashMissingError",()=>wg),r(wb,"CTypeError",()=>wv),r(wb,"CTypeIdMismatchError",()=>wx),r(wb,"CTypeUnknownPropertiesError",()=>ww),r(wb,"UnsupportedKeyError",()=>wP),r(wb,"EncryptionError",()=>wO),r(wb,"DidError",()=>wT),r(wb,"DidExporterError",()=>wz),r(wb,"DidBatchError",()=>wk),r(wb,"DidNotFoundError",()=>wL),r(wb,"DidResolveUpgradedDidError",()=>wE),r(wb,"DidDeactivatedError",()=>wN),r(wb,"ClaimHashMissingError",()=>wS),r(wb,"RevokedTypeError",()=>wM),r(wb,"OwnerMissingError",()=>wj),r(wb,"SubjectMissingError",()=>wH),r(wb,"LegitimationsMissingError",()=>wR),r(wb,"ClaimNonceMapMissingError",()=>wI),r(wb,"ClaimMissingError",()=>wB),r(wb,"AddressTypeError",()=>wV),r(wb,"HashTypeError",()=>wX),r(wb,"HashMalformedError",()=>wU),r(wb,"DataStructureError",()=>wA),r(wb,"DelegationIdTypeError",()=>wD),r(wb,"DelegationIdMissingError",()=>wC),r(wb,"DelegateSignatureMissingError",()=>wF),r(wb,"InvalidRootNodeError",()=>wZ),r(wb,"InvalidDelegationNodeError",()=>wq),r(wb,"ClaimContentsMalformedError",()=>wG),r(wb,"ObjectUnverifiableError",()=>wW),r(wb,"QuoteUnverifiableError",()=>wY),r(wb,"ClaimNonceMapMalformedError",()=>wK),r(wb,"UnknownMessageBodyTypeError",()=>wJ),r(wb,"SignatureMalformedError",()=>wQ),r(wb,"DidSubjectMismatchError",()=>w_),r(wb,"HierarchyQueryError",()=>w$),r(wb,"InvalidDidFormatError",()=>w0),r(wb,"AddressInvalidError",()=>w1),r(wb,"LegitimationsUnverifiableError",()=>w2),r(wb,"SignatureUnverifiableError",()=>w5),r(wb,"CredentialUnverifiableError",()=>w3),r(wb,"ClaimUnverifiableError",()=>w8),r(wb,"IdentityMismatchError",()=>w9),r(wb,"SubscriptionsNotSupportedError",()=>w6),r(wb,"RootHashUnverifiableError",()=>w4),r(wb,"DecodingMessageError",()=>w7),r(wb,"TimeoutError",()=>Pe),r(wb,"InvalidProofForStatementError",()=>Pt),r(wb,"NoProofForStatementError",()=>Pr),r(wb,"CodecMismatchError",()=>Pn),r(wb,"PublicCredentialError",()=>Pa);/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * KILT-specific errors with descriptions.
 *
 * @packageDocumentation
 *//* eslint-disable max-classes-per-file */class wy extends Error{constructor(e,t){super(e,t),// this line is the only reason for using SDKError
this.name=this.constructor.name}}class wm extends wy{}class wg extends wy{}class wv extends wy{}class wx extends wy{constructor(e,t){super(`Provided $id "${t}" does not match schema $id "${e}"`)}}class ww extends wy{}class wP extends wy{constructor(e){super(`The provided key type "${e}" is currently not supported`)}}class wO extends wy{}class wT extends wy{}class wz extends wy{}class wk extends wy{}class wL extends wy{}class wE extends wy{}class wN extends wy{}class wS extends wy{}class wM extends wy{}class wj extends wy{}class wH extends wy{}class wR extends wy{}class wI extends wy{}class wB extends wy{}class wV extends wy{}class wX extends wy{}class wU extends wy{constructor(e,t){e&&t?super(`Provided ${t} hash "${e}" is invalid or malformed`):e?super(`Provided hash "${e}" is invalid or malformed`):super("Provided hash invalid or malformed")}}class wA extends wy{}class wD extends wy{}class wC extends wy{}class wF extends wy{}class wZ extends wy{}class wq extends wy{}class wG extends wy{}class wW extends wy{}class wY extends wy{}class wK extends wy{constructor(e){e?super(`Nonce map malformed or incomplete for statement "${e}"`):super("Nonce map malformed or incomplete")}}class wJ extends wy{}class wQ extends wy{}class w_ extends wy{constructor(e,t){super(`The DID "${e}" doesn't match the DID Document's URI "${t}"`)}}class w$ extends wy{constructor(e){super(`Could not find root node with id "${e}"`)}}class w0 extends wy{constructor(e,t){super(`Not a valid KILT DID "${e}"`,t)}}class w1 extends wy{constructor(e,t){e&&t?super(`Provided ${t} address "${e}" is invalid`):e?super(`Provided address "${e}" is invalid`):super("Provided address invalid")}}class w2 extends wy{}class w5 extends wy{}class w3 extends wy{}class w8 extends wy{}class w9 extends wy{constructor(e,t){t&&e?super(`${t} is not owner of the ${e}`):e?super(`Identity is not owner of the ${e}`):super("Addresses expected to be equal mismatched")}}class w6 extends wy{constructor(e){super("This function is not available if the blockchain API does not support state or event subscriptions, use `WsProvider` to enable the complete feature set",e)}}class w4 extends wy{}class w7 extends wy{}class Pe extends wy{}class Pt extends wy{constructor(e){super(`Proof could not be verified for statement:
${e}`)}}class Pr extends wy{constructor(e){super(`No matching proof found for statement:
${e}`)}}class Pn extends wy{}class Pa extends wy{}new URL("undefined"!=typeof self&&self.location?self.location.origin+self.location.pathname+location.search:"https://github.com/cfworker");// https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.appendix.A
// $ref delegation
// https://github.com/json-schema-org/json-schema-spec/issues/514
// output format
// https://json-schema.org/draft/2019-09/json-schema-core.html#output
// JSON pointer
// https://tools.ietf.org/html/rfc6901
// JSON relative pointer
// https://tools.ietf.org/html/draft-handrews-relative-json-pointer-01
/* eslint-disable */// based on https://github.com/epoberezkin/ajv/blob/master/lib/compile/formats.js
const Pi=/^(\d\d\d\d)-(\d\d)-(\d\d)$/,Po=[0,31,28,31,30,31,30,31,31,30,31,30,31],Ps=/^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;function Pl(e){return e.test.bind(e)}const Pc={date:Pu,time:Pd.bind(void 0,!1),"date-time":function(e){// http://tools.ietf.org/html/rfc3339#section-5.6
let t=e.split(Pf);return 2==t.length&&Pu(t[0])&&Pd(!0,t[1])},duration:// https://github.com/ExodusMovement/schemasafe/blob/master/src/formats.js
function(e){return e.length>1&&e.length<80&&(/^P\d+([.,]\d+)?W$/.test(e)||/^P[\dYMDTHS]*(\d[.,]\d+)?[YMDHS]$/.test(e)&&/^P([.,\d]+Y)?([.,\d]+M)?([.,\d]+D)?(T([.,\d]+H)?([.,\d]+M)?([.,\d]+S)?)?$/.test(e))},uri:function(e){// http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
return Pp.test(e)&&Ph.test(e)},"uri-reference":Pl(/^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i),"uri-template":Pl(/^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i),url:Pl(/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu),email:// https://github.com/ExodusMovement/schemasafe/blob/master/src/formats.js
function(e){if('"'===e[0])return!1;let[t,r,...n]=e.split("@");return!(!t||!r||0!==n.length||t.length>64||r.length>253||"."===t[0]||t.endsWith(".")||t.includes(".."))&&!!/^[a-z0-9.-]+$/i.test(r)&&!!/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+$/i.test(t)&&r.split(".").every(e=>/^[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?$/i.test(e))},hostname:Pl(/^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i),ipv4:Pl(/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/),ipv6:Pl(/^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i),regex:function(e){if(Pb.test(e))return!1;try{return new RegExp(e),!0}catch(e){return!1}},uuid:Pl(/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i),"json-pointer":Pl(/^(?:\/(?:[^~/]|~0|~1)*)*$/),"json-pointer-uri-fragment":Pl(/^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i),"relative-json-pointer":Pl(/^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/)};function Pu(e){var t;// full-date from http://tools.ietf.org/html/rfc3339#section-5.6
let r=e.match(Pi);if(!r)return!1;let n=+r[1],a=+r[2],i=+r[3];return a>=1&&a<=12&&i>=1&&i<=(2==a&&(t=n)%4==0&&(t%100!=0||t%400==0)?29:Po[a])}function Pd(e,t){let r=t.match(Ps);if(!r)return!1;let n=+r[1],a=+r[2],i=+r[3],o=!!r[5];return(n<=23&&a<=59&&i<=59||23==n&&59==a&&60==i)&&(!e||o)}({...Pc,date:Pl(/^\d\d\d\d-[0-1]\d-[0-3]\d$/),time:Pl(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i),"date-time":Pl(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i),"uri-reference":Pl(/^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i)});const Pf=/t|\s/i,Pp=/\/|:/,Ph=/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,Pb=/[^\\]\\Z/;function Py(){// noop
}function Pm(e){var t=e(function(e){Error.call(e),e.stack=Error().stack});return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}bW?.default,Object.assign(Object.create(null),{url:"file:///node_modules/@kiltprotocol/core/node_modules/@polkadot/api/packageInfo.js"})&&new URL("file:///node_modules/@kiltprotocol/core/node_modules/@polkadot/api/packageInfo.js").pathname.substring(0,new URL("file:///node_modules/@kiltprotocol/core/node_modules/@polkadot/api/packageInfo.js").pathname.lastIndexOf("/")+1);var Pg=Pm(function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}}),Pv=function(e,t){return(Pv=Object.setPrototypeOf||({__proto__:[]})instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)};function Px(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}Pv(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function Pw(e,t){var r,n,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(l){return function(s){if(r)throw TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(o=0)),o;)try{if(r=1,n&&(a=2&s[0]?n.return:s[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,s[1])).done)return a;switch(n=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,n=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],n=0}finally{r=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,l])}}}function PP(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function PO(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,a,i=r.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)o.push(n.value)}catch(e){a={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(a)throw a.error}}return o}function PT(e,t,r){if(r||2==arguments.length)for(var n,a=0,i=t.length;a<i;a++)!n&&a in t||(n||(n=Array.prototype.slice.call(t,0,a)),n[a]=t[a]);return e.concat(n||Array.prototype.slice.call(t))}function Pz(e){return this instanceof Pz?(this.v=e,this):new Pz(e)}function Pk(e){return"function"==typeof e}"function"==typeof SuppressedError&&SuppressedError;var PL=Pm(function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(e,t){return t+1+") "+e.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}});function PE(e,t){if(e){var r=e.indexOf(t);0<=r&&e.splice(r,1)}}var PN=function(){var e;function t(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var e,t,r,n,a,i=this._parentage;if(i){if(this._parentage=null,Array.isArray(i))try{for(var o=PP(i),s=o.next();!s.done;s=o.next())s.value.remove(this)}catch(t){e={error:t}}finally{try{s&&!s.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}else i.remove(this)}var l=this.initialTeardown;if(Pk(l))try{l()}catch(e){a=e instanceof PL?e.errors:[e]}var c=this._finalizers;if(c){this._finalizers=null;try{for(var u=PP(c),d=u.next();!d.done;d=u.next()){var f=d.value;try{Pj(f)}catch(e){a=null!=a?a:[],e instanceof PL?a=PT(PT([],PO(a)),PO(e.errors)):a.push(e)}}}catch(e){r={error:e}}finally{try{d&&!d.done&&(n=u.return)&&n.call(u)}finally{if(r)throw r.error}}}if(a)throw new PL(a)}},t.prototype.add=function(e){var r;if(e&&e!==this){if(this.closed)Pj(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(e)}}},t.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},t.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},t.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&PE(t,e)},t.prototype.remove=function(e){var r=this._finalizers;r&&PE(r,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t}(),PS=PN.EMPTY;function PM(e){return e instanceof PN||e&&"closed"in e&&Pk(e.remove)&&Pk(e.add)&&Pk(e.unsubscribe)}function Pj(e){Pk(e)?e():e.unsubscribe()}var PH={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},PR={setTimeout:function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var a=PR.delegate;return(null==a?void 0:a.setTimeout)?a.setTimeout.apply(a,PT([e,t],PO(r))):setTimeout.apply(void 0,PT([e,t],PO(r)))},clearTimeout:function(e){var t=PR.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function PI(e){PR.setTimeout(function(){var t=PH.onUnhandledError;if(t)t(e);else throw e})}function PB(){}var PV=PX("C",void 0,void 0);function PX(e,t,r){return{kind:e,value:t,error:r}}var PU=null;function PA(e){if(PH.useDeprecatedSynchronousErrorHandling){var t=!PU;if(t&&(PU={errorThrown:!1,error:null}),e(),t){var r=PU,n=r.errorThrown,a=r.error;if(PU=null,n)throw a}}else e()}var PD=function(e){function t(t){var r=e.call(this)||this;return r.isStopped=!1,t?(r.destination=t,PM(t)&&t.add(r)):r.destination=PY,r}return Px(t,e),t.create=function(e,t,r){return new Pq(e,t,r)},t.prototype.next=function(e){this.isStopped?PW(PX("N",e,void 0),this):this._next(e)},t.prototype.error=function(e){this.isStopped?PW(PX("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?PW(PV,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(PN),PC=Function.prototype.bind;function PF(e,t){return PC.call(e,t)}var PZ=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){PG(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){PG(e)}else PG(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){PG(e)}},e}(),Pq=function(e){function t(t,r,n){var a,i,o=e.call(this)||this;return Pk(t)||!t?a={next:null!=t?t:void 0,error:null!=r?r:void 0,complete:null!=n?n:void 0}:o&&PH.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return o.unsubscribe()},a={next:t.next&&PF(t.next,i),error:t.error&&PF(t.error,i),complete:t.complete&&PF(t.complete,i)}):a=t,o.destination=new PZ(a),o}return Px(t,e),t}(PD);function PG(e){PH.useDeprecatedSynchronousErrorHandling?PH.useDeprecatedSynchronousErrorHandling&&PU&&(PU.errorThrown=!0,PU.error=e):PI(e)}function PW(e,t){var r=PH.onStoppedNotification;r&&PR.setTimeout(function(){return r(e,t)})}var PY={closed:!0,next:PB,error:function(e){throw e},complete:PB};function PK(e){return Pk(null==e?void 0:e.lift)}function PJ(e){return function(t){if(PK(t))return t.lift(function(t){try{return e(t,this)}catch(e){this.error(e)}});throw TypeError("Unable to lift unknown Observable type")}}function PQ(e,t,r,n,a){return new P_(e,t,r,n,a)}var P_=function(e){function t(t,r,n,a,i,o){var s=e.call(this,t)||this;return s.onFinalize=i,s.shouldUnsubscribe=o,s._next=r?function(e){try{r(e)}catch(e){t.error(e)}}:e.prototype._next,s._error=a?function(e){try{a(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,s._complete=n?function(){try{n()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,s}return Px(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;e.prototype.unsubscribe.call(this),r||null===(t=this.onFinalize)||void 0===t||t.call(this)}},t}(PD);function P$(e,t){return PJ(function(r,n){var a=0;r.subscribe(PQ(n,function(r){n.next(e.call(t,r,a++))}))})}function P0(e){return e[e.length-1]}function P1(e){var t;return(t=P0(e))&&Pk(t.schedule)?e.pop():void 0}var P2=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function P5(e){return Pk(null==e?void 0:e.then)}var P3="function"==typeof Symbol&&Symbol.observable||"@@observable";function P8(e){return e}var P9=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var n,a=this,i=(n=e)&&n instanceof PD||n&&Pk(n.next)&&Pk(n.error)&&Pk(n.complete)&&PM(n)?e:new Pq(e,t,r);return PA(function(){var e=a.operator,t=a.source;i.add(e?e.call(i,t):t?a._subscribe(i):a._trySubscribe(i))}),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=P6(t))(function(t,n){var a=new Pq({next:function(t){try{e(t)}catch(e){n(e),a.unsubscribe()}},error:n,complete:t});r.subscribe(a)})},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[P3]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===e.length?P8:1===e.length?e[0]:function(t){return e.reduce(function(e,t){return t(e)},t)})(this)},e.prototype.toPromise=function(e){var t=this;return new(e=P6(e))(function(e,r){var n;t.subscribe(function(e){return n=e},function(e){return r(e)},function(){return e(n)})})},e.create=function(t){return new e(t)},e}();function P6(e){var t;return null!==(t=null!=e?e:PH.Promise)&&void 0!==t?t:Promise}function P4(e){return Symbol.asyncIterator&&Pk(null==e?void 0:e[Symbol.asyncIterator])}function P7(e){return TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var Oe="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Ot(e){return Pk(null==e?void 0:e[Oe])}function Or(e){return function(e,t,r){if(!Symbol.asyncIterator)throw TypeError("Symbol.asyncIterator is not defined.");var n,a=r.apply(e,t||[]),i=[];return n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n;function o(e){a[e]&&(n[e]=function(t){return new Promise(function(r,n){i.push([e,t,r,n])>1||s(e,t)})})}function s(e,t){try{var r;(r=a[e](t)).value instanceof Pz?Promise.resolve(r.value.v).then(l,c):u(i[0][2],r)}catch(e){u(i[0][3],e)}}function l(e){s("next",e)}function c(e){s("throw",e)}function u(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}}(this,arguments,function(){var t,r,n;return Pw(this,function(a){switch(a.label){case 0:t=e.getReader(),a.label=1;case 1:a.trys.push([1,,9,10]),a.label=2;case 2:return[4,Pz(t.read())];case 3:if(n=(r=a.sent()).value,!r.done)return[3,5];return[4,Pz(void 0)];case 4:return[2,a.sent()];case 5:return[4,Pz(n)];case 6:return[4,a.sent()];case 7:return a.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}})})}function On(e){return Pk(null==e?void 0:e.getReader)}function Oa(e){if(e instanceof P9)return e;if(null!=e){if(Pk(e[P3]))return new P9(function(t){var r=e[P3]();if(Pk(r.subscribe))return r.subscribe(t);throw TypeError("Provided object does not correctly implement Symbol.observable")});if(P2(e))return new P9(function(t){for(var r=0;r<e.length&&!t.closed;r++)t.next(e[r]);t.complete()});if(P5(e))return new P9(function(t){e.then(function(e){t.closed||(t.next(e),t.complete())},function(e){return t.error(e)}).then(null,PI)});if(P4(e))return Oi(e);if(Ot(e))return new P9(function(t){var r,n;try{for(var a=PP(e),i=a.next();!i.done;i=a.next()){var o=i.value;if(t.next(o),t.closed)return}}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(r)throw r.error}}t.complete()});if(On(e))return Oi(Or(e))}throw P7(e)}function Oi(e){return new P9(function(t){(function(e,t){var r,n,a,i,o,s,l,c;return o=this,s=void 0,l=void 0,c=function(){var o;return Pw(this,function(s){switch(s.label){case 0:s.trys.push([0,5,6,11]),r=function(e){if(!Symbol.asyncIterator)throw TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=PP(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise(function(n,a){(function(e,t,r,n){Promise.resolve(n).then(function(t){e({value:t,done:r})},t)})(n,a,(t=e[r](t)).done,t.value)})}}}(e),s.label=1;case 1:return[4,r.next()];case 2:if((n=s.sent()).done)return[3,4];if(o=n.value,t.next(o),t.closed)return[2];s.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a={error:s.sent()},[3,11];case 6:if(s.trys.push([6,,9,10]),!(n&&!n.done&&(i=r.return)))return[3,8];return[4,i.call(r)];case 7:s.sent(),s.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}})},new(l||(l=Promise))(function(e,t){function r(e){try{a(c.next(e))}catch(e){t(e)}}function n(e){try{a(c.throw(e))}catch(e){t(e)}}function a(t){var a;t.done?e(t.value):((a=t.value)instanceof l?a:new l(function(e){e(a)})).then(r,n)}a((c=c.apply(o,s||[])).next())})})(e,t).catch(function(e){return t.error(e)})})}function Oo(e,t,r,n,a){void 0===n&&(n=0),void 0===a&&(a=!1);var i=t.schedule(function(){r(),a?e.add(this.schedule(null,n)):this.unsubscribe()},n);if(e.add(i),!a)return i}function Os(e,t){return void 0===t&&(t=0),PJ(function(r,n){r.subscribe(PQ(n,function(r){return Oo(n,e,function(){return n.next(r)},t)},function(){return Oo(n,e,function(){return n.complete()},t)},function(r){return Oo(n,e,function(){return n.error(r)},t)}))})}function Ol(e,t){return void 0===t&&(t=0),PJ(function(r,n){n.add(e.schedule(function(){return r.subscribe(n)},t))})}function Oc(e,t){if(!e)throw Error("Iterable cannot be null");return new P9(function(r){Oo(r,t,function(){var n=e[Symbol.asyncIterator]();Oo(r,t,function(){n.next().then(function(e){e.done?r.complete():r.next(e.value)})},0,!0)})})}function Ou(e,t){return t?function(e,t){if(null!=e){if(Pk(e[P3]))return Oa(e).pipe(Ol(t),Os(t));if(P2(e))return new P9(function(r){var n=0;return t.schedule(function(){n===e.length?r.complete():(r.next(e[n++]),r.closed||this.schedule())})});if(P5(e))return Oa(e).pipe(Ol(t),Os(t));if(P4(e))return Oc(e,t);if(Ot(e))return new P9(function(r){var n;return Oo(r,t,function(){n=e[Oe](),Oo(r,t,function(){var e,t,a;try{t=(e=n.next()).value,a=e.done}catch(e){r.error(e);return}a?r.complete():r.next(t)},0,!0)}),function(){return Pk(null==n?void 0:n.return)&&n.return()}});if(On(e))return Oc(Or(e),t)}throw P7(e)}(e,t):Oa(e)}function Od(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=P1(e);return Ou(e,r)}function Of(e,t){return PJ(function(r,n){var a=null,i=0,o=!1,s=function(){return o&&!a&&n.complete()};r.subscribe(PQ(n,function(r){null==a||a.unsubscribe();var o=0,l=i++;Oa(e(r,l)).subscribe(a=PQ(n,function(e){return n.next(t?t(r,e,l,o++):e)},function(){a=null,s()}))},function(){o=!0,s()}))})}/**
 * @name isString
 * @summary Tests for a string.
 * @description
 * Checks to see if the input value is a JavaScript string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isString } from '@polkadot/util';
 *
 * console.log('isString', isString('test')); // => true
 * ```
 */function Op(e){return"string"==typeof e||e instanceof String}/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */function Oh(e){// here we defer the instanceof check which is actually slightly
// slower than just checking the constrctor (direct instances)
return(e&&e.constructor)===Uint8Array||e instanceof Uint8Array}const Ob="0123456789abcdef",Oy=new Uint8Array(256),Om=new Uint8Array(65536);for(let e=0,t=Ob.length;e<t;e++)Oy[0|Ob[e].charCodeAt(0)]=0|e,e>9&&(Oy[0|Ob[e].toUpperCase().charCodeAt(0)]=0|e);for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)Om[t|r]=Oy[e]<<4|Oy[r]}function Og(e,t=-1){if(!e)return new Uint8Array;let r=e.startsWith("0x")?2:0,n=Math.ceil((e.length-r)/2),a=Math.ceil(-1===t?n:t/8),i=new Uint8Array(a),o=a>n?a-n:0;for(let t=o;t<a;t++,r+=2)// HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
// same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
// also the faster operation by at least 2x with the character map above
i[t]=Om[e.charCodeAt(r)<<8|e.charCodeAt(r+1)];return i}const Ov="function"==typeof sh&&"function"==typeof sh.asIntN,Ox="function"==typeof o9.Buffer&&"function"==typeof o9.Buffer.isBuffer;/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */function Ow(e){return"function"==typeof e}function OP(e){// we do check a function first, since it is slightly faster than isBuffer itself
return Ox&&!!e&&Ow(e.readDoubleLE)&&o9.Buffer.isBuffer(e)}o9.process;const OO=/^0x[\da-fA-F]+$/,OT=/^[\da-fA-F]+$/;function Oz(e,t=-1,r){return"string"==typeof e&&("0x"===e||OO.test(e))&&(-1===t?r||e.length%2==0:e.length===2+Math.ceil(t/4))}const Ok=new o8.TextEncoder;function OL(e){return e?Ok.encode(e.toString()):new Uint8Array}function OE(e){return Oh(e)?OP(e)?new Uint8Array(e):e:Oz(e)?Og(e):Array.isArray(e)?new Uint8Array(e):OL(e)}/**
 * @name isBoolean
 * @summary Tests for a boolean value.
 * @description
 * Checks to see if the input value is a JavaScript boolean.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBoolean } from '@polkadot/util';
 *
 * isBoolean(false); // => true
 * ```
 */function ON(e){return"boolean"==typeof e}const OS=/^0x[\da-fA-F]+$/,OM=/^[\da-fA-F]+$/;function Oj(e,t=-1,r){return"string"==typeof e&&("0x"===e||OS.test(e))&&(-1===t?r||e.length%2==0:e.length===2+Math.ceil(t/4))}/**
 * @name isObject
 * @summary Tests for an `object`.
 * @description
 * Checks to see if the input value is a JavaScript object.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isObject } from '@polkadot/util';
 *
 * isObject({}); // => true
 * isObject('something'); // => false
 * ```
 */function OH(e){return!!e&&"object"==typeof e}/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */function OR(e){// here we defer the instanceof check which is actually slightly
// slower than just checking the constrctor (direct instances)
return(e&&e.constructor)===Uint8Array||e instanceof Uint8Array}/**
 * @name isUndefined
 * @summary Tests for a `undefined` values.
 * @description
 * Checks to see if the input value is `undefined`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUndefined } from '@polkadot/util';
 *
 * console.log('isUndefined', isUndefined(void(0))); // => true
 * ```
 */function OI(e){return void 0===e}function OB(e,t,r,n){for(let a=0,i=t.length;a<i;a++)!/**
 * @name objectProperty
 * @summary Assign a get property on the input object
 */function(e,t,r,n,a=0){let i=n?n(t,a):t;// There are 3 approaches here -
//  - Object.prototype.hasOwnProperty.call(that, key) - this only checks the current class, i.e
//    will retuirn false if the property is set in the parent class
//  - isUndefined(...) - this may yield a false positive when the property is there, but not set.
//    Additionally, on pre-defined getters it may make a call
//  - key in that - Does not need to be combined with either of the above and checks the full chain
i in e||Object.defineProperty(e,i,{enumerable:!0,// Unlike in lazy, we always call into the upper function, i.e. this method
// does not cache old values (it is expected to be used for dynamic values)
get:function(){return r(t,a,this)}})}(e,t[a],r,n,a)}const OV=Array(256),OX=Array(256);for(let e=0,t=OV.length;e<t;e++)OX[e]=String.fromCharCode(e).toLowerCase(),OV[e]=String.fromCharCode(e).toUpperCase();/** @internal */function OU(e){return e.slice(0,e.length-1).toLowerCase()+OV[e.charCodeAt(e.length-1)]}/**
 * @internal
 *
 * Inspired by https://stackoverflow.com/a/2970667
 *
 * This is not as optimal as the original SO answer (we split into per-word),
 * however it does pass the tests (which the SO version doesn't) and is still
 * a major improvement over the original camelcase npm package -
 *
 *   camelcase: 20.88 μs/op
 *        this:  1.00 μs/op
 *
 * Caveat of this: only Ascii, but acceptable for the intended usecase
 */function OA(e){return t=>{let r=t// replace all separators (including consequtive) with spaces
.replace(/[-_., ]+/g," ")// we don't want leading or trailing spaces
.trim()// split into words
.split(" "),n="";for(let t=0,a=r.length;t<a;t++){let a=r[t];// apply the formatting
n+=e(/^[\dA-Z]+$/.test(a)?a.toLowerCase():a.replace(/^[\dA-Z]{2,}[^a-z]/,OU),t)}return n}}const OD=/*#__PURE__*/OA((e,t)=>(t?OV[e.charCodeAt(0)]:OX[e.charCodeAt(0)])+e.slice(1)),OC=/*#__PURE__*/OA(e=>OV[e.charCodeAt(0)]+e.slice(1));/**
 * @name isBigInt
 * @summary Tests for a `BigInt` object instance.
 * @description
 * Checks to see if the input object is an instance of `BigInt`
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBigInt } from '@polkadot/util';
 *
 * console.log('isBigInt', isBigInt(123_456n)); // => true
 * ```
 */function OF(e){return"bigint"==typeof e}/** @internal */function OZ(e,t){return OF(t)?t.toString():t}function Oq(e,t){return JSON.stringify(e,OZ,t)}const OG="0123456789abcdef",OW=new Uint8Array(256),OY=new Uint8Array(65536);for(let e=0,t=OG.length;e<t;e++)OW[0|OG[e].charCodeAt(0)]=0|e,e>9&&(OW[0|OG[e].toUpperCase().charCodeAt(0)]=0|e);for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)OY[t|r]=OW[e]<<4|OW[r]}function OK(e,t=-1){if(!e)return new Uint8Array;let r=e.startsWith("0x")?2:0,n=Math.ceil((e.length-r)/2),a=Math.ceil(-1===t?n:t/8),i=new Uint8Array(a),o=a>n?a-n:0;for(let t=o;t<a;t++,r+=2)// HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
// same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
// also the faster operation by at least 2x with the character map above
i[t]=OY[e.charCodeAt(r)<<8|e.charCodeAt(r+1)];return i}"function"==typeof sh&&sh.asIntN;const OJ="function"==typeof o9.Buffer&&"function"==typeof o9.Buffer.isBuffer;/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */function OQ(e){return"function"==typeof e}function O_(e){// we do check a function first, since it is slightly faster than isBuffer itself
return OJ&&!!e&&OQ(e.readDoubleLE)&&o9.Buffer.isBuffer(e)}o9.process;const O$=new o8.TextEncoder;function O0(e){return e?O$.encode(e.toString()):new Uint8Array}function O1(e){return OR(e)?O_(e)?new Uint8Array(e):e:Oj(e)?OK(e):Array.isArray(e)?new Uint8Array(e):O0(e)}function O2(e,t=0){let r=e.length,n=0;if(!t)for(let n=0;n<r;n++)t+=e[n].length;let a=new Uint8Array(t);for(let t=0;t<r;t++)a.set(e[t],n),n+=e[t].length;return a}const O5=Array(256),O3=Array(65536);for(let e=0;e<256;e++)O5[e]=e.toString(16).padStart(2,"0");for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)O3[t|r]=O5[e]+O5[r]}/** @internal */function O8(e,t){let r=e.length%2|0,n=e.length-r|0;for(let r=0;r<n;r+=2)t+=O3[e[r]<<8|e[r+1]];return r&&(t+=O5[0|e[n]]),t}function O9(e,t=-1,r=!0){// this is not 100% correct sinmce we support isPrefixed = false....
let n=r?"0x":"";if(!e?.length)return n;if(t>0){let r=Math.ceil(t/8);if(e.length>r)return`${O8(e.subarray(0,r/2),n)}\u{2026}${O8(e.subarray(e.length-r/2),"")}`}return O8(e,n)}function O6(e,t){// equal number of entries and each entry in the array should match
return e.size===t.length&&!t.some(t=>{var r,n;return!Array.isArray(t)||2!==t.length||(r=e.get(t[0]),n=t[1],OI(r)||(OQ(r.eq)?!r.eq(n):r!==n))})}function O4(e,t){return Array.isArray(t)?O6(e,t):t instanceof Map?O6(e,[...t.entries()]):!!OH(t)&&O6(e,Object.entries(t))}/** @internal */function O7(e,t,r,{message:n},a,i,o,s,l){let c="";try{c=`: ${new s(e).toRawType()}`}catch{// ignore
}// This is extra debugging info (we most-probably want this in in some way, shape or form,
// but at this point not quite sure how to include and format it (it can be quite massive)
// console.error(JSON.stringify(result, null, 2));
return`${t}: failed at ${O9(a.subarray(0,16))}\u{2026}${l?` on ${l}`:""} (index ${i+1}/${o})${c}:: ${n}`}function Te(e,t,r,[n,a]){let i=t.length,o=0,s=0;try{for(;s<i;){let a=new n[s](e,r.subarray(o));o+=a.initialU8aLength||a.encodedLength,t[s]=a,s++}}catch(l){throw Error(O7(e,"decodeU8a",t,l,r.subarray(o),s,i,n[s],a[s]))}return[t,o]}function Tt(e,t,r,n,a){let i=t.length,o=n,s=0;try{for(;s<i;){let n=new a(e,r.subarray(o));o+=n.initialU8aLength||n.encodedLength,t[s]=n,s++}}catch(n){throw Error(O7(e,"decodeU8aVec",t,n,r.subarray(o),s,i,a))}return[o,o-n]}/**
 * @internal
 * From a type string or class, return the associated type class
 */function Tr(e,t){return"function"==typeof t?t:e.createClassUnsafe(t)}function Tn(e,t){let r=Object.entries(t),n=r.length,a=[Array(n),Array(n)];for(let t=0;t<n;t++)a[1][t]=r[t][0],a[0][t]=Tr(e,r[t][1]);return a}function Ta(e,[t,r]){let n={};for(let a=0,i=r.length;a<i;a++)n[r[a]]=e.getClassName(t[a])||new t[a](e).toRawType();return n}function Ti(e){return e}class To extends Map{registry;createdAtHash;initialU8aLength;isStorageFallback;__internal__jsonMap;__internal__Types;constructor(e,t,r,n=new Map,{definition:a,setDefinition:i=Ti}={}){let o=a||i(Tn(e,t)),[s,l]=OR(r)||Oj(r)?function(e,t,r,[n,a]){let i=t.length,o=0,s=0;try{for(;s<i;){let i=new n[s](e,r.subarray(o));o+=i.initialU8aLength||i.encodedLength,t[s]=[a[s],i],s++}}catch(l){throw Error(O7(e,"decodeU8aStruct",t,l,r.subarray(o),s,i,n[s],a[s]))}return[t,o]}(e,Array(o[0].length),O1(r),o):r instanceof To?[r,0]:/** @internal */function(e,[t,r],n,a){let i;let o=Array.isArray(n),s=n instanceof Map,l=r.length;if(o||s||OH(n)){if(o&&n.length!==l)throw Error(`Struct: Unable to map ${Oq(n)} array to object with known keys ${r.join(", ")}`)}else throw Error(`Struct: Cannot decode value ${Oq(n)} (typeof ${typeof n}), expected an input object, map or array`);let c=Array(l);for(let u=0;u<l;u++){let l;let d=r[u],f=a.get(d)||d,p=t[u];try{if(o)l=n[u];else if(s)l=f&&n.get(f);else if(l=f&&n[f],OI(l)){if(OI(i)){let e=Object.entries(n);i={};for(let t=0,r=e.length;t<r;t++)i[OD(e[t][0])]=e[t][1]}l=f&&i[f]}c[u]=[d,l instanceof p?l:new p(e,l)]}catch(r){let t=p.name;try{t=new p(e).toRawType()}catch{// ignore
}throw Error(`Struct: failed on ${f}: ${t}:: ${r.message}`)}}return[c,0]}(e,o,r||{},n);super(s),this.initialU8aLength=l,this.registry=e,this.__internal__jsonMap=n,this.__internal__Types=o}static with(e,t){let r;// eslint-disable-next-line no-return-assign
let n=e=>r=e;return class extends To{static #e=(()=>{let t=Object.keys(e);OB(this.prototype,t,(e,t,r)=>r.get(e))})();constructor(a,i){super(a,e,i,t,{definition:r,setDefinition:n})}}}/**
     * @description The available keys for this struct
     */get defKeys(){return this.__internal__Types[1]}/**
     * @description Checks if the value is an empty value
     */get isEmpty(){for(let e of this.values())if(!e.isEmpty)return!1;return!0}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){let e=0;for(let t of this.values())e+=t.encodedLength;return e}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description Returns the Type description of the structure
     */get Type(){let e={},[t,r]=this.__internal__Types;for(let n=0,a=r.length;n<a;n++)e[r[n]]=new t[n](this.registry).toRawType();return e}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return O4(this,e)}/**
     * @description Returns a specific names entry in the structure
     * @param key The name of the entry to retrieve
     */get(e){return super.get(e)}/**
     * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
     */getAtIndex(e){return this.toArray()[e]}/**
     * @description Returns the a types value by name
     */getT(e){return super.get(e)}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(e){let t=[];for(let[r,n]of this.entries())t.push({...n.inspect(!e||ON(e)?e:e[r]),name:OD(r)});return{inner:t}}/**
     * @description Converts the Object to an standard JavaScript Array
     */toArray(){return[...this.values()]}/**
     * @description Returns a hex string representation of the value
     */toHex(){return O9(this.toU8a())}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){let t={};for(let[r,n]of this.entries())t[r]=n.toHuman(e);return t}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){let e={};for(let[t,r]of this.entries())// since this representation goes over RPC and needs to be correct
e[this.__internal__jsonMap.get(t)||t]=r.toJSON();return e}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){let e={};for(let[t,r]of this.entries())e[t]=r.toPrimitive();return e}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return Oq(Ta(this.registry,this.__internal__Types))}/**
     * @description Returns the string representation of the value
     */toString(){return Oq(this.toJSON())}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){let t=[];for(let[r,n]of this.entries())t.push(n.toU8a(!e||ON(e)?e:e[r]));return O2(t)}}/** @internal */function Ts(e,t=[]){for(let r=0,n=e.length;r<n;r++){let n=e[r];Array.isArray(n)?Ts(n,t):t.push(n)}return[...new Set(t)]}/** @internal */function Tl(e){return e.toString().padStart(2,"0")}var oI=A("dEXSZ");function Tc(e){return /*@__PURE__*/n(oI).isBN(e)}/**
 * @name isObject
 * @summary Tests for an `object`.
 * @description
 * Checks to see if the input value is a JavaScript object.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isObject } from '@polkadot/util';
 *
 * isObject({}); // => true
 * isObject('something'); // => false
 * ```
 */function Tu(e){return!!e&&"object"==typeof e}const Td=Array(256),Tf=Array(65536);for(let e=0;e<256;e++)Td[e]=e.toString(16).padStart(2,"0");for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)Tf[t|r]=Td[e]+Td[r]}/** @internal */function Tp(e,t){let r=e.length%2|0,n=e.length-r|0;for(let r=0;r<n;r+=2)t+=Tf[e[r]<<8|e[r+1]];return r&&(t+=Td[0|e[n]]),t}function Th(e,t=-1,r=!0){// this is not 100% correct sinmce we support isPrefixed = false....
let n=r?"0x":"";if(!e?.length)return n;if(t>0){let r=Math.ceil(t/8);if(e.length>r)return`${Tp(e.subarray(0,r/2),n)}\u{2026}${Tp(e.subarray(e.length-r/2),"")}`}return Tp(e,n)}function Tb(){// noop
}const Ty={debug:"log",error:"error",log:"log",warn:"warn"};function Tm(e,t,r,n=-1){if(1===r.length&&Ow(r[0])){let a=r[0]();return Tm(e,t,Array.isArray(a)?a:[a],n)}console[Ty[e]](function(e){let t=e.getFullYear().toString(),r=Tl(e.getMonth()+1),n=Tl(e.getDate()),a=Tl(e.getHours()),i=Tl(e.getMinutes()),o=Tl(e.getSeconds());return`${t}-${r}-${n} ${a}:${i}:${o}`}(new Date),t,...r.map(function e(t){return Array.isArray(t)?t.map(e):Tc(t)?t.toString():Oh(t)||OP(t)?Th(OE(t)):function(t){if(t&&Tu(t)&&t.constructor===Object){let r={};for(let[n,a]of Object.entries(t))r[n]=e(a);return r}return t}(t)}).map(e=>{if(n<=0)return e;let t=`${e}`;return t.length<n?e:`${t.substring(0,n)} ...`}))}function Tg(e){let t=`${e.toUpperCase()}:`.padStart(16),[r,n]=function(e){let t=parseInt(o9.process?.env?.DEBUG_MAX||"-1",10);return[function(e,t){let r=!1;for(let n of e)n&&("*"===n||t===n||n.endsWith("*")&&t.startsWith(n.slice(0,-1)))?r=!0:n&&n.startsWith("-")&&(t===n.slice(1)||n.endsWith("*")&&t.startsWith(n.slice(1,-1)))&&(r=!1);return r}((o9.process?.env?.DEBUG||"").toLowerCase().split(","),e),isNaN(t)?-1:t]}(e.toLowerCase());return{debug:r?(...e)=>Tm("debug",t,e,n):Tb,error:(...e)=>Tm("error",t,e),log:(...e)=>Tm("log",t,e),noop:Tb,warn:(...e)=>Tm("warn",t,e)}}const Tv=["BTreeMap","BTreeSet","HashMap","Vec"],Tx=Tv.concat(["Compact","DoNotConstruct","Int","Linkage","Range","RangeInclusive","Result","Opaque","Option","UInt","WrapperKeepOpaque","WrapperOpaque"]),Tw=["<","(","[",'"',","," "],TP=[// alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
TT("<T::InherentOfflineReport as InherentOfflineReport>::Inherent","InherentOfflineReport",!1),TT("VecDeque<","Vec<",!1),e=>{if(e.includes(" as HasCompact")){for(let t=0,r=e.length;t<r;t++)if("<"===e[t]){let r=TO(e,t+1)-14;" as HasCompact"===e.substring(r,r+14)&&(e=`Compact<${e.substring(t+1,r)}>`)}}return e},// Change BoundedVec<Type, Size> to Vec<Type>
Tk("Bounded",!0),// Change WeakVec<Type> to Vec<Type>
Tk("Weak",!1),// Remove all the trait prefixes
function(){let e=/\s/g,t=/(T|Self)::/g,r=/<(T|Self)asTrait>::/g,n=/<Tas[a-z]+::Trait>::/g,a=/<LookupasStaticLookup>/g,i=/::Type/g;return o=>(e.lastIndex=0,t.lastIndex=0,r.lastIndex=0,n.lastIndex=0,a.lastIndex=0,i.lastIndex=0,o// remove all whitespaces
    .replace(e,"")// anything `T::<type>` to end up as `<type>`
    .replace(t,"")// replace `<T as Trait>::` (whitespaces were removed above)
    .replace(r,"")// replace `<T as something::Trait>::` (whitespaces were removed above)
    .replace(n,"")// replace <Lookup as StaticLookup>
    .replace(a,"Lookup")// replace `<...>::Type`
    .replace(i,""))}(),// remove PairOf<T> -> (T, T)
function(){let e=e=>`(${e},${e})`;return t=>Tz(t,"PairOf<",e)}(),// remove boxing, `Box<Proposal>` -> `Proposal`
function(e){let t=e=>e;return r=>Tz(r,e,t)}("Box<"),e=>{for(let t=0,r=e.length;t<r;t++)if("<"===e[t]){// check against the allowed wrappers, be it Vec<..>, Option<...> ...
let r=Tx.find(r=>{let n=t-r.length;return n>=0&&e.substring(n,t)===r&&// make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
(0===n||Tw.includes(e[n-1]))});// we have not found anything, unwrap generic innards
if(!r){let r=TO(e,t+1);e=`${e.substring(0,t)}${e.substring(r+1)}`}}return e},// alias String -> Text (compat with jsonrpc methods)
TT("String","Text"),// alias Vec<u8> -> Bytes
TT("Vec<u8>","Bytes"),TT("&\\[u8\\]","Bytes"),TT("&'static\\[u8\\]","Bytes"),// alias RawAddress -> Address
TT("RawAddress","Address"),// lookups, mapped to Address/AccountId as appropriate in runtime
TT("Lookup::Source","LookupSource"),TT("Lookup::Target","LookupTarget"),// HACK duplication between contracts & primitives, however contracts prefixed with exec
TT("exec::StorageKey","ContractStorageKey"),// flattens tuples with one value, `(AccountId)` -> `AccountId`
function(){let e=/,\)/g,t=/\(([^,]+)\)/;return r=>(e.lastIndex=0,r// tuples may have trailing commas, e.g. (u32, BlockNumber, )
    .replace(e,")")// change (u32) -> u32
    .replace(t,"$1"))}(),e=>{let t=0;for(;-1!==t;)if(0===(t=e.indexOf("::")))e=e.substring(2);else if(-1!==t){let r=t;for(;-1!==r&&!Tw.includes(e[r]);)r--;e=`${e.substring(0,r+1)}${e.substring(t+2)}`}return e},e=>e.trim()];function TO(e,t){let r=0;for(let n=t,a=e.length;n<a;n++)if(">"===e[n]){if(!r)return n;r--}else"<"===e[n]&&r++;throw Error(`Unable to find closing matching <> on '${e}' (start ${t})`)}function TT(e,t,r=!0){let n=RegExp(`(^${e}|${Tw.map(t=>`\\${t}${e}`).join("|")})`,"g"),a=e=>(n.lastIndex=0,r&&Tw.includes(e[0])?`${e[0]}${t}`:t);return e=>e.replace(n,a)}function Tz(e,t,r){let n=-1;for(;;){if(-1===(n=e.indexOf(t,n+1)))return e;let a=n+t.length,i=TO(e,a);e=`${e.substring(0,n)}${r(e.substring(a,i))}${e.substring(i+1)}`}}function Tk(e,t){return r=>{for(let n=0,a=Tv.length;n<a;n++){let a=Tv[n];r=Tz(r,`${e}${a}<`,e=>{let r=e.split(",").map(e=>e.trim()).filter(e=>e);return t&&r.pop(),`${a}<${r.join(",")}>`})}return r}}const TL=new Map;function TE(e){let t=e.toString(),r=TL.get(t);if(r)return r;let n=t;for(let e=0,t=TP.length;e<t;e++)n=TP[e](n);return TL.set(t,n),n}/**
 * @name isNumber
 * @summary Tests for a JavaScript number.
 * @description
 * Checks to see if the input value is a valid number.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNumber } from '@polkadot/util';
 *
 * console.log('isNumber', isNumber(1234)); // => true
 * ```
 */function TN(e){return"number"==typeof e}/**
 * @name objectSpread
 * @summary Concats all sources into the destination
 */function TS(e,...t){for(let r=0,n=t.length;r<n;r++){let n=t[r];if(n){if("function"==typeof n.entries)for(let[t,r]of n.entries())e[t]=r;else Object.assign(e,n)}}return e}/** @internal */function TM(e,t){return"bigint"==typeof t?t.toString():t}function Tj(e,t){return JSON.stringify(e,TM,t)}(w=R||(R={}))[w.BTreeMap=0]="BTreeMap",w[w.BTreeSet=1]="BTreeSet",w[w.Compact=2]="Compact",w[w.DoNotConstruct=3]="DoNotConstruct",w[w.Enum=4]="Enum",w[w.HashMap=5]="HashMap",w[w.Int=6]="Int",w[w.Linkage=7]="Linkage",w[w.Null=8]="Null",w[w.Option=9]="Option",w[w.Plain=10]="Plain",w[w.Range=11]="Range",w[w.RangeInclusive=12]="RangeInclusive",w[w.Result=13]="Result",w[w.Set=14]="Set",w[w.Si=15]="Si",w[w.Struct=16]="Struct",w[w.Tuple=17]="Tuple",w[w.UInt=18]="UInt",w[w.Vec=19]="Vec",w[w.VecFixed=20]="VecFixed",w[w.WrapperKeepOpaque=21]="WrapperKeepOpaque",w[w.WrapperOpaque=22]="WrapperOpaque";const TH=["_alias","_fallback"];function TR(e){return"string"==typeof e||e instanceof String?e.toString():Tj(e)}function TI(e,t,r,n){return e.sub=0===r.length?[]:(function(e){let t=[],r=0,n=0,a=0,i=0,o=0;for(let s=0,l=e.length;s<l;s++)switch(e[s]){// if we are not nested, add the type
case",":r||n||a||i||(t.push(e.substring(o,s).trim()),o=s+1);break;// adjust compact/vec (and friends) depth
case"<":r++;break;case">":r--;break;// adjust fixed vec depths
case"[":n++;break;case"]":n--;break;// adjust struct depth
case"{":a++;break;case"}":a--;break;// adjust tuple depth
case"(":i++;break;case")":i--}// ensure we have all the terminators taken care of
if(r||n||a||i)throw Error(`Invalid definition (missing terminators) found in ${e}`);return(// the final leg of the journey
t.push(e.substring(o,e.length).trim()),t)})(r).map(e=>TD(e,{},n)),e}function TB(e,t,r,n){let[a,i]=t.substring(n.length+1,t.length-1).split(","),o=parseInt(a.trim(),10);if(o>8192||o%8)throw Error(`${t}: Only support for ${n}<bitLength>, where length <= 8192 and a power of 8, found ${o}`);return e.displayName=i,e.length=o,e}function TV(e,[t,r]){return e.startsWith(t)&&e.slice(-1*r.length)===r}const TX=[["[","]",R.VecFixed,function(e,t,r,n){let a=t.length-1,i=-1,o=0;for(let e=1;e<a&&-1===i;e++)switch(t[e]){case";":0===o&&(i=e);break;case"[":case"(":case"<":o++;break;case"]":case")":case">":o--}if(-1===i)throw Error(`${t}: Unable to extract location of ';'`);let s=t.substring(1,i),[l,c]=t.substring(i+1,a).split(";"),u=parseInt(l.trim(),10);if(u>2048)throw Error(`${t}: Only support for [Type; <length>], where length <= 2048`);return e.displayName=c,e.length=u,e.sub=TD(s,{},n),e}],["{","}",R.Struct,function(e,t,r,n){var a,i,o,s;let l=JSON.parse(t),c=Object.keys(l);return l._enum?(a=l._enum,i=l._fallback,e.info=R.Enum,e.fallbackType=i,Array.isArray(a)?e.sub=a.map((e,t)=>({index:t,info:R.Plain,name:e,type:"Null"})):function(e){let t=Object.values(e);if(t.some(e=>TN(e))){if(!t.every(e=>TN(e)&&e>=0&&e<=255))throw Error("Invalid number-indexed enum definition");return!1}return!0}(a)?e.sub=Object.entries(a).map(([e,t],r)=>TS({},TD(TR(t||"Null"),{name:e},n),{index:r})):e.sub=Object.entries(a).map(([e,t])=>({index:t,info:R.Plain,name:e,type:"Null"}))):l._set?(o=l._set,s=l._fallback,e.info=R.Set,e.fallbackType=s,e.length=o._bitLength,e.sub=Object.entries(o).filter(([e])=>!e.startsWith("_")).map(([e,t])=>({index:t,info:R.Plain,name:e,type:"Null"}))):(e.alias=l._alias?new Map(Object.entries(l._alias)):void 0,e.fallbackType=l._fallback,e.sub=c.filter(e=>!TH.includes(e)).map(e=>TD(TR(l[e]),{name:e},n))),e}],["(",")",R.Tuple,TI],// the inner for these are the same as tuple, multiple values
["BTreeMap<",">",R.BTreeMap,TI],["HashMap<",">",R.HashMap,TI],["Int<",">",R.Int,function(e,t,r){return TB(e,t,r,"Int")}],["Result<",">",R.Result,TI],["UInt<",">",R.UInt,function(e,t,r){return TB(e,t,r,"UInt")}],["DoNotConstruct<",">",R.DoNotConstruct,function(e,t,r){return e.displayName=t.substring(15,t.length-1),e}]],TU=[["BTreeSet<",">",R.BTreeSet],["Compact<",">",R.Compact],["Linkage<",">",R.Linkage],["Opaque<",">",R.WrapperOpaque],["Option<",">",R.Option],["Range<",">",R.Range],["RangeInclusive<",">",R.RangeInclusive],["Vec<",">",R.Vec],["WrapperKeepOpaque<",">",R.WrapperKeepOpaque],["WrapperOpaque<",">",R.WrapperOpaque]];function TA(e,[t,r]){return e.substring(t.length,e.length-r.length)}function TD(e,{displayName:t,name:r}={},n=0){// create the type via Type, allowing types to be sanitized
let a=TE(e),i={displayName:t,info:R.Plain,name:r,type:a};if(++n>64)throw Error("getTypeDef: Maximum nested limit reached");let o=TX.find(e=>TV(a,e));if(o)return i.info=o[2],o[3](i,a,TA(a,o),n);let s=TU.find(e=>TV(a,e));return s&&(i.info=s[2],i.sub=TD(TA(a,s),{},n)),i}function TC(e,{sub:t}){let{lookupName:r,type:n}=t;return TG([r||n])}function TF(e,{sub:t}){return TG(t.map(({lookupName:e,type:t})=>e||t))}function TZ(e,{info:t}){throw Error(`Unhandled: Unable to create and validate type from ${e} (info=${R[t]})`)}const Tq={[R.BTreeMap]:TF,[R.BTreeSet]:TC,[R.Compact]:TC,[R.DoNotConstruct]:TZ,[R.Enum]:TF,[R.HashMap]:TF,[R.Int]:TZ,[R.Linkage]:TC,[R.Null]:TZ,[R.Option]:TC,[R.Plain]:(e,t)=>t.lookupName||t.type,[R.Range]:TC,[R.RangeInclusive]:TC,[R.Result]:TF,[R.Set]:TF,[R.Si]:TZ,[R.Struct]:TF,[R.Tuple]:TF,[R.UInt]:TZ,[R.Vec]:TC,[R.VecFixed]:TC,[R.WrapperKeepOpaque]:TC,[R.WrapperOpaque]:TC};function TG(e){let t=e.length,r=Array(t);for(let n=0;n<t;n++){let t=e[n],a=TD(t);r[n]=Tq[a.info](t,a)}return r}const TW=Tg("metadata");/** @internal */function TY(e,t){return t.map(({type:t})=>e.getTypeDef(t).type)}/** @internal */function TK(e,t){return e.getSiType(t).def.asVariant.variants.map(({fields:t})=>TY(e,t))}/**
 * @name objectSpread
 * @summary Concats all sources into the destination
 */function TJ(e,...t){for(let r=0,n=t.length;r<n;r++){let n=t[r];if(n){if("function"==typeof n.entries)for(let[t,r]of n.entries())e[t]=r;else Object.assign(e,n)}}return e}/** @internal */function TQ(e,t){return(// Blake2_128_Concat has been added at index 2, so we increment all the
// indexes greater than 2
t.toNumber()>=2?e.createTypeUnsafe("StorageHasherV10",[t.toNumber()+1]):e.createTypeUnsafe("StorageHasherV10",[t]))}function T_(e,{modules:t}){return e.createTypeUnsafe("MetadataV10",[{modules:t.map(t=>/** @internal */(function(e,t){let r=t.storage.unwrapOr(null);return e.createTypeUnsafe("ModuleMetadataV10",[TJ({},t,{storage:r?TJ({},r,{items:r.items.map(t=>{var r;return TJ({},t,{type:e.createTypeUnsafe("StorageEntryTypeV10",(r=t.type).isMap?[TJ({},r.asMap,{hasher:TQ(e,r.asMap.hasher)}),1]:r.isDoubleMap?[TJ({},r.asDoubleMap,{hasher:TQ(e,r.asDoubleMap.hasher),key2Hasher:TQ(e,r.asDoubleMap.key2Hasher)}),2]:[r.asPlain,0])})})}):null})])})(e,t))}])}/** @internal */function T$(e,{modules:t}){return e.createTypeUnsafe("MetadataV11",[{// This is new in V11, pass V0 here - something non-existing, telling the API to use
// the fallback for this information (on-chain detection)
extrinsic:{signedExtensions:[],version:0},modules:t}])}function T0(e,{extrinsic:t,modules:r}){return e.createTypeUnsafe("MetadataV12",[{extrinsic:t,modules:r.map(t=>e.createTypeUnsafe("ModuleMetadataV12",[TJ({},t,{index:255})]))}])}/**
 * @internal
 **/function T1(e,t){return e.createTypeUnsafe("MetadataV13",[t])}const T2=Array(256),T5=Array(256);for(let e=0,t=T2.length;e<t;e++)T5[e]=String.fromCharCode(e).toLowerCase(),T2[e]=String.fromCharCode(e).toUpperCase();/** @internal */function T3(e){return e.slice(0,e.length-1).toLowerCase()+T2[e.charCodeAt(e.length-1)]}/**
 * @internal
 *
 * Inspired by https://stackoverflow.com/a/2970667
 *
 * This is not as optimal as the original SO answer (we split into per-word),
 * however it does pass the tests (which the SO version doesn't) and is still
 * a major improvement over the original camelcase npm package -
 *
 *   camelcase: 20.88 μs/op
 *        this:  1.00 μs/op
 *
 * Caveat of this: only Ascii, but acceptable for the intended usecase
 */function T8(e){return t=>{let r=t// replace all separators (including consequtive) with spaces
.replace(/[-_., ]+/g," ")// we don't want leading or trailing spaces
.trim()// split into words
.split(" "),n="";for(let t=0,a=r.length;t<a;t++){let a=r[t];// apply the formatting
n+=e(/^[\dA-Z]+$/.test(a)?a.toLowerCase():a.replace(/^[\dA-Z]{2,}[^a-z]/,T3),t)}return n}}const T9=/*#__PURE__*/T8((e,t)=>(t?T2[e.charCodeAt(0)]:T5[e.charCodeAt(0)])+e.slice(1)),T6=/*#__PURE__*/T8(e=>T2[e.charCodeAt(0)]+e.slice(1)),T4={assets:{Approval:"AssetApproval",ApprovalKey:"AssetApprovalKey",Balance:"TAssetBalance",DestroyWitness:"AssetDestroyWitness"},babe:{EquivocationProof:"BabeEquivocationProof"},balances:{Status:"BalanceStatus"},beefy:{AuthorityId:"BeefyId"},contracts:{StorageKey:"ContractStorageKey"},electionProviderMultiPhase:{Phase:"ElectionPhase"},ethereum:{Block:"EthBlock",Header:"EthHeader",Receipt:"EthReceipt",Transaction:"EthTransaction",TransactionStatus:"EthTransactionStatus"},evm:{Account:"EvmAccount",Log:"EvmLog",Vicinity:"EvmVicinity"},grandpa:{Equivocation:"GrandpaEquivocation",EquivocationProof:"GrandpaEquivocationProof"},identity:{Judgement:"IdentityJudgement"},inclusion:{ValidatorIndex:"ParaValidatorIndex"},paraDisputes:{ValidatorIndex:"ParaValidatorIndex"},paraInclusion:{ValidatorIndex:"ParaValidatorIndex"},paraScheduler:{ValidatorIndex:"ParaValidatorIndex"},paraShared:{ValidatorIndex:"ParaValidatorIndex"},parachains:{Id:"ParaId"},parasDisputes:{ValidatorIndex:"ParaValidatorIndex"},parasInclusion:{ValidatorIndex:"ParaValidatorIndex"},parasScheduler:{ValidatorIndex:"ParaValidatorIndex"},parasShared:{ValidatorIndex:"ParaValidatorIndex"},proposeParachain:{Proposal:"ParachainProposal"},proxy:{Announcement:"ProxyAnnouncement"},scheduler:{ValidatorIndex:"ParaValidatorIndex"},shared:{ValidatorIndex:"ParaValidatorIndex"},society:{Judgement:"SocietyJudgement",Vote:"SocietyVote"},staking:{Compact:"CompactAssignments"},treasury:{Proposal:"TreasuryProposal"},xcm:{AssetId:"XcmAssetId"},xcmPallet:{AssetId:"XcmAssetId"}},T7={execute_block:{description:"Execute the given block.",params:[{name:"block",type:"Block"}],type:"Null"}},ze={version:{description:"Returns the version of the runtime.",params:[],type:"RuntimeVersionPre3"}},zt={initialize_block:{description:"Initialize a block with the given header.",params:[{name:"header",type:"Header"}],type:"Null"}},zr={Core:[{methods:{version:{description:"Returns the version of the runtime.",params:[],type:"RuntimeVersion"},...T7,...zt},version:4},{methods:{version:{description:"Returns the version of the runtime.",params:[],type:"RuntimeVersionPre4"},...T7,...zt},version:3},{methods:{...ze,...T7,...zt},version:2},{methods:{initialise_block:{description:"Initialize a block with the given header.",params:[{name:"header",type:"Header"}],type:"Null"},...ze,...T7},version:1}]},zn={//
// (1) Defaults from Substrate
//
Council:"CollectiveOrigin",System:"SystemOrigin",TechnicalCommittee:"CollectiveOrigin",//
// (2) Defaults from Polkadot
//
Xcm:"XcmOrigin",XcmPallet:"XcmOrigin",//
// (3) Defaults from Acala
//
Authority:"AuthorityOrigin",GeneralCouncil:"CollectiveOrigin"};var za={rpc:{},runtime:zr,types:{Fixed64:"Int<64, Fixed64>",FixedI64:"Int<64, FixedI64>",FixedU64:"UInt<64, FixedU64>",Fixed128:"Int<128, Fixed128>",FixedI128:"Int<128, FixedI128>",FixedU128:"UInt<128, FixedU128>",I32F32:"Int<64, I32F32>",U32F32:"UInt<64, U32F32>",PerU16:"UInt<16, PerU16>",Perbill:"UInt<32, Perbill>",Percent:"UInt<8, Percent>",Permill:"UInt<32, Permill>",Perquintill:"UInt<64, Perquintill>",AccountId:"AccountId32",AccountId20:"GenericEthereumAccountId",AccountId32:"GenericAccountId32",AccountId33:"GenericAccountId33",AccountIdOf:"AccountId",AccountIndex:"GenericAccountIndex",Address:"MultiAddress",AssetId:"u32",Balance:"UInt<128, Balance>",BalanceOf:"Balance",Block:"GenericBlock",BlockNumber:"u32",BlockNumberFor:"BlockNumber",BlockNumberOf:"BlockNumber",Call:"GenericCall",CallHash:"Hash",CallHashOf:"CallHash",ChangesTrieConfiguration:{digestInterval:"u32",digestLevels:"u32"},ChangesTrieSignal:{_enum:{NewConfiguration:"Option<ChangesTrieConfiguration>"}},ConsensusEngineId:"GenericConsensusEngineId",CodecHash:"Hash",CrateVersion:{major:"u16",minor:"u8",patch:"u8"},Digest:{logs:"Vec<DigestItem>"},DigestItem:{_enum:{Other:"Bytes",AuthoritiesChange:"Vec<AuthorityId>",ChangesTrieRoot:"Hash",SealV0:"SealV0",Consensus:"Consensus",Seal:"Seal",PreRuntime:"PreRuntime",ChangesTrieSignal:"ChangesTrieSignal",RuntimeEnvironmentUpdated:"Null"// 8
}},ExtrinsicsWeight:{normal:"Weight",operational:"Weight"},H32:"[u8; 4; H32]",H64:"[u8; 8; H64]",H128:"[u8; 16; H128]",H160:"[u8; 20; H160]",H256:"[u8; 32; H256]",H512:"[u8; 64; H512]",H1024:"[u8; 128; H1024]",H2048:"[u8; 256; H2048]",Hash:"H256",Header:{parentHash:"Hash",number:"Compact<BlockNumber>",stateRoot:"Hash",extrinsicsRoot:"Hash",digest:"Digest"},HeaderPartial:{parentHash:"Hash",// since we only parse JSON with this, having non-compact works
number:"BlockNumber"},IndicesLookupSource:"GenericLookupSource",Index:"u32",Justification:"(ConsensusEngineId, EncodedJustification)",EncodedJustification:"Bytes",Justifications:"Vec<Justification>",KeyValue:"(StorageKey, StorageData)",KeyTypeId:"u32",LockIdentifier:"[u8; 8]",LookupSource:"MultiAddress",LookupTarget:"AccountId",ModuleId:"LockIdentifier",MultiAddress:"GenericMultiAddress",MultiSigner:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Ecdsa:"[u8; 33]"}},Moment:"UInt<64, Moment>",OpaqueCall:"Bytes",Origin:"DoNotConstruct<Origin>",OriginCaller:{_enum:{// this should be dynamically built from the actual modules, based on index
System:"SystemOrigin"}},PalletId:"LockIdentifier",PalletsOrigin:"OriginCaller",PalletVersion:{major:"u16",minor:"u8",patch:"u8"},Pays:{_enum:["Yes","No"]},Phantom:"Null",PhantomData:"Null",Releases:{_enum:["V1","V2","V3","V4","V5","V6","V7","V8","V9","V10"]},RuntimeCall:"Call",RuntimeEvent:"Event",RuntimeDbWeight:{read:"Weight",write:"Weight"},SignedBlock:"SignedBlockWithJustifications",SignedBlockWithJustification:{block:"Block",justification:"Option<EncodedJustification>"},SignedBlockWithJustifications:{block:"Block",justifications:"Option<Justifications>"},Slot:"u64",SlotDuration:"u64",StorageData:"Bytes",StorageInfo:{palletName:"Bytes",storage_name:"Bytes",prefix:"Bytes",maxValues:"Option<u32>",maxSize:"Option<u32>"},StorageProof:{trieNodes:"Vec<Bytes>"},TransactionPriority:"u64",TransactionLongevity:"u64",TransactionTag:"Bytes",TransactionInfo:{_alias:{dataSize:"size"},chunkRoot:"H256",contentHash:"H256",dataSize:"u32",blockChunks:"u32"},TransactionStorageProof:{chunk:"Vec<u8>",proof:"Vec<Vec<u8>>"},ValidatorId:"AccountId",ValidatorIdOf:"ValidatorId",WeightV0:"u32",WeightV1:"u64",WeightV2:{refTime:"Compact<u64>",proofSize:"Compact<u64>"},Weight:"WeightV2",WeightMultiplier:"Fixed64",// digest
PreRuntime:"(ConsensusEngineId, Bytes)",SealV0:"(u64, Signature)",Seal:"(ConsensusEngineId, Bytes)",Consensus:"(ConsensusEngineId, Bytes)"}};const zi=[["<",">"],["<",","],[",",">"],["(",")"],["(",","],[",",","],[",",")"]];/**
 * Creates a compatible type mapping
 * @internal
 **/function zo(e,t){let r=t.toString(),n=e.findIndex(({def:e})=>e.HistoricMetaCompat===r);return -1!==n?n:e.push({def:{HistoricMetaCompat:r}})-1}function zs(e,t,r,n){return r.push({def:{Variant:{variants:n}},path:[`pallet_${e.toString()}`,"pallet",t]})-1}/**
 * Find and apply the correct type override
 * @internal
 **/function zl(e,t){t.forEach(t=>{let r=Object.keys(e).find(e=>t.eq(e));if(r)t.setOverride(e[r]);else{// FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)
let r=t.toString(),n=Object.entries(e).reduce((e,[t,r])=>zi.reduce((e,[n,a])=>e.replace(`${n}${t}${a}`,`${n}${r}${a}`),e),r);r!==n&&t.setOverride(n)}})}function zc(e,t,r,{hashers:n,isLinked:a,isOptional:i,keys:o,value:s}){var l;return zl(r,[s,...Array.isArray(o)?o:[o]]),t.createTypeUnsafe("StorageEntryTypeV14",[{Map:{hashers:n,key:1===n.length?zo(e,o[0]):(l=o.map(t=>zo(e,t)),e.push({def:{Tuple:l}})-1),value:a?zo(e,`(${i?`Option<${s.toString()}>`:s.toString()}, Linkage<${o[0].toString()}>)`):zo(e,s)}}])}function zu(e,t,r){let n=[];!// position 0 always has Null, additionally add internal defaults
function(e,...t){for(let r=0,n=t.length;r<n;r++)zo(e,t[r])}(n,"Null","u8","u16","u32","u64"),/**
 * @internal
 * generate & register the OriginCaller type
 **/function(e,t,r){e.register({OriginCaller:{_enum:t.map((e,t)=>[e.name.toString(),r>=12?e.index.toNumber():t]).sort((e,t)=>e[1]-t[1]).reduce((e,[t,r])=>{for(let t=Object.keys(e).length;t<r;t++)e[`Empty${t}`]="Null";return e[t]=zn[t]||"Null",e},{})}})}(e,t.modules,r);let a=/** @internal */function(e,{signedExtensions:t,version:r}){return e.createTypeUnsafe("ExtrinsicMetadataV14",[{signedExtensions:t.map(e=>({identifier:e,type:0// we don't map the fields at all
    })),type:0,version:r}])}(e,t.extrinsic),i=t.modules.map(t=>/** @internal */(function(e,t,r,{calls:n,constants:a,errors:i,events:o,storage:s}){let l=function({knownTypes:e},t){return{...T4[t]??{},...e.typesAlias?.[t]??{}}}(t,T9(r.name));return t.createTypeUnsafe("PalletMetadataV14",[{calls:n&&/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 **/function(e,t,r,n,a){let i=n.map(({args:r,docs:n,name:i},o)=>(zl(a,r.map(({type:e})=>e)),t.createTypeUnsafe("SiVariant",[{docs:n,fields:r.map(({name:r,type:n})=>t.createTypeUnsafe("SiField",[{name:r,type:zo(e,n)}])),index:o,name:i}])));return t.createTypeUnsafe("PalletCallMetadataV14",[{type:zs(r,"Call",e,i)}])}(e,t,r.name,n,l),constants:a.map(({docs:r,name:n,type:a,value:i})=>(zl(l,[a]),t.createTypeUnsafe("PalletConstantMetadataV14",[{docs:r,name:n,type:zo(e,a),value:i}]))),errors:i&&/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 */function(e,t,r,n,a){let i=n.map(({docs:e,name:r},n)=>t.createTypeUnsafe("SiVariant",[{docs:e,fields:[],index:n,name:r}]));return t.createTypeUnsafe("PalletErrorMetadataV14",[{type:zs(r,"Error",e,i)}])}(e,t,r.name,i,0),events:o&&/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 **/function(e,t,r,n,a){let i=n.map(({args:r,docs:n,name:i},o)=>(zl(a,r),t.createTypeUnsafe("SiVariant",[{docs:n,fields:r.map(r=>t.createTypeUnsafe("SiField",[{type:zo(e,r)}])),index:o,name:i}])));return t.createTypeUnsafe("PalletEventMetadataV14",[{type:zs(r,"Event",e,i)}])}(e,t,r.name,o,l),index:r.index,name:r.name,storage:s&&/**
 * Apply module-specific storage type overrides (always part of toV14)
 * @internal
 **/function(e,t,{items:r,prefix:n},a){return t.createTypeUnsafe("PalletStorageMetadataV14",[{items:r.map(({docs:r,fallback:n,modifier:i,name:o,type:s})=>{let l;if(s.isPlain){let r=s.asPlain;zl(a,[r]),l=t.createTypeUnsafe("StorageEntryTypeV14",[{Plain:zo(e,r)}])}else if(s.isMap){let r=s.asMap;l=zc(e,t,a,{hashers:[r.hasher],isLinked:r.linked.isTrue,isOptional:i.isOptional,keys:[r.key],value:r.value})}else if(s.isDoubleMap){let r=s.asDoubleMap;l=zc(e,t,a,{hashers:[r.hasher,r.key2Hasher],isLinked:!1,isOptional:i.isOptional,keys:[r.key1,r.key2],value:r.value})}else{let r=s.asNMap;l=zc(e,t,a,{hashers:r.hashers,isLinked:!1,isOptional:i.isOptional,keys:r.keyVec,value:r.value})}return t.createTypeUnsafe("StorageEntryMetadataV14",[{docs:r,fallback:n,modifier:i,name:o,type:l}])}),prefix:n}])}(e,t,s,l)}])})(n,e,t,{calls:t.calls.unwrapOr(null),constants:t.constants,errors:t.errors.length?t.errors:null,events:t.events.unwrapOr(null),storage:t.storage.unwrapOr(null)}));return e.createTypeUnsafe("MetadataV14",[{extrinsic:a,lookup:{types:n.map((t,r)=>e.createTypeUnsafe("PortableType",[{id:r,type:t}]))},pallets:i}])}function zd(e,t,r){// V15 is mostly equivalent to v14 however it does add
//
// 1. The top-level apis entry - it is assumed that in usage we would
//    just check for all-empty (like this would construct)
// 2. A docs param on the pallet itself
// 3. Additional extrinsic parameters
//
// A straight conversion with createTypeUndafe magic fills in details
// We need the UncheckedExtrinsic to extract the types, at least for v14
// which does have these details embedded (previous-gen won't populate)
let n=t.lookup.paramTypes.SpRuntimeUncheckedExtrinsic;return e.createTypeUnsafe("MetadataV15",[TJ({},t,{extrinsic:e.createTypeUnsafe("ExtrinsicMetadataV15",[TJ({},t.extrinsic,{addressType:n?.[0].type.unwrapOr(0),callType:n?.[1].type.unwrapOr(0),extraType:n?.[3].type.unwrapOr(0),signatureType:n?.[2].type.unwrapOr(0)})]),outerEnums:e.createTypeUnsafe("OuterEnums15",[{// FIXME We need to extract & add the errorType in here
// (these doesn't seem to be an esay way to detect & extract it)
callType:n?.[1].type.unwrapOr(0),eventType:t.lookup.paramTypes.FrameSystemEventRecord?.[0].type.unwrapOr(0)}])})])}/**
 * Convert the Metadata (which is an alias) to latest
 * @internal
 **/function zf(e,t,r){return t}var oI=(A("dEXSZ"),A("dEXSZ"));const zp=/*#__PURE__*/new/*@__PURE__*/(n(oI))(1),zh=/*#__PURE__*/new/*@__PURE__*/(n(oI))(2),zb=/*#__PURE__*/new/*@__PURE__*/(n(oI))(100),zy=/*#__PURE__*/new/*@__PURE__*/(n(oI))(1e6),zm=/*#__PURE__*/new/*@__PURE__*/(n(oI))(1e9),zg=zm.mul(zm);var oI=A("dEXSZ");function zv(e,{isLe:t=!1,isNegative:r=!1}={}){if(!e||"0x"===e)return new/*@__PURE__*/(n(oI))(0);let a=function(e){if(!e||"0x"===e)return"";if(OS.test(e))return e.substring(2);if(OM.test(e))return e;throw Error(`Expected hex value to convert, found '${e}'`)}(e),i=new/*@__PURE__*/(n(oI))(a,16,t?"le":"be");// fromTwos takes as parameter the number of bits, which is the hex length
// multiplied by 4 (2 bytes being 8 bits)
return r?i.fromTwos(4*a.length):i}function zx(...e){return t=>(OH(t)||OQ(t))&&e.every(e=>OQ(t[e]))}function zw(...e){return t=>OH(t)&&e.every(e=>OQ(t[e]))}const zP=zx("toBigInt"),zO=zx("toBn");var oI=A("dEXSZ");function zT(e){return e?/*@__PURE__*/n(oI).isBN(e)?e:Oj(e)?zv(e.toString()):OF(e)?new/*@__PURE__*/(n(oI))(e.toString()):zO(e)?e.toBn():new/*@__PURE__*/(n(oI))(zP(e)?e.toBigInt().toString():e):new/*@__PURE__*/(n(oI))(0)}const zz={bitLength:-1,isLe:!0,isNegative:!1};function zk(e,{bitLength:t=-1,isLe:r=!0,isNegative:n=!1}=zz){let a=zT(e),i=-1===t?Math.ceil(a.bitLength()/8):Math.ceil((t||0)/8);if(!e)return new Uint8Array(-1===t?1:i);let o=new Uint8Array(i),s=n?a.toTwos(8*i):a;return o.set(s.toArray(r?"le":"be",i),0),o}const zL=RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)","g");function zE(e,t=","){// We can do this by adjusting the regx, however for the sake of clarity
// we rather strip and re-add the negative sign in the output
let r=e[0].startsWith("-"),n=r?e.substring(1).match(zL):e.match(zL);return n?`${r?"-":""}${n.join(t)}`:e}/**
 * Get the decimal and thousand separator of a locale
 * @param locale
 * @returns {decimal: string, thousand: string}
 */function zN(e){return{decimal:.1.toLocaleString(e).substring(1,2),thousand:1e3.toLocaleString(e).substring(1,2)}}const zS=[{power:-24,text:"yocto",value:"y"},{power:-21,text:"zepto",value:"z"},{power:-18,text:"atto",value:"a"},{power:-15,text:"femto",value:"f"},{power:-12,text:"pico",value:"p"},{power:-9,text:"nano",value:"n"},{power:-6,text:"micro",value:"\xb5"},{power:-3,text:"milli",value:"m"},{power:0,text:"Unit",value:"-"},{power:3,text:"Kilo",value:"k"},{power:6,text:"Mill",value:"M"},{power:9,text:"Bill",value:"B"},{power:12,text:"Tril",value:"T"},{power:15,text:"Peta",value:"P"},{power:18,text:"Exa",value:"E"},{power:21,text:"Zeta",value:"Z"},{power:24,text:"Yotta",value:"Y"}];function zM(e){// use a loop here, better RN support (which doesn't have [].find)
for(let t=0,r=zS.length;t<r;t++)if(zS[t].value===e)return zS[t];return zS[8]}function zj(e,t,r){if(r)return zM(r);let n=7+Math.ceil((e.length-t)/3);return zS[n]||zS[n<0?0:zS.length-1]}const zH=zS[8].text;let zR=0,zI=zH;const zB=function(e,{decimals:t=zR,forceUnit:r,locale:n="en",withAll:a=!1,withSi:i=!0,withSiFull:o=!1,withUnit:s=!0,withZero:l=!0}={}){// we only work with string inputs here - convert anything
// into the string-only value
let c=zT(e).toString();if(0===c.length||"0"===c)return"0";// strip the negative sign so we can work with clean groupings, re-add this in the
// end when we return the result (from here on we work with positive numbers)
let u="";c[0].startsWith("-")&&(u="-",c=c.substring(1));// We start at midpoint (8) minus 1 - this means that values display as
// 123.4567 instead of 0.1234 k (so we always have the most relevant).
let d=zj(c,t,r),f=c.length-(t+d.power),p=f<=0?"0":c.substring(0,f),h=c.padStart(f<0?t:1,"0").substring(f<0?0:f).padEnd(a?Math.max(t,4):4,"0").substring(0,a?Math.max(4,t+d.power):4);// remove all trailing 0's (if required via flag)
if(!l){let e=h.length-1;// This looks inefficient, however it is better to do the checks and
// only make one final slice than it is to do it in multiples
do"0"===h[e]&&e--;while("0"===h[e])h=h.substring(0,e+1)}// the display unit
let b=ON(s)?zS[8].text:s,y=i||o?"-"===d.value?s?` ${b}`:"":` ${o?`${d.text}${s?" ":""}`:d.value}${s?b:""}`:"",{decimal:m,thousand:g}=zN(n);return`${u}${zE(p,g)}${h&&`${m}${h}`}${y}`};function zV(e){return /*@__PURE__*/n(oI).isBN(e)}/**
 * @name isNumber
 * @summary Tests for a JavaScript number.
 * @description
 * Checks to see if the input value is a valid number.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNumber } from '@polkadot/util';
 *
 * console.log('isNumber', isNumber(1234)); // => true
 * ```
 */function zX(e){return"number"==typeof e}/**
 * @name isString
 * @summary Tests for a string.
 * @description
 * Checks to see if the input value is a JavaScript string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isString } from '@polkadot/util';
 *
 * console.log('isString', isString('test')); // => true
 * ```
 */function zU(e){return"string"==typeof e||e instanceof String}zB.calcSi=(e,t=zR)=>zj(e,t),zB.findSi=zM,zB.getDefaults=()=>({decimals:zR,unit:zI}),zB.getOptions=(e=zR)=>zS.filter(({power:t})=>!(t<0)||e+t>=0),zB.setDefaults=({decimals:e,unit:t})=>{zR=(Array.isArray(e)?e[0]:e)??zR,zI=(Array.isArray(t)?t[0]:t)??zI,zS[8].text=zI};var oI=(A("dEXSZ"),A("dEXSZ"));function zA(e,{isLe:t=!0,isNegative:r=!1}={}){// slice + reverse is expensive, however SCALE is LE by default so this is the path
// we are most interested in (the BE is added for the sake of being comprehensive)
t||(e=e.slice().reverse());let a=e.length;// shortcut for <= u48 values - in this case the manual conversion
// here seems to be more efficient than passing the full array
if(r&&a&&128&e[a-1])// For <= 32, we also optimize the xor to a single op
switch(a){case 0:return new/*@__PURE__*/(n(oI))(0);case 1:return new/*@__PURE__*/(n(oI))(-((255^e[0])*1)-1);case 2:return new/*@__PURE__*/(n(oI))(-((e[0]+(e[1]<<8)^65535)*1)-1);case 3:return new/*@__PURE__*/(n(oI))(-((e[0]+(e[1]<<8)+(e[2]<<16)^16777215)*1)-1);case 4:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return new/*@__PURE__*/(n(oI))(-((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)*1)-1);case 5:return new/*@__PURE__*/(n(oI))(-(((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)+(255^e[4])*4294967296)*1)-1);case 6:return new/*@__PURE__*/(n(oI))(-(((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)+(e[4]+(e[5]<<8)^65535)*4294967296)*1)-1);default:return new/*@__PURE__*/(n(oI))(e,"le").fromTwos(8*a)}// Most common case - u{8, 16, 32} default LE SCALE-encoded
//
// There are some slight benefits in unrolling this specific loop,
// however it comes with diminishing returns since here the actual
// `new BN` does seem to take up the bulk of the time
switch(a){case 0:return new/*@__PURE__*/(n(oI))(0);case 1:return new/*@__PURE__*/(n(oI))(e[0]);case 2:return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8));case 3:return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8)+(e[2]<<16));case 4:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]);case 5:return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8)+(e[2]<<16)+(e[3]+(e[4]<<8))*16777216);case 6:return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8)+(e[2]<<16)+(e[3]+(e[4]<<8)+(e[5]<<16))*16777216);default:return new/*@__PURE__*/(n(oI))(e,"le")}}const zD=new/*@__PURE__*/(n(oI))(1e4),zC=[["Perquintill",zg],["Perbill",zm],["Permill",zy],["Percent",zb]];class zF extends /*@__PURE__*/n(oI){registry;encodedLength;isUnsigned;createdAtHash;initialU8aLength;isStorageFallback;__internal__bitLength;constructor(e,t=0,r=64,n=!1){// Construct via a string/number, which will be passed in the BN constructor.
// It would be ideal to actually return a BN, but there is an issue:
// https://github.com/indutny/bn.js/issues/206
super(OR(t)?r<=48?/**
 * @name u8aToNumber
 * @summary Creates a number from a Uint8Array object.
 */function(e,{isLe:t=!0,isNegative:r=!1}={}){// slice + reverse is expensive, however SCALE is LE by default so this is the path
// we are most interested in (the BE is added for the sake of being comprehensive)
t||(e=e.slice().reverse());let n=e.length;// When the value is a i{8, 16, 24, 32, 40, 40} values and the top-most bit
// indicates a signed value, we use a two's complement conversion. If one of these
// flags are not set, we just do a normal unsigned conversion (the same shortcut
// applies in both the u8aTo{BigInt, Bn} conversions as well)
if(r&&n&&128&e[n-1])switch(n){case 0:return 0;case 1:return-((255^e[0])*1)-1;case 2:return-((e[0]+(e[1]<<8)^65535)*1)-1;case 3:return-((e[0]+(e[1]<<8)+(e[2]<<16)^16777215)*1)-1;case 4:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return-((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)*1)-1;case 5:return-(((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)+(255^e[4])*4294967296)*1)-1;case 6:return-(((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)+(e[4]+(e[5]<<8)^65535)*4294967296)*1)-1;default:throw Error("Value more than 48-bits cannot be reliably converted")}switch(n){case 0:return 0;case 1:return e[0];case 2:return e[0]+(e[1]<<8);case 3:return e[0]+(e[1]<<8)+(e[2]<<16);case 4:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3];case 5:return e[0]+(e[1]<<8)+(e[2]<<16)+(e[3]+(e[4]<<8))*16777216;case 6:return e[0]+(e[1]<<8)+(e[2]<<16)+(e[3]+(e[4]<<8)+(e[5]<<16))*16777216;default:throw Error("Value more than 48-bits cannot be reliably converted")}}(t.subarray(0,r/8),{isNegative:n}):zA(t.subarray(0,r/8),{isLe:!0,isNegative:n}).toString():/** @internal */function e(t,r){if(zX(t)){if(!Number.isInteger(t)||t>Number.MAX_SAFE_INTEGER||t<Number.MIN_SAFE_INTEGER)throw Error("Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1");return t}if(zU(t)){if(Oj(t,-1,!0))return zv(t,{isLe:!1,isNegative:r}).toString();if(t.includes(".")||t.includes(",")||t.includes("e"))throw Error("String should not contain decimal points or scientific notation");return t}if(zV(t)||OF(t))return t.toString();if(OH(t)){if(OQ(t.toBn))return t.toBn().toString();// Allow the construction from an object with a single top-level key. This means that
// single key objects can be treated equivalently to numbers, assuming they meet the
// specific requirements. (This is useful in Weights 1.5 where Objects are compact)
let n=Object.keys(t);if(1!==n.length)throw Error("Unable to construct number from multi-key object");return e(t[n[0]],r)}if(!t)return 0;throw Error(`Unable to create BN from unknown type ${typeof t}`)}(t,n)),this.registry=e,this.__internal__bitLength=r,this.encodedLength=this.__internal__bitLength/8,this.initialU8aLength=this.__internal__bitLength/8,this.isUnsigned=!n;let a=this.isNeg(),i=r-(n&&!a?1:0);if(a&&!n)throw Error(`${this.toRawType()}: Negative number passed to unsigned type`);if(super.bitLength()>i)throw Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${i}`)}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description Checks if the value is a zero value (align elsewhere)
     */get isEmpty(){return this.isZero()}/**
     * @description Returns the number of bits in the value
     */bitLength(){return this.__internal__bitLength}/**
     * @description Compares the value of the input to see if there is a match
     */// eslint-disable-next-line @typescript-eslint/no-explicit-any
eq(e){// Here we are actually overriding the built-in .eq to take care of both
// number and BN inputs (no `.eqn` needed) - numbers will be converted
return super.eq(Oj(e)?zv(e.toString(),{isLe:!1,isNegative:!this.isUnsigned}):zT(e))}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return{outer:[this.toU8a()]}}/**
     * @description True if this value is the max of the type
     */isMax(){let e=this.toU8a().filter(e=>255===e);return e.length===this.__internal__bitLength/8}/**
     * @description Returns a BigInt representation of the number
     */toBigInt(){return BigInt(this.toString())}/**
     * @description Returns the BN representation of the number. (Compatibility)
     */toBn(){return this}/**
     * @description Returns a hex string representation of the value
     */toHex(e=!1){// For display/JSON, this is BE, for compare, use isLe
return function(e,{bitLength:t=-1,isLe:r=!1,isNegative:n=!1}={}){return O9(zk(e,{bitLength:t,isLe:r,isNegative:n}))}(this,{bitLength:this.bitLength(),isLe:e,isNegative:!this.isUnsigned})}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){let t=this.toRawType();if("Balance"===t)return this.isMax()?"everything":zB(this,{decimals:this.registry.chainDecimals[0],withSi:!0,withUnit:this.registry.chainTokens[0]});let[,r]=zC.find(([e])=>e===t)||[];return r?`${(this.mul(zD).div(r).toNumber()/100).toFixed(2)}%`:function(e,{locale:t="en"}={}){let{thousand:r}=zN(t);return zE(zT(e).toString(),r)}(this)}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(e=!1){// FIXME this return type should by string | number, however BN returns string
// Options here are
//   - super.bitLength() - the actual used bits, use hex when close to MAX_SAFE_INTEGER
//   - this.__internal__bitLength - the max used bits, use hex when larger than native Rust type
return e||this.__internal__bitLength>128||super.bitLength()>52?this.toHex():this.toNumber()}/**
     * @description Returns the value in a primitive form, either number when <= 52 bits, or string otherwise
     */toPrimitive(){return super.bitLength()>52?this.toString():this.toNumber()}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){// NOTE In the case of balances, which have a special meaning on the UI
// and can be interpreted differently, return a specific value for it so
// underlying it always matches (no matter which length it actually is)
return this instanceof this.registry.createClassUnsafe("Balance")?"Balance":`${this.isUnsigned?"u":"i"}${this.bitLength()}`}/**
     * @description Returns the string representation of the value
     * @param base The base to use for the conversion
     */toString(e){// only included here since we do not inherit docs
return super.toString(e)}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */toU8a(e){return zk(this,{bitLength:this.bitLength(),isLe:!0,isNegative:!this.isUnsigned})}}class zZ extends zF{static with(e,t){return class extends zZ{constructor(t,r){super(t,r,e)}toRawType(){return t||super.toRawType()}}}}class zq extends zZ.with(32){// NOTE without this, we cannot properly determine extensions
__UIntType="u32"}class zG extends zq{constructor(e,t){if(super(e,t),!this.isEmpty&&!this.eq(1635018093))throw Error(`MagicNumber mismatch: expected ${e.createTypeUnsafe("u32",[1635018093]).toHex()}, found ${this.toHex()}`)}}class zW extends To{__internal__converted=new Map;constructor(e,t){// const timeStart = performance.now()
super(e,{magicNumber:zG,metadata:"MetadataAll"},t);// console.log('MetadataVersioned', `${(performance.now() - timeStart).toFixed(2)}ms`)
}__internal__assertVersion=e=>{if(this.version>e)throw Error(`Cannot convert metadata from version ${this.version} to ${e}`);return this.version===e};__internal__getVersion=(e,t)=>{if("latest"!==e&&this.__internal__assertVersion(e)){let t=`asV${e}`;return this.__internal__metadata()[t]}if(!this.__internal__converted.has(e)){let r="latest"===e?"asV15":`asV${e-1}`;this.__internal__converted.set(e,t(this.registry,this[r],this.version))}return this.__internal__converted.get(e)};/**
     * @description the metadata wrapped
     */__internal__metadata=()=>this.getT("metadata");/**
     * @description Returns the wrapped metadata as a limited calls-only (latest) version
     */get asCallsOnly(){return new zW(this.registry,{magicNumber:this.magicNumber,metadata:this.registry.createTypeUnsafe("MetadataAll",[function(e,{extrinsic:t,lookup:r,pallets:n}){return e.createTypeUnsafe("MetadataLatest",[{extrinsic:t,lookup:{types:r.types.map(({id:t,type:r})=>e.createTypeUnsafe("PortableType",[{id:t,type:TJ({},r,{docs:function(e){let t=e.map(e=>e.toString().trim()),r=t.findIndex(e=>!e.length);return -1===r?t:t.slice(0,r)}(r.docs)})}]))},pallets:n.map(({calls:t,index:r,name:n})=>({calls:e.createTypeUnsafe("Option<PalletCallMetadataLatest>",[t.unwrapOr(null)]),index:r,name:n}))}]).toJSON()}(this.registry,this.asLatest),14])})}/**
     * @description Returns the wrapped metadata as a V9 object
     */get asV9(){return this.__internal__assertVersion(9),this.__internal__metadata().asV9}/**
     * @description Returns the wrapped values as a V10 object
     */get asV10(){return this.__internal__getVersion(10,T_)}/**
     * @description Returns the wrapped values as a V11 object
     */get asV11(){return this.__internal__getVersion(11,T$)}/**
     * @description Returns the wrapped values as a V12 object
     */get asV12(){return this.__internal__getVersion(12,T0)}/**
     * @description Returns the wrapped values as a V13 object
     */get asV13(){return this.__internal__getVersion(13,T1)}/**
     * @description Returns the wrapped values as a V14 object
     */get asV14(){return this.__internal__getVersion(14,zu)}/**
     * @description Returns the wrapped values as a V14 object
     */get asV15(){return this.__internal__getVersion(15,zd)}/**
     * @description Returns the wrapped values as a latest version object
     */get asLatest(){return this.__internal__getVersion("latest",zf)}/**
     * @description The magicNumber for the Metadata (known constant)
     */get magicNumber(){return this.getT("magicNumber")}/**
     * @description the metadata version this structure represents
     */get version(){return this.__internal__metadata().index}getUniqTypes(e){return function(e,t,r){let n=Ts(TG(r)).filter(t=>!e.hasType(t)&&!e.isLookupType(t)).sort();if(0!==n.length){let e=`Unknown types found, no types for ${n.join(", ")}`;if(t)throw Error(e);TW.warn(e)}return r}(this.registry,e,Ts(/** @internal */function({lookup:e,pallets:t}){return t.reduce((t,{calls:r,constants:n,events:a,storage:i})=>(t.push([TY(e,n)]),r.isSome&&t.push(TK(e,r.unwrap().type)),a.isSome&&t.push(TK(e,a.unwrap().type)),i.isSome&&t.push(i.unwrap().items.map(({type:t})=>{if(t.isPlain)return[e.getTypeDef(t.asPlain).type];let{hashers:r,key:n,value:a}=t.asMap;return 1===r.length?[e.getTypeDef(a).type,e.getTypeDef(n).type]:[e.getTypeDef(a).type,...e.getSiType(n).def.asTuple.map(t=>e.getTypeDef(t).type)]})),t),[])}(this.asLatest)))}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return(// HACK(y): ensure that we apply the aliases if we have not done so already, this is
// needed to ensure we have the correct overrides (which is only applied in toLatest)
// eslint-disable-next-line no-unused-expressions
this.asLatest,super.toJSON())}}const zY=new Uint8Array([109,101,116,97,9]),zK=zY.length-1;/**
 * @name DoNotConstruct
 * @description
 * An unknown type that fails on construction with the type info
 */class zJ{registry;createdAtHash;isStorageFallback;__internal__neverError;constructor(e,t="DoNotConstruct"){throw this.registry=e,this.__internal__neverError=Error(`DoNotConstruct: Cannot construct unknown type ${t}`),this.__internal__neverError}static with(e){return class extends zJ{constructor(t){super(t,e)}}}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){throw this.__internal__neverError}/**
     * @description returns a hash of the contents
     */get hash(){throw this.__internal__neverError}/**
     * @description Checks if the value is an empty value (always true)
     */get isEmpty(){throw this.__internal__neverError}/**
     * @description Unimplemented
     */eq(){throw this.__internal__neverError}/**
     * @description Unimplemented
     */inspect(){throw this.__internal__neverError}/**
     * @description Unimplemented
     */toHex(){throw this.__internal__neverError}/**
     * @description Unimplemented
     */toHuman(){throw this.__internal__neverError}/**
     * @description Unimplemented
     */toJSON(){throw this.__internal__neverError}/**
     * @description Unimplemented
     */toPrimitive(){throw this.__internal__neverError}/**
     * @description Unimplemented
     */toRawType(){throw this.__internal__neverError}/**
     * @description Unimplemented
     */toString(){throw this.__internal__neverError}/**
     * @description Unimplemented
     */toU8a(){throw this.__internal__neverError}}class zQ extends Map{registry;createdAtHash;initialU8aLength;isStorageFallback;constructor(e,t){let r=Object.entries(t||{});super(r),this.registry=e,OB(this,r.map(([e])=>e),e=>this.get(e))}/**
     * @description Always 0, never encodes as a Uint8Array
     */get encodedLength(){return 0}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description Checks if the value is an empty value
     */get isEmpty(){return 0==[...this.keys()].length}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return O4(this,e)}/**
     * @description Returns a typed value from the internal map
     */getT(e){return this.get(e)}/**
     * @description Unimplemented, will throw
     */inspect(){throw Error("Unimplemented")}/**
     * @description Unimplemented, will throw
     */toHex(){throw Error("Unimplemented")}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return[...this.entries()].reduce((e,[t,r])=>(e[t]=OQ(r.toHuman)?r.toHuman():r,e),{})}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return[...this.entries()].reduce((e,[t,r])=>(e[t]=r,e),{})}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return[...this.entries()].reduce((e,[t,r])=>(e[t]=OQ(r.toPrimitive)?r.toPrimitive():r,e),{})}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"Json"}/**
     * @description Returns the string representation of the value
     */toString(){return Oq(this.toJSON())}/**
     * @description Unimplemented, will throw
     */toU8a(e){throw Error("Unimplemented")}}/** @internal */function z_(e){for(let t=0,r=e.length;t<r;t++){let r=0|e[t];// check is inlined here, it is faster than making a call
if(r<32||r>126)return!1}return!0}function z$(e){return zU(e)?Oj(e)?z_(O1(e)):/** @internal */function(e){for(let t=0,r=e.length;t<r;t++){let r=e.charCodeAt(t);// check is inlined here, it is faster than making a call
if(r<32||r>126)return!1}return!0}(e):!!e&&z_(e)}const z0=new lw.TextDecoder("utf-8");function z1(e){return e?z0.decode(e):""}class z2 extends Uint8Array{registry;createdAtHash;initialU8aLength;isStorageFallback;/**
     * @description This ensures that operators such as clice, filter, map, etc. return
     * new Array instances (without this we need to apply overrides)
     */static get[Symbol.species](){return Uint8Array}constructor(e,t,r){super(O1(t)),this.registry=e,this.initialU8aLength=r}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return this.length}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description Returns true if the wrapped value contains only ASCII printable characters
     */get isAscii(){return z$(this)}/**
     * @description Returns true if the type wraps an empty/default all-0 value
     */get isEmpty(){return!this.length||OI(this.find(e=>!!e))}/**
     * @description Returns true if the wrapped value contains only utf8 characters
     */get isUtf8(){return function(e){if(!e)return zU(e);let t=O1(e),r=t.length,n=0;for(;n<r;)if(t[n]<=127)n+=1;else if(t[n]>=194&&t[n]<=223)/* C2..DF 80..BF */{if(!(n+1<r)||t[n+1]<128||t[n+1]>191)// *faulty_bytes = 1;
return!1;n+=2}else if(224===t[n])/* E0 A0..BF 80..BF */{if(!(n+2<r)||t[n+1]<160||t[n+1]>191||t[n+2]<128||t[n+2]>191)// *faulty_bytes = 1;
return!1;n+=3}else if(t[n]>=225&&t[n]<=236)/* E1..EC 80..BF 80..BF */{if(!(n+2<r)||t[n+1]<128||t[n+1]>191||t[n+2]<128||t[n+2]>191)// *faulty_bytes = 1;
return!1;n+=3}else if(237===t[n])/* ED 80..9F 80..BF */{if(!(n+2<r)||t[n+1]<128||t[n+1]>159||t[n+2]<128||t[n+2]>191)// *faulty_bytes = 1;
return!1;n+=3}else if(t[n]>=238&&t[n]<=239)/* EE..EF 80..BF 80..BF */{if(!(n+2<r)||t[n+1]<128||t[n+1]>191||t[n+2]<128||t[n+2]>191)// *faulty_bytes = 1;
return!1;n+=3}else if(240===t[n])/* F0 90..BF 80..BF 80..BF */{if(!(n+3<r)||t[n+1]<144||t[n+1]>191||t[n+2]<128||t[n+2]>191||t[n+3]<128||t[n+3]>191)// *faulty_bytes = 1;
return!1;n+=4}else if(t[n]>=241&&t[n]<=243)/* F1..F3 80..BF 80..BF 80..BF */{if(!(n+3<r)||t[n+1]<128||t[n+1]>191||t[n+2]<128||t[n+2]>191||t[n+3]<128||t[n+3]>191)// *faulty_bytes = 1;
return!1;n+=4}else/* F4 80..8F 80..BF 80..BF */{if(244!==t[n]||!(n+3<r)||t[n+1]<128||t[n+1]>143||t[n+2]<128||t[n+2]>191||t[n+3]<128||t[n+3]>191)// *faulty_bytes = 1;
return!1;n+=4}return!0}(this)}/**
     * @description Returns the number of bits in the value
     */bitLength(){return 8*this.length}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return e instanceof Uint8Array?this.length===e.length&&!this.some((t,r)=>t!==e[r]):this.eq(O1(e))}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return{outer:[this.toU8a()]}}/**
     * @description Returns a hex string representation of the value
     */toHex(){return O9(this)}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return this.toPrimitive()}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.toHex()}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){if(this.isAscii){let e=this.toUtf8();// ensure we didn't end up with multibyte codepoints
if(z$(e))return e}return this.toJSON()}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"Raw"}/**
     * @description Returns the string representation of the value
     */toString(){return this.toHex()}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */toU8a(e){return Uint8Array.from(this)}/**
     * @description Returns the wrapped data as a UTF-8 string
     */toUtf8(){if(!this.isUtf8)throw Error("The character sequence is not a valid Utf8 string");return z1(this)}}function z5(e){let t=O1(e);// The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
// than doing an additional call to u8aToBn (as with variable length)
switch(3&t[0]){case 0:return[1,new/*@__PURE__*/(n(oI))(t[0]>>>2)];case 1:return[2,new/*@__PURE__*/(n(oI))(t[0]+(t[1]<<8)>>>2)];case 2:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return[4,new/*@__PURE__*/(n(oI))(t[0]+(t[1]<<8)+(t[2]<<16)+16777216*t[3]>>>2)];// 0b11
default:{// add 5 to shifted (4 for base length, 1 for this byte)
let e=(t[0]>>>2)+5;// we unroll the loop
switch(e){// there still could be 4 bytes data, similar to 0b10 above (with offsets)
case 5:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return[5,new/*@__PURE__*/(n(oI))(t[1]+(t[2]<<8)+(t[3]<<16)+16777216*t[4])];case 6:return[6,new/*@__PURE__*/(n(oI))(t[1]+(t[2]<<8)+(t[3]<<16)+(t[4]+(t[5]<<8))*16777216)];// 6 bytes data is the maximum, 48 bits (56 would overflow)
case 7:return[7,new/*@__PURE__*/(n(oI))(t[1]+(t[2]<<8)+(t[3]<<16)+(t[4]+(t[5]<<8)+(t[6]<<16))*16777216)];// for anything else, use the non-unrolled version
default:return[e,zA(t.subarray(1,e))]}}}}function z3(e){// The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
// than doing an additional call to u8aToBn (as with variable length)
switch(3&e[0]){case 0:return[1,e[0]>>>2];case 1:return[2,e[0]+(e[1]<<8)>>>2];case 2:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return[4,e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]>>>2];// 0b11
default:// add 5 to shifted (4 for base length, 1 for this byte)
// we unroll the loop
switch((e[0]>>>2)+5){// there still could be 4 bytes data, similar to 0b10 above (with offsets)
case 5:return[5,e[1]+(e[2]<<8)+(e[3]<<16)+16777216*e[4]];case 6:return[6,e[1]+(e[2]<<8)+(e[3]<<16)+(e[4]+(e[5]<<8))*16777216];// 6 bytes data is the maximum, 48 bits (56 would overflow)
case 7:return[7,e[1]+(e[2]<<8)+(e[3]<<16)+(e[4]+(e[5]<<8)+(e[6]<<16))*16777216];// for anything else, we are above the actual MAX_SAFE_INTEGER - bail out
default:throw Error("Compact input is > Number.MAX_SAFE_INTEGER")}}}var oI=(A("dEXSZ"),A("dEXSZ"));const z8=zh.pow(new/*@__PURE__*/(n(oI))(6)).isub(zp),z9=zh.pow(new/*@__PURE__*/(n(oI))(14)).isub(zp),z6=zh.pow(new/*@__PURE__*/(n(oI))(30)).isub(zp),z4={bitLength:16},z7={bitLength:32};function ke(e){let t=zT(e);if(t.lte(z8))return new Uint8Array([t.toNumber()<<2]);if(t.lte(z9))return zk(t.shln(2).iadd(zp),z4);if(t.lte(z6))return zk(t.shln(2).iadd(zh),z7);let r=zk(t),n=r.length;// adjust to the minimum number of bytes
for(;0===r[n-1];)n--;if(n<4)throw Error("Invalid length, previous checks match anything less than 2^30");return O2([// subtract 4 as minimum (also catered for in decoding)
new Uint8Array([(n-4<<2)+3]),r.subarray(0,n)])}/** @internal */function kt(e){return e.toString().padStart(2,"0")}/**
 * A sharable identity function. Returns the input as-is with no transformation applied.
 */function kr(e){return e}function kn(){// noop
}const ka={debug:"log",error:"error",log:"log",warn:"warn"};function ki(e,t,r,n=-1){if(1===r.length&&OQ(r[0])){let a=r[0]();return ki(e,t,Array.isArray(a)?a:[a],n)}console[ka[e]](function(e){let t=e.getFullYear().toString(),r=kt(e.getMonth()+1),n=kt(e.getDate()),a=kt(e.getHours()),i=kt(e.getMinutes()),o=kt(e.getSeconds());return`${t}-${r}-${n} ${a}:${i}:${o}`}(new Date),t,...r.map(function e(t){return Array.isArray(t)?t.map(e):zV(t)?t.toString():OR(t)||O_(t)?O9(O1(t)):function(t){if(t&&OH(t)&&t.constructor===Object){let r={};for(let[n,a]of Object.entries(t))r[n]=e(a);return r}return t}(t)}).map(e=>{if(n<=0)return e;let t=`${e}`;return t.length<n?e:`${t.substring(0,n)} ...`}))}function ko(e){let t=`${e.toUpperCase()}:`.padStart(16),[r,n]=function(e){let t=parseInt(o9.process?.env?.DEBUG_MAX||"-1",10);return[function(e,t){let r=!1;for(let n of e)n&&("*"===n||t===n||n.endsWith("*")&&t.startsWith(n.slice(0,-1)))?r=!0:n&&n.startsWith("-")&&(t===n.slice(1)||n.endsWith("*")&&t.startsWith(n.slice(1,-1)))&&(r=!1);return r}((o9.process?.env?.DEBUG||"").toLowerCase().split(","),e),isNaN(t)?-1:t]}(e.toLowerCase());return{debug:r?(...e)=>ki("debug",t,e,n):kn,error:(...e)=>ki("error",t,e),log:(...e)=>ki("log",t,e),noop:kn,warn:(...e)=>ki("warn",t,e)}}function ks(e,t){return!!Array.isArray(t)&&e.length===t.length&&OI(e.find((e,r)=>OQ(e.eq)?!e.eq(t[r]):e!==t[r]))}class kl extends Array{registry;createdAtHash;initialU8aLength;isStorageFallback;/**
     * @description This ensures that operators such as clice, filter, map, etc. return
     * new Array instances (without this we need to apply overrides)
     */static get[Symbol.species](){return Array}constructor(e,t){super(t),this.registry=e}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){// We need to loop through all entries since they may have a variable length themselves,
// e.g. when a Vec or Compact is contained withing, it has a variable length based on data
let e=this.length,t=ke(e).length;for(let r=0;r<e;r++)t+=this[r].encodedLength;return t}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description Checks if the value is an empty value
     */get isEmpty(){return 0===this.length}/**
     * @description The length of the value
     */get length(){// only included here since we ignore inherited docs
return super.length}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return ks(this,e)}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return{inner:this.inspectInner(),outer:[ke(this.length)]}}/**
     * @internal
     * @description Internal per-item inspection of internal values
     */inspectInner(){let e=this.length,t=Array(e);for(let r=0;r<e;r++)t[r]=this[r].inspect();return t}/**
     * @description Converts the Object to an standard JavaScript Array
     */toArray(){return Array.from(this)}/**
     * @description Returns a hex string representation of the value
     */toHex(){return O9(this.toU8a())}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){let t=this.length,r=Array(t);for(let n=0;n<t;n++)r[n]=this[n]&&this[n].toHuman(e);return r}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){let e=this.length,t=Array(e);for(let r=0;r<e;r++)// means that the Vec may be partially populated (same applies to toHuman, same check)
t[r]=this[r]&&this[r].toJSON();return t}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){let e=this.length,t=Array(e);for(let r=0;r<e;r++)t[r]=this[r]&&this[r].toPrimitive();return t}/**
     * @description Returns the string representation of the value
     */toString(){let e=this.length,t=Array(e);for(let r=0;r<e;r++)t[r]=this[r].toString();return`[${t.join(", ")}]`}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){let t=this.toU8aInner();return e?O2(t):O2([ke(this.length),...t])}/**
     * @internal
     * @description Internal per-item SCALE encoding of contained values
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8aInner(e){let t=this.length,r=Array(t);for(let n=0;n<t;n++)r[n]=this[n].toU8a(e);return r}}class kc{encodedLength=0;isEmpty=!0;registry;createdAtHash;initialU8aLength=0;isStorageFallback;constructor(e){this.registry=e}/**
     * @description returns a hash of the contents
     */get hash(){throw Error(".hash is not implemented on Null")}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return e instanceof kc||null===e}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return{}}/**
     * @description Returns a hex string representation of the value
     */toHex(){return"0x"}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return this.toJSON()}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return null}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return null}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"Null"}/**
     * @description Returns the string representation of the value
     */toString(){return""}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */toU8a(e){return new Uint8Array}}function ku(e,t){let r=Object.values(e);for(let e=0,n=r.length;e<n;e++){let{Type:n,index:a}=r[e];if(a===t)return n}throw Error(`Unable to create Enum via index ${t}, in ${Object.keys(e).join(", ")}`)}function kd(e,t,r,n){let a=ku(t,r);return{index:r,value:new a(e,n)}}function kf(e,t,r=0,n){let a=ku(t,r);return{index:r,value:n instanceof a?n:new a(e,n)}}function kp(e,t,r,n){// JSON comes in the form of { "<type (camelCase)>": "<value for type>" }, here we
// additionally force to lower to ensure forward compat
let a=Object.keys(t).map(e=>e.toLowerCase()),i=r.toLowerCase(),o=a.indexOf(i);if(-1===o)throw Error(`Cannot map Enum JSON, unable to find '${r}' in ${a.join(", ")}`);try{return kf(e,t,Object.values(t)[o].index,n)}catch(e){throw Error(`Enum(${r}):: ${e.message}`)}}class kh{registry;createdAtHash;initialU8aLength;isStorageFallback;__internal__def;__internal__entryIndex;__internal__indexes;__internal__isBasic;__internal__isIndexed;__internal__raw;constructor(e,t,r,n,{definition:a,setDefinition:i=kr}={}){let{def:o,isBasic:s,isIndexed:l}=a||i(function(e,t){let r,n;let a={};if(Array.isArray(t)){for(let e=0,r=t.length;e<r;e++)a[t[e]]={Type:kc,index:e};r=!0,n=!1}else if(function(e){let t=Object.values(e);if(t.some(e=>zX(e))){if(!t.every(e=>zX(e)&&e>=0&&e<=255))throw Error("Invalid number-indexed enum definition");return!1}return!0}(t)){let[i,o]=Tn(e,t);for(let e=0,t=o.length;e<t;e++)a[o[e]]={Type:i[e],index:e};r=!Object.values(a).some(({Type:e})=>e!==kc),n=!1}else{let e=Object.entries(t);for(let t=0,r=e.length;t<r;t++){let[r,n]=e[t];a[r]={Type:kc,index:n}}r=!0,n=!0}return{def:a,isBasic:r,isIndexed:n}}(e,t)),c=OR(r)&&r.length&&!zX(n)?kd(e,o,r[0],r.subarray(1)):function(e,t,r,n){// NOTE We check the index path first, before looking at values - this allows treating
// the optional indexes before anything else, more-specific > less-specific
if(zX(n))return kf(e,t,n,r);if(OR(r)||Oj(r)){let n=O1(r);// nested, we don't want to match isObject below
if(n.length)return kd(e,t,n[0],n.subarray(1))}else if(r instanceof kh)return kf(e,t,r.index,r.value);else if(zX(r))return kf(e,t,r);else if(zU(r))return kp(e,t,r.toString());else if(OH(r)){let n=Object.keys(r)[0];return kp(e,t,n,r[n])}// Worst-case scenario, return the first with default
return kf(e,t,Object.values(t)[0].index)}(e,o,r,n);this.registry=e,this.__internal__def=o,this.__internal__isBasic=s,this.__internal__isIndexed=l,this.__internal__indexes=Object.values(o).map(({index:e})=>e),this.__internal__entryIndex=this.__internal__indexes.indexOf(c.index),this.__internal__raw=c.value,this.__internal__raw.initialU8aLength&&(this.initialU8aLength=1+this.__internal__raw.initialU8aLength)}static with(e){let t;// eslint-disable-next-line no-return-assign
let r=e=>t=e;return class extends kh{static #e=(()=>{let t=Array.isArray(e)?e:Object.keys(e),r=t.length,n=Array(r),a=Array(r);for(let e=0;e<r;e++){let r=OC(t[e]);n[e]=`as${r}`,a[e]=`is${r}`}OB(this.prototype,a,(e,r,n)=>n.type===t[r]),OB(this.prototype,n,(e,r,n)=>{if(n.type!==t[r])throw Error(`Cannot convert '${n.type}' via ${e}`);return n.value})})();constructor(n,a,i){super(n,e,a,i,{definition:t,setDefinition:r})}}}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return 1+this.__internal__raw.encodedLength}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description The index of the enum value
     */get index(){return this.__internal__indexes[this.__internal__entryIndex]}/**
     * @description The value of the enum
     */get inner(){return this.__internal__raw}/**
     * @description true if this is a basic enum (no values)
     */get isBasic(){return this.__internal__isBasic}/**
     * @description Checks if the value is an empty value
     */get isEmpty(){return this.__internal__raw.isEmpty}/**
     * @description Checks if the Enum points to a [[Null]] type
     */get isNone(){return this.__internal__raw instanceof kc}/**
     * @description The available keys for this enum
     */get defIndexes(){return this.__internal__indexes}/**
     * @description The available keys for this enum
     */get defKeys(){return Object.keys(this.__internal__def)}/**
     * @description The name of the type this enum value represents
     */get type(){return this.defKeys[this.__internal__entryIndex]}/**
     * @description The value of the enum
     */get value(){return this.__internal__raw}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return(// cater for the case where we only pass the enum index
OR(e)?!this.toU8a().some((t,r)=>t!==e[r]):zX(e)?this.toNumber()===e:this.__internal__isBasic&&zU(e)?this.type===e:Oj(e)?this.toHex()===e:e instanceof kh?this.index===e.index&&this.value.eq(e.value):OH(e)?this.value.eq(e[this.type]):this.value.eq(e))}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){if(this.__internal__isBasic)return{outer:[new Uint8Array([this.index])]};let{inner:e,outer:t=[]}=this.__internal__raw.inspect();return{inner:e,outer:[new Uint8Array([this.index]),...t]}}/**
     * @description Returns a hex string representation of the value
     */toHex(){return O9(this.toU8a())}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){return this.__internal__isBasic||this.isNone?this.type:{[this.type]:this.__internal__raw.toHuman(e)}}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.__internal__isBasic?this.type:{[OD(this.type)]:this.__internal__raw.toJSON()}}/**
     * @description Returns the number representation for the value
     */toNumber(){return this.index}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.__internal__isBasic?this.type:{[OD(this.type)]:this.__internal__raw.toPrimitive()}}/**
     * @description Returns a raw struct representation of the enum types
     */_toRawStruct(){if(this.__internal__isBasic)return this.__internal__isIndexed?this.defKeys.reduce((e,t,r)=>(e[t]=this.__internal__indexes[r],e),{}):this.defKeys;let e=Object.entries(this.__internal__def);return Ta(this.registry,e.reduce((e,[t,{Type:r}],n)=>(e[0][n]=r,e[1][n]=t,e),[Array(e.length),Array(e.length)]))}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return Oq({_enum:this._toRawStruct()})}/**
     * @description Returns the string representation of the value
     */toString(){return this.isNone?this.type:Oq(this.toJSON())}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){return e?this.__internal__raw.toU8a(e):O2([new Uint8Array([this.index]),this.__internal__raw.toU8a(e)])}}const kb=zw("toHex","toHuman","toU8a"),ky=zw("get");function km(e){return kb(e)&&ky(e.registry)}/** @internal **/function kg(e){return e instanceof Uint8Array||Array.isArray(e)}/** @internal **/function kv(e){return km(e)&&zX(e.index)&&km(e.value)}/** @internal **/function kx(e){return km(e)&&ON(e.isSome)&&km(e.value)}/** @internal */function kw(e){return zX(e)||zV(e)||OF(e)}/** @internal */function kP(e,t,r){// Convert the value to hex.
if(km(r)){let n=r.toHex();// Check if we have seen the value.
if(t.has(n))throw Error(`Duplicate value in ${e}: ${Oq(r)}`);t.add(n)}return!0}function kO(e,t){if(kw(e)&&kw(t))return zT(e).cmp(zT(t));if(e instanceof Map&&t instanceof Map)return kO(Array.from(e.values()),Array.from(t.values()));if(kv(e)&&kv(t))return kO(e.index,t.index)||kO(e.value,t.value);if(kx(e)&&kx(t))return kO(e.isNone?0:1,t.isNone?0:1)||kO(e.value,t.value);if(kg(e)&&kg(t))return /** @internal */function(e,t){// Vec, Tuple, Bytes etc.
let r=0,n=Math.min(e.length,t.length);for(let a=0;a<n;++a)if(0!==(r=kO(e[a],t[a])))return r;return e.length-t.length}(e,t);if(km(e)&&km(t))return kO(e.toU8a(!0),t.toU8a(!0));throw Error(`Attempting to sort unrecognized values: ${Oq(e)} (typeof ${typeof e}) <-> ${Oq(t)} (typeof ${typeof t})`)}const kT=ko("Map");/** @internal */function kz(e,t,r,n){let a=new Map;for(let[i,o]of n.entries()){let n=t.prototype instanceof kl||t.prototype instanceof To||t.prototype instanceof kh;try{a.set(i instanceof t?i:new t(e,n&&"string"==typeof i?JSON.parse(i):i),o instanceof r?o:new r(e,o))}catch(e){throw kT.error("Failed to decode key or value:",e.message),e}}return[t,r,a,0]}class kk extends Map{registry;createdAtHash;initialU8aLength;isStorageFallback;__internal__KeyClass;__internal__ValClass;__internal__type;constructor(e,t,r,n,a="HashMap"){let[i,o,s,l]=/**
 * Decode input to pass into constructor.
 *
 * @param KeyClass - Type of the map key
 * @param ValClass - Type of the map value
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - Map<any, any>, where both key and value types are either
 *   constructors or decodeable values for their types.
 * @param jsonMap
 * @internal
 */function(e,t,r,n){let a=Tr(e,t),i=Tr(e,r);if(!n)return[a,i,new Map,0];if(OR(n)||Oj(n))return /** @internal */function(e,t,r,n){let a=new Map,[i,o]=z3(n),s=[];for(let e=0;e<o;e++)s.push(t,r);let[l,c]=Te(e,Array(s.length),n.subarray(i),[s,[]]);for(let e=0,t=l.length;e<t;e+=2)a.set(l[e],l[e+1]);return[t,r,a,i+c]}(e,a,i,O1(n));if(n instanceof Map)return kz(e,a,i,n);if(OH(n))return kz(e,a,i,new Map(Object.entries(n)));throw Error("Map: cannot decode type")}(e,t,r,n);super("BTreeMap"===a?function(e){let t=new Set;return new Map(Array.from(e.entries()).filter(([e])=>kP("BTreeMap",t,e)).sort(([e],[t])=>kO(e,t)))}(s):s),this.registry=e,this.initialU8aLength=l,this.__internal__KeyClass=i,this.__internal__ValClass=o,this.__internal__type=a}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){let e=ke(this.size).length;for(let[t,r]of this.entries())e+=t.encodedLength+r.encodedLength;return e}/**
     * @description Returns a hash of the value
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description Checks if the value is an empty value
     */get isEmpty(){return 0===this.size}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return O4(this,e)}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){let e=[];for(let[t,r]of this.entries())e.push(t.inspect()),e.push(r.inspect());return{inner:e,outer:[ke(this.size)]}}/**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */toHex(){return O9(this.toU8a())}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){let t={};for(let[r,n]of this.entries())t[r instanceof z2&&r.isAscii?r.toUtf8():r.toString()]=n.toHuman(e);return t}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){let e={};for(let[t,r]of this.entries())e[t.toString()]=r.toJSON();return e}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){let e={};for(let[t,r]of this.entries())e[t instanceof z2&&t.isAscii?t.toUtf8():t.toString()]=r.toPrimitive();return e}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return`${this.__internal__type}<${this.registry.getClassName(this.__internal__KeyClass)||new this.__internal__KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.__internal__ValClass)||new this.__internal__ValClass(this.registry).toRawType()}>`}/**
     * @description Returns the string representation of the value
     */toString(){return Oq(this.toJSON())}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){let t=[];for(let[r,n]of(e||t.push(ke(this.size)),this.entries()))t.push(r.toU8a(e),n.toU8a(e));return O2(t)}}class kL extends kk{static with(e,t){return class extends kL{constructor(r,n){super(r,e,t,n,"BTreeMap")}}}}function kE(e,t){// equal number of entries and each entry in the array should match
return e.size===t.length&&!t.some(t=>!e.has(t))}const kN=ko("BTreeSet");class kS extends Set{registry;createdAtHash;initialU8aLength;isStorageFallback;__internal__ValClass;constructor(e,t,r){let[n,a,i]=/**
 * Decode input to pass into constructor.
 *
 * @param ValClass - Type of the map value
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - Set<any>, where both key and value types are either
 *   constructors or decodeable values for their types.
 * @param jsonSet
 * @internal
 */function(e,t,r){let n=Tr(e,t);if(!r)return[n,new Set,0];if(OR(r)||Oj(r))return /** @internal */function(e,t,r){let n=new Set,[a,i]=z3(r),o=Array(i),[s]=Tt(e,o,r,a,t);for(let e=0;e<i;e++)n.add(o[e]);return[t,n,s]}(e,n,O1(r));if(Array.isArray(r)||r instanceof Set)return /** @internal */function(e,t,r){let n=new Set;return r.forEach(r=>{try{n.add(r instanceof t?r:new t(e,r))}catch(e){throw kN.error("Failed to decode key or value:",e.message),e}}),[t,n,0]}(e,n,r);throw Error("BTreeSet: cannot decode type")}(e,t,r);super(function(e){let t=new Set;return new Set(Array.from(e).filter(e=>kP("BTreeSet",t,e)).sort(kO))}(a)),this.registry=e,this.initialU8aLength=i,this.__internal__ValClass=n}static with(e){return class extends kS{constructor(t,r){super(t,e,r)}}}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){let e=ke(this.size).length;for(let t of this.values())e+=t.encodedLength;return e}/**
     * @description Returns a hash of the value
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description Checks if the value is an empty value
     */get isEmpty(){return 0===this.size}/**
     * @description The actual set values as a string[]
     */get strings(){return[...super.values()].map(e=>e.toString())}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return Array.isArray(e)?kE(this,e):e instanceof Set?kE(this,[...e.values()]):!!OH(e)&&kE(this,Object.values(e))}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){let e=[];for(let t of this.values())e.push(t.inspect());return{inner:e,outer:[ke(this.size)]}}/**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */toHex(){return O9(this.toU8a())}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){let t=[];for(let r of this.values())t.push(r.toHuman(e));return t}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){let e=[];for(let t of this.values())e.push(t.toJSON());return e}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return`BTreeSet<${this.registry.getClassName(this.__internal__ValClass)||new this.__internal__ValClass(this.registry).toRawType()}>`}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){let e=[];for(let t of this.values())e.push(t.toPrimitive());return e}/**
     * @description Returns the string representation of the value
     */toString(){return Oq(this.toJSON())}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){let t=[];for(let r of(e||t.push(ke(this.size)),this.values()))t.push(r.toU8a(e));return O2(t)}}function kM(e){return O2([ke(e.length),e])}class kj extends z2{constructor(e,t){let[r,n]=!OR(t)||t instanceof z2?Array.isArray(t)||zU(t)?[O1(t),0]:[t,0]:/** @internal */function(e){if(!e.length)return[new Uint8Array,0];// handle all other Uint8Array inputs, these do have a length prefix
let[t,r]=z3(e),n=t+r;if(r>10485760)throw Error(`Bytes length ${r.toString()} exceeds 10485760`);if(n>e.length)throw Error(`Bytes: required length less than remainder, expected at least ${n}, found ${e.length}`);return[e.subarray(t,n),n]}(t);super(e,r,n)}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return this.length+ke(this.length).length}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(e){let t=ke(this.length);return{outer:e?[super.toU8a()]:this.length?[t,super.toU8a()]:[t]}}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"Bytes"}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){return e?super.toU8a(e):kM(this)}}var oI=A("dEXSZ");function kH(e,t){let r=new/*@__PURE__*/(n(oI))(0);for(let n=0,a=t.length;n<a;n++)r.ior(zT(e[t[n]]||0));return r}/** @internal */function kR(e,t){let r=zT(t),n=Object.keys(e),a=[];for(let t=0,i=n.length;t<i;t++){let i=n[t];r.and(zT(e[i])).eq(zT(e[i]))&&a.push(i)}let i=kH(e,a);if(!r.eq(i))throw Error(`Set: Mismatch decoding '${r.toString()}', computed as '${i.toString()}' with ${a.join(", ")}`);return a}class kI extends Set{registry;createdAtHash;initialU8aLength;isStorageFallback;__internal__allowed;__internal__byteLength;constructor(e,t,r,n=8){super(/** @internal */function e(t,r=0,n){if(n%8!=0)throw Error(`Expected valid bitLength, power of 8, found ${n}`);let a=n/8;if(OR(r))return 0===r.length?[]:kR(t,zA(r.subarray(0,a),{isLe:!0}));if(zU(r))return e(t,O1(r),a);if(r instanceof Set||Array.isArray(r)){let e=Array.isArray(r)?r:[...r.values()];return /** @internal */function(e,t){let r=t.length,n=Array(r);for(let a=0;a<r;a++){let r=t[a];if(OI(e[r]))throw Error(`Set: Invalid key '${r}' passed to Set, allowed ${Object.keys(e).join(", ")}`);n[a]=r}return n}(t,e)}return kR(t,r)}(t,r,n)),this.registry=e,this.__internal__allowed=t,this.__internal__byteLength=n/8}static with(e,t){return class extends kI{static #e=(()=>{let t=Object.keys(e),r=t.length,n=Array(r);for(let e=0;e<r;e++)n[e]=`is${OC(t[e])}`;OB(this.prototype,n,(e,r,n)=>n.strings.includes(t[r]))})();constructor(r,n){super(r,e,n,t)}}}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return this.__internal__byteLength}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description true is the Set contains no values
     */get isEmpty(){return 0===this.size}/**
     * @description The actual set values as a string[]
     */get strings(){return[...super.values()]}/**
     * @description The encoded value for the set members
     */get valueEncoded(){return kH(this.__internal__allowed,this.strings)}/**
     * @description adds a value to the Set (extended to allow for validity checking)
     */add=e=>{// ^^^ add = () property done to assign this instance's this, otherwise Set.add creates "some" chaos
// we have the isUndefined(this._setValues) in here as well, add is used internally
// in the Set constructor (so it is undefined at this point, and should allow)
if(this.__internal__allowed&&OI(this.__internal__allowed[e]))throw Error(`Set: Invalid key '${e}' on add`);return super.add(e),this};/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return Array.isArray(e)?ks(this.strings.sort(),e.sort()):e instanceof Set?this.eq([...e.values()]):!!(zX(e)||zV(e))&&this.valueEncoded.eq(zT(e))}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return{outer:[this.toU8a()]}}/**
     * @description Returns a hex string representation of the value
     */toHex(){return O9(this.toU8a())}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return this.toJSON()}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.strings}/**
     * @description The encoded value for the set members
     */toNumber(){return this.valueEncoded.toNumber()}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.toJSON()}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return Oq({_set:this.__internal__allowed})}/**
     * @description Returns the string representation of the value
     */toString(){return`[${this.strings.join(", ")}]`}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */toU8a(e){return zk(this.valueEncoded,{bitLength:8*this.__internal__byteLength,isLe:!0})}}class kB{registry;createdAtHash;initialU8aLength;isStorageFallback;__internal__Type;__internal__raw;constructor(e,t,r=0,{definition:n,setDefinition:a=kr}={}){this.registry=e,this.__internal__Type=n||a(Tr(e,t));let[i,o]=function(e,t,r){if(OR(r)){let[n,a]=(3&r[0])<3?z3(r):z5(r);return[new t(e,a),n]}if(r instanceof kB){let n=r.unwrap();return n instanceof t?[n,0]:[new t(e,n),0]}return r instanceof t?[r,0]:[new t(e,r),0]}(e,this.__internal__Type,r);this.initialU8aLength=o,this.__internal__raw=i}static with(e){let t;// eslint-disable-next-line no-return-assign
let r=e=>t=e;return class extends kB{constructor(n,a){super(n,e,a,{definition:t,setDefinition:r})}}}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return this.toU8a().length}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description Checks if the value is an empty value
     */get isEmpty(){return this.__internal__raw.isEmpty}/**
     * @description Returns the number of bits in the value
     */bitLength(){return this.__internal__raw.bitLength()}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return this.__internal__raw.eq(e instanceof kB?e.__internal__raw:e)}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return{outer:[this.toU8a()]}}/**
     * @description Returns a BigInt representation of the number
     */toBigInt(){return this.__internal__raw.toBigInt()}/**
     * @description Returns the BN representation of the number
     */toBn(){return this.__internal__raw.toBn()}/**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */toHex(e){return this.__internal__raw.toHex(e)}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){return this.__internal__raw.toHuman(e)}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.__internal__raw.toJSON()}/**
     * @description Returns the number representation for the value
     */toNumber(){return this.__internal__raw.toNumber()}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.__internal__raw.toPrimitive()}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return`Compact<${this.registry.getClassName(this.__internal__Type)||this.__internal__raw.toRawType()}>`}/**
     * @description Returns the string representation of the value
     */toString(){return this.__internal__raw.toString()}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */toU8a(e){return ke(this.__internal__raw.toBn())}/**
     * @description Returns the embedded [[UInt]] or [[Moment]] value
     */unwrap(){return this.__internal__raw}}class kV extends kk{static with(e,t){return class extends kV{constructor(r,n){super(r,e,t,n)}}}}class kX extends zF{constructor(e,t=0,r){super(e,t,r,!0)}static with(e,t){return class extends kX{constructor(t,r){super(t,r,e)}toRawType(){return t||super.toRawType()}}}}class kU extends kc{/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"None"}}class kA{registry;createdAtHash;initialU8aLength;isStorageFallback;__internal__Type;__internal__raw;constructor(e,t,r,{definition:n,setDefinition:a=kr}={}){let i=n||a(Tr(e,t)),o=OR(r)&&r.length&&!km(r)?0===r[0]?new kU(e):new i(e,r.subarray(1)):r instanceof i?r:r instanceof kA?r.value instanceof i?r.value:r.isNone?new kU(e):new i(e,r.value):null===r||OI(r)||"0x"===r||r instanceof kU?new kU(e):OR(r)?r.length&&0!==r[0]?new i(e,r.subarray(1)):new kU(e):new i(e,r);this.registry=e,this.__internal__Type=i,this.__internal__raw=o,o?.initialU8aLength&&(this.initialU8aLength=1+o.initialU8aLength)}static with(e){let t;let r=e=>(t=e,e);return class extends kA{constructor(n,a){super(n,e,a,{definition:t,setDefinition:r})}}}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){// boolean byte (has value, doesn't have) along with wrapped length
return 1+this.__internal__raw.encodedLength}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description Checks if the Option has no value
     */get isEmpty(){return this.isNone}/**
     * @description Checks if the Option has no value
     */get isNone(){return this.__internal__raw instanceof kU}/**
     * @description Checks if the Option has a value
     */get isSome(){return!this.isNone}/**
     * @description The actual value for the Option
     */get value(){return this.__internal__raw}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return e instanceof kA?this.isSome===e.isSome&&this.value.eq(e.value):this.value.eq(e)}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){if(this.isNone)return{outer:[new Uint8Array([0])]};let{inner:e,outer:t=[]}=this.__internal__raw.inspect();return{inner:e,outer:[new Uint8Array([1]),...t]}}/**
     * @description Returns a hex string representation of the value
     */toHex(){// This attempts to align with the JSON encoding - actually in this case
// the isSome value is correct, however the `isNone` may be problematic
return this.isNone?"0x":O9(this.toU8a().subarray(1))}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){return this.__internal__raw.toHuman(e)}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.isNone?null:this.__internal__raw.toJSON()}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.isNone?null:this.__internal__raw.toPrimitive()}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(e){let t=this.registry.getClassName(this.__internal__Type)||new this.__internal__Type(this.registry).toRawType();return e?t:`Option<${t}>`}/**
     * @description Returns the string representation of the value
     */toString(){return this.__internal__raw.toString()}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){if(e)return this.__internal__raw.toU8a(!0);let t=new Uint8Array(this.encodedLength);return this.isSome&&(t.set([1]),t.set(this.__internal__raw.toU8a(),1)),t}/**
     * @description Returns the value that the Option represents (if available), throws if null
     */unwrap(){if(this.isNone)throw Error("Option: unwrapping a None value");return this.__internal__raw}/**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */unwrapOr(e){return this.isSome?this.unwrap():e}/**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */unwrapOrDefault(){return this.isSome?this.unwrap():new this.__internal__Type(this.registry)}}class kD extends kl{__internal__Types;constructor(e,t,r,{definition:n,setDefinition:a=kr}={}){let i=n||a(Array.isArray(t)?[function(e,t){let r=t.length,n=Array(r);for(let a=0;a<r;a++)n[a]=Tr(e,t[a]);return n}(e,t),[]]:OQ(t)||zU(t)?[[Tr(e,t)],[]]:Tn(e,t));super(e,i[0].length),this.initialU8aLength=(OR(r)?Te(e,this,r,i):/** @internal */function(e,t,r,n){if(Array.isArray(r)){let a=n[0];for(let n=0,i=a.length;n<i;n++)try{let i=r?.[n];t[n]=i instanceof a[n]?i:new a[n](e,i)}catch(e){throw Error(`Tuple: failed on ${n}:: ${e.message}`)}return[t,0]}if(Oj(r))return Te(e,t,O1(r),n);if(!r||!t.length){let r=n[0];for(let n=0,a=r.length;n<a;n++)t[n]=new r[n](e);return[t,0]}throw Error(`Expected array input to Tuple decoding, found ${typeof r}: ${Oq(r)}`)}(e,this,r,i))[1],this.__internal__Types=i}static with(e){let t;// eslint-disable-next-line no-return-assign
let r=e=>t=e;return class extends kD{constructor(n,a){super(n,e,a,{definition:t,setDefinition:r})}}}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){let e=0;for(let t=0,r=this.length;t<r;t++)e+=this[t].encodedLength;return e}/**
     * @description The types definition of the tuple
     */get Types(){return this.__internal__Types[1].length?this.__internal__Types[1]:this.__internal__Types[0].map(e=>new e(this.registry).toRawType())}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return{inner:this.inspectInner()}}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){let e=this.__internal__Types[0].map(e=>this.registry.getClassName(e)||new e(this.registry).toRawType());return`(${e.join(",")})`}/**
     * @description Returns the string representation of the value
     */toString(){// Overwrite the default toString representation of Array.
return Oq(this.toJSON())}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){return O2(this.toU8aInner(e))}}class kC extends kD{__internal__rangeName;constructor(e,t,r,{rangeName:n="Range"}={}){super(e,[t,t],r),this.__internal__rangeName=n}static with(e){return class extends kC{constructor(t,r){super(t,e,r)}}}/**
     * @description Returns the starting range value
     */get start(){return this[0]}/**
     * @description Returns the ending range value
     */get end(){return this[1]}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return`${this.__internal__rangeName}<${this.start.toRawType()}>`}}class kF extends kC{constructor(e,t,r){super(e,t,r,{rangeName:"RangeInclusive"})}static with(e){return class extends kF{constructor(t,r){super(t,e,r)}}}}class kZ extends kh{constructor(e,t,r,n){// NOTE This is order-dependent, Ok (with index 0) needs to be first
// eslint-disable-next-line sort-keys
super(e,{Ok:t,Err:r},n)}static with(e){return class extends kZ{constructor(t,r){super(t,e.Ok,e.Err,r)}}}/**
     * @description Returns the wrapper Err value (if isErr)
     */get asErr(){if(!this.isErr)throw Error("Cannot extract Err value from Ok result, check isErr first");return this.value}/**
     * @description Returns the wrapper Ok value (if isOk)
     */get asOk(){if(!this.isOk)throw Error("Cannot extract Ok value from Err result, check isOk first");return this.value}/**
     * @description Checks if the Result has no value
     */get isEmpty(){return this.isOk&&this.value.isEmpty}/**
     * @description Checks if the Result wraps an Err value
     */get isErr(){return!this.isOk}/**
     * @description Checks if the Result wraps an Ok value
     */get isOk(){return 0===this.index}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){let e=this._toRawStruct();return`Result<${e.Ok},${e.Err}>`}}class kq extends z2{constructor(e,t=new Uint8Array,r=256){let[n,a]=/** @internal */function(e,t){let r=O1(e),n=t/8;if(!r.length)return[new Uint8Array(n),0];if(OR(e)?r.length<n:r.length!==n)throw Error(`Expected input with ${n} bytes (${t} bits), found ${r.length} bytes`);return[r.subarray(0,n),n]}(t,r);super(e,n,a)}static with(e,t){return class extends kq{constructor(t,r){super(t,r,e)}toRawType(){return t||super.toRawType()}}}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return`[u8;${this.length}]`}}const kG=ko("Vec");function kW(e,t,r,n,a){if(Array.isArray(r)){let n=t.length;for(let i=0;i<n;i++){// 26/08/2022 this is actually a false positive - after recent eslint upgdates
// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
let n=r[i];try{t[i]=n instanceof a?n:new a(e,n)}catch(e){throw kG.error(`Unable to decode on index ${i}`,e.message),e}}return[0,0]}return r?Tt(e,t,O1(r),n,a):[0,0]}class kY extends kl{__internal__Type;constructor(e,t,r=[],{definition:n,setDefinition:a=kr}={}){let[i,o,s]=function(e){if(Array.isArray(e))return[e,e.length,0];if(OR(e)||Oj(e)){let t=O1(e),[r,n]=z3(t);if(n>65536)throw Error(`Vec length ${n.toString()} exceeds 65536`);return[t,n,r]}if(!e)return[null,0,0];throw Error(`Expected array/hex input to Vec<*> decoding, found ${typeof e}: ${Oq(e)}`)}(r);super(e,o),this.__internal__Type=n||a(Tr(e,t)),this.initialU8aLength=(OR(i)?Tt(e,this,i,s,this.__internal__Type):kW(e,this,i,s,this.__internal__Type))[0]}static with(e){let t;// eslint-disable-next-line no-return-assign
let r=e=>t=e;return class extends kY{constructor(n,a){super(n,e,a,{definition:t,setDefinition:r})}}}/**
     * @description The type for the items
     */get Type(){return this.__internal__Type.name}/**
     * @description Finds the index of the value in the array
     */indexOf(e){// convert type first, this removes overhead from the eq
let t=e instanceof this.__internal__Type?e:new this.__internal__Type(this.registry,e);for(let e=0,r=this.length;e<r;e++)if(t.eq(this[e]))return e;return -1}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return`Vec<${this.registry.getClassName(this.__internal__Type)||new this.__internal__Type(this.registry).toRawType()}>`}}class kK extends kl{__internal__Type;constructor(e,t,r,n=[],{definition:a,setDefinition:i=kr}={}){super(e,r),this.__internal__Type=a||i(Tr(e,t)),this.initialU8aLength=(OR(n)?Tt(e,this,n,0,this.__internal__Type):kW(e,this,n,0,this.__internal__Type))[1]}static with(e,t){let r;// eslint-disable-next-line no-return-assign
let n=e=>r=e;return class extends kK{constructor(a,i){super(a,e,t,i,{definition:r,setDefinition:n})}}}/**
     * @description The type for the items
     */get Type(){return new this.__internal__Type(this.registry).toRawType()}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){let e=0;for(let t=0,r=this.length;t<r;t++)e+=this[t].encodedLength;return e}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return{inner:this.inspectInner()}}toU8a(){// we override, we don't add the length prefix for ourselves, and at the same time we
// ignore isBare on entries, since they should be properly encoded at all times
let e=this.toU8aInner();return e.length?O2(e):new Uint8Array([])}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return`[${this.Type};${this.length}]`}}class kJ extends kj{__internal__Type;__internal__decoded;__internal__opaqueName;constructor(e,t,r,{opaqueName:n="WrapperKeepOpaque"}={}){let[a,i,o]=function(e,t,r){let n=Tr(e,t);if(OR(r)||Oj(r))try{let[,t]=Oj(r)?[0,O1(r)]:r instanceof z2?[0,r.subarray()]:function(e){let[t,r]=z5(e),n=t+r.toNumber();return[n,e.subarray(t,n)]}(r);return[n,new n(e,t),r]}catch{return[n,null,r]}let a=new n(e,r);return[n,a,kM(a.toU8a())]}(e,t,r);super(e,o),this.__internal__Type=a,this.__internal__decoded=i,this.__internal__opaqueName=n}static with(e){return class extends kJ{constructor(t,r){super(t,e,r)}}}/**
     * @description Checks if the wrapper is decodable
     */get isDecoded(){return!!this.__internal__decoded}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return this.__internal__decoded?{inner:[this.__internal__decoded.inspect()],outer:[ke(this.length)]}:{outer:[ke(this.length),this.toU8a(!0)]}}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){return this.__internal__decoded?this.__internal__decoded.toHuman(e):super.toHuman()}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.__internal__decoded?this.__internal__decoded.toPrimitive():super.toPrimitive()}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return`${this.__internal__opaqueName}<${this.registry.getClassName(this.__internal__Type)||(this.__internal__decoded?this.__internal__decoded.toRawType():new this.__internal__Type(this.registry).toRawType())}>`}/**
     * @description Converts the Object to to a string (either decoded or bytes)
     */toString(){return this.__internal__decoded?this.__internal__decoded.toString():super.toString()}/**
     * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
     */unwrap(){if(!this.__internal__decoded)throw Error(`${this.__internal__opaqueName}: unwrapping an undecodable value`);return this.__internal__decoded}}class kQ extends kJ{constructor(e,t,r){super(e,t,r,{opaqueName:"WrapperOpaque"})}static with(e){return class extends kQ{constructor(t,r){super(t,e,r)}}}/**
     * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
     */get inner(){return this.unwrap()}}function k_({lookupName:e,type:t}){return e||t}function k$(e){if(!Array.isArray(e.sub))throw Error(`Expected subtype as TypeDef[] in ${Tj(e)}`);return e.sub}function k0(e){return k_(function(e){if(!e.sub||Array.isArray(e.sub))throw Error(`Expected subtype as TypeDef in ${Tj(e)}`);return e.sub}(e))}function k1(e){let t=k$(e),r={};for(let e=0,n=t.length;e<n;e++){let n=t[e];if(!n.name)throw Error(`No name found in definition ${Tj(n)}`);r[n.name]=k_(n)}return r}function k2(e){return k$(e).map(k_)}function k5(e,{displayName:t,length:r}){if(!TN(r))throw Error(`Expected bitLength information for ${t||e.constructor.name}<bitLength>`);return e.with(r,t)}function k3(e,t){let[r,n]=k2(t);return e.with(r,n)}function k8(e,t){return e.with(k0(t))}function k9(e,t){return e.getUnsafe(t.type,!1,t)}function k6(e,t){return e.getUnsafe(t)||// we don't have an existing type, create the class via typeDef
k9(e,e.isLookupType(t)?e.lookup.getTypeDef(t):TD(t))}R.BTreeMap,R.BTreeSet,R.Compact,R.DoNotConstruct,R.Enum,R.HashMap,R.Int,R.Linkage,R.Null,R.Option,R.Plain,R.Range,R.RangeInclusive,R.Result,R.Set,R.Si,R.Struct,R.Tuple,R.UInt,R.Vec,R.VecFixed,R.WrapperKeepOpaque,R.WrapperOpaque,(e,t)=>k8(kQ,t);const k4=/^0x[\da-fA-F]+$/;function k7(e,t=-1,r){return"string"==typeof e&&("0x"===e||k4.test(e))&&(-1===t?r||e.length%2==0:e.length===2+Math.ceil(t/4))}/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */function Le(e){// here we defer the instanceof check which is actually slightly
// slower than just checking the constrctor (direct instances)
return(e&&e.constructor)===Uint8Array||e instanceof Uint8Array}const Lt="0123456789abcdef",Lr=new Uint8Array(256),Ln=new Uint8Array(65536);for(let e=0,t=Lt.length;e<t;e++)Lr[0|Lt[e].charCodeAt(0)]=0|e,e>9&&(Lr[0|Lt[e].toUpperCase().charCodeAt(0)]=0|e);for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)Ln[t|r]=Lr[e]<<4|Lr[r]}"function"==typeof sh&&sh.asIntN;const La="function"==typeof o9.Buffer&&"function"==typeof o9.Buffer.isBuffer;o9.process;const Li=new o8.TextEncoder;function Lo(e){return Le(e)?La&&e&&"function"==typeof e.readDoubleLE&&o9.Buffer.isBuffer(e)?new Uint8Array(e):e:k7(e)?function(e,t=-1){if(!e)return new Uint8Array;let r=e.startsWith("0x")?2:0,n=Math.ceil((e.length-r)/2),a=Math.ceil(-1===t?n:t/8),i=new Uint8Array(a),o=a>n?a-n:0;for(let t=o;t<a;t++,r+=2)// HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
// same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
// also the faster operation by at least 2x with the character map above
i[t]=Ln[e.charCodeAt(r)<<8|e.charCodeAt(r+1)];return i}(e):Array.isArray(e)?new Uint8Array(e):e?Li.encode(e.toString()):new Uint8Array}const Ls=Array(256),Ll=Array(65536);for(let e=0;e<256;e++)Ls[e]=e.toString(16).padStart(2,"0");for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)Ll[t|r]=Ls[e]+Ls[r]}/** @internal */function Lc(e,t){let r=e.length%2|0,n=e.length-r|0;for(let r=0;r<n;r+=2)t+=Ll[e[r]<<8|e[r+1]];return r&&(t+=Ls[0|e[n]]),t}function Lu(e,t=-1,r=!0){// this is not 100% correct sinmce we support isPrefixed = false....
let n=r?"0x":"";if(!e?.length)return n;if(t>0){let r=Math.ceil(t/8);if(e.length>r)return`${Lc(e.subarray(0,r/2),n)}\u{2026}${Lc(e.subarray(e.length-r/2),"")}`}return Lc(e,n)}function Ld(e,t){let r=e.toU8a(),n=e.toRawType(),a=function(e,t){let r=Lo(e),n=Lo(t);if(r.length===n.length){let e=new DataView(r.buffer,r.byteOffset),t=new DataView(n.buffer,n.byteOffset),a=r.length%4|0,i=r.length-a|0;for(let r=0;r<i;r+=4)if(e.getUint32(r)!==t.getUint32(r))return!1;for(let e=i,t=r.length;e<t;e++)if(r[e]!==n[e])return!1;return!0}return!1}(r,t)||// on a length-prefixed type, just check the actual length
["Bytes","Text","Type"].includes(n)&&t.length===e.length||// when the created is empty and matcher is also empty, let it slide...
e.isEmpty&&t.every(e=>!e);if(!a)throw Error(`${n}:: Decoded input doesn't match input, received ${Lu(t,512)} (${t.length} bytes), created ${Lu(r,512)} (${r.length} bytes)`)}function Lf(e,t,r=[],{blockHash:n,isFallback:a,isOptional:i,isPedantic:o}={}){let s=new(i?kA.with(t):t)(e,...r);return o&&function(e,[t]){Le(t)?Ld(e,t):k7(t)&&Ld(e,Lo(t))}(s,r),n&&(s.createdAtHash=function(e,t,r=[],n={}){let a=null,i=null;try{return a=k6(e,t),Lf(e,a,r,n)}catch(e){i=Error(`createType(${t}):: ${e.message}`)}if(a?.__fallbackType)try{return a=k6(e,a.__fallbackType),Lf(e,a,r,n)}catch{// swallow, we will throw the first error again
}throw i}(e,"BlockHash",[n])),a&&(s.isStorageFallback=!0),s}var oI=A("dEXSZ");const Lp=/*#__PURE__*/new/*@__PURE__*/(n(oI))(1),Lh=/*#__PURE__*/new/*@__PURE__*/(n(oI))(2),Lb=/*#__PURE__*/new/*@__PURE__*/(n(oI))(1e9);Lb.mul(Lb);var oI=A("dEXSZ");/**
 * @name isBigInt
 * @summary Tests for a `BigInt` object instance.
 * @description
 * Checks to see if the input object is an instance of `BigInt`
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBigInt } from '@polkadot/util';
 *
 * console.log('isBigInt', isBigInt(123_456n)); // => true
 * ```
 */function Ly(e){return"bigint"==typeof e}function Lm(...e){return t=>(Tu(t)||Ow(t))&&e.every(e=>Ow(t[e]))}function Lg(...e){return t=>Tu(t)&&e.every(e=>Ow(t[e]))}const Lv=Lm("toBigInt"),Lx=Lm("toBn");var oI=A("dEXSZ");function Lw(e){return e?/*@__PURE__*/n(oI).isBN(e)?e:Oz(e)?function(e,{isLe:t=!1,isNegative:r=!1}={}){if(!e||"0x"===e)return new/*@__PURE__*/(n(oI))(0);let a=function(e){if(!e||"0x"===e)return"";if(OO.test(e))return e.substring(2);if(OT.test(e))return e;throw Error(`Expected hex value to convert, found '${e}'`)}(e),i=new/*@__PURE__*/(n(oI))(a,16,t?"le":"be");// fromTwos takes as parameter the number of bits, which is the hex length
// multiplied by 4 (2 bytes being 8 bits)
return r?i.fromTwos(4*a.length):i}(e.toString()):Ly(e)?new/*@__PURE__*/(n(oI))(e.toString()):Lx(e)?e.toBn():new/*@__PURE__*/(n(oI))(Lv(e)?e.toBigInt().toString():e):new/*@__PURE__*/(n(oI))(0)}/**
 * @name isBoolean
 * @summary Tests for a boolean value.
 * @description
 * Checks to see if the input value is a JavaScript boolean.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBoolean } from '@polkadot/util';
 *
 * isBoolean(false); // => true
 * ```
 */function LP(e){return"boolean"==typeof e}const LO=RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)","g");function LT(e,t=","){// We can do this by adjusting the regx, however for the sake of clarity
// we rather strip and re-add the negative sign in the output
let r=e[0].startsWith("-"),n=r?e.substring(1).match(LO):e.match(LO);return n?`${r?"-":""}${n.join(t)}`:e}/**
 * Get the decimal and thousand separator of a locale
 * @param locale
 * @returns {decimal: string, thousand: string}
 */function Lz(e){return{decimal:.1.toLocaleString(e).substring(1,2),thousand:1e3.toLocaleString(e).substring(1,2)}}const Lk=[{power:-24,text:"yocto",value:"y"},{power:-21,text:"zepto",value:"z"},{power:-18,text:"atto",value:"a"},{power:-15,text:"femto",value:"f"},{power:-12,text:"pico",value:"p"},{power:-9,text:"nano",value:"n"},{power:-6,text:"micro",value:"\xb5"},{power:-3,text:"milli",value:"m"},{power:0,text:"Unit",value:"-"},{power:3,text:"Kilo",value:"k"},{power:6,text:"Mill",value:"M"},{power:9,text:"Bill",value:"B"},{power:12,text:"Tril",value:"T"},{power:15,text:"Peta",value:"P"},{power:18,text:"Exa",value:"E"},{power:21,text:"Zeta",value:"Z"},{power:24,text:"Yotta",value:"Y"}];function LL(e){// use a loop here, better RN support (which doesn't have [].find)
for(let t=0,r=Lk.length;t<r;t++)if(Lk[t].value===e)return Lk[t];return Lk[8]}function LE(e,t,r){if(r)return LL(r);let n=7+Math.ceil((e.length-t)/3);return Lk[n]||Lk[n<0?0:Lk.length-1]}const LN=Lk[8].text;let LS=0,LM=LN;const Lj=function(e,{decimals:t=LS,forceUnit:r,locale:n="en",withAll:a=!1,withSi:i=!0,withSiFull:o=!1,withUnit:s=!0,withZero:l=!0}={}){// we only work with string inputs here - convert anything
// into the string-only value
let c=Lw(e).toString();if(0===c.length||"0"===c)return"0";// strip the negative sign so we can work with clean groupings, re-add this in the
// end when we return the result (from here on we work with positive numbers)
let u="";c[0].startsWith("-")&&(u="-",c=c.substring(1));// We start at midpoint (8) minus 1 - this means that values display as
// 123.4567 instead of 0.1234 k (so we always have the most relevant).
let d=LE(c,t,r),f=c.length-(t+d.power),p=f<=0?"0":c.substring(0,f),h=c.padStart(f<0?t:1,"0").substring(f<0?0:f).padEnd(a?Math.max(t,4):4,"0").substring(0,a?Math.max(4,t+d.power):4);// remove all trailing 0's (if required via flag)
if(!l){let e=h.length-1;// This looks inefficient, however it is better to do the checks and
// only make one final slice than it is to do it in multiples
do"0"===h[e]&&e--;while("0"===h[e])h=h.substring(0,e+1)}// the display unit
let b=LP(s)?Lk[8].text:s,y=i||o?"-"===d.value?s?` ${b}`:"":` ${o?`${d.text}${s?" ":""}`:d.value}${s?b:""}`:"",{decimal:m,thousand:g}=Lz(n);return`${u}${LT(p,g)}${h&&`${m}${h}`}${y}`};/**
 * @name isNumber
 * @summary Tests for a JavaScript number.
 * @description
 * Checks to see if the input value is a valid number.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNumber } from '@polkadot/util';
 *
 * console.log('isNumber', isNumber(1234)); // => true
 * ```
 */function LH(e){return"number"==typeof e}/** @internal */function LR(e,t){return Ly(t)?t.toString():t}function LI(e,t){return JSON.stringify(e,LR,t)}Lj.calcSi=(e,t=LS)=>LE(e,t),Lj.findSi=LL,Lj.getDefaults=()=>({decimals:LS,unit:LM}),Lj.getOptions=(e=LS)=>Lk.filter(({power:t})=>!(t<0)||e+t>=0),Lj.setDefaults=({decimals:e,unit:t})=>{LS=(Array.isArray(e)?e[0]:e)??LS,LM=(Array.isArray(t)?t[0]:t)??LM,Lk[8].text=LM};const LB=new lw.TextDecoder("utf-8");function LV(e){return e?LB.decode(e):""}var LX={};Object.defineProperty(LX,"__esModule",{value:!0}),LX.getRandomValues=LX.crypto=LX.packageInfo=void 0;var LU={},LA="node_modules/@kiltprotocol/core/node_modules/@polkadot/types/node_modules/@polkadot/x-randomvalues/cjs";Object.defineProperty(LU,"__esModule",{value:!0}),LU.packageInfo=void 0,LU.packageInfo={name:"@polkadot/x-randomvalues",path:"string"==typeof LA?LA:"auto",type:"cjs",version:"12.6.2"},Object.defineProperty(LX,"packageInfo",{enumerable:!0,get:function(){return LU.packageInfo}}),LX.crypto=o9.crypto,LX.getRandomValues=function(e){return LX.crypto.getRandomValues(e)};const LD={getRandomValues:LX.getRandomValues},LC={crypto:LD};class LF{__internal__bridge;constructor(e){this.__internal__bridge=e}/** @internal */abort=()=>{throw Error("abort")};/** @internal */__wbindgen_is_undefined=e=>void 0===this.__internal__bridge.getObject(e);/** @internal */__wbindgen_throw=(e,t)=>{throw Error(this.__internal__bridge.getString(e,t))};/** @internal */__wbg_self_1b7a39e3a92c949c=()=>this.__internal__bridge.addObject(LC);/** @internal */__wbg_require_604837428532a733=(e,t)=>{throw Error(`Unable to require ${this.__internal__bridge.getString(e,t)}`)};/** @internal */__wbg_crypto_968f1772287e2df0=e=>this.__internal__bridge.addObject(LD);/** @internal */__wbg_getRandomValues_a3d34b4fee3c2869=e=>this.__internal__bridge.addObject(LD.getRandomValues);/** @internal */__wbg_getRandomValues_f5e14ab7ac8e995d=(e,t,r)=>{LD.getRandomValues(this.__internal__bridge.getU8a(t,r))};/** @internal */__wbg_randomFillSync_d5bd2d655fdf256a=(e,t,r)=>{throw Error("randomFillsync is not available");// getObject(idx).randomFillSync(getU8a(ptr, len));
};/** @internal */__wbindgen_object_drop_ref=e=>{this.__internal__bridge.takeObject(e)}}var LZ={};Object.defineProperty(LZ,"__esModule",{value:!0}),LZ.createWasm=LZ.packageInfo=void 0;const Lq="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",LG=Array(256);for(let e=0,t=Lq.length;e<t;e++)LG[Lq.charCodeAt(e)]=e;const LW=Uint8Array,LY=Uint16Array,LK=Uint32Array,LJ=new LW([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),LQ=new LW([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,/* unused */0,0,/* impossible */0]),L_=new LW([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,/* unused */0,0]),L$=(e,t)=>{let r=new LY(31);for(let n=0;n<31;++n)r[n]=t+=1<<e[n-1];// numbers here are at max 18 bits
let n=new LK(r[30]);for(let e=1;e<30;++e)for(let t=r[e];t<r[e+1];++t)n[t]=t-r[e]<<5|e;return[r,n]},[L0,L1]=L$(LQ,2);L0[28]=258,L1[258]=28;const[L2]=L$(L_,0),L5=new LY(32768);for(let e=0;e<32768;++e){// reverse table algorithm from SO
let t=(43690&e)>>>1|(21845&e)<<1;t=(61680&(t=(52428&t)>>>2|(13107&t)<<2))>>>4|(3855&t)<<4,L5[e]=((65280&t)>>>8|(255&t)<<8)>>>1}const L3=(e,t,r)=>{let n;let a=e.length,i=0,o=new LY(t);// length of cd must be 288 (total # of codes)
for(;i<a;++i)e[i]&&++o[e[i]-1];// u16 "map": index -> minimum code for bit length = index
let s=new LY(t);for(i=1;i<t;++i)s[i]=s[i-1]+o[i-1]<<1;if(r){// u16 "map": index -> number of actual bits, symbol for code
n=new LY(1<<t);// bits to remove for reverser
let r=15-t;for(i=0;i<a;++i)if(e[i]){// num encoding both symbol and bits read
let a=i<<4|e[i],o=t-e[i],l=s[e[i]-1]++<<o;// m is end value
for(let e=l|(1<<o)-1;l<=e;++l)n[L5[l]>>r]=a}}else for(i=0,n=new LY(a);i<a;++i)e[i]&&(n[i]=L5[s[e[i]-1]++]>>15-e[i]);return n},L8=new LW(288);for(let e=0;e<144;++e)L8[e]=8;for(let e=144;e<256;++e)L8[e]=9;for(let e=256;e<280;++e)L8[e]=7;for(let e=280;e<288;++e)L8[e]=8;const L9=new LW(32);for(let e=0;e<32;++e)L9[e]=5;const L6=L3(L8,9,1),L4=L3(L9,5,1),L7=(e,t,r)=>{let n=t>>>3;return(e[n]|e[n+1]<<8)>>>(7&t)&r},Ee=(e,t)=>{let r=t>>>3;return(e[r]|e[r+1]<<8|e[r+2]<<16)>>>(7&t)},Et=e=>(e>>>3)+(7&e&&1),Er=(e,t,r)=>{(null==t||t<0)&&(t=0),(null==r||r>e.length)&&(r=e.length);// can't use .constructor in case user-supplied
let n=new(e instanceof LY?LY:e instanceof LK?LK:LW)(r-t);return n.set(e.subarray(t,r)),n},En=e=>{let t=e[0];for(let r=1,n=e.length;r<n;++r)e[r]>t&&(t=e[r]);return t},Ea=(P=function(e,t){let r=0,n=0,a=-1;for(let i=0,o=t.length-1;a!==o;i++)// each character represents 6 bits
r=r<<6|LG[e.charCodeAt(i)],(n+=6)>=8&&(t[++a]=r>>>(n-=8)&255);return t}("",new Uint8Array(171008)),O=new Uint8Array(339468),((e,t,r)=>{let n=!r||r.i;r||(r={});// source length
let a=e.length,i=!t||!n;// Assumes roughly 33% compression ratio average
t||(t=new LW(3*a));// ensure buffer can fit at least l elements
let o=e=>{let r=t.length;// need to increase size to fit
if(e>r){// Double or set to necessary, whichever is greater
let n=new LW(Math.max(r<<1,e));n.set(t),t=n}},s=r.f||0,l=r.p||0,c=r.b||0,u=r.l,d=r.d,f=r.m,p=r.n;if(s&&!u)return t;// total bits
let h=a<<3;do{if(!u){// BFINAL - this is only 1 when last chunk is next
r.f=s=L7(e,l,1);// type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
let b=L7(e,l+1,3);if(l+=3,b){if(1==b)u=L6,d=L4,f=9,p=5;else if(2==b){//  literal                            lengths
let t=L7(e,l,31)+257,r=L7(e,l+10,15)+4,a=t+L7(e,l+5,31)+1;l+=14;// length+distance tree
let i=new LW(a),o=new LW(19);for(let t=0;t<r;++t)o[LJ[t]]=L7(e,l+3*t,7);l+=3*r;// code lengths bits
let s=En(o),c=(1<<s)-1;if(!n&&l+a*(s+7)>h)break;// code lengths map
let b=L3(o,s,1);for(let t=0;t<a;){let r=b[L7(e,l,c)];// bits read
l+=15&r;// symbol
let n=r>>>4;// code length to copy
if(n<16)i[t++]=n;else{//  copy   count
let r=0,a=0;for(16==n?(a=3+L7(e,l,3),l+=2,r=i[t-1]):17==n?(a=3+L7(e,l,7),l+=3):18==n&&(a=11+L7(e,l,127),l+=7);a--;)i[t++]=r}}//    length tree                 distance tree
let y=i.subarray(0,t),m=i.subarray(t);// max length bits
f=En(y),// max dist bits
p=En(m),u=L3(y,f,1),d=L3(m,p,1)}else throw"invalid block type"}else{// go to end of byte boundary
let s=Et(l)+4,u=e[s-4]|e[s-3]<<8,d=s+u;if(d>a){if(n)throw"unexpected EOF";break}i&&o(c+u),// Copy over uncompressed data
t.set(e.subarray(s,d),c),// Get new bitpos, update byte count
r.b=c+=u,r.p=l=d<<3;continue}if(l>h)throw"unexpected EOF"}i&&o(c+131072);let b=(1<<f)-1,y=(1<<p)-1,m=f+p+18;for(;n||l+m<h;){// bits read, code
let r=u[Ee(e,l)&b],n=r>>>4;if((l+=15&r)>h)throw"unexpected EOF";if(!r)throw"invalid length/literal";if(n<256)t[c++]=n;else if(256==n){u=void 0;break}else{let r=n-254;// no extra bits needed if less
if(n>264){// index
let t=n-257,a=LQ[t];r=L7(e,l,(1<<a)-1)+L0[t],l+=a}// dist
let a=d[Ee(e,l)&y],s=a>>>4;if(!a)throw"invalid distance";l+=15&a;let u=L2[s];if(s>3){let t=L_[s];u+=Ee(e,l)&(1<<t)-1,l+=t}if(l>h)throw"unexpected EOF";i&&o(c+131072);let f=c+r;for(;c<f;c+=4)t[c]=t[c-u],t[c+1]=t[c+1-u],t[c+2]=t[c+2-u],t[c+3]=t[c+3-u];c=f}}r.l=u,r.p=l,r.b=c,u&&(s=1,r.m=f,r.d=d,r.n=p)}while(!s)return c==t.length?t:Er(t,0,c)})(((e=>{if((15&e[0])!=8||e[0]>>>4>7||(e[0]<<8|e[1])%31)throw"invalid zlib data";if(32&e[1])throw"invalid zlib data: preset dictionaries not supported"})(P),P.subarray(2,-4)),O));var Ei={},Eo="node_modules/@kiltprotocol/core/node_modules/@polkadot/types/node_modules/@polkadot/wasm-crypto-init/cjs";Object.defineProperty(Ei,"__esModule",{value:!0}),Ei.packageInfo=void 0,Ei.packageInfo={name:"@polkadot/wasm-crypto-init",path:"string"==typeof Eo?Eo:"auto",type:"cjs",version:"7.3.2"},Object.defineProperty(LZ,"packageInfo",{enumerable:!0,get:function(){return Ei.packageInfo}}),/**
 * @name createWasm
 * @description
 * Creates an interface using only WASM
 */LZ.createWasm=async e=>{let t={error:null,type:"none",wasm:null};try{if(Ea?.length){if("object"!=typeof WebAssembly||"function"!=typeof WebAssembly.instantiate)throw Error("WebAssembly is not available in your environment")}else throw Error("No WebAssembly provided for initialization");let r=await WebAssembly.instantiate(Ea,{wbg:e});t.wasm=r.instance.exports,t.type="wasm"}catch(e){// if we have a valid supplied asm.js, return that
t.error=`FATAL: Unable to initialize @polkadot/wasm-crypto:: ${e.message}`,console.error(t.error)}return t};const Es=new class{__internal__createWasm;__internal__heap;__internal__wbg;__internal__cachegetInt32;__internal__cachegetUint8;__internal__heapNext;__internal__wasm;__internal__wasmError;__internal__wasmPromise;__internal__type;constructor(e){this.__internal__createWasm=e,this.__internal__cachegetInt32=null,this.__internal__cachegetUint8=null,this.__internal__heap=Array(32).fill(void 0).concat(void 0,null,!0,!1),this.__internal__heapNext=this.__internal__heap.length,this.__internal__type="none",this.__internal__wasm=null,this.__internal__wasmError=null,this.__internal__wasmPromise=null,this.__internal__wbg={...new LF(this)}}/** @description Returns the init error */get error(){return this.__internal__wasmError}/** @description Returns the init type */get type(){return this.__internal__type}/** @description Returns the created wasm interface */get wasm(){return this.__internal__wasm}/** @description Performs the wasm initialization */async init(e){(!this.__internal__wasmPromise||e)&&(this.__internal__wasmPromise=(e||this.__internal__createWasm)(this.__internal__wbg));let{error:t,type:r,wasm:n}=await this.__internal__wasmPromise;return this.__internal__type=r,this.__internal__wasm=n,this.__internal__wasmError=t,this.__internal__wasm}/**
     * @internal
     * @description Gets an object from the heap
     */getObject(e){return this.__internal__heap[e]}/**
     * @internal
     * @description Removes an object from the heap
     */dropObject(e){e<36||(this.__internal__heap[e]=this.__internal__heapNext,this.__internal__heapNext=e)}/**
     * @internal
     * @description Retrieves and removes an object to the heap
     */takeObject(e){let t=this.getObject(e);return this.dropObject(e),t}/**
     * @internal
     * @description Adds an object to the heap
     */addObject(e){this.__internal__heapNext===this.__internal__heap.length&&this.__internal__heap.push(this.__internal__heap.length+1);let t=this.__internal__heapNext;return this.__internal__heapNext=this.__internal__heap[t],this.__internal__heap[t]=e,t}/**
     * @internal
     * @description Retrieve an Int32 in the WASM interface
     */getInt32(){return(null===this.__internal__cachegetInt32||this.__internal__cachegetInt32.buffer!==this.__internal__wasm.memory.buffer)&&(this.__internal__cachegetInt32=new Int32Array(this.__internal__wasm.memory.buffer)),this.__internal__cachegetInt32}/**
     * @internal
     * @description Retrieve an Uint8Array in the WASM interface
     */getUint8(){return(null===this.__internal__cachegetUint8||this.__internal__cachegetUint8.buffer!==this.__internal__wasm.memory.buffer)&&(this.__internal__cachegetUint8=new Uint8Array(this.__internal__wasm.memory.buffer)),this.__internal__cachegetUint8}/**
     * @internal
     * @description Retrieves an Uint8Array in the WASM interface
     */getU8a(e,t){return this.getUint8().subarray(e/1,e/1+t)}/**
     * @internal
     * @description Retrieves a string in the WASM interface
     */getString(e,t){return LV(this.getU8a(e,t))}/**
     * @internal
     * @description Allocates an Uint8Array in the WASM interface
     */allocU8a(e){let t=this.__internal__wasm.__wbindgen_malloc(1*e.length);return this.getUint8().set(e,t/1),[t,e.length]}/**
     * @internal
     * @description Allocates a string in the WASM interface
     */allocString(e){return this.allocU8a(OL(e))}/**
     * @internal
     * @description Retrieves an Uint8Array from the WASM interface
     */resultU8a(){let e=this.getInt32()[2],t=this.getInt32()[3],r=this.getU8a(e,t).slice();return this.__internal__wasm.__wbindgen_free(e,1*t),r}/**
     * @internal
     * @description Retrieve a string from the WASM interface
     */resultString(){return LV(this.resultU8a())}}(LZ.createWasm);/**
 * @internal
 * @description
 * This create an extenal interface function from the signature, all the while checking
 * the actual bridge wasm interface to ensure it has been initialized.
 *
 * This means that we can call it
 *
 *   withWasm(wasm: WasmCryptoInstance, a: number, b: string) => Uint8Array
 *
 * and in this case it will create an interface function with the signarure
 *
 *   (a: number, b: string) => Uint8Array
 */function El(e){return(...t)=>{if(!Es.wasm)throw Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");return e(Es.wasm,...t)}}const Ec=/*#__PURE__*/El((e,t)=>(e.ext_secp_pub_expand(8,...Es.allocU8a(t)),Es.resultU8a())),Eu=/*#__PURE__*/El((e,t,r,n)=>(e.ext_blake2b(8,...Es.allocU8a(t),...Es.allocU8a(r),n),Es.resultU8a())),Ed=/*#__PURE__*/El((e,t)=>(e.ext_keccak256(8,...Es.allocU8a(t)),Es.resultU8a())),Ef=/*#__PURE__*/El((e,t)=>(e.ext_keccak512(8,...Es.allocU8a(t)),Es.resultU8a())),Ep=/*#__PURE__*/El((e,t,r)=>(e.ext_twox(8,...Es.allocU8a(t),r),Es.resultU8a()));function Eh(){return!!Es.wasm}function Eb(e,t=256,r,n){let a=Math.ceil(t/8),i=OE(e);return!Ov||!n&&Eh()?Eu(i,OE(r),a):r?(0,sR.blake2b)(i,{dkLen:a,key:r}):(0,sR.blake2b)(i,{dkLen:a})}const Ey={extrinsic:{},payload:{}},Em={extrinsic:{era:"ExtrinsicEra"},payload:{blockHash:"Hash"}},Eg={extrinsic:{tip:"Compact<Balance>"},payload:{}},Ev=TJ({},{ChargeTransactionPayment:Eg,CheckBlockGasLimit:Ey,CheckEra:Em,CheckGenesis:{extrinsic:{},payload:{genesisHash:"Hash"}},CheckMortality:Em,CheckNonZeroSender:Ey,CheckNonce:{extrinsic:{nonce:"Compact<Index>"},payload:{}},CheckSpecVersion:{extrinsic:{},payload:{specVersion:"u32"}},CheckTxVersion:{extrinsic:{},payload:{transactionVersion:"u32"}},CheckVersion:{extrinsic:{},payload:{specVersion:"u32"}},CheckWeight:Ey,LockStakingStatus:Ey,SkipCheckIfFeeless:Eg,ValidateEquivocationReport:Ey},{LimitParathreadCommits:Ey,OnlyStakingAndClaims:Ey,PrevalidateAttests:Ey,RestrictFunctionality:Ey,TransactionCallFilter:Ey,ValidateDoubleVoteReports:Ey},{DisallowSigned:Ey},{ChargeAssetTxPayment:{extrinsic:{tip:"Compact<Balance>",// eslint-disable-next-line sort-keys
assetId:"TAssetConversion"},payload:{}}});/**
 * @name objectProperty
 * @summary Assign a get property on the input object
 */function Ex(e,t,r,n,a=0){let i=n?n(t,a):t;// There are 3 approaches here -
//  - Object.prototype.hasOwnProperty.call(that, key) - this only checks the current class, i.e
//    will retuirn false if the property is set in the parent class
//  - isUndefined(...) - this may yield a false positive when the property is there, but not set.
//    Additionally, on pre-defined getters it may make a call
//  - key in that - Does not need to be combined with either of the above and checks the full chain
i in e||Object.defineProperty(e,i,{enumerable:!0,// Unlike in lazy, we always call into the upper function, i.e. this method
// does not cache old values (it is expected to be used for dynamic values)
get:function(){return r(t,a,this)}})}function Ew(e,t,r,n){for(let a=0,i=t.length;a<i;a++)Ex(e,t[a],r,n,a)}class EP extends kD{__internal__meta;__internal__method;__internal__names=null;__internal__section;__internal__typeDef;constructor(e,t,r,n="<unknown>",a="<unknown>"){let i=r?.fields||[];super(e,i.map(({type:t})=>e.createLookupType(t)),t),this.__internal__meta=r,this.__internal__method=a,this.__internal__section=n,this.__internal__typeDef=i.map(({type:t})=>e.lookup.getTypeDef(t));let o=i.map(({name:t})=>e.lookup.sanitizeField(t)[0]).filter(e=>!!e);o.length===i.length&&(this.__internal__names=o,Ew(this,o,(e,t)=>this[t]))}/**
     * @description The wrapped [[EventMetadata]]
     */get meta(){return this.__internal__meta}/**
     * @description The method as a string
     */get method(){return this.__internal__method}/**
     * @description The field names (as available)
     */get names(){return this.__internal__names}/**
     * @description The section as a string
     */get section(){return this.__internal__section}/**
     * @description The [[TypeDef]] for this event
     */get typeDef(){return this.__internal__typeDef}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){if(null!==this.__internal__names){let t={};for(let r=0,n=this.__internal__names.length;r<n;r++)t[this.__internal__names[r]]=this[r].toHuman(e);return t}return super.toHuman(e)}}class EO extends To{// Currently we _only_ decode from Uint8Array, since we expect it to
// be used via EventRecord
constructor(e,t){let{DataType:r,value:n}=/** @internal */function(e,t){if(!t?.length)return{DataType:kc};let r=t.subarray(0,2);return{DataType:e.findMetaEvent(r),value:{data:t.subarray(2),index:r}}}(e,t);super(e,{index:"EventId",// eslint-disable-next-line sort-keys
data:r},n)}/**
     * @description The wrapped [[EventData]]
     */get data(){return this.getT("data")}/**
     * @description The [[EventId]], identifying the raw event
     */get index(){return this.getT("index")}/**
     * @description The [[EventMetadata]] with the documentation
     */get meta(){return this.data.meta}/**
     * @description The method string identifying the event
     */get method(){return this.data.method}/**
     * @description The section string identifying the event
     */get section(){return this.data.section}/**
     * @description The [[TypeDef]] for the event
     */get typeDef(){return this.data.typeDef}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){return TJ({method:this.method,section:this.section},e?{docs:this.meta.docs.map(e=>e.toString())}:null,super.toHuman(e))}}var ET={},Ez={};r(Ez,"GenericExtrinsic",()=>EG),r(Ez,"GenericExtrinsicEra",()=>EQ),r(Ez,"GenericImmortalEra",()=>EK),r(Ez,"GenericMortalEra",()=>EJ),r(Ez,"GenericExtrinsicPayload",()=>E$),r(Ez,"GenericExtrinsicPayloadUnknown",()=>E0),r(Ez,"GenericExtrinsicUnknown",()=>E1),r(Ez,"GenericSignerPayload",()=>E5);/**
 * @name Base
 * @description A type extends the Base class, when it holds a value
 */class Ek{registry;createdAtHash;initialU8aLength;isStorageFallback;__internal__raw;constructor(e,t,r){this.initialU8aLength=r,this.__internal__raw=t,this.registry=e}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return this.toU8a().length}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description returns the inner (wrapped value)
     */get inner(){return this.__internal__raw}/**
     * @description Checks if the value is an empty value
     */get isEmpty(){return this.__internal__raw.isEmpty}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return this.__internal__raw.eq(e)}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return this.__internal__raw.inspect()}/**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */toHex(e){return this.__internal__raw.toHex(e)}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){return this.__internal__raw.toHuman(e)}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.__internal__raw.toJSON()}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.__internal__raw.toPrimitive()}/**
     * @description Returns the string representation of the value
     */toString(){return this.__internal__raw.toString()}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){return this.__internal__raw.toU8a(e)}/**
     * @description Returns the inner wrapped value (equivalent to valueOf)
     */unwrap(){return this.__internal__raw}/**
     * @description Returns the inner wrapped value
     */valueOf(){return this.__internal__raw}}function EL(...e){let t=e.length,r=Array(t),n=0;for(let a=0;a<t;a++)r[a]=OE(e[a]),n+=r[a].length;return EE(r,n)}function EE(e,t=0){let r=e.length,n=0;if(!t)for(let n=0;n<r;n++)t+=e[n].length;let a=new Uint8Array(t);for(let t=0;t<r;t++)a.set(e[t],n),n+=e[t].length;return a}var oI=A("dEXSZ");const EN={bitLength:-1,isLe:!0,isNegative:!1};function ES(e,{bitLength:t=-1,isLe:r=!0,isNegative:n=!1}=EN){let a=Lw(e),i=-1===t?Math.ceil(a.bitLength()/8):Math.ceil((t||0)/8);if(!e)return new Uint8Array(-1===t?1:i);let o=new Uint8Array(i),s=n?a.toTwos(8*i):a;return o.set(s.toArray(r?"le":"be",i),0),o}const EM=Lh.pow(new/*@__PURE__*/(n(oI))(6)).isub(Lp),Ej=Lh.pow(new/*@__PURE__*/(n(oI))(14)).isub(Lp),EH=Lh.pow(new/*@__PURE__*/(n(oI))(30)).isub(Lp),ER={bitLength:16},EI={bitLength:32};function EB(e){let t=Lw(e);if(t.lte(EM))return new Uint8Array([t.toNumber()<<2]);if(t.lte(Ej))return ES(t.shln(2).iadd(Lp),ER);if(t.lte(EH))return ES(t.shln(2).iadd(Lh),EI);let r=ES(t),n=r.length;// adjust to the minimum number of bytes
for(;0===r[n-1];)n--;if(n<4)throw Error("Invalid length, previous checks match anything less than 2^30");return EE([// subtract 4 as minimum (also catered for in decoding)
new Uint8Array([(n-4<<2)+3]),r.subarray(0,n)])}function EV(e){return EE([EB(e.length),e])}var oI=(A("dEXSZ"),A("dEXSZ"));function EX(e,{isLe:t=!0,isNegative:r=!1}={}){// slice + reverse is expensive, however SCALE is LE by default so this is the path
// we are most interested in (the BE is added for the sake of being comprehensive)
t||(e=e.slice().reverse());let a=e.length;// shortcut for <= u48 values - in this case the manual conversion
// here seems to be more efficient than passing the full array
if(r&&a&&128&e[a-1])// For <= 32, we also optimize the xor to a single op
switch(a){case 0:return new/*@__PURE__*/(n(oI))(0);case 1:return new/*@__PURE__*/(n(oI))(-((255^e[0])*1)-1);case 2:return new/*@__PURE__*/(n(oI))(-((e[0]+(e[1]<<8)^65535)*1)-1);case 3:return new/*@__PURE__*/(n(oI))(-((e[0]+(e[1]<<8)+(e[2]<<16)^16777215)*1)-1);case 4:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return new/*@__PURE__*/(n(oI))(-((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)*1)-1);case 5:return new/*@__PURE__*/(n(oI))(-(((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)+(255^e[4])*4294967296)*1)-1);case 6:return new/*@__PURE__*/(n(oI))(-(((e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]^4294967295)+(e[4]+(e[5]<<8)^65535)*4294967296)*1)-1);default:return new/*@__PURE__*/(n(oI))(e,"le").fromTwos(8*a)}// Most common case - u{8, 16, 32} default LE SCALE-encoded
//
// There are some slight benefits in unrolling this specific loop,
// however it comes with diminishing returns since here the actual
// `new BN` does seem to take up the bulk of the time
switch(a){case 0:return new/*@__PURE__*/(n(oI))(0);case 1:return new/*@__PURE__*/(n(oI))(e[0]);case 2:return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8));case 3:return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8)+(e[2]<<16));case 4:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8)+(e[2]<<16)+16777216*e[3]);case 5:return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8)+(e[2]<<16)+(e[3]+(e[4]<<8))*16777216);case 6:return new/*@__PURE__*/(n(oI))(e[0]+(e[1]<<8)+(e[2]<<16)+(e[3]+(e[4]<<8)+(e[5]<<16))*16777216);default:return new/*@__PURE__*/(n(oI))(e,"le")}}function EU(e){let t=OE(e);// The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
// than doing an additional call to u8aToBn (as with variable length)
switch(3&t[0]){case 0:return[1,new/*@__PURE__*/(n(oI))(t[0]>>>2)];case 1:return[2,new/*@__PURE__*/(n(oI))(t[0]+(t[1]<<8)>>>2)];case 2:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return[4,new/*@__PURE__*/(n(oI))(t[0]+(t[1]<<8)+(t[2]<<16)+16777216*t[3]>>>2)];// 0b11
default:{// add 5 to shifted (4 for base length, 1 for this byte)
let e=(t[0]>>>2)+5;// we unroll the loop
switch(e){// there still could be 4 bytes data, similar to 0b10 above (with offsets)
case 5:// for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
// 32-bit, in the case where the top-most bit is set this yields a negative value
return[5,new/*@__PURE__*/(n(oI))(t[1]+(t[2]<<8)+(t[3]<<16)+16777216*t[4])];case 6:return[6,new/*@__PURE__*/(n(oI))(t[1]+(t[2]<<8)+(t[3]<<16)+(t[4]+(t[5]<<8))*16777216)];// 6 bytes data is the maximum, 48 bits (56 would overflow)
case 7:return[7,new/*@__PURE__*/(n(oI))(t[1]+(t[2]<<8)+(t[3]<<16)+(t[4]+(t[5]<<8)+(t[6]<<16))*16777216)];// for anything else, use the non-unrolled version
default:return[e,EX(t.subarray(1,e))]}}}}class EA extends To{constructor(e,t,{isSigned:r}={}){super(e,{signature:"ExtrinsicSignatureV4",// eslint-disable-next-line sort-keys
method:"Call"},EA.decodeExtrinsic(e,t,r))}/** @internal */static decodeExtrinsic(e,t,r=!1){if(t instanceof EA)return t;if(t instanceof e.createClassUnsafe("Call"))return{method:t};if(Oh(t)){// here we decode manually since we need to pull through the version information
let n=e.createTypeUnsafe("ExtrinsicSignatureV4",[t,{isSigned:r}]),a=e.createTypeUnsafe("Call",[t.subarray(n.encodedLength)]);return{method:a,signature:n}}return t||{}}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return this.toU8a().length}/**
     * @description The [[Call]] this extrinsic wraps
     */get method(){return this.getT("method")}/**
     * @description The [[ExtrinsicSignatureV4]]
     */get signature(){return this.getT("signature")}/**
     * @description The version for the signature
     */get version(){return 4}/**
     * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
     */addSignature(e,t,r){return this.signature.addSignature(e,t,r),this}/**
     * @description Sign the extrinsic with a specific keypair
     */sign(e,t){return this.signature.sign(this.method,e,t),this}/**
     * @describe Adds a fake signature to the extrinsic
     */signFake(e,t){return this.signature.signFake(this.method,e,t),this}}const ED=new Uint8Array,EC=new Uint8Array([0]),EF=["ExtrinsicUnknown","ExtrinsicUnknown","ExtrinsicUnknown","ExtrinsicUnknown","ExtrinsicV4"];/** @internal */function EZ(e,t,r){if(t instanceof EG)return t.unwrap();let n=EF[127&r]||"ExtrinsicUnknown";// we cast here since the VERSION definition is incredibly broad - we don't have a
// slice for "only add extrinsic types", and more string definitions become unwieldy
return e.createTypeUnsafe(n,[t,{isSigned:(128&r)==128,version:r}])}class Eq extends Ek{constructor(e,t,r){super(e,t,r);let n=Object.keys(e.getSignedExtensionTypes()),a=e=>this.inner.signature[e];// This is on the abstract class, ensuring that hasOwnProperty operates
// correctly, i.e. it needs to be on the base class exposing it
for(let e=0,t=n.length;e<t;e++)Ex(this,n[e],a)}/**
     * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
     */get args(){return this.method.args}/**
     * @description The argument definitions, compatible with [[Call]]
     */get argsDef(){return this.method.argsDef}/**
     * @description The actual `[sectionIndex, methodIndex]` as used in the Call
     */get callIndex(){return this.method.callIndex}/**
     * @description The actual data for the Call
     */get data(){return this.method.data}/**
     * @description The era for this extrinsic
     */get era(){return this.inner.signature.era}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return this.toU8a().length}/**
     * @description `true` id the extrinsic is signed
     */get isSigned(){return this.inner.signature.isSigned}/**
     * @description The length of the actual data, excluding prefix
     */get length(){return this.toU8a(!0).length}/**
     * @description The [[FunctionMetadataLatest]] that describes the extrinsic
     */get meta(){return this.method.meta}/**
     * @description The [[Call]] this extrinsic wraps
     */get method(){return this.inner.method}/**
     * @description The nonce for this extrinsic
     */get nonce(){return this.inner.signature.nonce}/**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */get signature(){return this.inner.signature.signature}/**
     * @description The [[Address]] that signed
     */get signer(){return this.inner.signature.signer}/**
     * @description Forwards compat
     */get tip(){return this.inner.signature.tip}/**
     * @description Returns the raw transaction version (not flagged with signing information)
    */get type(){return this.inner.version}get inner(){return this.unwrap()}/**
     * @description Returns the encoded version flag
    */get version(){return this.type|(this.isSigned?128:0)}/**
     * @description Checks if the source matches this in type
     */is(e){return this.method.is(e)}unwrap(){return super.unwrap()}}class EG extends Eq{__internal__hashCache;static LATEST_EXTRINSIC_VERSION=4;constructor(e,t,{version:r}={}){super(e,/** @internal */function(e,t,r=4){return Oh(t)||Array.isArray(t)||Oz(t)?/** @internal */function(e,t,r){if(!t.length)return EZ(e,new Uint8Array,r);let[n,a]=EU(t),i=n+a.toNumber();if(i>t.length)throw Error(`Extrinsic: length less than remainder, expected at least ${i}, found ${t.length}`);let o=t.subarray(n,i);return EZ(e,o.subarray(1),o[0])}(e,OE(t),r):t instanceof e.createClassUnsafe("Call")?EZ(e,{method:t},r):EZ(e,t,r)}(e,t,r))}/**
     * @description returns a hash of the contents
     */get hash(){return this.__internal__hashCache||(this.__internal__hashCache=super.hash),this.__internal__hashCache}/**
     * @description Injects an already-generated signature into the extrinsic
     */addSignature(e,t,r){return this.inner.addSignature(e,t,r),this.__internal__hashCache=void 0,this}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){let e=EL(...this.toU8aInner());return{inner:this.isSigned?this.inner.inspect().inner:this.inner.method.inspect().inner,outer:[EB(e.length),new Uint8Array([this.version])]}}/**
     * @description Sign the extrinsic with a specific keypair
     */sign(e,t){return this.inner.sign(e,t),this.__internal__hashCache=void 0,this}/**
     * @describe Adds a fake signature to the extrinsic
     */signFake(e,t){return this.inner.signFake(e,t),this.__internal__hashCache=void 0,this}/**
     * @description Returns a hex string representation of the value
     */toHex(e){return Th(this.toU8a(e))}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){return TJ({},{isSigned:this.isSigned,method:this.method.toHuman(e)},this.isSigned?{era:this.era.toHuman(e),nonce:this.nonce.toHuman(e),signature:this.signature.toHex(),signer:this.signer.toHuman(e),tip:this.tip.toHuman(e)}:null)}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.toHex()}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"Extrinsic"}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value is not length-prefixed
     */toU8a(e){let t=EL(...this.toU8aInner());return e?t:EV(t)}toU8aInner(){// we do not apply bare to the internal values, rather this only determines out length addition,
// where we strip all lengths this creates an extrinsic that cannot be decoded
return[new Uint8Array([this.version]),this.inner.toU8a()]}}class EW extends zZ.with(64){// NOTE without this, we cannot properly determine extensions
__UIntType="u64"}function EY(e,{locale:t="en"}={}){let{thousand:r}=Lz(t);return LT(Lw(e).toString(),r)}class EK extends z2{constructor(e,t){// For immortals, we always provide the known value (i.e. treated as a
// constant no matter how it is constructed - it is a fixed structure)
super(e,EC)}}class EJ extends kD{constructor(e,t){super(e,{period:EW,phase:EW},/** @internal */function(e,t){if(Oh(t)||Oz(t)||Array.isArray(t))return /** @internal */function(e,t){if(0===t.length)return[new EW(e),new EW(e)];let r=EX(t.subarray(0,1)).toNumber(),n=EX(t.subarray(1,2)).toNumber(),a=r+(n<<8),i=2<<a%16,o=Math.max(i>>12,1),s=(a>>4)*o;if(i<4||s>=i)throw Error("Invalid data passed to Mortal era");return[new EW(e,i),new EW(e,s)]}(e,OE(t));if(!t)return[new EW(e),new EW(e)];if(Tu(t))return /** @internal */function(e,t){let{current:r,period:n}=t,a=Math.pow(2,Math.ceil(Math.log2(n)));a=Math.min(Math.max(a,4),65536);let i=r%a,o=Math.max(a>>12,1);return[new EW(e,a),new EW(e,i/o*o)]}(e,t);throw Error("Invalid data passed to Mortal era")}(e,t))}/**
     * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
     */get encodedLength(){return 2}/**
     * @description The period of this Mortal wraps as a [[U64]]
     */get period(){return this[0]}/**
     * @description The phase of this Mortal wraps as a [[U64]]
     */get phase(){return this[1]}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return{period:EY(this.period),phase:EY(this.phase)}}/**
     * @description Returns a JSON representation of the actual value
     */toJSON(){return this.toHex()}/**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     * Period and phase are encoded:
     *   - The period of validity from the block hash found in the signing material.
     *   - The phase in the period that this transaction's lifetime begins (and, importantly,
     *     implies which block hash is included in the signature material). If the `period` is
     *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
     *     `period` is.
     */toU8a(e){let t=this.period.toNumber(),r=Math.min(15,Math.max(1,function(e){let t=e.toString(2),r=0;for(;"0"===t[t.length-1-r];)r++;return r}(t)-1))+(this.phase.toNumber()/Math.max(t>>12,1)<<4);return new Uint8Array([255&r,r>>8])}/**
     * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
     */birth(e){let t=this.phase.toNumber(),r=this.period.toNumber();// FIXME No toNumber() here
return~~((Math.max(Lw(e).toNumber(),t)-t)/r)*r+t}/**
     * @description Get the block number of the first block at which the era has ended.
     */death(e){// FIXME No toNumber() here
return this.birth(e)+this.period.toNumber()}}class EQ extends kh{constructor(e,t){super(e,{ImmortalEra:EK,MortalEra:EJ},/** @internal */function e(t=new Uint8Array){if(Oh(t))return new Uint8Array(t.length&&0!==t[0]?[1,t[0],t[1]]:[0]);if(!t)return new Uint8Array([0]);if(t instanceof EQ)return e(t.toU8a());if(Oz(t))return e(Og(t));if(Tu(t)){let e=Object.entries(t).map(([e,t])=>[e.toLowerCase(),t]),r=e.find(([e])=>"mortalera"===e.toLowerCase()),n=e.find(([e])=>"immortalera"===e.toLowerCase());// this is to de-serialize from JSON
return r?{MortalEra:r[1]}:n?{ImmortalEra:n[1]}:{MortalEra:t}}throw Error("Invalid data passed to Era")}(t))}/**
     * @description Override the encoded length method
     */get encodedLength(){return this.isImmortalEra?this.asImmortalEra.encodedLength:this.asMortalEra.encodedLength}/**
     * @description Returns the item as a [[ImmortalEra]]
     */get asImmortalEra(){if(!this.isImmortalEra)throw Error(`Cannot convert '${this.type}' via asImmortalEra`);return this.inner}/**
     * @description Returns the item as a [[MortalEra]]
     */get asMortalEra(){if(!this.isMortalEra)throw Error(`Cannot convert '${this.type}' via asMortalEra`);return this.inner}/**
     * @description `true` if Immortal
     */get isImmortalEra(){return 0===this.index}/**
     * @description `true` if Mortal
     */get isMortalEra(){return this.index>0}/**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){return this.isMortalEra?this.asMortalEra.toU8a(e):this.asImmortalEra.toU8a(e)}}const E_=["ExtrinsicPayloadUnknown","ExtrinsicPayloadUnknown","ExtrinsicPayloadUnknown","ExtrinsicPayloadUnknown","ExtrinsicPayloadV4"];class E$ extends Ek{constructor(e,t,{version:r}={}){super(e,/** @internal */function(e,t,r=4){return t instanceof E$?t.unwrap():e.createTypeUnsafe(E_[r]||"ExtrinsicPayloadUnknown",[t,{version:r}])}(e,t,r))}/**
     * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
     */get blockHash(){return this.inner.blockHash}/**
     * @description The [[ExtrinsicEra]]
     */get era(){return this.inner.era}/**
     * @description The genesis block [[BlockHash]] the signature applies to
     */get genesisHash(){// NOTE only v3+
return this.inner.genesisHash||this.registry.createTypeUnsafe("Hash",[])}/**
     * @description The [[Bytes]] contained in the payload
     */get method(){return this.inner.method}/**
     * @description The [[Index]]
     */get nonce(){return this.inner.nonce}/**
     * @description The specVersion as a [[u32]] for this payload
     */get specVersion(){// NOTE only v3+
return this.inner.specVersion||this.registry.createTypeUnsafe("u32",[])}/**
     * @description The [[Balance]]
     */get tip(){// NOTE from v2+
return this.inner.tip||this.registry.createTypeUnsafe("Compact<Balance>",[])}/**
     * @description The transaction version as a [[u32]] for this payload
     */get transactionVersion(){// NOTE only v4+
return this.inner.transactionVersion||this.registry.createTypeUnsafe("u32",[])}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return this.inner.eq(e)}/**
     * @description Sign the payload with the keypair
     */sign(e){let t=this.inner.sign(e);// This is extensible, so we could quite readily extend to send back extra
// information, such as for instance the payload, i.e. `payload: this.toHex()`
// For the case here we sign via the extrinsic, we ignore the return, so generally
// this is applicable for external signing
return{signature:Th(t)}}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){return this.inner.toHuman(e)}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.toHex()}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"ExtrinsicPayload"}/**
     * @description Returns the string representation of the value
     */toString(){return this.toHex()}/**
     * @description Returns a serialized u8a form
     */toU8a(e){// call our parent, with only the method stripped
return super.toU8a(!!e&&{method:!0})}}class E0 extends To{constructor(e,t,{version:r=0}={}){throw super(e,{}),Error(`Unsupported extrinsic payload version ${r}`)}}class E1 extends To{constructor(e,t,{isSigned:r=!1,version:n=0}={}){throw super(e,{}),Error(`Unsupported ${r?"":"un"}signed extrinsic version ${127&n}`)}}const E2={address:"Address",blockHash:"Hash",blockNumber:"BlockNumber",era:"ExtrinsicEra",genesisHash:"Hash",method:"Call",nonce:"Compact<Index>",runtimeVersion:"RuntimeVersion",signedExtensions:"Vec<Text>",tip:"Compact<Balance>",version:"u8"};class E5 extends To{__internal__extraTypes;constructor(e,t){let r=TJ({},e.getSignedExtensionTypes(),e.getSignedExtensionExtra());super(e,TJ({},r,E2),t),this.__internal__extraTypes={};let n=e=>this.get(e);// add all extras that are not in the base types
for(let[e,t]of Object.entries(r))E2[e]||(this.__internal__extraTypes[e]=t),Ex(this,e,n)}get address(){return this.getT("address")}get blockHash(){return this.getT("blockHash")}get blockNumber(){return this.getT("blockNumber")}get era(){return this.getT("era")}get genesisHash(){return this.getT("genesisHash")}get method(){return this.getT("method")}get nonce(){return this.getT("nonce")}get runtimeVersion(){return this.getT("runtimeVersion")}get signedExtensions(){return this.getT("signedExtensions")}get tip(){return this.getT("tip")}get version(){return this.getT("version")}/**
     * @description Creates an representation of the structure as an ISignerPayload JSON
     */toPayload(){let e={},t=Object.keys(this.__internal__extraTypes);// add any explicit overrides we may have
for(let r=0,n=t.length;r<n;r++){let n=t[r],a=this.getT(n);// Don't include Option.isNone
a instanceof kA&&!a.isSome||// with the typings. In the case of "unknown" fields, we use the
// primitive toJSON conversion (which is serializable). Technically
// we can include isNone in here as well ("null" is allowed), however
// for empty fields we just skip it completely (historical compat)
(e[n]=a.toJSON())}return TJ(e,{// the known defaults as managed explicitly and has different
// formatting in cases, e.g. we mostly expose a hex format here
address:this.address.toString(),blockHash:this.blockHash.toHex(),blockNumber:this.blockNumber.toHex(),era:this.era.toHex(),genesisHash:this.genesisHash.toHex(),method:this.method.toHex(),nonce:this.nonce.toHex(),signedExtensions:this.signedExtensions.map(e=>e.toString()),specVersion:this.runtimeVersion.specVersion.toHex(),tip:this.tip.toHex(),transactionVersion:this.runtimeVersion.transactionVersion.toHex(),version:this.version.toNumber()})}/**
     * @description Creates a representation of the payload in raw Exrinsic form
     */toRaw(){let e=this.toPayload(),t=Th(this.registry.createTypeUnsafe("ExtrinsicPayload",[e,{version:e.version}])// NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)
.toU8a({method:!0}));return{address:e.address,data:t,type:"payload"}}}var E3={};r(E3,"GenericExtrinsicV4",()=>EA),r(E3,"GenericExtrinsicPayloadV4",()=>E8),r(E3,"GenericExtrinsicSignatureV4",()=>E7);class E8 extends To{__internal__signOptions;constructor(e,t){super(e,TJ({method:"Bytes"},e.getSignedExtensionTypes(),e.getSignedExtensionExtra()),t),// Do detection for the type of extrinsic, in the case of MultiSignature
// this is an enum, in the case of AnySignature, this is a Hash only
// (which may be 64 or 65 bytes)
this.__internal__signOptions={withType:e.createTypeUnsafe("ExtrinsicSignature",[]) instanceof kh}}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return super.inspect({method:!0})}/**
     * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
     */get blockHash(){return this.getT("blockHash")}/**
     * @description The [[ExtrinsicEra]]
     */get era(){return this.getT("era")}/**
     * @description The genesis [[BlockHash]] the signature applies to (mortal/immortal)
     */get genesisHash(){return this.getT("genesisHash")}/**
     * @description The [[Bytes]] contained in the payload
     */get method(){return this.getT("method")}/**
     * @description The [[Index]]
     */get nonce(){return this.getT("nonce")}/**
     * @description The specVersion for this signature
     */get specVersion(){return this.getT("specVersion")}/**
     * @description The tip [[Balance]]
     */get tip(){return this.getT("tip")}/**
     * @description The transactionVersion for this signature
     */get transactionVersion(){return this.getT("transactionVersion")}/**
     * @description The (optional) asset id for this signature for chains that support transaction fees in assets
     */get assetId(){return this.getT("assetId")}/**
     * @description Sign the payload with the keypair
     */sign(e){// NOTE The `toU8a({ method: true })` argument is absolutely critical, we
// don't want the method (Bytes) to have the length prefix included. This
// means that the data-as-signed is un-decodable, but is also doesn't need
// the extra information, only the pure data (and is not decoded) ...
// The same applies to V1..V3, if we have a V5, carry this comment
return function(e,t,r,n){let a=r.length>256?e.hash(r):r;return t.sign(a,n)}(this.registry,e,this.toU8a({method:!0}),this.__internal__signOptions)}}/**
 * @name isUndefined
 * @summary Tests for a `undefined` values.
 * @description
 * Checks to see if the input value is `undefined`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUndefined } from '@polkadot/util';
 *
 * console.log('isUndefined', isUndefined(void(0))); // => true
 * ```
 */function E9(e){return void 0===e}const E6=new Uint8Array(256).fill(1);function E4(e,t){return e.createTypeUnsafe("Address",[Oh(t)?Th(t):t])}class E7 extends To{__internal__signKeys;constructor(e,t,{isSigned:r}={}){let n=e.getSignedExtensionTypes();super(e,TJ({signer:"Address",signature:"ExtrinsicSignature"},n),E7.decodeExtrinsicSignature(t,r)),this.__internal__signKeys=Object.keys(n),Ew(this,this.__internal__signKeys,e=>this.get(e))}/** @internal */static decodeExtrinsicSignature(e,t=!1){return e?e instanceof E7?e:t?e:ED:ED}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return this.isSigned?super.encodedLength:0}/**
     * @description `true` if the signature is valid
     */get isSigned(){return!this.signature.isEmpty}/**
     * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
     */get era(){return this.getT("era")}/**
     * @description The [[Index]] for the signature
     */get nonce(){return this.getT("nonce")}/**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */get signature(){// the second case here is when we don't have an enum signature, treat as raw
return this.multiSignature.value||this.multiSignature}/**
     * @description The raw [[ExtrinsicSignature]]
     */get multiSignature(){return this.getT("signature")}/**
     * @description The [[Address]] that signed
     */get signer(){return this.getT("signer")}/**
     * @description The [[Balance]] tip
     */get tip(){return this.getT("tip")}_injectSignature(e,t,r){// use the fields exposed to guide the getters
for(let e=0,t=this.__internal__signKeys.length;e<t;e++){let t=this.__internal__signKeys[e],n=r.get(t);E9(n)||this.set(t,n)}return(// additional fields (exposed in struct itself)
this.set("signer",e),this.set("signature",t),this)}/**
     * @description Adds a raw signature
     */addSignature(e,t,r){return this._injectSignature(E4(this.registry,e),this.registry.createTypeUnsafe("ExtrinsicSignature",[t]),new E8(this.registry,r))}/**
     * @description Creates a payload from the supplied options
     */createPayload(e,t){let{era:r,runtimeVersion:{specVersion:n,transactionVersion:a}}=t;return new E8(this.registry,TJ({},t,{era:r||EC,method:e.toHex(),specVersion:n,transactionVersion:a}))}/**
     * @description Generate a payload and applies the signature from a keypair
     */sign(e,t,r){if(!t?.addressRaw)throw Error(`Expected a valid keypair for signing, found ${LI(t)}`);let n=this.createPayload(e,r);return this._injectSignature(E4(this.registry,t.addressRaw),this.registry.createTypeUnsafe("ExtrinsicSignature",[n.sign(t)]),n)}/**
     * @description Generate a payload and applies a fake signature
     */signFake(e,t,r){if(!t)throw Error(`Expected a valid address for signing, found ${LI(t)}`);let n=this.createPayload(e,r);return this._injectSignature(E4(this.registry,t),this.registry.createTypeUnsafe("ExtrinsicSignature",[E6]),n)}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){return this.isSigned?super.toU8a(e):ED}}V(Ez,E3);var Ne={};r(Ne,"GenericAccountId",()=>Nf),r(Ne,"GenericAccountId32",()=>Nf),r(Ne,"GenericAccountId33",()=>Np),r(Ne,"GenericAccountIndex",()=>Nm),r(Ne,"GenericBlock",()=>Ng),r(Ne,"GenericCall",()=>Nw),r(Ne,"GenericChainProperties",()=>NO),r(Ne,"GenericConsensusEngineId",()=>NN),r(Ne,"GenericEvent",()=>EO),r(Ne,"GenericEventData",()=>EP),r(Ne,"GenericLookupSource",()=>NM),r(Ne,"GenericAddress",()=>NH),r(Ne,"GenericMultiAddress",()=>NH),r(Ne,"GenericVote",()=>NB);const Nt={chars:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",coder:sf,ipfs:"z",type:"base58"},Nr=function({chars:e,ipfs:t,type:r,withPadding:n}){return(a,i)=>{if("string"!=typeof a)throw Error(`Expected ${r} string input`);if(t&&i&&!a.startsWith(t))throw Error(`Expected ipfs-compatible ${r} to start with '${t}'`);for(let t=i?1:0,o=a.length;t<o;t++)if(e.includes(a[t]));else if(n&&"="===a[t]){if(t===o-1);else if("="===a[t+1]);else throw Error(`Invalid ${r} padding sequence "${a[t]}${a[t+1]}" at index ${t}`)}else throw Error(`Invalid ${r} character "${a[t]}" (0x${a.charCodeAt(t).toString(16)}) at index ${t}`);return!0}}(Nt),Nn=function({coder:e,ipfs:t},r){return(n,a)=>(r(n,a),e.decode(t&&a?n.substring(1):n))}(Nt,Nr),Na=function({coder:e,ipfs:t}){return(r,n)=>{let a=e.encode(OE(r));return t&&n?`${t}${a}`:a}}(Nt),Ni=OL("SS58PRE");function No(e){return Eb(EL(Ni,e),512)}const Ns={allowedDecodedLengths:[1,2,4,8,32,33],// publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
allowedEncodedLengths:[3,4,6,10,35,36,37,38],allowedPrefix:cC.map(({prefix:e})=>e),prefix:42};function Nl(e,t,r=-1){if(!e)throw Error("Invalid empty address passed");if(Oh(e)||Oz(e))return OE(e);try{let n=Nn(e);if(!Ns.allowedEncodedLengths.includes(n.length))throw Error("Invalid decoded address length");let[a,i,o,s]=function(e){let t=64&e[0]?2:1,r=1===t?e[0]:(63&e[0])<<2|e[1]>>6|(63&e[1])<<8,n=[34+t,35+t].includes(e.length),a=e.length-(n?2:1),i=No(e.subarray(0,a)),o=(128&e[0])==0&&![46,47].includes(e[0])&&(n?e[e.length-2]===i[0]&&e[e.length-1]===i[1]:e[e.length-1]===i[0]);return[o,a,t,r]}(n);if(a||t){if(-1!==r&&r!==s)throw Error(`Expected ss58Format ${r}, received ${s}`)}else throw Error("Invalid decoded address checksum");return n.slice(o,i)}catch(t){throw Error(`Decoding ${e}: ${t.message}`)}}function Nc(e,t=Ns.prefix){// decode it, this means we can re-encode an address
let r=Nl(e);if(t<0||t>16383||[46,47].includes(t))throw Error("Out of range ss58Format specified");if(!Ns.allowedDecodedLengths.includes(r.length))throw Error(`Expected a valid key to convert, with length ${Ns.allowedDecodedLengths.join(", ")}`);let n=EL(t<64?[t]:[(252&t)>>2|64,t>>8|(3&t)<<6],r);return Na(EL(n,No(n).subarray(0,[32,33].includes(r.length)?2:1)))}/** @internal */function Nu(e){if(Oh(e)||Array.isArray(e))return OE(e);if(!e)return new Uint8Array;if(Oz(e))return Og(e);if(Op(e))return Nl(e.toString());throw Error(`Unknown type passed to AccountId constructor, found typeof ${typeof e}`)}class Nd extends kq{constructor(e,t=264,r){let n=Nu(r),a=8*n.length;// Part of stream containing >= 32 bytes or a all empty (defaults)
if(a<t&&n.some(e=>e))throw Error(`Invalid AccountId provided, expected ${t>>3} bytes, found ${n.length}`);super(e,n,t)}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return super.eq(Nu(e))}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return this.toJSON()}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.toString()}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.toJSON()}/**
     * @description Returns the string representation of the value
     */toString(){return Nc(this,this.registry.chainSS58)}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"AccountId"}}class Nf extends Nd{constructor(e,t){super(e,256,t)}}class Np extends Nd{constructor(e,t){super(e,264,t)}}var oI=A("dEXSZ");const Nh=new/*@__PURE__*/(n(oI))(239),Nb=new/*@__PURE__*/(n(oI))(1).shln(16),Ny=new/*@__PURE__*/(n(oI))(1).shln(32);class Nm extends zq{constructor(e,t=new/*@__PURE__*/(n(oI))(0)){super(e,/** @internal */function e(t){return(// eslint-disable-next-line @typescript-eslint/no-use-before-define
t instanceof Nm?t.toBn():Tc(t)||LH(t)||Oz(t)||Oh(t)||Ly(t)?t:e(Nl(t)))}(t))}static calcLength(e){let t=Lw(e);return t.lte(Nh)?1:t.lt(Nb)?2:t.lt(Ny)?4:8}static readLength(e){let t=e[0];return 252===t?[1,2]:253===t?[1,4]:254===t?[1,8]:[0,1]}static writeLength(e){switch(e.length){case 2:return new Uint8Array([252]);case 4:return new Uint8Array([253]);case 8:return new Uint8Array([254]);default:return new Uint8Array([])}}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return(// shortcut for BN or Number, don't create an object
Tc(e)||LH(e)?super.eq(e):super.eq(this.registry.createTypeUnsafe("AccountIndex",[e])))}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return this.toJSON()}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.toString()}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.toJSON()}/**
     * @description Returns the string representation of the value
     */toString(){let e=Nm.calcLength(this);return Nc(this.toU8a().subarray(0,e),this.registry.chainSS58)}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"AccountIndex"}}class Ng extends To{constructor(e,t){super(e,{header:"Header",// eslint-disable-next-line sort-keys
extrinsics:"Vec<Extrinsic>"},t)}/**
     * @description Encodes a content [[Hash]] for the block
     */get contentHash(){return this.registry.hash(this.toU8a())}/**
     * @description The [[Extrinsic]] contained in the block
     */get extrinsics(){return this.getT("extrinsics")}/**
     * @description Block/header [[Hash]]
     */get hash(){return this.header.hash}/**
     * @description The [[Header]] of the block
     */get header(){return this.getT("header")}}/**
 * Get a mapping of `argument name -> argument type` for the function, from
 * its metadata.
 *
 * @param meta - The function metadata used to get the definition.
 * @internal
 */function Nv(e,t){return t.fields.reduce((t,{name:r,type:n},a)=>(t[r.unwrapOr(`param${a}`).toString()]=e.createLookupType(n),t),{})}class Nx extends kq{constructor(e,t){super(e,t,16)}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.toHex()}}class Nw extends To{_meta;constructor(e,t,r){let n=/**
 * Decode input to pass into constructor.
 *
 * @param value - Value to decode, one of:
 * - hex
 * - Uint8Array
 * - {@see DecodeMethodInput}
 * @param _meta - Metadata to use, so that `injectMethods` lookup is not
 * necessary.
 * @internal
 */function(e,t=new Uint8Array,r){if(Oh(t)||Oz(t))return /** @internal */function(e,t,r){// We need 2 bytes for the callIndex
let n=e.firstCallIndex.slice();n.set(t.subarray(0,2),0);// Find metadata with callIndex
let a=r||e.findMetaCall(n).meta;return{args:t.subarray(2),argsDef:Nv(e,a),callIndex:n,meta:a}}(e,OE(t),r);if(Tu(t)&&t.callIndex&&t.args)return /** @internal */function(e,t,r){// we only pass args/methodsIndex out
let{args:n,callIndex:a}=t,i=a instanceof Nx?a.toU8a():a,o=r||e.findMetaCall(i).meta;return{args:n,argsDef:Nv(e,o),callIndex:a,meta:o}}(e,t,r);throw Error(`Call: Cannot decode value '${t}' of type ${typeof t}`)}(e,t,r);try{super(e,{callIndex:Nx,// eslint-disable-next-line sort-keys
args:To.with(n.argsDef)},n)}catch(r){let t="unknown.unknown";try{let r=e.findMetaCall(n.callIndex);t=`${r.section}.${r.method}`}catch{// ignore
}throw Error(`Call: failed decoding ${t}:: ${r.message}`)}this._meta=n.meta}/**
     * @description The arguments for the function call
     */get args(){return[...this.getT("args").values()]}/**
     * @description The argument definitions
     */get argsDef(){return Nv(this.registry,this.meta)}/**
     * @description The argument entries
     */get argsEntries(){return[...this.getT("args").entries()]}/**
     * @description The encoded `[sectionIndex, methodIndex]` identifier
     */get callIndex(){return this.getT("callIndex").toU8a()}/**
     * @description The encoded data
     */get data(){return this.getT("args").toU8a()}/**
     * @description The [[FunctionMetadata]]
     */get meta(){return this._meta}/**
     * @description Returns the name of the method
     */get method(){return this.registry.findMetaCall(this.callIndex).method}/**
     * @description Returns the module containing the method
     */get section(){return this.registry.findMetaCall(this.callIndex).section}/**
     * @description Checks if the source matches this in type
     */is(e){return e.callIndex[0]===this.callIndex[0]&&e.callIndex[1]===this.callIndex[1]}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){let t;try{t=this.registry.findMetaCall(this.callIndex)}catch{// swallow
}return TJ({args:this.argsEntries.reduce((t,[r,n])=>TJ(t,{[r]:n.toHuman(e)}),{}),method:t?.method,section:t?.section},e&&t?{docs:t.meta.docs.map(e=>e.toString())}:null)}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"Call"}}function NP(e,t,r,n=!0){return(// We detect codec here as well - when found, generally this is constructed from itself
r&&Ow(r.unwrapOrDefault)?r:e.createTypeUnsafe(t,[n?null===r||E9(r)?null:Array.isArray(r)?r:[r]:r]))}class NO extends zQ{constructor(e,t){super(e,(t&&Ow(t.entries)?[...t.entries()]:Object.entries(t||{})).reduce((t,[r,n])=>(t[r]="ss58Format"===r?NP(e,"Option<u32>",n,!1):"tokenDecimals"===r?NP(e,"Option<Vec<u32>>",n):"tokenSymbol"===r?NP(e,"Option<Vec<Text>>",n):"isEthereum"===r?NP(e,"Bool",n,!1):n,t),{isEthereum:e.createTypeUnsafe("Bool",[]),ss58Format:e.createTypeUnsafe("Option<u32>",[]),tokenDecimals:e.createTypeUnsafe("Option<Vec<u32>>",[]),tokenSymbol:e.createTypeUnsafe("Option<Vec<Text>>",[])}))}/**
     * @description The chain uses Ethereum addresses
     */get isEthereum(){return this.getT("isEthereum")}/**
     * @description The chain ss58Format
     */get ss58Format(){return this.getT("ss58Format")}/**
     * @description The decimals for each of the tokens
     */get tokenDecimals(){return this.getT("tokenDecimals")}/**
     * @description The symbols for the tokens
     */get tokenSymbol(){return this.getT("tokenSymbol")}}var oI=A("dEXSZ");const NT=OL("aura"),Nz=OL("BABE"),Nk=OL("FRNK"),NL=OL("pow_"),NE=OL("nmbs");class NN extends kq{constructor(e,t){super(e,LH(t)?ES(t,{isLe:!1}):t,32)}/**
     * @description `true` if the engine matches aura
     */get isAura(){return this.eq(NT)}/**
     * @description `true` is the engine matches babe
     */get isBabe(){return this.eq(Nz)}/**
     * @description `true` is the engine matches grandpa
     */get isGrandpa(){return this.eq(Nk)}/**
     * @description `true` is the engine matches pow
     */get isPow(){return this.eq(NL)}/**
     * @description `true` is the engine matches nimbus
     */get isNimbus(){return this.eq(NE)}/**
     * @description From the input bytes, decode into an author
     */extractAuthor(e,t){if(t?.length){if(this.isAura)return t[this.registry.createTypeUnsafe("RawAuraPreDigest",[e.toU8a(!0)]).slotNumber.mod(new/*@__PURE__*/(n(oI))(t.length)).toNumber()];if(this.isBabe)return function(e,t,r){let n=e.createTypeUnsafe("RawBabePreDigestCompat",[t.toU8a(!0)]);return r[n.value.toNumber()]}(this.registry,e,t)}// For pow & Nimbus, the bytes are the actual author
if(this.isPow||this.isNimbus)return this.registry.createTypeUnsafe("AccountId",[e])}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return this.toString()}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"ConsensusEngineId"}/**
     * @description Override the default toString to return a 4-byte string
     */toString(){return this.isAscii?LV(this):Th(this)}}const NS=new Uint8Array([255]);class NM extends Ek{constructor(e,t=new Uint8Array){super(e,t instanceof NM?t.inner:t instanceof Nf||t instanceof Nm?t:Tc(t)||LH(t)||Ly(t)?e.createTypeUnsafe("AccountIndex",[t]):Array.isArray(t)||Oz(t)||Oh(t)?/** @internal */function(e,t){// This allows us to instantiate an address with a raw publicKey. Do this first before
// we checking the first byte, otherwise we may split an already-existent valid address
if(32===t.length)return e.createTypeUnsafe("AccountId",[t]);if(255===t[0])return e.createTypeUnsafe("AccountId",[t.subarray(1)]);let[r,n]=Nm.readLength(t);return e.createTypeUnsafe("AccountIndex",[EX(t.subarray(r,r+n))])}(e,OE(t)):/** @internal */function(e,t){let r=Nl(t);return 32===r.length?e.createTypeUnsafe("AccountId",[r]):e.createTypeUnsafe("AccountIndex",[EX(r)])}(e,t))}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){let e=this._rawLength;return e+// for 1 byte AccountIndexes, we are not adding a specific prefix
(e>1?1:0)}/**
     * @description The length of the raw value, either AccountIndex or AccountId
     */get _rawLength(){return this.inner instanceof Nm?Nm.calcLength(this.inner):this.inner.encodedLength}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){let e=this.inner.toU8a().subarray(0,this._rawLength);return{outer:[new Uint8Array(this.inner instanceof Nm?Nm.writeLength(e):NS),e]}}/**
     * @description Returns a hex string representation of the value
     */toHex(){return Th(this.toU8a())}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"Address"}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){let t=this.inner.toU8a().subarray(0,this._rawLength);return e?t:EL(this.inner instanceof Nm?Nm.writeLength(t):NS,t)}}function Nj(e,t){return[0,32].includes(t.length)?{Id:t}:20===t.length?{Address20:t}:t.length<=8?{Index:e.createTypeUnsafe("AccountIndex",[t]).toNumber()}:t}class NH extends kh{constructor(e,t){super(e,{Id:"AccountId",Index:"Compact<AccountIndex>",Raw:"Bytes",// eslint-disable-next-line sort-keys
Address32:"H256",// eslint-disable-next-line sort-keys
Address20:"H160"},function(e,t){if(t instanceof Nf)return{Id:t};if(Oh(t))return Nj(e,t);if(t instanceof NH);else if(t instanceof Nm||Tc(t)||LH(t))return{Index:LH(t)?t:t.toNumber()};else if(Op(t))return Nj(e,Nl(t.toString()));return t}(e,t))}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){let{inner:e,outer:t=[]}=this.inner.inspect();return{inner:e,outer:[new Uint8Array([this.index]),...t]}}/**
     * @description Returns the string representation of the value
     */toString(){return this.value.toString()}}class NR extends Boolean{registry;createdAtHash;initialU8aLength=1;isStorageFallback;constructor(e,t=!1){super(OR(t)?1===t[0]:t instanceof Boolean?t.valueOf():!!t),this.registry=e}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return 1}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description Checks if the value is an empty value (true when it wraps false/default)
     */get isEmpty(){return this.isFalse}/**
     * @description Checks if the value is an empty value (always false)
     */get isFalse(){return!this.isTrue}/**
     * @description Checks if the value is an empty value (always false)
     */get isTrue(){return this.valueOf()}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return this.valueOf()===(e instanceof Boolean?e.valueOf():e)}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return{outer:[this.toU8a()]}}/**
     * @description Returns a hex string representation of the value
     */toHex(){return O9(this.toU8a())}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return this.toJSON()}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.valueOf()}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.toJSON()}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"bool"}/**
     * @description Returns the string representation of the value
     */toString(){return this.toJSON().toString()}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */toU8a(e){return new Uint8Array([this.valueOf()?1:0])}}/** @internal */function NI(e){return new Uint8Array(e?[128]:[0])}class NB extends kq{__internal__aye;__internal__conviction;constructor(e,t){var r,n;// decoded is just 1 byte
// Aye: Most Significant Bit
// Conviction: 0000 - 0101
let a=(r=e,Oh(n=t)?n.length?n.subarray(0,1):new Uint8Array([0]):E9(n)||n instanceof Boolean||LP(n)?NI(new NR(r,n).isTrue):LH(n)?NI(n<0):new Uint8Array([(new NR(r,n.aye).isTrue?128:0)|r.createTypeUnsafe("Conviction",[n.conviction||0]).index]));super(e,a,8),this.__internal__aye=(128&a[0])==128,this.__internal__conviction=this.registry.createTypeUnsafe("Conviction",[127&a[0]])}/**
     * @description returns a V2 conviction
     */get conviction(){return this.__internal__conviction}/**
     * @description true if the wrapped value is a positive vote
     */get isAye(){return this.__internal__aye}/**
     * @description true if the wrapped value is a negative vote
     */get isNay(){return!this.isAye}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(e){return{conviction:this.conviction.toHuman(e),vote:this.isAye?"Aye":"Nay"}}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return{aye:this.isAye,conviction:this.conviction.toPrimitive()}}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"Vote"}}var NV={};r(NV,"GenericEthereumAccountId",()=>ND),r(NV,"GenericEthereumLookupSource",()=>NF);const NX=(T={256:Ed,512:Ef},z={256:uK.keccak_256,512:uK.keccak_512},(e,t=256,r)=>{let n=OE(e);return!Ov||!r&&Eh()?T[t](n):z[t](n)}),NU={bitLength:256,isLe:!1};/** @internal */function NA(e){var t;return Oh(e)||Array.isArray(e)?OE(e):Oz(e)||(t=e.toString())&&42===t.length&&Oz(t)&&(/^(0x)?[0-9a-f]{40}$/.test(t)||/^(0x)?[0-9A-F]{40}$/.test(t)||function(e){let t=e.replace("0x",""),r=Th(NX(t.toLowerCase()),-1,!1);for(let e=0;e<40;e++){var n;if((n=t[e])!==(parseInt(r[e],16)>7?n.toUpperCase():n.toLowerCase()))return!1}return!0}(t))?Og(e.toString()):Op(e)?OE(e):e}class ND extends kq{constructor(e,t=new Uint8Array){super(e,NA(t),160)}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return!!e&&super.eq(NA(e))}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return this.toJSON()}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.toString()}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.toJSON()}/**
     * @description Returns the string representation of the value
     */toString(){return function(e){var t;if(!e)return"0x";let r=OE(e);if(![20,32,33,65].includes(r.length))throw Error(`Invalid address or publicKey provided, received ${r.length} bytes input`);let n=Th(([33,65].includes((t=r).length)&&(t=NX(function(e,t){if(![33,65].includes(e.length))throw Error(`Invalid publicKey provided, received ${e.length} bytes input`);if(65===e.length)return e.subarray(1);if(!Ov||Eh())return Ec(e).subarray(1);let{px:r,py:n}=(0,da.secp256k1).ProjectivePoint.fromHex(e);return EL(ES(r,NU),ES(n,NU))}(t))),t.slice(-20)),-1,!1),a=Th(NX(n),-1,!1),i="";for(let e=0;e<40;e++)i=`${i}${parseInt(a[e],16)>7?n[e].toUpperCase():n[e]}`;return`0x${i}`}(this)}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"AccountId"}}const NC=new Uint8Array([255]);class NF extends Ek{constructor(e,t=new Uint8Array){super(e,t instanceof NF?t.inner:t instanceof ND||t instanceof Nm?t:Oh(t)||Array.isArray(t)||Oz(t)?/** @internal */function(e,t){// This allows us to instantiate an address with a raw publicKey. Do this first before
// we checking the first byte, otherwise we may split an already-existent valid address
if(20===t.length)return e.createTypeUnsafe("EthereumAccountId",[t]);if(255===t[0])return e.createTypeUnsafe("EthereumAccountId",[t.subarray(1)]);let[r,n]=Nm.readLength(t);return e.createTypeUnsafe("AccountIndex",[EX(t.subarray(r,r+n))])}(e,OE(t)):Tc(t)||LH(t)||Ly(t)?e.createTypeUnsafe("AccountIndex",[t]):/** @internal */function(e,t){let r=Nl(t);return 20===r.length?e.createTypeUnsafe("EthereumAccountId",[r]):e.createTypeUnsafe("AccountIndex",[EX(r)])}(e,t))}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){let e=this._rawLength;return e+// for 1 byte AccountIndexes, we are not adding a specific prefix
(e>1?1:0)}/**
     * @description The length of the raw value, either AccountIndex or AccountId
     */get _rawLength(){return this.inner instanceof Nm?Nm.calcLength(this.inner):this.inner.encodedLength}/**
     * @description Returns a hex string representation of the value
     */toHex(){return Th(this.toU8a())}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"Address"}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){let t=this.inner.toU8a().subarray(0,this._rawLength);return e?t:EL(this.inner instanceof Nm?Nm.writeLength(t):NC,t)}}V(Ne,NV);var NZ={};/** @internal */function Nq(e,{name:t}){return[e,t]}/** @internal */function NG(e,{path:t,type:r}){let n;if(t&&t.length>=5){let e=t.indexOf("node_modules");n=-1===e?t:t.substring(e)}else n="<unknown>";return[`${`${r||""}`.padStart(3)} ${e}`,n]}/** @internal */function NW(e,t,r){console.warn(`${e}
Either remove and explicitly install matching versions or dedupe using your package manager.
The following conflicting packages were found:
${/** @internal */function(e,t){let r=0;for(let t=0,n=e.length;t<n;t++)r=Math.max(r,e[t].version.length);return e.map(e=>`	${t(e.version.padEnd(r),e).join("	")}`).join("\n")}(t,r)}`)}r(NZ,"BitVec",()=>NJ),r(NZ,"Bool",()=>NR),r(NZ,"bool",()=>NR),r(NZ,"Bytes",()=>kj),r(NZ,"F32",()=>N1),r(NZ,"f32",()=>N1),r(NZ,"F64",()=>N2),r(NZ,"f64",()=>N2),r(NZ,"I8",()=>N5),r(NZ,"i8",()=>N5),r(NZ,"I16",()=>N3),r(NZ,"i16",()=>N3),r(NZ,"I32",()=>N8),r(NZ,"i32",()=>N8),r(NZ,"I64",()=>N9),r(NZ,"i64",()=>N9),r(NZ,"I128",()=>N6),r(NZ,"i128",()=>N6),r(NZ,"I256",()=>N4),r(NZ,"i256",()=>N4),r(NZ,"ISize",()=>N7),r(NZ,"isize",()=>N7),r(NZ,"Null",()=>kc),r(NZ,"OptionBool",()=>NQ),r(NZ,"Text",()=>N_),r(NZ,"Type",()=>N$),r(NZ,"U8",()=>Se),r(NZ,"u8",()=>Se),r(NZ,"U16",()=>St),r(NZ,"u16",()=>St),r(NZ,"U32",()=>zq),r(NZ,"u32",()=>zq),r(NZ,"U64",()=>EW),r(NZ,"u64",()=>EW),r(NZ,"U128",()=>Sr),r(NZ,"u128",()=>Sr),r(NZ,"U256",()=>Sn),r(NZ,"u256",()=>Sn),r(NZ,"USize",()=>Sa),r(NZ,"usize",()=>Sa),r(NZ,"Data",()=>Si),r(NZ,"StorageKey",()=>Sc);var NY=Object.assign(Object.create(null),{url:"file:///node_modules/@kiltprotocol/core/node_modules/@polkadot/types-codec/packageInfo.js"});const NK={name:"@polkadot/types-codec",path:NY?new URL("file:///node_modules/@kiltprotocol/core/node_modules/@polkadot/types-codec/packageInfo.js").pathname.substring(0,new URL("file:///node_modules/@kiltprotocol/core/node_modules/@polkadot/types-codec/packageInfo.js").pathname.lastIndexOf("/")+1):"auto",type:"esm",version:"10.11.3"};!function({name:e,path:t,type:r,version:n},a,i=[]){if(!e.startsWith("@polkadot"))throw Error(`Invalid package descriptor ${e}`);let o=(o9.__polkadotjs||(o9.__polkadotjs={}),o9.__polkadotjs[e]||(o9.__polkadotjs[e]=[]),o9.__polkadotjs[e]);o.push({path:/** @internal */function(e,t){if(e)return e;if(OQ(t))try{return t()||""}catch{return""}return t||""}(t,null),type:r,version:n});// if we have more than one entry at DIFFERENT version types then warn. If there is more than one entry at the same
// version and ESM/CJS dual warnings are disabled, then do not display warnings
let s=o.every(e=>e.version===n),l=o9.process?.env?.POLKADOTJS_DISABLE_ESM_CJS_WARNING==="1",c=1!==o.length;if(c&&!(l&&s))NW(`${e} has multiple versions, ensure that there is only one installed.`,o,NG);else{let t=i.filter(e=>e&&e.version!==n);t.length&&NW(`${e} requires direct dependencies exactly matching version ${n}.`,t,Nq)}}(NK,0,[]);class NJ extends z2{__internal__decodedLength;__internal__isMsb;// In lieu of having the Msb/Lsb identifiers passed through, we default to assuming
// we are dealing with Lsb, which is the default (as of writing) BitVec format used
// in the Polkadot code (this only affects the toHuman displays)
constructor(e,t,r=!1){let[n,a]=/** @internal */function(e){if(Array.isArray(e)||zU(e)){let t=O1(e);return[t.length/8,t]}return /** @internal */function(e){if(!e?.length)return[0,new Uint8Array];// handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded
let[t,r]=z3(e),n=t+Math.ceil(r/8);if(n>e.length)throw Error(`BitVec: required length less than remainder, expected at least ${n}, found ${e.length}`);return[r,e.subarray(t,n)]}(e)}(t);super(e,a),this.__internal__decodedLength=n,this.__internal__isMsb=r}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return this.length+ke(this.__internal__decodedLength).length}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return{outer:[ke(this.__internal__decodedLength),super.toU8a()]}}/**
     * @description Creates a boolean array of the bit values
     */toBoolArray(){let e=[...this.toU8a(!0)].map(e=>[!!(128&e),!!(64&e),!!(32&e),!!(16&e),!!(8&e),!!(4&e),!!(2&e),!!(1&e)]),t=e.length,r=Array(8*t);for(let n=0;n<t;n++){let t=8*n,a=e[n];for(let e=0;e<8;e++)r[t+e]=this.__internal__isMsb?a[e]:a[7-e]}return r}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return`0b${[...this.toU8a(!0)].map(e=>`00000000${e.toString(2)}`.slice(-8)).map(e=>this.__internal__isMsb?e:e.split("").reverse().join("")).join("_")}`}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"BitVec"}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){let t=super.toU8a(e);return e?t:O2([ke(this.__internal__decodedLength),t])}}class NQ extends kA{constructor(e,t){var r;super(e,NR,OR(t)||Oj(t)?0===(r=O1(t))[0]?null:new NR(e,1===r[0]):t),this.initialU8aLength=1}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return 1}/**
     * @description Checks if the value is an empty value (always false)
     */get isFalse(){return!!this.isSome&&!this.value.valueOf()}/**
     * @description Checks if the value is an empty value (always false)
     */get isTrue(){return!!this.isSome&&this.value.valueOf()}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return{outer:[this.toU8a()]}}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(e){return e?"bool":"Option<bool>"}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){return e?super.toU8a(!0):new Uint8Array(this.isSome?[this.isTrue?1:2]:[0])}}class N_ extends String{registry;createdAtHash;initialU8aLength;isStorageFallback;__internal__override=null;constructor(e,t){let[r,n]=/** @internal */function(e){if(OR(e)){if(!e.length)return["",0];// for Raw, the internal buffer does not have an internal length
// (the same applies in e.g. Bytes, where length is added at encoding-time)
if(e instanceof z2)return[z1(e),0];let[t,r]=z3(e),n=t+r;if(r>131072)throw Error(`Text: length ${r.toString()} exceeds 131072`);if(n>e.length)throw Error(`Text: required length less than remainder, expected at least ${n}, found ${e.length}`);return[z1(e.subarray(t,n)),n]}return Oj(e)?[z1(OK(e)),0]:[e?e.toString():"",0]}(t);super(r),this.registry=e,this.initialU8aLength=n}/**
     * @description The length of the value when encoded as a Uint8Array
     */get encodedLength(){return this.toU8a().length}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description Checks if the value is an empty value
     */get isEmpty(){return 0===this.length}/**
     * @description The length of the value
     */get length(){// only included here since we ignore inherited docs
return super.length}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return!!zU(e)&&this.toString()===e.toString()}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){let e=O0(super.toString());return{outer:e.length?[ke(e.length),e]:[ke(e.length)]}}/**
     * @description Set an override value for this
     */setOverride(e){this.__internal__override=e}/**
     * @description Returns a hex string representation of the value
     */toHex(){// like with Vec<u8>, when we are encoding to hex, we don't actually add
// the length prefix (it is already implied by the actual string length)
return O9(this.toU8a(!0))}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return this.toJSON()}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){return this.toString()}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.toJSON()}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"Text"}/**
     * @description Returns the string representation of the value
     */toString(){return this.__internal__override||super.toString()}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */toU8a(e){// NOTE Here we use the super toString (we are not taking overrides into account,
// rather encoding the original value the string was constructed with)
let t=O0(super.toString());return e?t:kM(t)}}class N$ extends N_{constructor(e,t=""){super(e,t),this.setOverride(TE(this.toString()))}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return"Type"}}class N0 extends Number{encodedLength;registry;createdAtHash;initialU8aLength;isStorageFallback;__internal__bitLength;constructor(e,t,{bitLength:r=32}={}){super(OR(t)||Oj(t)?0===t.length?0:/**
 * @name u8aToFloat
 * @description Converts a Uint8Array value into the float (either 32 or 64-bit)
 * representation.
 */function(e,{bitLength:t=32,isLe:r=!0}={}){if(32!==t&&64!==t)throw Error("Invalid bitLength provided, expected 32 or 64");if(e.length<t/8)throw Error(`Invalid input buffer provided, expected at least ${t/8} bytes, found ${e.length}`);let n=new DataView(e.buffer,e.byteOffset);return 32===t?n.getFloat32(0,r):n.getFloat64(0,r)}(O1(t),{bitLength:r}):t||0),this.__internal__bitLength=r,this.encodedLength=r/8,this.initialU8aLength=this.encodedLength,this.registry=e}static with(e){return class extends N0{constructor(t,r){super(t,r,{bitLength:e})}}}/**
     * @description returns a hash of the contents
     */get hash(){return this.registry.hash(this.toU8a())}/**
     * @description Returns true if the type wraps an empty/default all-0 value
     */get isEmpty(){return 0===this.valueOf()}/**
     * @description Compares the value of the input to see if there is a match
     */eq(e){return this.valueOf()===Number(e)}/**
     * @description Returns a breakdown of the hex encoding for this Codec
     */inspect(){return{outer:[this.toU8a()]}}/**
     * @description Returns a hex string representation of the value
     */toHex(){return O9(this.toU8a())}/**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */toHuman(){return this.toString()}/**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */toJSON(){// Not sure if this is actually a hex or a string value
// (would need to check against RPCs to see the result here)
return this.toHex()}/**
     * @description Returns the number representation (Same as valueOf)
     */toNumber(){return this.valueOf()}/**
     * @description Converts the value in a best-fit primitive form
     */toPrimitive(){return this.toNumber()}/**
     * @description Returns the base runtime type name for this instance
     */toRawType(){return`f${this.__internal__bitLength}`}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */toU8a(e){return(/**
 * @name floatToU8a
 * @description Converts a float into a U8a representation (While we don't use BE in SCALE
 * we still allow for either representation, although, as elsewhere, isLe is default)
 */function(e=0,{bitLength:t=32,isLe:r=!0}={}){if(32!==t&&64!==t)throw Error("Invalid bitLength provided, expected 32 or 64");let n=new Uint8Array(t/8),a=new DataView(n.buffer,n.byteOffset);return 32===t?a.setFloat32(0,Number(e),r):a.setFloat64(0,Number(e),r),n}(this,{bitLength:this.__internal__bitLength}))}}class N1 extends N0.with(32){// NOTE without this, we cannot properly determine extensions
__FloatType="f32"}class N2 extends N0.with(64){// NOTE without this, we cannot properly determine extensions
__FloatType="f64"}class N5 extends kX.with(8){// NOTE without this, we cannot properly determine extensions
__IntType="i8"}class N3 extends kX.with(16){// NOTE without this, we cannot properly determine extensions
__IntType="i16"}class N8 extends kX.with(32){// NOTE without this, we cannot properly determine extensions
__IntType="i32"}class N9 extends kX.with(64){// NOTE without this, we cannot properly determine extensions
__IntType="i64"}class N6 extends kX.with(128){// NOTE without this, we cannot properly determine extensions
__IntType="i128"}class N4 extends kX.with(256){// NOTE without this, we cannot properly determine extensions
__IntType="i256"}class N7 extends N8{constructor(e,t){throw super(e,t),Error("The `isize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally i64) and WASM (always i32) code. Use one of the `i32` or `i64` types explicitly.")}}class Se extends zZ.with(8){// NOTE without this, we cannot properly determine extensions
__UIntType="u8"}class St extends zZ.with(16){// NOTE without this, we cannot properly determine extensions
__UIntType="u16"}class Sr extends zZ.with(128){// NOTE without this, we cannot properly determine extensions
__UIntType="u128"}class Sn extends zZ.with(256){// NOTE without this, we cannot properly determine extensions
__UIntType="u256"}class Sa extends zq{constructor(e,t){throw super(e,t),Error("The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.")}}class Si extends kh{constructor(e,t){if(super(e,{None:"Null",Raw:"Bytes",// eslint-disable-next-line sort-keys
BlakeTwo256:"H256",Sha256:"H256",// eslint-disable-next-line sort-keys
Keccak256:"H256",ShaThree256:"H256"// 5
},...Oh(t)||Op(t)?/** @internal */function(e,t){let r=t[0];if(!r)return[void 0,void 0];// 34 becomes 2
if(r>=1&&r<=33){let n=t.subarray(1,r-1+1);// in this case, we are passing a Raw back (since we have no length)
return[e.createTypeUnsafe("Raw",[n]),1]}if(r>=34&&r<=37)return[t.subarray(1,33),r-32];throw Error(`Unable to decode Data, invalid indicator byte ${r}`)}(e,OE(t)):t?[t,void 0]:[void 0,void 0]),this.isRaw&&this.asRaw.length>32)throw Error("Data.Raw values are limited to a maximum length of 32 bytes")}get asBlakeTwo256(){return this.value}get asKeccak256(){return this.value}get asRaw(){return this.value}get asSha256(){return this.value}get asShaThree256(){return this.value}get isBlakeTwo256(){return 2===this.index}get isKeccak256(){return 4===this.index}get isNone(){return 0===this.index}get isRaw(){return 1===this.index}get isSha256(){return 3===this.index}get isShaThree256(){return 5===this.index}/**
     * @description The encoded length
     */get encodedLength(){return this.toU8a().length}/**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */toU8a(){if(0===this.index)return new Uint8Array(1);if(1===this.index){// don't add the length, just the data
let e=this.value.toU8a(!0),t=Math.min(e.length,32),r=new Uint8Array(t+1);return r.set([t+1],0),r.set(e.subarray(0,t),1),r}// otherwise we simply have a hash
let e=new Uint8Array(33);return e.set([this.index+32],0),e.set(this.value.toU8a(),1),e}}function So(e,t){let r=e.getTypeDef(t);return r.lookupName||r.type}function Ss(e,t,r){let n=So(e.lookup,t.isPlain?t.asPlain:t.asMap.value);return r?`Option<${n}>`:n}const Sl={// opaque
Blake2_128:[16,!1],Blake2_128Concat:[16,!0],Blake2_256:[32,!1],Identity:[0,!0],Twox128:[16,!1],Twox256:[32,!1],Twox64Concat:[8,!0]};class Sc extends kj{// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore This is assigned via this.decodeArgsFromMeta()
__internal__args;__internal__meta;__internal__outputType;__internal__method;__internal__section;constructor(e,t,r={}){let{key:n,method:a,section:i}=/** @internal */function(e){if(Oh(e)||!e||Op(e))return{key:e};if(e instanceof Sc)return{key:e,method:e.method,section:e.section};if(Ow(e))return{key:e(),method:e.method,section:e.section};if(Array.isArray(e)){let[t,r=[]]=e;if(!Ow(t))throw Error("Expected function input for key construction");if(t.meta&&t.meta.type.isMap){let e=t.meta.type.asMap;if(!Array.isArray(r)||r.length!==e.hashers.length)throw Error(`Expected an array of ${e.hashers.length} values as params to a Map query`)}return{key:t(...r),method:t.method,section:t.section}}throw Error(`Unable to convert input ${e} to StorageKey`)}(t);super(e,n),this.__internal__outputType=/** @internal */function(e,t){if(t instanceof Sc)return t.outputType;if(Ow(t))return Ss(e,t.meta.type);if(Array.isArray(t)){let[r]=t;if(r.meta)return Ss(e,r.meta.type)}// If we have no type set, default to Raw
return"Raw"}(e,t),// decode the args (as applicable based on the key and the hashers, after all init)
this.setMeta(/** @internal */function(e){if(e instanceof Sc||Ow(e))return e.meta;if(Array.isArray(e)){let[t]=e;return t.meta}}(t),r.section||i,r.method||a)}/**
     * @description Return the decoded arguments (applicable to map with decodable values)
     */get args(){return this.__internal__args}/**
     * @description The metadata or `undefined` when not available
     */get meta(){return this.__internal__meta}/**
     * @description The key method or `undefined` when not specified
     */get method(){return this.__internal__method}/**
     * @description The output type
     */get outputType(){return this.__internal__outputType}/**
     * @description The key section or `undefined` when not specified
     */get section(){return this.__internal__section}is(e){return e.section===this.section&&e.method===this.method}/**
     * @description Sets the meta for this key
     */setMeta(e,t,r){this.__internal__meta=e,this.__internal__method=r||this.__internal__method,this.__internal__section=t||this.__internal__section,e&&(this.__internal__outputType=Ss(this.registry,e.type));try{this.__internal__args=/** @internal */function(e,t,r){if(!r||!r.type.isMap)return[];let{hashers:n,key:a}=r.type.asMap,i=1===n.length?[a]:e.lookup.getSiType(a).def.asTuple;return /** @internal */function(e,t,r){// the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total
let n=32,a=r.length,i=Array(a);for(let o=0;o<a;o++){let[a,s]=r[o],[l,c]=Sl[a.type],u=c?e.createTypeUnsafe(So(e.lookup,s),[t.subarray(n+l)]):e.createTypeUnsafe("Raw",[t.subarray(n,n+l)]);n+=l+(c?u.encodedLength:0),i[o]=u}return i}(e,t,n.map((e,t)=>[e,i[t]]))}(this.registry,this.toU8a(!0),e)}catch{// ignore...
}return this}/**
     * @description Returns the Human representation for this type
     */toHuman(){return this.__internal__args.length?this.__internal__args.map(e=>e.toHuman()):super.toHuman()}/**
     * @description Returns the raw type for this
     */toRawType(){return"StorageKey"}}V(ET,Ez),V(ET,Ne),V(ET,NZ);var Su={};r(Su,"assetConversion",()=>Sg),r(Su,"assets",()=>Sv),r(Su,"aura",()=>Sx),r(Su,"authorship",()=>Sw),r(Su,"babe",()=>ST),r(Su,"balances",()=>Sz),r(Su,"beefy",()=>SL),r(Su,"benchmark",()=>SE),r(Su,"blockbuilder",()=>SR),r(Su,"collective",()=>SI),r(Su,"consensus",()=>SB),r(Su,"contracts",()=>SU),r(Su,"democracy",()=>SA),r(Su,"dev",()=>SD),r(Su,"discovery",()=>SC),r(Su,"elections",()=>SF),r(Su,"engine",()=>SZ),r(Su,"evm",()=>Sq),r(Su,"extrinsics",()=>SG),r(Su,"fungibles",()=>SW),r(Su,"genericAsset",()=>SY),r(Su,"gilt",()=>SK),r(Su,"grandpa",()=>S_),r(Su,"identity",()=>S$),r(Su,"imOnline",()=>S0),r(Su,"lottery",()=>S1),r(Su,"mmr",()=>S2),r(Su,"nfts",()=>S5),r(Su,"nompools",()=>S3),r(Su,"offences",()=>S8),r(Su,"pow",()=>S9),r(Su,"proxy",()=>S6),r(Su,"recovery",()=>S4),r(Su,"scheduler",()=>S7),r(Su,"session",()=>Me),r(Su,"society",()=>Mt),r(Su,"staking",()=>Mr),r(Su,"support",()=>Mn),r(Su,"syncstate",()=>Ma),r(Su,"system",()=>Mi),r(Su,"treasury",()=>Mo),r(Su,"txpayment",()=>Ms),r(Su,"txqueue",()=>Ml),r(Su,"uniques",()=>Mc),r(Su,"utility",()=>Mu),r(Su,"vesting",()=>Md),r(Su,"attestations",()=>Mf),r(Su,"bridges",()=>Mp),r(Su,"claims",()=>Mh),r(Su,"crowdloan",()=>Mb),r(Su,"cumulus",()=>My),r(Su,"finality",()=>Mg),r(Su,"parachains",()=>Mk),r(Su,"poll",()=>ML),r(Su,"purchase",()=>ME),r(Su,"xcm",()=>MM),r(Su,"contractsAbi",()=>Mj),r(Su,"eth",()=>MI),r(Su,"nimbus",()=>MB),r(Su,"ormlOracle",()=>MV),r(Su,"ormlTokens",()=>MX),r(Su,"rpc",()=>MU),r(Su,"author",()=>MA),r(Su,"chain",()=>MD),r(Su,"childstate",()=>MC),r(Su,"offchain",()=>MF),r(Su,"payment",()=>MJ),r(Su,"state",()=>MQ);var Sd={};r(Sd,"metadata",()=>Sy),r(Sd,"runtime",()=>za),r(Sd,"scaleInfo",()=>Sm);const Sf={metadata:{description:"Returns the metadata of a runtime",params:[],type:"OpaqueMetadata"}},Sp={Metadata:[{methods:{metadata_at_version:{description:"Returns the metadata at a given version.",params:[{name:"version",type:"u32"}],type:"Option<OpaqueMetadata>"},metadata_versions:{description:"Returns the supported metadata versions.",params:[],type:"Vec<u32>"},...Sf},version:2},{methods:{...Sf},version:1}]},Sh={name:"Text",fields:"Vec<Si1Field>",index:"u8",docs:"Vec<Text>"},Sb={// registry
PortableTypeV14:{id:"Si1LookupTypeId",type:"Si1Type"},// compatibility with earlier layouts, i.e. don't break previous users
ErrorMetadataV14:{...Sh,args:"Vec<Type>"},EventMetadataV14:{...Sh,args:"Vec<Type>"},FunctionArgumentMetadataV14:{name:"Text",type:"Type",typeName:"Option<Type>"},FunctionMetadataV14:{...Sh,args:"Vec<FunctionArgumentMetadataV14>"},// V14
ExtrinsicMetadataV14:{type:"SiLookupTypeId",version:"u8",signedExtensions:"Vec<SignedExtensionMetadataV14>"},MetadataV14:{lookup:"PortableRegistry",pallets:"Vec<PalletMetadataV14>",extrinsic:"ExtrinsicMetadataV14",type:"SiLookupTypeId"},PalletCallMetadataV14:{type:"SiLookupTypeId"},PalletConstantMetadataV14:{name:"Text",type:"SiLookupTypeId",value:"Bytes",docs:"Vec<Text>"},PalletErrorMetadataV14:{type:"SiLookupTypeId"},PalletEventMetadataV14:{type:"SiLookupTypeId"},PalletMetadataV14:{name:"Text",storage:"Option<PalletStorageMetadataV14>",calls:"Option<PalletCallMetadataV14>",events:"Option<PalletEventMetadataV14>",constants:"Vec<PalletConstantMetadataV14>",errors:"Option<PalletErrorMetadataV14>",index:"u8"},PalletStorageMetadataV14:{prefix:"Text",// NOTE: Renamed from entries
items:"Vec<StorageEntryMetadataV14>"},SignedExtensionMetadataV14:{identifier:"Text",type:"SiLookupTypeId",additionalSigned:"SiLookupTypeId"},StorageEntryMetadataV14:{name:"Text",modifier:"StorageEntryModifierV14",type:"StorageEntryTypeV14",fallback:"Bytes",docs:"Vec<Text>"},StorageEntryModifierV14:"StorageEntryModifierV13",StorageEntryTypeV14:{_enum:{Plain:"SiLookupTypeId",Map:{hashers:"Vec<StorageHasherV14>",key:"SiLookupTypeId",value:"SiLookupTypeId"}}},StorageHasherV14:"StorageHasherV13"};var Sy={rpc:{},runtime:Sp,types:{// v9
ErrorMetadataV9:{name:"Text",docs:"Vec<Text>"},EventMetadataV9:{name:"Text",args:"Vec<Type>",docs:"Vec<Text>"},FunctionArgumentMetadataV9:{name:"Text",type:"Type"},FunctionMetadataV9:{name:"Text",args:"Vec<FunctionArgumentMetadataV9>",docs:"Vec<Text>"},MetadataV9:{modules:"Vec<ModuleMetadataV9>"},ModuleConstantMetadataV9:{name:"Text",type:"Type",value:"Bytes",docs:"Vec<Text>"},ModuleMetadataV9:{name:"Text",storage:"Option<StorageMetadataV9>",calls:"Option<Vec<FunctionMetadataV9>>",events:"Option<Vec<EventMetadataV9>>",constants:"Vec<ModuleConstantMetadataV9>",errors:"Vec<ErrorMetadataV9>"},StorageEntryMetadataV9:{name:"Text",modifier:"StorageEntryModifierV9",type:"StorageEntryTypeV9",fallback:"Bytes",docs:"Vec<Text>"},StorageEntryModifierV9:{_enum:["Optional","Default","Required"]},StorageEntryTypeV9:{_enum:{Plain:"Type",Map:{hasher:"StorageHasherV9",key:"Type",value:"Type",linked:"bool"},DoubleMap:{hasher:"StorageHasherV9",key1:"Type",key2:"Type",value:"Type",key2Hasher:"StorageHasherV9"}}},StorageHasherV9:{_enum:{Blake2_128:null,Blake2_256:null,Twox128:null,Twox256:null,Twox64Concat:null}},StorageMetadataV9:{prefix:"Text",items:"Vec<StorageEntryMetadataV9>"},// v10
ErrorMetadataV10:"ErrorMetadataV9",EventMetadataV10:"EventMetadataV9",FunctionArgumentMetadataV10:"FunctionArgumentMetadataV9",FunctionMetadataV10:"FunctionMetadataV9",MetadataV10:{modules:"Vec<ModuleMetadataV10>"},ModuleConstantMetadataV10:"ModuleConstantMetadataV9",ModuleMetadataV10:{name:"Text",storage:"Option<StorageMetadataV10>",calls:"Option<Vec<FunctionMetadataV10>>",events:"Option<Vec<EventMetadataV10>>",constants:"Vec<ModuleConstantMetadataV10>",errors:"Vec<ErrorMetadataV10>"},StorageEntryModifierV10:"StorageEntryModifierV9",StorageEntryMetadataV10:{name:"Text",modifier:"StorageEntryModifierV10",type:"StorageEntryTypeV10",fallback:"Bytes",docs:"Vec<Text>"},StorageEntryTypeV10:{_enum:{Plain:"Type",Map:{hasher:"StorageHasherV10",key:"Type",value:"Type",linked:"bool"},DoubleMap:{hasher:"StorageHasherV10",key1:"Type",key2:"Type",value:"Type",key2Hasher:"StorageHasherV10"}}},StorageMetadataV10:{prefix:"Text",items:"Vec<StorageEntryMetadataV10>"},StorageHasherV10:{_enum:{Blake2_128:null,Blake2_256:null,Blake2_128Concat:null,Twox128:null,Twox256:null,Twox64Concat:null}},// v11
ErrorMetadataV11:"ErrorMetadataV10",EventMetadataV11:"EventMetadataV10",ExtrinsicMetadataV11:{version:"u8",signedExtensions:"Vec<Text>"},FunctionArgumentMetadataV11:"FunctionArgumentMetadataV10",FunctionMetadataV11:"FunctionMetadataV10",MetadataV11:{modules:"Vec<ModuleMetadataV11>",extrinsic:"ExtrinsicMetadataV11"},ModuleConstantMetadataV11:"ModuleConstantMetadataV10",ModuleMetadataV11:{name:"Text",storage:"Option<StorageMetadataV11>",calls:"Option<Vec<FunctionMetadataV11>>",events:"Option<Vec<EventMetadataV11>>",constants:"Vec<ModuleConstantMetadataV11>",errors:"Vec<ErrorMetadataV11>"},StorageEntryModifierV11:"StorageEntryModifierV10",StorageEntryMetadataV11:{name:"Text",modifier:"StorageEntryModifierV11",type:"StorageEntryTypeV11",fallback:"Bytes",docs:"Vec<Text>"},StorageEntryTypeV11:{_enum:{Plain:"Type",Map:{hasher:"StorageHasherV11",key:"Type",value:"Type",linked:"bool"},DoubleMap:{hasher:"StorageHasherV11",key1:"Type",key2:"Type",value:"Type",key2Hasher:"StorageHasherV11"}}},StorageMetadataV11:{prefix:"Text",items:"Vec<StorageEntryMetadataV11>"},StorageHasherV11:{_enum:{Blake2_128:null,Blake2_256:null,Blake2_128Concat:null,Twox128:null,Twox256:null,Twox64Concat:null,// new in v11
Identity:null}},// v12
ErrorMetadataV12:"ErrorMetadataV11",EventMetadataV12:"EventMetadataV11",ExtrinsicMetadataV12:"ExtrinsicMetadataV11",FunctionArgumentMetadataV12:"FunctionArgumentMetadataV11",FunctionMetadataV12:"FunctionMetadataV11",MetadataV12:{modules:"Vec<ModuleMetadataV12>",extrinsic:"ExtrinsicMetadataV12"},ModuleConstantMetadataV12:"ModuleConstantMetadataV11",ModuleMetadataV12:{name:"Text",storage:"Option<StorageMetadataV12>",calls:"Option<Vec<FunctionMetadataV12>>",events:"Option<Vec<EventMetadataV12>>",constants:"Vec<ModuleConstantMetadataV12>",errors:"Vec<ErrorMetadataV12>",index:"u8"},StorageEntryModifierV12:"StorageEntryModifierV11",StorageEntryMetadataV12:"StorageEntryMetadataV11",StorageEntryTypeV12:"StorageEntryTypeV11",StorageMetadataV12:"StorageMetadataV11",StorageHasherV12:"StorageHasherV11",// v13
ErrorMetadataV13:"ErrorMetadataV12",EventMetadataV13:"EventMetadataV12",ExtrinsicMetadataV13:"ExtrinsicMetadataV12",FunctionArgumentMetadataV13:"FunctionArgumentMetadataV12",FunctionMetadataV13:"FunctionMetadataV12",MetadataV13:{modules:"Vec<ModuleMetadataV13>",extrinsic:"ExtrinsicMetadataV13"},ModuleConstantMetadataV13:"ModuleConstantMetadataV12",ModuleMetadataV13:{name:"Text",storage:"Option<StorageMetadataV13>",calls:"Option<Vec<FunctionMetadataV13>>",events:"Option<Vec<EventMetadataV13>>",constants:"Vec<ModuleConstantMetadataV13>",errors:"Vec<ErrorMetadataV13>",index:"u8"},StorageEntryModifierV13:"StorageEntryModifierV12",StorageEntryMetadataV13:{name:"Text",modifier:"StorageEntryModifierV13",type:"StorageEntryTypeV13",fallback:"Bytes",docs:"Vec<Text>"},StorageEntryTypeV13:{_enum:{Plain:"Type",Map:{hasher:"StorageHasherV13",key:"Type",value:"Type",linked:"bool"},DoubleMap:{hasher:"StorageHasherV13",key1:"Type",key2:"Type",value:"Type",key2Hasher:"StorageHasherV13"},NMap:{keyVec:"Vec<Type>",hashers:"Vec<StorageHasherV13>",value:"Type"}}},StorageMetadataV13:{prefix:"Text",items:"Vec<StorageEntryMetadataV13>"},StorageHasherV13:"StorageHasherV12",...Sb,// new/adjusted in v15
CustomMetadata15:{map:"BTreeMap<Text, CustomValueMetadata15>"},CustomValueMetadata15:{type:"SiLookupTypeId",value:"Bytes"},ExtrinsicMetadataV15:{version:"u8",addressType:"SiLookupTypeId",callType:"SiLookupTypeId",signatureType:"SiLookupTypeId",extraType:"SiLookupTypeId",signedExtensions:"Vec<SignedExtensionMetadataV14>"},OuterEnums15:{callType:"SiLookupTypeId",eventType:"SiLookupTypeId",errorType:"SiLookupTypeId"},PalletMetadataV15:{name:"Text",storage:"Option<PalletStorageMetadataV14>",calls:"Option<PalletCallMetadataV14>",events:"Option<PalletEventMetadataV14>",constants:"Vec<PalletConstantMetadataV14>",errors:"Option<PalletErrorMetadataV14>",index:"u8",docs:"Vec<Text>"},RuntimeApiMetadataV15:{name:"Text",methods:"Vec<RuntimeApiMethodMetadataV15>",docs:"Vec<Text>"},RuntimeApiMethodMetadataV15:{name:"Text",inputs:"Vec<RuntimeApiMethodParamMetadataV15>",output:"SiLookupTypeId",docs:"Vec<Text>"},RuntimeApiMethodParamMetadataV15:{name:"Text",type:"SiLookupTypeId"},// actual v15 definition
MetadataV15:{lookup:"PortableRegistry",pallets:"Vec<PalletMetadataV15>",extrinsic:"ExtrinsicMetadataV15",type:"SiLookupTypeId",apis:"Vec<RuntimeApiMetadataV15>",outerEnums:"OuterEnums15",custom:"CustomMetadata15"},// latest mappings
// NOTE: For v15, we only added the runtime defintions,
// hence latest for most pointing to the previous V14
ErrorMetadataLatest:"ErrorMetadataV14",EventMetadataLatest:"EventMetadataV14",ExtrinsicMetadataLatest:"ExtrinsicMetadataV15",FunctionArgumentMetadataLatest:"FunctionArgumentMetadataV14",FunctionMetadataLatest:"FunctionMetadataV14",MetadataLatest:"MetadataV15",PalletCallMetadataLatest:"PalletCallMetadataV14",PalletConstantMetadataLatest:"PalletConstantMetadataV14",PalletErrorMetadataLatest:"PalletErrorMetadataV14",PalletEventMetadataLatest:"PalletEventMetadataV14",PalletMetadataLatest:"PalletMetadataV15",PalletStorageMetadataLatest:"PalletStorageMetadataV14",PortableType:"PortableTypeV14",RuntimeApiMetadataLatest:"RuntimeApiMetadataV15",SignedExtensionMetadataLatest:"SignedExtensionMetadataV14",StorageEntryMetadataLatest:"StorageEntryMetadataV14",StorageEntryModifierLatest:"StorageEntryModifierV14",StorageEntryTypeLatest:"StorageEntryTypeV14",StorageHasher:"StorageHasherV14",// additional types
OpaqueMetadata:"Opaque<Bytes>",// the enum containing all the mappings
MetadataAll:{_enum:{V0:"DoNotConstruct<MetadataV0>",V1:"DoNotConstruct<MetadataV1>",V2:"DoNotConstruct<MetadataV2>",V3:"DoNotConstruct<MetadataV3>",V4:"DoNotConstruct<MetadataV4>",V5:"DoNotConstruct<MetadataV5>",V6:"DoNotConstruct<MetadataV6>",V7:"DoNotConstruct<MetadataV7>",V8:"DoNotConstruct<MetadataV8>",// First version on Kusama in V9, dropping will be problematic
V9:"MetadataV9",V10:"MetadataV10",V11:"MetadataV11",V12:"MetadataV12",V13:"MetadataV13",V14:"MetadataV14",V15:"MetadataV15"}}}},/* eslint-disable sort-keys */Sm={rpc:{},types:{Si0Field:{name:"Option<Text>",type:"Si0LookupTypeId",typeName:"Option<Text>",docs:"Vec<Text>"},Si0LookupTypeId:"u32",Si0Path:"Vec<Text>",Si0Type:{path:"Si0Path",params:"Vec<Si0LookupTypeId>",def:"Si0TypeDef"},Si0TypeDef:{_enum:{Composite:"Si0TypeDefComposite",Variant:"Si0TypeDefVariant",Sequence:"Si0TypeDefSequence",Array:"Si0TypeDefArray",Tuple:"Si0TypeDefTuple",Primitive:"Si0TypeDefPrimitive",Compact:"Si0TypeDefCompact",Phantom:"Si0TypeDefPhantom",BitSequence:"Si0TypeDefBitSequence"}},Si0TypeDefArray:{len:"u32",type:"Si0LookupTypeId"},Si0TypeDefBitSequence:{bitStoreType:"Si0LookupTypeId",bitOrderType:"Si0LookupTypeId"},Si0TypeDefCompact:{type:"Si0LookupTypeId"},Si0TypeDefComposite:{fields:"Vec<Si0Field>"},Si0TypeDefPhantom:"Null",Si0TypeDefVariant:{variants:"Vec<Si0Variant>"},Si0TypeDefPrimitive:{_enum:["Bool","Char","Str","U8","U16","U32","U64","U128","U256","I8","I16","I32","I64","I128","I256"]},Si0TypeDefSequence:{type:"Si0LookupTypeId"},Si0TypeDefTuple:"Vec<Si0LookupTypeId>",Si0TypeParameter:{name:"Text",type:"Option<Si0LookupTypeId>"},Si0Variant:{name:"Text",fields:"Vec<Si0Field>",index:"Option<u8>",discriminant:"Option<u64>",docs:"Vec<Text>"},Si1Field:{name:"Option<Text>",type:"Si1LookupTypeId",typeName:"Option<Text>",docs:"Vec<Text>"},Si1LookupTypeId:"Compact<u32>",Si1Path:"Si0Path",Si1Type:{path:"Si1Path",params:"Vec<Si1TypeParameter>",def:"Si1TypeDef",docs:"Vec<Text>"},Si1TypeDef:{_enum:{Composite:"Si1TypeDefComposite",Variant:"Si1TypeDefVariant",Sequence:"Si1TypeDefSequence",Array:"Si1TypeDefArray",Tuple:"Si1TypeDefTuple",Primitive:"Si1TypeDefPrimitive",Compact:"Si1TypeDefCompact",BitSequence:"Si1TypeDefBitSequence",// NOTE: This is specific to the implementation for pre-v14 metadata
// compatibility (always keep this as the last entry in the enum)
HistoricMetaCompat:"Type"}},Si1TypeDefArray:{len:"u32",type:"Si1LookupTypeId"},Si1TypeDefBitSequence:{bitStoreType:"Si1LookupTypeId",bitOrderType:"Si1LookupTypeId"},Si1TypeDefCompact:{type:"Si1LookupTypeId"},Si1TypeDefComposite:{fields:"Vec<Si1Field>"},Si1TypeDefPrimitive:"Si0TypeDefPrimitive",Si1TypeDefSequence:{type:"Si1LookupTypeId"},Si1TypeDefTuple:"Vec<Si1LookupTypeId>",Si1TypeParameter:{name:"Text",type:"Option<Si1LookupTypeId>"},Si1TypeDefVariant:{variants:"Vec<Si1Variant>"},Si1Variant:Sh,// latest mappings
SiField:"Si1Field",SiLookupTypeId:"Si1LookupTypeId",SiPath:"Si1Path",SiType:"Si1Type",SiTypeDef:"Si1TypeDef",SiTypeDefArray:"Si1TypeDefArray",SiTypeDefBitSequence:"Si1TypeDefBitSequence",SiTypeDefCompact:"Si1TypeDefCompact",SiTypeDefComposite:"Si1TypeDefComposite",SiTypeDefPrimitive:"Si1TypeDefPrimitive",SiTypeDefSequence:"Si1TypeDefSequence",SiTypeDefTuple:"Si1TypeDefTuple",SiTypeParameter:"Si1TypeParameter",SiTypeDefVariant:"Si1TypeDefVariant",SiVariant:"Si1Variant"}},Sg={rpc:{},runtime:{AssetConversionApi:[{methods:{get_reserves:{description:"Get pool reserves",params:[{name:"asset1",type:"XcmV3MultiLocation"},{name:"asset2",type:"XcmV3MultiLocation"}],type:"Option<(Balance,Balance)>"},quote_price_exact_tokens_for_tokens:{description:"Quote price: exact tokens for tokens",params:[{name:"asset1",type:"XcmV3MultiLocation"},{name:"asset2",type:"XcmV3MultiLocation"},{name:"amount",type:"u128"},{name:"include_fee",type:"bool"}],type:"Option<(Balance)>"},quote_price_tokens_for_exact_tokens:{description:"Quote price: tokens for exact tokens",params:[{name:"asset1",type:"XcmV3MultiLocation"},{name:"asset2",type:"XcmV3MultiLocation"},{name:"amount",type:"u128"},{name:"include_fee",type:"bool"}],type:"Option<(Balance)>"}},version:1}]},types:{TAssetConversion:"Option<MultiLocation>"}},Sv={rpc:{},runtime:{AssetsApi:[{methods:{account_balances:{description:"Return the current set of authorities.",params:[{name:"account",type:"AccountId"}],type:"Vec<(u32, TAssetBalance)>"}},version:1}]},types:{AssetApprovalKey:{owner:"AccountId",delegate:"AccountId"},AssetApproval:{amount:"TAssetBalance",deposit:"TAssetDepositBalance"},AssetBalance:{balance:"TAssetBalance",isFrozen:"bool",isSufficient:"bool"},AssetDestroyWitness:{accounts:"Compact<u32>",sufficients:"Compact<u32>",approvals:"Compact<u32>"},AssetDetails:{owner:"AccountId",issuer:"AccountId",admin:"AccountId",freezer:"AccountId",supply:"TAssetBalance",deposit:"TAssetDepositBalance",minBalance:"TAssetBalance",isSufficient:"bool",accounts:"u32",sufficients:"u32",approvals:"u32",isFrozen:"bool"},AssetMetadata:{deposit:"TAssetDepositBalance",name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},TAssetBalance:"u64",TAssetDepositBalance:"BalanceOf"}},Sx={rpc:{},runtime:{AuraApi:[{methods:{authorities:{description:"Return the current set of authorities.",params:[],type:"Vec<AuthorityId>"},slot_duration:{description:"Returns the slot duration for Aura.",params:[],type:"SlotDuration"}},version:1}]},types:{RawAuraPreDigest:{slotNumber:"u64"}}},Sw={rpc:{},types:{UncleEntryItem:{_enum:{InclusionHeight:"BlockNumber",Uncle:"(Hash, Option<AccountId>)"}}}};const SP={current_epoch:{description:"Returns information regarding the current epoch.",params:[],type:"Epoch"},current_epoch_start:{description:"Returns the slot that started the current epoch.",params:[],type:"Slot"},generate_key_ownership_proof:{description:"Generates a proof of key ownership for the given authority in the current epoch.",params:[{name:"slot",type:"Slot"},{name:"authorityId",type:"AuthorityId"}],type:"Option<OpaqueKeyOwnershipProof>"},next_epoch:{description:"Returns information regarding the next epoch (which was already previously announced).",params:[],type:"Epoch"},submit_report_equivocation_unsigned_extrinsic:{description:"Submits an unsigned extrinsic to report an equivocation.",params:[{name:"equivocationProof",type:"BabeEquivocationProof"},{name:"keyOwnerProof",type:"OpaqueKeyOwnershipProof"}],type:"Option<Null>"}},SO={BabeApi:[{methods:{configuration:{description:"Return the genesis configuration for BABE. The configuration is only read on genesis.",params:[],type:"BabeGenesisConfiguration"},...SP},version:2},{methods:{configuration:{description:"Return the configuration for BABE. Version 1.",params:[],type:"BabeGenesisConfigurationV1"},...SP},version:1}]};var ST={rpc:{epochAuthorship:{description:"Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore",isUnsafe:!0,params:[],type:"HashMap<AuthorityId, EpochAuthorship>"}},runtime:SO,types:{AllowedSlots:{_enum:["PrimarySlots","PrimaryAndSecondaryPlainSlots","PrimaryAndSecondaryVRFSlots"]},BabeAuthorityWeight:"u64",BabeEpochConfiguration:{c:"(u64, u64)",allowedSlots:"AllowedSlots"},BabeBlockWeight:"u32",BabeEquivocationProof:{offender:"AuthorityId",slotNumber:"SlotNumber",firstHeader:"Header",secondHeader:"Header"},BabeGenesisConfiguration:{slotDuration:"u64",epochLength:"u64",c:"(u64, u64)",genesisAuthorities:"Vec<(AuthorityId, BabeAuthorityWeight)>",randomness:"Randomness",allowedSlots:"AllowedSlots"},BabeGenesisConfigurationV1:{slotDuration:"u64",epochLength:"u64",c:"(u64, u64)",genesisAuthorities:"Vec<(AuthorityId, BabeAuthorityWeight)>",randomness:"Randomness",secondarySlots:"bool"},BabeWeight:"u64",MaybeRandomness:"Option<Randomness>",MaybeVrf:"Option<VrfData>",Epoch:{epochIndex:"u64",startSlot:"Slot",duration:"u64",authorities:"Vec<(AuthorityId, BabeAuthorityWeight)>",randomness:"Hash",config:"BabeEpochConfiguration"},EpochAuthorship:{primary:"Vec<u64>",secondary:"Vec<u64>",secondary_vrf:"Vec<u64>"},NextConfigDescriptor:{_enum:{V0:"Null",V1:"NextConfigDescriptorV1"}},NextConfigDescriptorV1:{c:"(u64, u64)",allowedSlots:"AllowedSlots"},OpaqueKeyOwnershipProof:"Bytes",Randomness:"Hash",RawBabePreDigest:{_enum:{Phantom:"Null",Primary:"RawBabePreDigestPrimary",SecondaryPlain:"RawBabePreDigestSecondaryPlain",SecondaryVRF:"RawBabePreDigestSecondaryVRF"}},RawBabePreDigestPrimary:{authorityIndex:"u32",slotNumber:"SlotNumber",vrfOutput:"VrfOutput",vrfProof:"VrfProof"},RawBabePreDigestSecondaryPlain:{authorityIndex:"u32",slotNumber:"SlotNumber"},RawBabePreDigestSecondaryVRF:{authorityIndex:"u32",slotNumber:"SlotNumber",vrfOutput:"VrfOutput",vrfProof:"VrfProof"},RawBabePreDigestTo159:{_enum:{Primary:"RawBabePreDigestPrimaryTo159",Secondary:"RawBabePreDigestSecondaryTo159"}},RawBabePreDigestPrimaryTo159:{authorityIndex:"u32",slotNumber:"SlotNumber",weight:"BabeBlockWeight",vrfOutput:"VrfOutput",vrfProof:"VrfProof"},RawBabePreDigestSecondaryTo159:{authorityIndex:"u32",slotNumber:"SlotNumber",weight:"BabeBlockWeight"},// a cross old/new compatible version of the digest, that is _only_ useful
// for partial parsing and extraction of the author. This assumes that all
// entries has the authorityIndex in the first position - and that it is all
// we are interested in
RawBabePreDigestCompat:{_enum:{Zero:"u32",One:"u32",Two:"u32",Three:"u32"}},SlotNumber:"u64",VrfData:"[u8; 32]",VrfOutput:"[u8; 32]",VrfProof:"[u8; 64]"}},Sz={rpc:{},types:{AccountData:{free:"Balance",reserved:"Balance",miscFrozen:"Balance",feeFrozen:"Balance"},BalanceLockTo212:{id:"LockIdentifier",amount:"Balance",until:"BlockNumber",reasons:"WithdrawReasons"},BalanceLock:{id:"LockIdentifier",amount:"Balance",reasons:"Reasons"},BalanceStatus:{_enum:["Free","Reserved"]},Reasons:{_enum:["Fee","Misc","All"]},ReserveData:{id:"ReserveIdentifier",amount:"Balance"},ReserveIdentifier:"[u8; 8]",VestingSchedule:{offset:"Balance",perBlock:"Balance",startingBlock:"BlockNumber"},WithdrawReasons:{_set:{TransactionPayment:1,Transfer:2,Reserve:4,Fee:8,Tip:16}}}};const Sk={beefy_genesis:{description:"Return the block number where BEEFY consensus is enabled/started",params:[],type:"Option<BlockNumber>"},generate_key_ownership_proof:{description:"Generates a proof of key ownership for the given authority in the given set.",params:[{name:"setId",type:"ValidatorSetId"},{name:"authorityId",type:"AuthorityId"}],type:"Option<OpaqueKeyOwnershipProof>"},submit_report_equivocation_unsigned_extrinsic:{description:"Submits an unsigned extrinsic to report an equivocation.",params:[{name:"equivocationProof",type:"BeefyEquivocationProof"},{name:"keyOwnerProof",type:"OpaqueKeyOwnershipProof"}],type:"Option<Null>"},validator_set:{description:"Return the current active BEEFY validator set",params:[],type:"Option<ValidatorSet>"}};var SL={rpc:{getFinalizedHead:{description:"Returns hash of the latest BEEFY finalized block as seen by this client.",params:[],type:"H256"},subscribeJustifications:{description:"Returns the block most recently finalized by BEEFY, alongside its justification.",params:[],pubsub:["justifications","subscribeJustifications","unsubscribeJustifications"],type:"BeefyVersionedFinalityProof"}},runtime:{BeefyApi:[{methods:Sk,version:3},{methods:Sk,version:2},{methods:Sk,version:1}],BeefyMmrApi:[{methods:{authority_set_proof:{description:"Return the currently active BEEFY authority set proof.",params:[],type:"BeefyAuthoritySet"},next_authority_set_proof:{description:"Return the next/queued BEEFY authority set proof.",params:[],type:"BeefyNextAuthoritySet"}},version:1}]},types:{BeefyAuthoritySet:{id:"u64",len:"u32",root:"H256"},BeefyCommitment:{payload:"BeefyPayload",blockNumber:"BlockNumber",validatorSetId:"ValidatorSetId"},BeefyId:"[u8; 33]",BeefyEquivocationProof:{first:"BeefyVoteMessage",second:"BeefyVoteMessage"},BeefyCompactSignedCommitment:{commitment:"BeefyCommitment",signaturesFrom:"Vec<u8>",validatorSetLen:"u32",signaturesCompact:"Vec<EcdsaSignature>"},BeefySignedCommitment:{commitment:"BeefyCommitment",signatures:"Vec<Option<EcdsaSignature>>"},BeefyVersionedFinalityProof:{_enum:{V0:"Null",V1:"BeefyCompactSignedCommitment"}},BeefyNextAuthoritySet:{id:"u64",len:"u32",root:"H256"},BeefyPayload:"Vec<(BeefyPayloadId, Bytes)>",BeefyPayloadId:"[u8;2]",BeefyVoteMessage:{commitment:"BeefyCommitment",id:"AuthorityId",signature:"Signature"},MmrRootHash:"H256",ValidatorSetId:"u64",ValidatorSet:{validators:"Vec<AuthorityId>",id:"ValidatorSetId"}}},SE={rpc:{},runtime:{Benchmark:[{methods:{benchmark_metadata:{description:"Get the benchmark metadata available for this runtime.",params:[{name:"extra",type:"bool"}],type:"(Vec<BenchmarkList>, Vec<StorageInfo>)"},dispatch_benchmark:{description:"Dispatch the given benchmark.",params:[{name:"config",type:"BenchmarkConfig"}],type:"Result<Vec<BenchmarkBatch>, Text>"}},version:1}]},types:{BenchmarkBatch:{pallet:"Text",instance:"Text",benchmark:"Text",results:"Vec<BenchmarkResult>"},BenchmarkConfig:{pallet:"Bytes",benchmark:"Bytes",selectedComponents:"Vec<(BenchmarkParameter, u32)>",verify:"bool",internalRepeats:"u32"},BenchmarkList:{pallet:"Bytes",instance:"Bytes",benchmarks:"Vec<BenchmarkMetadata>"},BenchmarkMetadata:{name:"Bytes",components:"Vec<(BenchmarkParameter, u32, u32)>"},BenchmarkParameter:{_enum:["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]},BenchmarkResult:{components:"Vec<(BenchmarkParameter, u32)>",extrinsicTime:"u128",storageRootTime:"u128",reads:"u32",repeatReads:"u32",writes:"u32",repeatWrites:"u32",proofSize:"u32",benchKeys:"Vec<(Vec<u8>, u32, u32, bool)>"}}};const SN={// this was removed after V4
random_seed:{description:"Generate a random seed.",params:[],type:"Hash"}},SS={apply_extrinsic:{description:"Apply the given extrinsic.",params:[{name:"extrinsic",type:"Extrinsic"}],type:"ApplyExtrinsicResultPre6"}},SM={check_inherents:{description:"Check that the inherents are valid.",params:[{name:"block",type:"Block"},{name:"data",type:"InherentData"}],type:"CheckInherentsResult"},inherent_extrinsics:{description:"Generate inherent extrinsics.",params:[{name:"inherent",type:"InherentData"}],type:"Vec<Extrinsic>"}},Sj={// renamed in v3 from finalize_block
finalize_block:{description:"Finish the current block.",params:[],type:"Header"}},SH={BlockBuilder:[{methods:{apply_extrinsic:{description:"Apply the given extrinsic.",params:[{name:"extrinsic",type:"Extrinsic"}],type:"ApplyExtrinsicResult"},...SM,...Sj},version:6},{methods:{// apply_extrinsic result changed in 6
...SS,...SM,...Sj},version:5},{methods:{// random_seed removed
...SN,...SS,...SM,...Sj},version:4},{methods:{// finalize_block renamed
...SN,...SM,...Sj},version:3},{methods:{finalise_block:{description:"Finish the current block.",params:[],type:"Header"},...SN,...SM},version:2}]};var SR={rpc:{},runtime:SH,types:{CheckInherentsResult:{okay:"bool",fatalError:"bool",errors:"InherentData"},InherentData:{data:"BTreeMap<InherentIdentifier, Bytes>"},InherentIdentifier:"[u8; 8]"}},SI={rpc:{},types:{CollectiveOrigin:{_enum:{Members:"(MemberCount, MemberCount)",Member:"AccountId"}},MemberCount:"u32",ProposalIndex:"u32",VotesTo230:{index:"ProposalIndex",threshold:"MemberCount",ayes:"Vec<AccountId>",nays:"Vec<AccountId>"},Votes:{index:"ProposalIndex",threshold:"MemberCount",ayes:"Vec<AccountId>",nays:"Vec<AccountId>",end:"BlockNumber"}}},SB={rpc:{},types:{AuthorityId:"AccountId",RawVRFOutput:"[u8; 32]"}};const SV={get_storage:{description:"Query a given storage key in a given contract.",params:[{name:"address",type:"AccountId"},{name:"key",type:"Bytes"}],type:"Option<Bytes>"},upload_code:{description:"Upload new code without instantiating a contract from it.",params:[{name:"origin",type:"AccountId"},{name:"code",type:"Bytes"},{name:"storageDepositLimit",type:"Option<Balance>"}],type:"CodeUploadResult"}},SX={ContractsApi:[{methods:{call:{description:"Perform a call from a specified account to a given contract.",params:[{name:"origin",type:"AccountId"},{name:"dest",type:"AccountId"},{name:"value",type:"Balance"},{name:"gasLimit",type:"Option<WeightV2>"},{name:"storageDepositLimit",type:"Option<Balance>"},{name:"inputData",type:"Vec<u8>"}],type:"ContractExecResult"},instantiate:{description:"Instantiate a new contract.",params:[{name:"origin",type:"AccountId"},{name:"value",type:"Balance"},{name:"gasLimit",type:"Option<WeightV2>"},{name:"storageDepositLimit",type:"Option<Balance>"},{name:"code",type:"CodeSource"},{name:"data",type:"Bytes"},{name:"salt",type:"Bytes"}],type:"ContractInstantiateResult"},...SV},version:2},{methods:{call:{description:"Perform a call from a specified account to a given contract.",params:[{name:"origin",type:"AccountId"},{name:"dest",type:"AccountId"},{name:"value",type:"Balance"},{name:"gasLimit",type:"u64"},{name:"storageDepositLimit",type:"Option<Balance>"},{name:"inputData",type:"Vec<u8>"}],type:"ContractExecResultU64"},instantiate:{description:"Instantiate a new contract.",params:[{name:"origin",type:"AccountId"},{name:"value",type:"Balance"},{name:"gasLimit",type:"u64"},{name:"storageDepositLimit",type:"Option<Balance>"},{name:"code",type:"CodeSource"},{name:"data",type:"Bytes"},{name:"salt",type:"Bytes"}],type:"ContractInstantiateResultU64"},...SV},version:1}]};var SU={rpc:{call:{deprecated:"Use the runtime interface `api.call.contractsApi.call` instead",description:"Executes a call to a contract",params:[{name:"callRequest",type:"ContractCallRequest"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"ContractExecResult"},getStorage:{deprecated:"Use the runtime interface `api.call.contractsApi.getStorage` instead",description:"Returns the value under a specified storage key in a contract",params:[{name:"address",type:"AccountId"},{name:"key",type:"H256"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Option<Bytes>"},instantiate:{deprecated:"Use the runtime interface `api.call.contractsApi.instantiate` instead",description:"Instantiate a new contract",params:[{name:"request",type:"InstantiateRequestV1"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"ContractInstantiateResult"},rentProjection:{deprecated:"Not available in newer versions of the contracts interfaces",description:"Returns the projected time a given contract will be able to sustain paying its rent",params:[{name:"address",type:"AccountId"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Option<BlockNumber>"},uploadCode:{deprecated:"Use the runtime interface `api.call.contractsApi.uploadCode` instead",description:"Upload new code without instantiating a contract from it",// The RPC here is terribly misnamed - somebody forgot how the RPCs
// are actually done, ie. <module>_<camelCasedMethod>
endpoint:"contracts_upload_code",params:[{name:"uploadRequest",type:"CodeUploadRequest"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"CodeUploadResult"}},runtime:SX,types:{AliveContractInfo:{trieId:"TrieId",storageSize:"u32",pairCount:"u32",codeHash:"CodeHash",rentAllowance:"Balance",rentPaid:"Balance",deductBlock:"BlockNumber",lastWrite:"Option<BlockNumber>",_reserved:"Option<Null>"},CodeHash:"Hash",CodeSource:{_enum:{Upload:"Bytes",Existing:"Hash"}},CodeUploadRequest:{origin:"AccountId",code:"Bytes",storageDepositLimit:"Option<Balance>"},CodeUploadResult:"Result<CodeUploadResultValue, DispatchError>",CodeUploadResultValue:{codeHash:"CodeHash",deposit:"Balance"},ContractCallRequest:{origin:"AccountId",dest:"AccountId",value:"Balance",gasLimit:"u64",storageDepositLimit:"Option<Balance>",inputData:"Bytes"},ContractExecResultSuccessTo255:{status:"u8",data:"Raw"},ContractExecResultTo255:{_enum:{Success:"ContractExecResultSuccessTo255",Error:"Null"}},ContractExecResultSuccessTo260:{flags:"ContractReturnFlags",data:"Bytes",gasConsumed:"u64"},ContractExecResultTo260:{_enum:{Success:"ContractExecResultSuccessTo260",Error:"Null"}},ContractExecResultOk:{flags:"ContractReturnFlags",data:"Bytes"},ContractExecResultResult:"Result<ContractExecResultOk, DispatchError>",ContractExecResultTo267:{gasConsumed:"u64",debugMessage:"Text",result:"ContractExecResultResult"},ContractExecResult:{gasConsumed:"Weight",gasRequired:"Weight",storageDeposit:"StorageDeposit",debugMessage:"Text",result:"ContractExecResultResult"},ContractExecResultU64:{gasConsumed:"u64",gasRequired:"u64",storageDeposit:"StorageDeposit",debugMessage:"Text",result:"ContractExecResultResult"},ContractInfo:{_enum:{Alive:"AliveContractInfo",Tombstone:"TombstoneContractInfo"}},ContractCallFlags:{_set:{_bitLength:32,ForwardInput:1,CloneInput:2,TailCall:4,AllowReentry:8}},ContractReturnFlags:{_set:{_bitLength:32,Revert:1}},ContractStorageKey:"[u8; 32]",DeletedContract:{pairCount:"u32",trieId:"TrieId"},ExecReturnValue:{flags:"ContractReturnFlags",data:"Bytes"},Gas:"u64",HostFnWeightsTo264:{caller:"Weight",address:"Weight",gasLeft:"Weight",balance:"Weight",valueTransferred:"Weight",minimumBalance:"Weight",tombstoneDeposit:"Weight",rentAllowance:"Weight",blockNumber:"Weight",now:"Weight",weightToFee:"Weight",gas:"Weight",input:"Weight",inputPerByte:"Weight",return:"Weight",returnPerByte:"Weight",terminate:"Weight",restoreTo:"Weight",restoreToPerDelta:"Weight",random:"Weight",depositEvent:"Weight",depositEventPerTopic:"Weight",depositEventPerByte:"Weight",setRentAllowance:"Weight",setStorage:"Weight",setStoragePerByte:"Weight",clearStorage:"Weight",getStorage:"Weight",getStoragePerByte:"Weight",transfer:"Weight",call:"Weight",callTransferSurcharge:"Weight",callPerInputByte:"Weight",callPerOutputByte:"Weight",instantiate:"Weight",instantiatePerInputByte:"Weight",instantiatePerOutputByte:"Weight",hashSha2256:"Weight",hashSha2256PerByte:"Weight",hashKeccak256:"Weight",hashKeccak256PerByte:"Weight",hashBlake2256:"Weight",hashBlake2256PerByte:"Weight",hashBlake2128:"Weight",hashBlake2128PerByte:"Weight"},HostFnWeights:{caller:"Weight",address:"Weight",gasLeft:"Weight",balance:"Weight",valueTransferred:"Weight",minimumBalance:"Weight",tombstoneDeposit:"Weight",rentAllowance:"Weight",blockNumber:"Weight",now:"Weight",weightToFee:"Weight",gas:"Weight",input:"Weight",inputPerByte:"Weight",return:"Weight",returnPerByte:"Weight",terminate:"Weight",terminatePerCodeByte:"Weight",restoreTo:"Weight",restoreToPerCallerCodeByte:"Weight",restoreToPerTombstoneCodeByte:"Weight",restoreToPerDelta:"Weight",random:"Weight",depositEvent:"Weight",depositEventPerTopic:"Weight",depositEventPerByte:"Weight",setRentAllowance:"Weight",setStorage:"Weight",setStoragePerByte:"Weight",clearStorage:"Weight",getStorage:"Weight",getStoragePerByte:"Weight",transfer:"Weight",call:"Weight",callPerCodeByte:"Weight",callTransferSurcharge:"Weight",callPerInputByte:"Weight",callPerOutputByte:"Weight",instantiate:"Weight",instantiatePerCodeByte:"Weight",instantiatePerInputByte:"Weight",instantiatePerOutputByte:"Weight",instantiatePerSaltByte:"Weight",hashSha2256:"Weight",hashSha2256PerByte:"Weight",hashKeccak256:"Weight",hashKeccak256PerByte:"Weight",hashBlake2256:"Weight",hashBlake2256PerByte:"Weight",hashBlake2128:"Weight",hashBlake2128PerByte:"Weight",rentParams:"Weight"},InstantiateRequestV1:{origin:"AccountId",value:"Balance",gasLimit:"Gas",code:"Bytes",data:"Bytes",salt:"Bytes"},InstantiateRequestV2:{_fallback:"InstantiateRequestV1",origin:"AccountId",value:"Balance",gasLimit:"Gas",storageDepositLimit:"Option<Balance>",code:"Bytes",data:"Bytes",salt:"Bytes"},InstantiateRequest:{_fallback:"InstantiateRequestV2",origin:"AccountId",value:"Balance",gasLimit:"Gas",storageDepositLimit:"Option<Balance>",code:"CodeSource",data:"Bytes",salt:"Bytes"},ContractInstantiateResultTo267:"Result<InstantiateReturnValueTo267, Null>",ContractInstantiateResultTo299:"Result<InstantiateReturnValueOk, Null>",ContractInstantiateResult:{gasConsumed:"WeightV2",gasRequired:"WeightV2",storageDeposit:"StorageDeposit",debugMessage:"Text",result:"InstantiateReturnValue"},ContractInstantiateResultU64:{// only this one can fail, the current version (above) _should_ be correctly
// versioned now, aka no more deprecated RPCs involved, only runtime calls
_fallback:"ContractInstantiateResultTo299",gasConsumed:"u64",gasRequired:"u64",storageDeposit:"StorageDeposit",debugMessage:"Text",result:"InstantiateReturnValue"},InstantiateReturnValueTo267:{result:"ExecReturnValue",accountId:"AccountId",rentProjection:"Option<RentProjection>"},InstantiateReturnValueOk:{result:"ExecReturnValue",accountId:"AccountId"},InstantiateReturnValue:"Result<InstantiateReturnValueOk, DispatchError>",InstructionWeights:{i64const:"u32",i64load:"u32",i64store:"u32",select:"u32",rIf:"u32",br:"u32",brIf:"u32",brIable:"u32",brIablePerEntry:"u32",call:"u32",callIndirect:"u32",callIndirectPerParam:"u32",localGet:"u32",localSet:"u32",local_tee:"u32",globalGet:"u32",globalSet:"u32",memoryCurrent:"u32",memoryGrow:"u32",i64clz:"u32",i64ctz:"u32",i64popcnt:"u32",i64eqz:"u32",i64extendsi32:"u32",i64extendui32:"u32",i32wrapi64:"u32",i64eq:"u32",i64ne:"u32",i64lts:"u32",i64ltu:"u32",i64gts:"u32",i64gtu:"u32",i64les:"u32",i64leu:"u32",i64ges:"u32",i64geu:"u32",i64add:"u32",i64sub:"u32",i64mul:"u32",i64divs:"u32",i64divu:"u32",i64rems:"u32",i64remu:"u32",i64and:"u32",i64or:"u32",i64xor:"u32",i64shl:"u32",i64shrs:"u32",i64shru:"u32",i64rotl:"u32",i64rotr:"u32"},LimitsTo264:{eventTopics:"u32",stackHeight:"u32",globals:"u32",parameters:"u32",memoryPages:"u32",tableSize:"u32",brTableSize:"u32",subjectLen:"u32",codeSize:"u32"},Limits:{eventTopics:"u32",stackHeight:"u32",globals:"u32",parameters:"u32",memoryPages:"u32",tableSize:"u32",brTableSize:"u32",subjectLen:"u32"},PrefabWasmModule:{scheduleVersion:"Compact<u32>",initial:"Compact<u32>",maximum:"Compact<u32>",refcount:"Compact<u64>",_reserved:"Option<Null>",code:"Bytes",originalCodeLen:"u32"},RentProjection:{_enum:{EvictionAt:"BlockNumber",NoEviction:"Null"}},ScheduleTo212:{version:"u32",putCodePerByteCost:"Gas",growMemCost:"Gas",regularOpCost:"Gas",returnDataPerByteCost:"Gas",eventDataPerByteCost:"Gas",eventPerTopicCost:"Gas",eventBaseCost:"Gas",sandboxDataReadCost:"Gas",sandboxDataWriteCost:"Gas",maxEventTopics:"u32",maxStackHeight:"u32",maxMemoryPages:"u32",enablePrintln:"bool",maxSubjectLen:"u32"},ScheduleTo258:{version:"u32",putCodePerByteCost:"Gas",growMemCost:"Gas",regularOpCost:"Gas",returnDataPerByteCost:"Gas",eventDataPerByteCost:"Gas",eventPerTopicCost:"Gas",eventBaseCost:"Gas",sandboxDataReadCost:"Gas",sandboxDataWriteCost:"Gas",transferCost:"Gas",maxEventTopics:"u32",maxStackHeight:"u32",maxMemoryPages:"u32",enablePrintln:"bool",maxSubjectLen:"u32"},ScheduleTo264:{version:"u32",enablePrintln:"bool",limits:"LimitsTo264",instructionWeights:"InstructionWeights",hostFnWeights:"HostFnWeightsTo264"},Schedule:{version:"u32",enablePrintln:"bool",limits:"Limits",instructionWeights:"InstructionWeights",hostFnWeights:"HostFnWeights"},SeedOf:"Hash",StorageDeposit:{_enum:{Refund:"Balance",Charge:"Balance"}},TombstoneContractInfo:"Hash",TrieId:"Bytes"}},SA={rpc:{},types:{AccountVote:{_enum:{Standard:"AccountVoteStandard",Split:"AccountVoteSplit"}},AccountVoteSplit:{aye:"Balance",nay:"Balance"},AccountVoteStandard:{vote:"Vote",balance:"Balance"},Conviction:{_enum:[// 0.1x votes, unlocked.
"None",// 1x votes, locked for an enactment period following a successful vote.
"Locked1x",// 2x votes, locked for 2x enactment periods following a successful vote.
"Locked2x",// 3x votes, locked for 4x...
"Locked3x",// 4x votes, locked for 8x...
"Locked4x",// 5x votes, locked for 16x...
"Locked5x",// 6x votes, locked for 32x...
"Locked6x"]},Delegations:{votes:"Balance",capital:"Balance"},PreimageStatus:{_enum:{Missing:"BlockNumber",Available:"PreimageStatusAvailable"}},PreimageStatusAvailable:{data:"Bytes",provider:"AccountId",deposit:"Balance",since:"BlockNumber",expiry:"Option<BlockNumber>"},PriorLock:"(BlockNumber, Balance)",PropIndex:"u32",Proposal:"Call",ProxyState:{_enum:{Open:"AccountId",Active:"AccountId"}},ReferendumIndex:"u32",ReferendumInfoTo239:{end:"BlockNumber",proposalHash:"Hash",threshold:"VoteThreshold",delay:"BlockNumber"},ReferendumInfo:{_enum:{Ongoing:"ReferendumStatus",Finished:"ReferendumInfoFinished"}},ReferendumInfoFinished:{approved:"bool",end:"BlockNumber"},ReferendumStatus:{end:"BlockNumber",proposalHash:"Hash",threshold:"VoteThreshold",delay:"BlockNumber",tally:"Tally"},Tally:{ayes:"Balance",nays:"Balance",turnout:"Balance"},Voting:{_enum:{Direct:"VotingDirect",Delegating:"VotingDelegating"}},VotingDirect:{votes:"Vec<VotingDirectVote>",delegations:"Delegations",prior:"PriorLock"},VotingDirectVote:"(ReferendumIndex, AccountVote)",VotingDelegating:{balance:"Balance",target:"AccountId",conviction:"Conviction",delegations:"Delegations",prior:"PriorLock"}}},SD={rpc:{getBlockStats:{description:"Reexecute the specified `block_hash` and gather statistics while doing so",isUnsafe:!0,params:[{isHistoric:!0,name:"at",type:"Hash"}],type:"Option<BlockStats>"}},types:{BlockStats:{witnessLen:"u64",witnessCompactLen:"u64",blockLen:"u64",blockNumExtrinsics:"u64"}}},SC={rpc:{},runtime:{AuthorityDiscoveryApi:[{methods:{authorities:{description:"Retrieve authority identifiers of the current and next authority set.",params:[],type:"Vec<AuthorityId>"}},version:1}]},types:{}},SF={rpc:{},types:{ApprovalFlag:"u32",DefunctVoter:{who:"AccountId",voteCount:"Compact<u32>",candidateCount:"Compact<u32>"},Renouncing:{_enum:{Member:"Null",RunnerUp:"Null",Candidate:"Compact<u32>"}},SetIndex:"u32",Vote:"GenericVote",VoteIndex:"u32",VoterInfo:{lastActive:"VoteIndex",lastWin:"VoteIndex",pot:"Balance",stake:"Balance"},VoteThreshold:{_enum:["Super Majority Approve","Super Majority Against","Simple Majority"]}}},SZ={rpc:{createBlock:{description:"Instructs the manual-seal authorship task to create a new block",params:[{name:"createEmpty",type:"bool"},{name:"finalize",type:"bool"},{isOptional:!0,name:"parentHash",type:"BlockHash"}],type:"CreatedBlock"},finalizeBlock:{description:"Instructs the manual-seal authorship task to finalize a block",params:[{name:"hash",type:"BlockHash"},{isOptional:!0,name:"justification",type:"Justification"}],type:"bool"}},types:{CreatedBlock:{_alias:{blockHash:"hash"},blockHash:"BlockHash",aux:"ImportedAux"},ImportedAux:{headerOnly:"bool",clearJustificationRequests:"bool",needsJustification:"bool",badJustification:"bool",needsFinalityProof:"bool",isNewBest:"bool"}}},Sq={rpc:{},types:{EvmAccount:{nonce:"u256",balance:"u256"},EvmCallInfo:{exitReason:"ExitReason",value:"Bytes",usedGas:"U256",logs:"Vec<EvmLog>"},EvmCreateInfo:{exitReason:"ExitReason",value:"H160",usedGas:"U256",logs:"Vec<EvmLog>"},EvmCallInfoV2:{exitReason:"ExitReason",value:"Bytes",usedGas:"U256",weightInfo:"Option<EvmWeightInfo>",logs:"Vec<EvmLog>"},EvmCreateInfoV2:{exitReason:"ExitReason",value:"H160",usedGas:"U256",weightInfo:"Option<EvmWeightInfo>",logs:"Vec<EvmLog>"},EvmLog:{address:"H160",topics:"Vec<H256>",data:"Bytes"},EvmVicinity:{gasPrice:"u256",origin:"H160"},EvmWeightInfo:{refTimeLimit:"Option<u64>",proofSizeLimit:"Option<u64>",refTimeUsage:"Option<u64>",proofSizeUsage:"Option<u64>"},ExitError:{_enum:{StackUnderflow:"Null",StackOverflow:"Null",InvalidJump:"Null",InvalidRange:"Null",DesignatedInvalid:"Null",CallTooDeep:"Null",CreateCollision:"Null",CreateContractLimit:"Null",OutOfOffset:"Null",OutOfGas:"Null",OutOfFund:"Null",PCUnderflow:"Null",CreateEmpty:"Null",Other:"Text"}},ExitFatal:{_enum:{NotSupported:"Null",UnhandledInterrupt:"Null",CallErrorAsFatal:"ExitError",Other:"Text"}},ExitReason:{_enum:{Succeed:"ExitSucceed",Error:"ExitError",Revert:"ExitRevert",Fatal:"ExitFatal"}},ExitRevert:{_enum:["Reverted"]},ExitSucceed:{_enum:["Stopped","Returned","Suicided"]}}},SG={rpc:{},types:{Extrinsic:"GenericExtrinsic",ExtrinsicEra:"GenericExtrinsicEra",ExtrinsicPayload:"GenericExtrinsicPayload",ExtrinsicSignature:"MultiSignature",ExtrinsicV4:"GenericExtrinsicV4",ExtrinsicPayloadV4:"GenericExtrinsicPayloadV4",ExtrinsicSignatureV4:"GenericExtrinsicSignatureV4",ExtrinsicUnknown:"GenericExtrinsicUnknown",ExtrinsicPayloadUnknown:"GenericExtrinsicPayloadUnknown",// eras
Era:"ExtrinsicEra",ImmortalEra:"GenericImmortalEra",MortalEra:"GenericMortalEra",// signatures & signer
AnySignature:"H512",MultiSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature",Ecdsa:"EcdsaSignature"}},Signature:"H512",SignerPayload:"GenericSignerPayload",EcdsaSignature:"[u8; 65]",Ed25519Signature:"H512",Sr25519Signature:"H512"}},SW={rpc:{},runtime:{FungiblesApi:[{methods:{query_account_balances:{description:"Returns the list of all `MultiAsset` that an `AccountId` has",params:[{name:"account",type:"AccountId"}],type:"Result<Vec<XcmV3MultiAsset>, FungiblesAccessError>"}},version:1},{methods:{query_account_balances:{description:"Returns the list of all `MultiAsset` that an `AccountId` has",params:[{name:"account",type:"AccountId"}],type:"Result<XcmVersionedMultiAssets, FungiblesAccessError>"}},version:2}]},types:{FungiblesAccessError:{_enum:["AssetIdConversionFailed","AmountToBalanceConversionFailed"]}}},SY={rpc:{},types:{AssetOptions:{initalIssuance:"Compact<Balance>",permissions:"PermissionLatest"},Owner:{_enum:{None:"Null",Address:"AccountId"}},PermissionsV1:{update:"Owner",mint:"Owner",burn:"Owner"},PermissionVersions:{_enum:{V1:"PermissionsV1"}},PermissionLatest:"PermissionsV1"}},SK={rpc:{},types:{ActiveGilt:{proportion:"Perquintill",amount:"Balance",who:"AccountId",expiry:"BlockNumber"},ActiveGiltsTotal:{frozen:"Balance",proportion:"Perquintill",index:"ActiveIndex",target:"Perquintill"},ActiveIndex:"u32",GiltBid:{amount:"Balance",who:"AccountId"}}};const SJ={generate_key_ownership_proof:{description:"Generates a proof of key ownership for the given authority in the given set.",params:[{name:"setId",type:"SetId"},{name:"authorityId",type:"AuthorityId"}],type:"Option<OpaqueKeyOwnershipProof>"},grandpa_authorities:{description:"Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.",params:[],type:"AuthorityList"},submit_report_equivocation_unsigned_extrinsic:{description:"Submits an unsigned extrinsic to report an equivocation.",params:[{name:"equivocationProof",type:"GrandpaEquivocationProof"},{name:"keyOwnerProof",type:"OpaqueKeyOwnershipProof"}],type:"Option<Null>"}},SQ={GrandpaApi:[{methods:{current_set_id:{description:"Get current GRANDPA authority set id.",params:[],type:"SetId"},...SJ},version:3},{methods:SJ,version:2}]};var S_={rpc:{proveFinality:{description:"Prove finality for the given block number, returning the Justification for the last block in the set.",params:[{name:"blockNumber",type:"BlockNumber"}],type:"Option<EncodedFinalityProofs>"},roundState:{description:"Returns the state of the current best round state as well as the ongoing background rounds",params:[],type:"ReportedRoundStates"},subscribeJustifications:{description:"Subscribes to grandpa justifications",params:[],pubsub:["justifications","subscribeJustifications","unsubscribeJustifications"],type:"JustificationNotification"}},runtime:SQ,types:{AuthorityIndex:"u64",AuthorityList:"Vec<NextAuthority>",AuthoritySet:{currentAuthorities:"AuthorityList",setId:"u64",pendingStandardChanges:"ForkTreePendingChange",pendingForcedChanges:"Vec<PendingChange>",authoritySetChanges:"AuthoritySetChanges"},ForkTreePendingChange:{roots:"Vec<ForkTreePendingChangeNode>",bestFinalizedNumber:"Option<BlockNumber>"},ForkTreePendingChangeNode:{hash:"BlockHash",number:"BlockNumber",data:"PendingChange",children:"Vec<ForkTreePendingChangeNode>"},AuthoritySetChange:"(U64, BlockNumber)",AuthoritySetChanges:"Vec<AuthoritySetChange>",AuthorityWeight:"u64",DelayKind:{_enum:{Finalized:"Null",Best:"DelayKindBest"}},DelayKindBest:{medianLastFinalized:"BlockNumber"},EncodedFinalityProofs:"Bytes",GrandpaEquivocation:{_enum:{Prevote:"GrandpaEquivocationValue",Precommit:"GrandpaEquivocationValue"}},GrandpaEquivocationProof:{setId:"SetId",equivocation:"GrandpaEquivocation"},GrandpaEquivocationValue:{roundNumber:"u64",identity:"AuthorityId",first:"(GrandpaPrevote, AuthoritySignature)",second:"(GrandpaPrevote, AuthoritySignature)"},GrandpaPrevote:{targetHash:"Hash",targetNumber:"BlockNumber"},GrandpaCommit:{targetHash:"BlockHash",targetNumber:"BlockNumber",precommits:"Vec<GrandpaSignedPrecommit>"},GrandpaPrecommit:{targetHash:"BlockHash",targetNumber:"BlockNumber"},GrandpaSignedPrecommit:{precommit:"GrandpaPrecommit",signature:"AuthoritySignature",id:"AuthorityId"},GrandpaJustification:{round:"u64",commit:"GrandpaCommit",votesAncestries:"Vec<Header>"},JustificationNotification:"Bytes",KeyOwnerProof:"MembershipProof",NextAuthority:"(AuthorityId, AuthorityWeight)",PendingChange:{nextAuthorities:"AuthorityList",delay:"BlockNumber",canonHeight:"BlockNumber",canonHash:"BlockHash",delayKind:"DelayKind"},PendingPause:{scheduledAt:"BlockNumber",delay:"BlockNumber"},PendingResume:{scheduledAt:"BlockNumber",delay:"BlockNumber"},Precommits:{currentWeight:"u32",missing:"BTreeSet<AuthorityId>"},Prevotes:{currentWeight:"u32",missing:"BTreeSet<AuthorityId>"},ReportedRoundStates:{setId:"u32",best:"RoundState",background:"Vec<RoundState>"},RoundState:{round:"u32",totalWeight:"u32",thresholdWeight:"u32",prevotes:"Prevotes",precommits:"Precommits"},SetId:"u64",StoredPendingChange:{scheduledAt:"BlockNumber",delay:"BlockNumber",nextAuthorities:"AuthorityList"},StoredState:{_enum:{Live:"Null",PendingPause:"PendingPause",Paused:"Null",PendingResume:"PendingResume"}}}},S$={rpc:{},types:{IdentityFields:{_set:{_bitLength:64,// Mapped here to 32 bits, in Rust these are 64-bit values
Display:1,Legal:2,Web:4,Riot:8,Email:16,PgpFingerprint:32,Image:64,Twitter:128}},IdentityInfoAdditional:"(Data, Data)",IdentityInfoTo198:{additional:"Vec<IdentityInfoAdditional>",display:"Data",legal:"Data",web:"Data",riot:"Data",email:"Data",pgpFingerprint:"Option<H160>",image:"Data"},IdentityInfo:{_fallback:"IdentityInfoTo198",additional:"Vec<IdentityInfoAdditional>",display:"Data",legal:"Data",web:"Data",riot:"Data",email:"Data",pgpFingerprint:"Option<H160>",image:"Data",twitter:"Data"},IdentityJudgement:{_enum:{Unknown:"Null",FeePaid:"Balance",Reasonable:"Null",KnownGood:"Null",OutOfDate:"Null",LowQuality:"Null",Erroneous:"Null"}},RegistrationJudgement:"(RegistrarIndex, IdentityJudgement)",RegistrationTo198:{judgements:"Vec<RegistrationJudgement>",deposit:"Balance",info:"IdentityInfoTo198"},Registration:{_fallback:"RegistrationTo198",judgements:"Vec<RegistrationJudgement>",deposit:"Balance",info:"IdentityInfo"},RegistrarIndex:"u32",RegistrarInfo:{account:"AccountId",fee:"Balance",fields:"IdentityFields"}}},S0={rpc:{},types:{AuthIndex:"u32",AuthoritySignature:"Signature",Heartbeat:{blockNumber:"BlockNumber",networkState:"OpaqueNetworkState",sessionIndex:"SessionIndex",authorityIndex:"AuthIndex",validatorsLen:"u32"},HeartbeatTo244:{blockNumber:"BlockNumber",networkState:"OpaqueNetworkState",sessionIndex:"SessionIndex",authorityIndex:"AuthIndex"},OpaqueMultiaddr:"Opaque<Bytes>",OpaquePeerId:"Opaque<Bytes>",OpaqueNetworkState:{peerId:"OpaquePeerId",externalAddresses:"Vec<OpaqueMultiaddr>"}}},S1={rpc:{},types:{CallIndex:"(u8, u8)",LotteryConfig:{price:"Balance",start:"BlockNumber",length:"BlockNumber",delay:"BlockNumber",repeat:"bool"}}},S2={rpc:{generateProof:{description:"Generate MMR proof for the given block numbers.",params:[{name:"blockNumbers",type:"Vec<u64>"},{isOptional:!0,name:"bestKnownBlockNumber",type:"u64"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"MmrLeafBatchProof"},root:{description:"Get the MMR root hash for the current best block.",params:[{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"MmrHash"},verifyProof:{description:"Verify an MMR proof",params:[{name:"proof",type:"MmrLeafBatchProof"}],type:"bool"},verifyProofStateless:{description:"Verify an MMR proof statelessly given an mmr_root",params:[{name:"root",type:"MmrHash"},{name:"proof",type:"MmrLeafBatchProof"}],type:"bool"}},runtime:{MmrApi:[{methods:{generate_proof:{description:"Generate MMR proof for the given block numbers.",params:[{name:"blockNumbers",type:"Vec<BlockNumber>"},{name:"bestKnownBlockNumber",type:"Option<BlockNumber>"}],type:"Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"},root:{description:"Return the on-chain MMR root hash.",params:[],type:"Result<Hash, MmrError>"},verify_proof:{description:"Verify MMR proof against on-chain MMR.",params:[{name:"leaves",type:"Vec<MmrEncodableOpaqueLeaf>"},{name:"proof",type:"MmrBatchProof"}],type:"Result<(), MmrError>"},verify_proof_stateless:{description:"Verify MMR proof against given root hash.",params:[{name:"root",type:"Hash"},{name:"leaves",type:"Vec<MmrEncodableOpaqueLeaf>"},{name:"proof",type:"MmrBatchProof"}],type:"Result<(), MmrError>"}},version:2},{methods:{generate_batch_proof:{description:"Generate MMR proof for a series of leaves under given indices.",params:[{name:"leafIndices",type:"Vec<MmrLeafIndex>"}],type:"Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"},generate_proof:{description:"Generate MMR proof for a leaf under given index.",params:[{name:"leafIndex",type:"MmrLeafIndex"}],type:"Result<(MmrEncodableOpaqueLeaf, MmrProof), MmrError>"},mmr_root:{description:"Return the on-chain MMR root hash.",params:[],type:"Result<Hash, MmrError>"},verify_batch_proof:{description:"Verify MMR proof against on-chain MMR for a batch of leaves.",params:[{name:"leaves",type:"Vec<MmrEncodableOpaqueLeaf>"},{name:"proof",type:"MmrBatchProof"}],type:"Result<(), MmrError>"},verify_batch_proof_stateless:{description:"Verify MMR proof against given root hash or a batch of leaves.",params:[{name:"root",type:"Hash"},{name:"leaves",type:"Vec<MmrEncodableOpaqueLeaf>"},{name:"proof",type:"MmrBatchProof"}],type:"Result<(), MmrError>"},verify_proof:{description:"Verify MMR proof against on-chain MMR.",params:[{name:"leaf",type:"MmrEncodableOpaqueLeaf"},{name:"proof",type:"MmrProof"}],type:"Result<(), MmrError>"},verify_proof_stateless:{description:"Verify MMR proof against given root hash.",params:[{name:"root",type:"Hash"},{name:"leaf",type:"MmrEncodableOpaqueLeaf"},{name:"proof",type:"MmrProof"}],type:"Result<(), MmrError>"}},version:1}]},types:{MmrBatchProof:{leafIndices:"Vec<MmrLeafIndex>",leafCount:"MmrNodeIndex",items:"Vec<Hash>"},MmrEncodableOpaqueLeaf:"Bytes",MmrError:{_enum:["Push","GetRoot","Commit","GenerateProof","Verify","LeafNotFound"," PalletNotIncluded","InvalidLeafIndex"]},MmrHash:"Hash",MmrLeafBatchProof:{blockHash:"BlockHash",leaves:"Bytes",proof:"Bytes"},MmrLeafIndex:"u64",MmrLeafProof:{blockHash:"BlockHash",leaf:"Bytes",proof:"Bytes"},MmrNodeIndex:"u64",MmrProof:{leafIndex:"MmrLeafIndex",leafCount:"MmrNodeIndex",items:"Vec<Hash>"}}},S5={rpc:{},runtime:{NftsApi:[{methods:{attribute:{description:"An attribute",params:[{name:"collection",type:"NftCollectionId"},{name:"item",type:"NftItemId"},{name:"key",type:"Bytes"}],type:"Option<Bytes>"},collection_attribute:{description:"A collection attribute",params:[{name:"collection",type:"NftCollectionId"},{name:"key",type:"Bytes"}],type:"Option<Bytes>"},collection_owner:{description:"A collection owner",params:[{name:"collection",type:"NftCollectionId"}],type:"Option<AccountId>"},custom_attribute:{description:"A custom attribute",params:[{name:"account",type:"AccountId"},{name:"collection",type:"NftCollectionId"},{name:"item",type:"NftItemId"},{name:"key",type:"Bytes"}],type:"Option<Bytes>"},owner:{description:"Collection owner",params:[{name:"collection",type:"NftCollectionId"},{name:"item",type:"NftItemId"}],type:"Option<AccountId>"},system_attribute:{description:"System attribute",params:[{name:"collection",type:"NftCollectionId"},{name:"item",type:"NftItemId"},{name:"key",type:"Bytes"}],type:"Option<Bytes>"}},version:1}]},types:{NftCollectionId:"u32",NftItemId:"u32"}},S3={rpc:{},runtime:{NominationPoolsApi:[{methods:{balance_to_points:{description:"Returns the equivalent points of `new_funds` for a given pool.",params:[{name:"poolId",type:"NpPoolId"},{name:"newFunds",type:"Balance"}],type:"Balance"},pending_rewards:{description:"Returns the pending rewards for the given member.",params:[{name:"member",type:"AccountId"}],type:"Balance"},points_to_balance:{description:"Returns the equivalent balance of `points` for a given pool.",params:[{name:"poolId",type:"NpPoolId"},{name:"points",type:"Balance"}],type:"Balance"}},version:1}]},types:{NpApiError:{_enum:["MemberNotFound","OverflowInPendingRewards"]},NpPoolId:"u32"}},S8={rpc:{},types:{DeferredOffenceOf:"(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)",Kind:"[u8; 16]",OffenceDetails:{offender:"Offender",reporters:"Vec<Reporter>"},Offender:"IdentificationTuple",OpaqueTimeSlot:"Bytes",ReportIdOf:"Hash",Reporter:"AccountId"}},S9={rpc:{},runtime:{DifficultyApi:[{methods:{difficulty:{description:"Return the target difficulty of the next block.",params:[],// This is Difficulty in the original, however this is chain-specific
type:"Raw"}},version:1}],TimestampApi:[{methods:{timestamp:{description:"API necessary for timestamp-based difficulty adjustment algorithms.",params:[],type:"Moment"}},version:1}]},types:{}},S6={rpc:{},types:{ProxyDefinition:{delegate:"AccountId",proxyType:"ProxyType",delay:"BlockNumber"},ProxyType:{_enum:["Any","NonTransfer","Governance","Staking"]},ProxyAnnouncement:{real:"AccountId",callHash:"Hash",height:"BlockNumber"}}},S4={rpc:{},types:{ActiveRecovery:{created:"BlockNumber",deposit:"Balance",friends:"Vec<AccountId>"},RecoveryConfig:{delayPeriod:"BlockNumber",deposit:"Balance",friends:"Vec<AccountId>",threshold:"u16"}}},S7={rpc:{},types:{Period:"(BlockNumber, u32)",Priority:"u8",SchedulePeriod:"Period",SchedulePriority:"Priority",Scheduled:{maybeId:"Option<Bytes>",priority:"SchedulePriority",call:"Call",maybePeriodic:"Option<SchedulePeriod>",origin:"PalletsOrigin"},ScheduledTo254:{maybeId:"Option<Bytes>",priority:"SchedulePriority",call:"Call",maybePeriodic:"Option<SchedulePeriod>"},TaskAddress:"(BlockNumber, u32)"}},Me={rpc:{},runtime:{SessionKeys:[{methods:{decode_session_keys:{description:"Decode the given public session keys.",params:[{name:"encoded",type:"Bytes"}],type:"Option<Vec<(Bytes, KeyTypeId)>>"},generate_session_keys:{description:"Generate a set of session keys with optionally using the given seed.",params:[{name:"seed",type:"Option<Bytes>"}],type:"Bytes"}},version:1}]},types:{// key for beefy
BeefyKey:"[u8; 33]",// default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
Keys:"SessionKeys4",SessionKeys1:"(AccountId)",SessionKeys2:"(AccountId, AccountId)",SessionKeys3:"(AccountId, AccountId, AccountId)",SessionKeys4:"(AccountId, AccountId, AccountId, AccountId)",SessionKeys5:"(AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys6:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys6B:"(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys7:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys7B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys8:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys8B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys9:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys9B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",SessionKeys10:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",SessionKeys10B:"(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",FullIdentification:"Exposure",IdentificationTuple:"(ValidatorId, FullIdentification)",MembershipProof:{session:"SessionIndex",trieNodes:"Vec<Bytes>",validatorCount:"ValidatorCount"},SessionIndex:"u32",ValidatorCount:"u32"}},Mt={rpc:{},types:{Bid:{who:"AccountId",kind:"BidKind",value:"Balance"},BidKind:{_enum:{Deposit:"Balance",Vouch:"(AccountId, Balance)"}},// a society-specific Judgement (not the same as identity Judgement)
SocietyJudgement:{_enum:["Rebid","Reject","Approve"]},// a society-specific Vote
SocietyVote:{_enum:["Skeptic","Reject","Approve"]},StrikeCount:"u32",VouchingStatus:{_enum:["Vouching","Banned"]}}},Mr={rpc:{},runtime:{StakingApi:[{methods:{nominations_quota:{description:"Returns the nominations quota for a nominator with a given balance.",params:[{name:"balance",type:"Balance"}],type:"u32"}},version:1}]},types:{Points:"u32",EraPoints:{total:"Points",individual:"Vec<Points>"},CompactAssignments:"CompactAssignmentsWith16",CompactAssignmentsWith16:{votes1:"Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",votes2:"Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",votes3:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",votes4:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",votes5:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",votes6:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",votes7:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",votes8:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",votes9:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",votes10:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",votes11:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",votes12:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",votes13:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",votes14:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",votes15:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",votes16:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"},CompactAssignmentsWith24:{votes1:"Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",votes2:"Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",votes3:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",votes4:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",votes5:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",votes6:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",votes7:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",votes8:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",votes9:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",votes10:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",votes11:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",votes12:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",votes13:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",votes14:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",votes15:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",votes16:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>",votes17:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>",votes18:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>",votes19:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>",votes20:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>",votes21:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>",votes22:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>",votes23:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>",votes24:"Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>"},CompactAssignmentsTo265:"CompactAssignmentsWith16",CompactAssignmentsTo257:{votes1:"Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>",votes2:"Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>",votes3:"Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>",votes4:"Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>",votes5:"Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>",votes6:"Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>",votes7:"Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>",votes8:"Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>",votes9:"Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>",votes10:"Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>",votes11:"Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>",votes12:"Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>",votes13:"Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>",votes14:"Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>",votes15:"Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>",votes16:"Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>"},CompactScore:"(ValidatorIndex, OffchainAccuracy)",CompactScoreCompact:"(ValidatorIndexCompact, OffchainAccuracyCompact)",ElectionCompute:{// in previous versions the last entry was "AuthorityId"
// (since no data attached, and it is via SCALE can rename)
_enum:["OnChain","Signed","Unsigned"]},ElectionPhase:{_enum:{Off:null,Signed:null,Unsigned:"(bool, BlockNumber)",Emergency:null}},ElectionResult:{compute:"ElectionCompute",slotStake:"Balance",electedStashes:"Vec<AccountId>",exposures:"Vec<(AccountId, Exposure)>"},ElectionScore:"[u128; 3]",ElectionSize:{validators:"Compact<ValidatorIndex>",nominators:"Compact<NominatorIndex>"},ElectionStatus:{_enum:{Close:"Null",Open:"BlockNumber"}},ExtendedBalance:"u128",RawSolution:"RawSolutionWith16",RawSolutionWith16:{compact:"CompactAssignmentsWith16",score:"ElectionScore",round:"u32"},RawSolutionWith24:{compact:"CompactAssignmentsWith24",score:"ElectionScore",round:"u32"},RawSolutionTo265:"RawSolutionWith16",ReadySolution:{supports:"SolutionSupports",score:"ElectionScore",compute:"ElectionCompute"},RoundSnapshot:{voters:"Vec<(AccountId, VoteWeight, Vec<AccountId>)>",targets:"Vec<AccountId>"},SeatHolder:{who:"AccountId",stake:"Balance",deposit:"Balance"},SignedSubmission:{_fallback:"SignedSubmissionTo276",who:"AccountId",deposit:"Balance",solution:"RawSolution",reward:"Balance"},SignedSubmissionTo276:{who:"AccountId",deposit:"Balance",solution:"RawSolution"},SignedSubmissionOf:"SignedSubmission",SolutionOrSnapshotSize:{voters:"Compact<u32>",targets:"Compact<u32>"},SolutionSupport:{total:"ExtendedBalance",voters:"Vec<(AccountId, ExtendedBalance)>"},SolutionSupports:"Vec<(AccountId, SolutionSupport)>",Supports:"SolutionSupports",SubmissionIndicesOf:"BTreeMap<ElectionScore, u32>",Voter:{votes:"Vec<AccountId>",stake:"Balance",deposit:"Balance"},VoteWeight:"u64",ActiveEraInfo:{index:"EraIndex",start:"Option<Moment>"},EraIndex:"u32",EraRewardPoints:{total:"RewardPoint",individual:"BTreeMap<AccountId, RewardPoint>"},EraRewards:{total:"u32",rewards:"Vec<u32>"},Exposure:{total:"Compact<Balance>",own:"Compact<Balance>",others:"Vec<IndividualExposure>"},Forcing:{_enum:["NotForcing","ForceNew","ForceNone","ForceAlways"]},IndividualExposure:{who:"AccountId",value:"Compact<Balance>"},KeyType:"AccountId",MomentOf:"Moment",Nominations:{targets:"Vec<AccountId>",submittedIn:"EraIndex",suppressed:"bool"},NominatorIndex:"u32",NominatorIndexCompact:"Compact<NominatorIndex>",OffchainAccuracy:"PerU16",OffchainAccuracyCompact:"Compact<OffchainAccuracy>",PhragmenScore:"[u128; 3]",Points:"u32",RewardDestination:{_enum:{Staked:"Null",Stash:"Null",Controller:"Null",Account:"AccountId",None:"Null"}},RewardPoint:"u32",SlashJournalEntry:{who:"AccountId",amount:"Balance",ownSlash:"Balance"},SlashingSpansTo204:{spanIndex:"SpanIndex",lastStart:"EraIndex",prior:"Vec<EraIndex>"},SlashingSpans:{spanIndex:"SpanIndex",lastStart:"EraIndex",lastNonzeroSlash:"EraIndex",prior:"Vec<EraIndex>"},SpanIndex:"u32",SpanRecord:{slashed:"Balance",paidOut:"Balance"},StakingLedgerTo223:{stash:"AccountId",total:"Compact<Balance>",active:"Compact<Balance>",unlocking:"Vec<UnlockChunk>"},StakingLedgerTo240:{_fallback:"StakingLedgerTo223",stash:"AccountId",total:"Compact<Balance>",active:"Compact<Balance>",unlocking:"Vec<UnlockChunk>",lastReward:"Option<EraIndex>"},StakingLedger:{stash:"AccountId",total:"Compact<Balance>",active:"Compact<Balance>",unlocking:"Vec<UnlockChunk>",claimedRewards:"Vec<EraIndex>"},UnappliedSlashOther:"(AccountId, Balance)",UnappliedSlash:{validator:"AccountId",own:"Balance",others:"Vec<UnappliedSlashOther>",reporters:"Vec<AccountId>",payout:"Balance"},UnlockChunk:{value:"Compact<Balance>",era:"Compact<BlockNumber>"},ValidatorIndex:"u16",ValidatorIndexCompact:"Compact<ValidatorIndex>",ValidatorPrefs:"ValidatorPrefsWithBlocked",ValidatorPrefsWithCommission:{commission:"Compact<Perbill>"},ValidatorPrefsWithBlocked:{commission:"Compact<Perbill>",blocked:"bool"},ValidatorPrefsTo196:{validatorPayment:"Compact<Balance>"},ValidatorPrefsTo145:{unstakeThreshold:"Compact<u32>",validatorPayment:"Compact<Balance>"}}},Mn={rpc:{},types:{WeightToFeeCoefficient:{coeffInteger:"Balance",coeffFrac:"Perbill",negative:"bool",degree:"u8"}}},Ma={rpc:{genSyncSpec:{description:"Returns the json-serialized chainspec running the node, with a sync state.",endpoint:"sync_state_genSyncSpec",params:[{name:"raw",type:"bool"}],type:"Json"}},types:{}},Mi={rpc:{accountNextIndex:{alias:["account_nextIndex"],description:"Retrieves the next accountIndex as available on the node",params:[{name:"accountId",type:"AccountId"}],type:"Index"},addLogFilter:{description:"Adds the supplied directives to the current log filter",isUnsafe:!0,params:[{name:"directives",type:"Text"}],type:"Null"},addReservedPeer:{description:"Adds a reserved peer",isUnsafe:!0,params:[{name:"peer",type:"Text"}],type:"Text"},chain:{description:"Retrieves the chain",params:[],type:"Text"},chainType:{description:"Retrieves the chain type",params:[],type:"ChainType"},dryRun:{alias:["system_dryRunAt"],description:"Dry run an extrinsic at a given block",isUnsafe:!0,params:[{name:"extrinsic",type:"Bytes"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"ApplyExtrinsicResult"},health:{description:"Return health status of the node",noErrorLog:!0,params:[],type:"Health"},localListenAddresses:{description:"The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example",params:[],type:"Vec<Text>"},localPeerId:{description:"Returns the base58-encoded PeerId of the node",params:[],type:"Text"},name:{description:"Retrieves the node name",params:[],type:"Text"},networkState:{alias:["system_unstable_networkState"],description:"Returns current state of the network",isUnsafe:!0,params:[],type:"NetworkState"},nodeRoles:{description:"Returns the roles the node is running as",params:[],type:"Vec<NodeRole>"},peers:{description:"Returns the currently connected peers",isUnsafe:!0,params:[],type:"Vec<PeerInfo>"},properties:{description:"Get a custom set of properties as a JSON object, defined in the chain spec",params:[],type:"ChainProperties"},removeReservedPeer:{description:"Remove a reserved peer",isUnsafe:!0,params:[{name:"peerId",type:"Text"}],type:"Text"},reservedPeers:{description:"Returns the list of reserved peers",params:[],type:"Vec<Text>"},resetLogFilter:{description:"Resets the log filter to Substrate defaults",isUnsafe:!0,params:[],type:"Null"},syncState:{description:"Returns the state of the syncing of the node",params:[],type:"SyncState"},version:{description:"Retrieves the version of the node",params:[],type:"Text"}},runtime:{AccountNonceApi:[{methods:{account_nonce:{description:"The API to query account nonce (aka transaction index)",params:[{name:"accountId",type:"AccountId"}],type:"Index"}},version:1}]},types:{AccountInfo:"AccountInfoWithTripleRefCount",AccountInfoWithRefCountU8:{nonce:"Index",refcount:"u8",data:"AccountData"},AccountInfoWithRefCount:{_fallback:"AccountInfoWithRefCountU8",nonce:"Index",refcount:"RefCount",data:"AccountData"},AccountInfoWithDualRefCount:{_fallback:"AccountInfoWithRefCount",nonce:"Index",consumers:"RefCount",providers:"RefCount",data:"AccountData"},// original naming
AccountInfoWithProviders:"AccountInfoWithDualRefCount",AccountInfoWithTripleRefCount:{_fallback:"AccountInfoWithDualRefCount",nonce:"Index",consumers:"RefCount",providers:"RefCount",sufficients:"RefCount",data:"AccountData"},ApplyExtrinsicResult:"Result<DispatchOutcome, TransactionValidityError>",ApplyExtrinsicResultPre6:"Result<DispatchOutcomePre6, TransactionValidityError>",ArithmeticError:{_enum:["Underflow","Overflow","DivisionByZero"]},BlockLength:{max:"PerDispatchClassU32"},BlockWeights:{baseBlock:"Weight",maxBlock:"Weight",perClass:"PerDispatchClassWeightsPerClass"},ChainProperties:"GenericChainProperties",ChainType:{_enum:{Development:"Null",Local:"Null",Live:"Null",Custom:"Text"}},ConsumedWeight:"PerDispatchClassWeight",DigestOf:"Digest",DispatchClass:{_enum:["Normal","Operational","Mandatory"]},DispatchError:{_enum:{Other:"Null",CannotLookup:"Null",BadOrigin:"Null",Module:"DispatchErrorModule",ConsumerRemaining:"Null",NoProviders:"Null",TooManyConsumers:"Null",Token:"TokenError",Arithmetic:"ArithmeticError",Transactional:"TransactionalError",Exhausted:"Null",Corruption:"Null",Unavailable:"Null"}},DispatchErrorPre6:{_enum:{Other:"Null",CannotLookup:"Null",BadOrigin:"Null",Module:"DispatchErrorModulePre6",ConsumerRemaining:"Null",NoProviders:"Null",TooManyConsumers:"Null",Token:"TokenError",Arithmetic:"ArithmeticError",Transactional:"TransactionalError"}},DispatchErrorPre6First:{// The enum was modified mid-flight, affecting asset chains -
// https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
_enum:{Other:"Null",CannotLookup:"Null",BadOrigin:"Null",Module:"DispatchErrorModulePre6",ConsumerRemaining:"Null",NoProviders:"Null",Token:"TokenError",Arithmetic:"ArithmeticError",Transactional:"TransactionalError"}},DispatchErrorModuleU8:{index:"u8",error:"u8"},DispatchErrorModuleU8a:{index:"u8",error:"[u8; 4]"},DispatchErrorModule:"DispatchErrorModuleU8a",DispatchErrorModulePre6:"DispatchErrorModuleU8",DispatchErrorTo198:{module:"Option<u8>",error:"u8"},DispatchInfo:{weight:"Weight",class:"DispatchClass",paysFee:"Pays"},DispatchInfoTo190:{weight:"Weight",class:"DispatchClass"},DispatchInfoTo244:{weight:"Weight",class:"DispatchClass",paysFee:"bool"},DispatchOutcome:"Result<(), DispatchError>",DispatchOutcomePre6:"Result<(), DispatchErrorPre6>",DispatchResult:"Result<(), DispatchError>",DispatchResultOf:"DispatchResult",DispatchResultTo198:"Result<(), Text>",Event:"GenericEvent",EventId:"[u8; 2]",EventIndex:"u32",EventRecord:{phase:"Phase",event:"Event",topics:"Vec<Hash>"},Health:{peers:"u64",isSyncing:"bool",shouldHavePeers:"bool"},InvalidTransaction:{_enum:{Call:"Null",Payment:"Null",Future:"Null",Stale:"Null",BadProof:"Null",AncientBirthBlock:"Null",ExhaustsResources:"Null",Custom:"u8",BadMandatory:"Null",MandatoryDispatch:"Null",BadSigner:"Null"}},Key:"Bytes",LastRuntimeUpgradeInfo:{specVersion:"Compact<u32>",specName:"Text"},NetworkState:{peerId:"Text",listenedAddresses:"Vec<Text>",externalAddresses:"Vec<Text>",connectedPeers:"HashMap<Text, Peer>",notConnectedPeers:"HashMap<Text, NotConnectedPeer>",averageDownloadPerSec:"u64",averageUploadPerSec:"u64",peerset:"NetworkStatePeerset"},NetworkStatePeerset:{messageQueue:"u64",nodes:"HashMap<Text, NetworkStatePeersetInfo>"},NetworkStatePeersetInfo:{connected:"bool",reputation:"i32"},NodeRole:{_enum:{Full:"Null",LightClient:"Null",Authority:"Null",UnknownRole:"u8"}},NotConnectedPeer:{knownAddresses:"Vec<Text>",latestPingTime:"Option<PeerPing>",versionString:"Option<Text>"},Peer:{enabled:"bool",endpoint:"PeerEndpoint",knownAddresses:"Vec<Text>",latestPingTime:"PeerPing",open:"bool",versionString:"Text"},PeerEndpoint:{listening:"PeerEndpointAddr"},PeerEndpointAddr:{_alias:{localAddr:"local_addr",sendBackAddr:"send_back_addr"},localAddr:"Text",sendBackAddr:"Text"},PeerPing:{nanos:"u64",secs:"u64"},PeerInfo:{peerId:"Text",roles:"Text",protocolVersion:"u32",bestHash:"Hash",bestNumber:"BlockNumber"},PerDispatchClassU32:{normal:"u32",operational:"u32",mandatory:"u32"},PerDispatchClassWeight:{normal:"Weight",operational:"Weight",mandatory:"Weight"},PerDispatchClassWeightsPerClass:{normal:"WeightPerClass",operational:"WeightPerClass",mandatory:"WeightPerClass"},Phase:{_enum:{ApplyExtrinsic:"u32",Finalization:"Null",Initialization:"Null"}},RawOrigin:{_enum:{Root:"Null",Signed:"AccountId",None:"Null"}},RefCount:"u32",RefCountTo259:"u8",SyncState:{startingBlock:"BlockNumber",currentBlock:"BlockNumber",highestBlock:"Option<BlockNumber>"},SystemOrigin:"RawOrigin",TokenError:{_enum:["NoFunds","WouldDie","BelowMinimum","CannotCreate","UnknownAsset","Frozen","Unsupported",// these are dropped, but still in older versions
// (if this adjusts, will need to take a re-look)
"Underflow","Overflow"]},TransactionValidityError:{_enum:{Invalid:"InvalidTransaction",Unknown:"UnknownTransaction"}},TransactionalError:{_enum:["LimitReached","NoLayer"]},UnknownTransaction:{_enum:{CannotLookup:"Null",NoUnsignedValidator:"Null",Custom:"u8"}},WeightPerClass:{baseExtrinsic:"Weight",maxExtrinsic:"Option<Weight>",maxTotal:"Option<Weight>",reserved:"Option<Weight>"}}},Mo={rpc:{},types:{Bounty:{proposer:"AccountId",value:"Balance",fee:"Balance",curatorDeposit:"Balance",bond:"Balance",status:"BountyStatus"},BountyIndex:"u32",BountyStatus:{_enum:{Proposed:"Null",Approved:"Null",Funded:"Null",CuratorProposed:"BountyStatusCuratorProposed",Active:"BountyStatusActive",PendingPayout:"BountyStatusPendingPayout"}},BountyStatusActive:{curator:"AccountId",updateDue:"BlockNumber"},BountyStatusCuratorProposed:{curator:"AccountId"},BountyStatusPendingPayout:{curator:"AccountId",beneficiary:"AccountId",unlockAt:"BlockNumber"},OpenTip:{reason:"Hash",who:"AccountId",finder:"AccountId",deposit:"Balance",closes:"Option<BlockNumber>",tips:"Vec<OpenTipTip>",findersFee:"bool"},OpenTipTo225:{reason:"Hash",who:"AccountId",finder:"Option<OpenTipFinderTo225>",closes:"Option<BlockNumber>",tips:"Vec<OpenTipTip>"},OpenTipFinderTo225:"(AccountId, Balance)",OpenTipTip:"(AccountId, Balance)",TreasuryProposal:{proposer:"AccountId",value:"Balance",beneficiary:"AccountId",bond:"Balance"}}},Ms={rpc:{},types:{Multiplier:"Fixed128"}},Ml={rpc:{},runtime:{TaggedTransactionQueue:[{methods:{validate_transaction:{description:"Validate the transaction.",params:[{name:"source",type:"TransactionSource"},{name:"tx",type:"Extrinsic"},{name:"blockHash",type:"BlockHash"}],type:"TransactionValidity"}},version:3},{methods:{validate_transaction:{description:"Validate the transaction.",params:[{name:"source",type:"TransactionSource"},{name:"tx",type:"Extrinsic"}],type:"TransactionValidity"}},version:2},{methods:{validate_transaction:{description:"Validate the transaction.",params:[{name:"tx",type:"Extrinsic"}],type:"TransactionValidity"}},version:1}]},types:{TransactionSource:{_enum:["InBlock","Local","External"]},TransactionValidity:"Result<ValidTransaction, TransactionValidityError>",ValidTransaction:{priority:"TransactionPriority",requires:"Vec<TransactionTag>",provides:"Vec<TransactionTag>",longevity:"TransactionLongevity",propagate:"bool"}}},Mc={rpc:{},types:{ClassId:"u32",InstanceId:"u32",DepositBalance:"Balance",DepositBalanceOf:"Balance",ClassDetails:{owner:"AccountId",issuer:"AccountId",admin:"AccountId",freezer:"AccountId",totalDeposit:"DepositBalance",freeHolding:"bool",instances:"u32",instanceMetadatas:"u32",attributes:"u32",isFrozen:"bool"},DestroyWitness:{instances:"Compact<u32>",instanceMetadatas:"Compact<u32>",attributes:"Compact<u32>"},InstanceDetails:{owner:"AccountId",approved:"Option<AccountId>",isFrozen:"bool",deposit:"DepositBalance"},ClassMetadata:{deposit:"DepositBalance",data:"Vec<u8>",isFrozen:"bool"},InstanceMetadata:{deposit:"DepositBalance",data:"Vec<u8>",isFrozen:"bool"}}},Mu={rpc:{},types:{Multisig:{when:"Timepoint",deposit:"Balance",depositor:"AccountId",approvals:"Vec<AccountId>"},Timepoint:{height:"BlockNumber",index:"u32"}}},Md={rpc:{},types:{VestingInfo:{locked:"Balance",perBlock:"Balance",startingBlock:"BlockNumber"}}},Mf={rpc:{},types:{BlockAttestations:{receipt:"CandidateReceipt",valid:"Vec<AccountId>",invalid:"Vec<AccountId>"},IncludedBlocks:{actualNumber:"BlockNumber",session:"SessionIndex",randomSeed:"H256",activeParachains:"Vec<ParaId>",paraBlocks:"Vec<Hash>"},MoreAttestations:{}}},Mp={rpc:{},types:{BridgedBlockHash:"H256",BridgedBlockNumber:"BlockNumber",BridgedHeader:"Header",BridgeMessageId:"(LaneId, MessageNonce)",CallOrigin:{_enum:{SourceRoot:"Null",TargetAccount:"(AccountId, MultiSigner, MultiSignature)",SourceAccount:"AccountId"}},ChainId:"[u8; 4]",DeliveredMessages:{begin:"MessageNonce",end:"MessageNonce",// pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
dispatchResults:"BitVec"},DispatchFeePayment:{_enum:["AtSourceChain","AtTargetChain"]},InboundLaneData:{relayers:"Vec<UnrewardedRelayer>",lastConfirmedNonce:"MessageNonce"},InboundRelayer:"AccountId",InitializationData:{header:"Header",authorityList:"AuthorityList",setId:"SetId",isHalted:"bool"},LaneId:"[u8; 4]",MessageData:{payload:"Bytes",fee:"Balance"},MessagesDeliveryProofOf:{bridgedHeaderHash:"BlockHash",storageProof:"Vec<Bytes>",lane:"LaneId"},MessageKey:{laneId:"LaneId",nonce:"MessageNonce"},MessageNonce:"u64",MessagesProofOf:{bridgedHeaderHash:"BridgedBlockHash",storageProof:"Vec<Bytes>",lane:"LaneId",noncesStart:"MessageNonce",noncesEnd:"MessageNonce"},OperatingMode:{_enum:["Normal","RejectingOutboundMessages","Halted"]},OutboundLaneData:{oldestUnprunedNonce:"MessageNonce",latestReceivedNonce:"MessageNonce",latestGeneratedNonce:"MessageNonce"},OutboundMessageFee:"Balance",OutboundPayload:{specVersion:"u32",weight:"Weight",origin:"CallOrigin",dispatchFeePayment:"DispatchFeePayment",call:"Bytes"},Parameter:"Null",RelayerId:"AccountId",UnrewardedRelayer:{relayer:"RelayerId",messages:"DeliveredMessages"},UnrewardedRelayersState:{unrewardedRelayer_Entries:"MessageNonce",messagesInOldestEntry:"MessageNonce",totalMessages:"MessageNonce"}}},Mh={rpc:{},types:{StatementKind:{_enum:["Regular","Saft"]}}},Mb={rpc:{},types:{FundIndex:"u32",LastContribution:{_enum:{Never:"Null",PreEnding:"u32",Ending:"BlockNumber"}},FundInfo:{depositor:"AccountId",verifier:"Option<MultiSigner>",deposit:"Balance",raised:"Balance",end:"BlockNumber",cap:"Balance",lastContribution:"LastContribution",firstPeriod:"LeasePeriod",lastPeriod:"LeasePeriod",trieIndex:"TrieIndex"},TrieIndex:"u32"}},My={rpc:{},runtime:{CollectCollationInfo:[{methods:{collect_collation_info:{description:"Collect information about a collation.",params:[{name:"header",type:"Header"}],type:"CollationInfo"}},version:2},{methods:{collect_collation_info:{description:"Collect information about a collation.",params:[],type:"CollationInfoV1"}},version:1}]},types:{CollationInfo:{upwardMessages:"Vec<UpwardMessage>",horizontalMessages:"Vec<OutboundHrmpMessage>",newValidationCode:"Option<ValidationCode>",processedDownwardMessages:"u32",hrmpWatermark:"RelayBlockNumber",headData:"HeadData"},CollationInfoV1:{upwardMessages:"Vec<UpwardMessage>",horizontalMessages:"Vec<OutboundHrmpMessage>",newValidationCode:"Option<ValidationCode>",processedDownwardMessages:"u32",hrmpWatermark:"RelayBlockNumber"},ConfigData:{maxIndividual:"Weight"},MessageId:"[u8; 32]",OverweightIndex:"u64",PageCounter:"u32",PageIndexData:{beginUsed:"PageCounter",endUsed:"PageCounter",overweightCount:"OverweightIndex"}}};const Mm={methods:{best_finalized:{description:"Returns number and hash of the best finalized header known to the bridge module.",params:[],type:"(BlockNumber, Hash)"}},version:1};var Mg={rpc:{},runtime:{KusamaFinalityApi:[Mm],PolkadotFinalityApi:[Mm],RococoFinalityApi:[Mm],WestendFinalityApi:[Mm]},types:{}};const Mv={assumed_validation_data:{description:"Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.",params:[{name:"paraId",type:"ParaId"},{name:"hash",type:"Hash"}],type:"Option<(PersistedValidationData, ValidationCodeHash)>"},availability_cores:{description:"Yields information on all availability cores as relevant to the child block.",params:[],type:"Vec<CoreState>"},candidate_events:{description:"Get a vector of events concerning candidates that occurred within a block.",params:[],type:"Vec<CandidateEvent>"},candidate_pending_availability:{description:"Get the receipt of a candidate pending availability.",params:[{name:"paraId",type:"ParaId"}],type:"Option<CommittedCandidateReceipt>"},check_validation_outputs:{description:"Checks if the given validation outputs pass the acceptance criteria.",params:[{name:"paraId",type:"ParaId"},{name:"outputs",type:"CandidateCommitments"}],type:"bool"},dmq_contents:{description:"Get all the pending inbound messages in the downward message queue for a para.",params:[{name:"paraId",type:"ParaId"}],type:"Vec<InboundDownwardMessage>"},inbound_hrmp_channels_contents:{description:"Get the contents of all channels addressed to the given recipient.",params:[{name:"paraId",type:"ParaId"}],type:"Vec<InboundHrmpMessage>"},on_chain_votes:{description:"Scrape dispute relevant from on-chain, backing votes and resolved disputes.",params:[],type:"Option<ScrapedOnChainVotes>"},persisted_validation_data:{description:"Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.",params:[{name:"paraId",type:"ParaId"},{name:"assumption",type:"OccupiedCoreAssumption"}],type:"Option<PersistedValidationData>"},session_index_for_child:{description:"Returns the session index expected at a child of the block.",params:[],type:"SessionIndex"},validation_code:{description:"Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.",params:[{name:"paraId",type:"ParaId"},{name:"assumption",type:"OccupiedCoreAssumption"}],type:"ValidationCode"},validation_code_by_hash:{description:"Get the validation code from its hash.",params:[{name:"hash",type:"ValidationCodeHash"}],type:"Option<ValidationCode>"},validator_groups:{description:"Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on",params:[],type:"(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)"},validators:{description:"Get the current validators.",params:[],type:"Vec<ValidatorId>"}},Mx={pvfs_require_precheck:{description:"Returns code hashes of PVFs that require pre-checking by validators in the active set.",params:[],type:"Vec<ValidationCodeHash>"},session_info:{description:"Get the session info for the given session, if stored.",params:[{name:"index",type:"SessionIndex"}],type:"Option<SessionInfo>"},submit_pvf_check_statement:{description:"Submits a PVF pre-checking statement into the transaction pool.",params:[{name:"stmt",type:"PvfCheckStatement"},{name:"signature",type:"ValidatorSignature"}],type:"Null"},validation_code_hash:{description:"Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.",params:[{name:"paraId",type:"ParaId"},{name:"assumption",type:"OccupiedCoreAssumption"}],type:"Option<ValidationCodeHash>"}},Mw={disputes:{description:"Returns all onchain disputes.",params:[],type:"Vec<(SessionIndex, CandidateHash, DisputeState)>"}},MP={session_executor_params:{description:"Returns execution parameters for the session.",params:[{name:"sessionIndex",type:"SessionIndex"}],type:"Option<ExecutorParams>"}},MO={ParachainHost:[{methods:{...Mv,...Mx,...Mw,...MP,key_ownership_proof:{description:"Returns a merkle proof of a validator session key",params:[{name:"validatorId",type:"ValidatorId"}],type:"Option<OpaqueKeyOwnershipProof>"},submit_report_dispute_lost:{description:"Submit an unsigned extrinsic to slash validators who lost a dispute about a candidate of a past session",params:[{name:"disputeProof",type:"DisputeProof"},{name:"keyOwnershipProof",type:"OpaqueKeyOwnershipProof"}],type:"Option<Null>"},unapplied_slashes:{description:"Returns a list of validators that lost a past session dispute and need to be slashed",params:[],type:"Vec<(SessionIndex, CandidateHash, PendingSlashes)>"}},version:5},{methods:{...Mv,...Mx,...Mw,...MP},version:4},{methods:{...Mv,...Mx,...Mw},version:3},{methods:{...Mv,...Mx},version:2},{methods:{session_info:{description:"Get the session info for the given session, if stored.",params:[{name:"index",type:"SessionIndex"}],type:"Option<OldV1SessionInfo>"},...Mv},version:1}]},MT={_enum:["ZeroZero","ZeroOne","ZeroTwo","ZeroThree","OneOne","OneTwo","OneThree","TwoTwo","TwoThree","ThreeThree"]},Mz={_enum:["ZeroZero","ZeroOne","ZeroTwo","ZeroThree","ZeroFour","ZeroFive","ZeroSix","ZeroSeven","OneOne","OneTwo","OneThree","OneFour","OneFive","OneSix","OneSeven","TwoTwo","TwoThree","TwoFour","TwoFive","TwoSix","TwoSeven","ThreeThree","ThreeFour","ThreeFive","ThreeSix","ThreeSeven","FourFour","FourFive","FourSix","FourSeven","FiveFive","FiveSix","FiveSeven","SixSix","SixSeven","SevenSeven"]};var Mk={rpc:{},runtime:MO,types:{ServiceQuality:{_enum:["Ordered","Fast"]},DisputeLocation:{_enum:["Local","Remote"]},DisputeResult:{_enum:["Valid","Invalid"]},DisputeState:{validatorsFor:"BitVec",validatorsAgainst:"BitVec",start:"BlockNumber",concludedAt:"Option<BlockNumber>"},DisputeStatement:{_enum:{Valid:"ValidDisputeStatementKind",Invalid:"InvalidDisputeStatementKind"}},DisputeStatementSet:{candidateHash:"CandidateHash",session:"SessionIndex",statements:"Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>"},ExecutorParam:{_enum:{Phantom:"Null",MaxMemoryPages:"u32",StackLogicalMax:"u32",StackNativeMax:"u32",PrecheckingMaxMemory:"u64",PvfPrepTimeout:"(PvfPrepTimeoutKind, u64)",PvfExecTimeout:"(PvfExecTimeoutKind, u64)"}},ExecutorParamsHash:"Hash",ExecutorParams:"Vec<ExecutorParam>",ExplicitDisputeStatement:{valid:"bool",candidateHash:"CandidateHash",session:"SessionIndex"},InvalidDisputeStatementKind:{_enum:["Explicit"]},MultiDisputeStatementSet:"Vec<DisputeStatementSet>",PvfExecTimeoutKind:{_enum:["Backing","Approval"]},PvfPrepTimeoutKind:{_enum:["Precheck","Lenient"]},ValidDisputeStatementKind:{_enum:{Explicit:"Null",BackingSeconded:"Hash",BackingValid:"Hash",ApprovalChecking:"Null"}},HrmpChannel:{maxCapacity:"u32",maxTotalSize:"u32",maxMessageSize:"u32",msgCount:"u32",totalSize:"u32",mqcHead:"Option<Hash>",senderDeposit:"Balance",recipientDeposit:"Balance"},HrmpChannelId:{sender:"u32",receiver:"u32"},HrmpOpenChannelRequest:{confirmed:"bool",age:"SessionIndex",senderDeposit:"Balance",maxMessageSize:"u32",maxCapacity:"u32",maxTotalSize:"u32"},ParachainProposal:{proposer:"AccountId",genesisHead:"HeadData",validators:"Vec<ValidatorId>",name:"Bytes",balance:"Balance"},RegisteredParachainInfo:{validators:"Vec<ValidatorId>",proposer:"AccountId"},Bidder:{_enum:{New:"NewBidder",Existing:"ParaId"}},IncomingParachain:{_enum:{Unset:"NewBidder",Fixed:"IncomingParachainFixed",Deploy:"IncomingParachainDeploy"}},IncomingParachainDeploy:{code:"ValidationCode",initialHeadData:"HeadData"},IncomingParachainFixed:{codeHash:"Hash",codeSize:"u32",initialHeadData:"HeadData"},NewBidder:{who:"AccountId",sub:"SubId"},SubId:"u32",AuctionIndex:"u32",LeasePeriod:"BlockNumber",LeasePeriodOf:"BlockNumber",SlotRange10:MT,SlotRange:Mz,WinningData10:`[WinningDataEntry; ${MT._enum.length}]`,WinningData:`[WinningDataEntry; ${Mz._enum.length}]`,WinningDataEntry:"Option<(AccountId, ParaId, BalanceOf)>",WinnersData10:"Vec<WinnersDataTuple10>",WinnersData:"Vec<WinnersDataTuple>",WinnersDataTuple10:"(AccountId, ParaId, BalanceOf, SlotRange10)",WinnersDataTuple:"(AccountId, ParaId, BalanceOf, SlotRange)",AbridgedCandidateReceipt:{parachainIndex:"ParaId",relayParent:"Hash",headData:"HeadData",collator:"CollatorId",signature:"CollatorSignature",povBlockHash:"Hash",commitments:"CandidateCommitments"},AbridgedHostConfiguration:{maxCodeSize:"u32",maxHeadDataSize:"u32",maxUpwardQueueCount:"u32",maxUpwardQueueSize:"u32",maxUpwardMessageSize:"u32",maxUpwardMessageNumPerCandidate:"u32",hrmpMaxMessageNumPerCandidate:"u32",validationUpgradeFrequency:"BlockNumber",validationUpgradeDelay:"BlockNumber"},AbridgedHrmpChannel:{maxCapacity:"u32",maxTotalSize:"u32",maxMessageSize:"u32",msgCount:"u32",totalSize:"u32",mqcHead:"Option<Hash>"},AssignmentId:"AccountId",AssignmentKind:{_enum:{Parachain:"Null",Parathread:"(CollatorId, u32)"}},AttestedCandidate:{candidate:"AbridgedCandidateReceipt",validityVotes:"Vec<ValidityAttestation>",validatorIndices:"BitVec"},AuthorityDiscoveryId:"AccountId",AvailabilityBitfield:"BitVec",AvailabilityBitfieldRecord:{bitfield:"AvailabilityBitfield",submittedTt:"BlockNumber"},BackedCandidate:{candidate:"CommittedCandidateReceipt",validityVotes:"Vec<ValidityAttestation>",validatorIndices:"BitVec"},BufferedSessionChange:{applyAt:"BlockNumber",validators:"Vec<ValidatorId>",queued:"Vec<ValidatorId>",sessionIndex:"SessionIndex"},CandidateCommitments:{upwardMessages:"Vec<UpwardMessage>",horizontalMessages:"Vec<OutboundHrmpMessage>",newValidationCode:"Option<ValidationCode>",headData:"HeadData",processedDownwardMessages:"u32",hrmpWatermark:"BlockNumber"},CandidateDescriptor:{paraId:"ParaId",relayParent:"RelayChainHash",collatorId:"CollatorId",persistedValidationDataHash:"Hash",povHash:"Hash",erasureRoot:"Hash",signature:"CollatorSignature",paraHead:"Hash",validationCodeHash:"ValidationCodeHash"},CandidateEvent:{_enum:{CandidateBacked:"(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",CandidateIncluded:"(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",CandidateTimedOut:"(CandidateReceipt, HeadData, CoreIndex)"}},CandidateHash:"Hash",CandidateInfo:{who:"AccountId",deposit:"Balance"},CandidatePendingAvailability:{core:"CoreIndex",hash:"CandidateHash",descriptor:"CandidateDescriptor",availabilityVotes:"BitVec",backers:"BitVec",relayParentNumber:"BlockNumber",backedInNumber:"BlockNumber",backingGroup:"GroupIndex"},CandidateReceipt:{descriptor:"CandidateDescriptor",commitmentsHash:"Hash"},GlobalValidationData:{maxCodeSize:"u32",maxHeadDataSize:"u32",blockNumber:"BlockNumber"},CollatorId:"H256",CollatorSignature:"Signature",CommittedCandidateReceipt:{descriptor:"CandidateDescriptor",commitments:"CandidateCommitments"},CoreAssignment:{core:"CoreIndex",paraId:"ParaId",kind:"AssignmentKind",groupIdx:"GroupIndex"},CoreIndex:"u32",CoreOccupied:{_enum:{Parathread:"ParathreadEntry",Parachain:"Null"}},CoreState:{_enum:{Occupied:"OccupiedCore",Scheduled:"ScheduledCore",Free:"Null"}},DisputeProof:{timeSlot:"DisputesTimeSlot",kind:"SlashingOffenceKind",validatorIndex:"ValidatorIndex",validatorId:"ValidatorId"},DisputesTimeSlot:{sessionIndex:"SessionIndex",candidateHash:"CandidateHash"},DoubleVoteReport:{identity:"ValidatorId",first:"(Statement, ValidatorSignature)",second:"(Statement, ValidatorSignature)",proof:"MembershipProof",signingContext:"SigningContext"},DownwardMessage:"Bytes",GroupIndex:"u32",GroupRotationInfo:{sessionStartBlock:"BlockNumber",groupRotationFrequency:"BlockNumber",now:"BlockNumber"},GlobalValidationSchedule:{maxCodeSize:"u32",maxHeadDataSize:"u32",blockNumber:"BlockNumber"},HeadData:"Bytes",HostConfiguration:{maxCodeSize:"u32",maxHeadDataSize:"u32",maxUpwardQueueCount:"u32",maxUpwardQueueSize:"u32",maxUpwardMessageSize:"u32",maxUpwardMessageNumPerCandidate:"u32",hrmpMaxMessageNumPerCandidate:"u32",validationUpgradeFrequency:"BlockNumber",validationUpgradeDelay:"BlockNumber",maxPovSize:"u32",maxDownwardMessageSize:"u32",preferredDispatchableUpwardMessagesStepWeight:"Weight",hrmpMaxParachainOutboundChannels:"u32",hrmpMaxParathreadOutboundChannels:"u32",hrmpOpenRequestTtl:"u32",hrmpSenderDeposit:"Balance",hrmpRecipientDeposit:"Balance",hrmpChannelMaxCapacity:"u32",hrmpChannelMaxTotalSize:"u32",hrmpMaxParachainInboundChannels:"u32",hrmpMaxParathreadInboundChannels:"u32",hrmpChannelMaxMessageSize:"u32",codeRetentionPeriod:"BlockNumber",parathreadCores:"u32",parathreadRetries:"u32",groupRotationFrequency:"BlockNumber",chainAvailabilityPeriod:"BlockNumber",threadAvailabilityPeriod:"BlockNumber",schedulingLookahead:"u32",maxValidatorsPerCore:"Option<u32>",maxValidators:"Option<u32>",disputePeriod:"SessionIndex",disputePostConclusionAcceptancePeriod:"BlockNumber",disputeMaxSpamSlots:"u32",disputeConclusionByTimeOutPeriod:"BlockNumber",noShowSlots:"u32",nDelayTranches:"u32",zerothDelayTrancheWidth:"u32",neededApprovals:"u32",relayVrfModuloSamples:"u32"},InboundDownwardMessage:{pubSentAt:"BlockNumber",pubMsg:"DownwardMessage"},InboundHrmpMessage:{sentAt:"BlockNumber",data:"Bytes"},InboundHrmpMessages:"Vec<InboundHrmpMessage>",LocalValidationData:{parentHead:"HeadData",balance:"Balance",codeUpgradeAllowed:"Option<BlockNumber>"},MessageIngestionType:{downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, InboundHrmpMessages>"},MessageQueueChain:"RelayChainHash",OccupiedCore:{nextUpOnAvailable:"Option<ScheduledCore>",occupiedSince:"BlockNumber",timeOutAt:"BlockNumber",nextUpOnTimeOut:"Option<ScheduledCore>",availability:"BitVec",groupResponsible:"GroupIndex",candidateHash:"CandidateHash",candidateDescriptor:"CandidateDescriptor"},OccupiedCoreAssumption:{_enum:["Included,","TimedOut","Free"]},OutboundHrmpMessage:{recipient:"u32",data:"Bytes"},PendingSlashes:{_alias:{slashKeys:"keys"},slashKeys:"BTreeMap<ValidatorIndex, ValidatorId>",kind:"SlashingOffenceKind"},ParachainDispatchOrigin:{_enum:["Signed","Parachain","Root"]},ParachainInherentData:{validationData:"PersistedValidationData",relayChainState:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, VecInboundHrmpMessage>"},ParachainsInherentData:{bitfields:"SignedAvailabilityBitfields",backedCandidates:"Vec<BackedCandidate>",disputes:"MultiDisputeStatementSet",parentHeader:"Header"},ParaGenesisArgs:{genesisHead:"Bytes",validationCode:"Bytes",parachain:"bool"},ParaId:"u32",ParaInfo:{manager:"AccountId",deposit:"Balance",locked:"bool"},ParaLifecycle:{_enum:["Onboarding","Parathread","Parachain","UpgradingToParachain","DowngradingToParathread","OutgoingParathread","OutgoingParachain"]},ParaPastCodeMeta:{upgradeTimes:"Vec<ReplacementTimes>",lastPruned:"Option<BlockNumber>"},ParaScheduling:{_enum:["Always","Dynamic"]},ParathreadClaim:"(ParaId, CollatorId)",ParathreadClaimQueue:{queue:"Vec<QueuedParathread>",nextCoreOffset:"u32"},ParathreadEntry:{claim:"ParathreadClaim",retries:"u32"},ParaValidatorIndex:"u32",PersistedValidationData:{parentHead:"HeadData",relayParentNumber:"RelayChainBlockNumber",relayParentStorageRoot:"Hash",maxPovSize:"u32"},PvfCheckStatement:{accept:"bool",subject:"ValidationCodeHash",sessionIndex:"SessionIndex",validatorIndex:"ParaValidatorIndex"},QueuedParathread:{claim:"ParathreadEntry",coreOffset:"u32"},RelayBlockNumber:"u32",RelayChainBlockNumber:"RelayBlockNumber",RelayHash:"Hash",RelayChainHash:"RelayHash",Remark:"[u8; 32]",ReplacementTimes:{expectedAt:"BlockNumber",activatedAt:"BlockNumber"},Retriable:{_enum:{Never:"Null",WithRetries:"u32"}},ScheduledCore:{paraId:"ParaId",collator:"Option<CollatorId>"},Scheduling:{_enum:["Always","Dynamic"]},ScrapedOnChainVotes:{session:"SessionIndex",backingValidatorsPerCandidate:"Vec<(CandidateReceipt, Vec<(ParaValidatorIndex, ValidityAttestation)>)>",disputes:"MultiDisputeStatementSet"},SessionInfo:{activeValidatorIndices:"Vec<ParaValidatorIndex>",randomSeed:"[u8; 32]",disputePeriod:"SessionIndex",validators:"Vec<ValidatorId>",discoveryKeys:"Vec<AuthorityDiscoveryId>",assignmentKeys:"Vec<AssignmentId>",validatorGroups:"Vec<Vec<ValidatorIndex>>",nCores:"u32",zerothDelayTrancheWidth:"u32",relayVrfModuloSamples:"u32",nDelayTranches:"u32",noShowSlots:"u32",neededApprovals:"u32"},OldV1SessionInfo:{validators:"Vec<ValidatorId>",discoveryKeys:"Vec<AuthorityDiscoveryId>",assignmentKeys:"Vec<AssignmentId>",validatorGroups:"Vec<Vec<ParaValidatorIndex>>",nCores:"u32",zerothDelayTrancheWidth:"u32",relayVrfModuloSamples:"u32",nDelayTranches:"u32",noShowSlots:"u32",neededApprovals:"u32"},SessionInfoValidatorGroup:"Vec<ParaValidatorIndex>",SignedAvailabilityBitfield:{payload:"BitVec",validatorIndex:"ParaValidatorIndex",signature:"ValidatorSignature"},SignedAvailabilityBitfields:"Vec<SignedAvailabilityBitfield>",SigningContext:{sessionIndex:"SessionIndex",parentHash:"Hash"},SlashingOffenceKind:{_enum:["ForInvalid","AgainstValid"]},Statement:{_enum:{Never:"Null",Candidate:"Hash",Valid:"Hash",Invalid:"Hash"}},TransientValidationData:{maxCodeSize:"u32",maxHeadDataSize:"u32",balance:"Balance",codeUpgradeAllowed:"Option<BlockNumber>",dmqLength:"u32"},UpgradeGoAhead:{_enum:["Abort","GoAhead"]},UpgradeRestriction:{_enum:["Present"]},UpwardMessage:"Bytes",ValidationFunctionParams:{maxCodeSize:"u32",relayChainHeight:"RelayChainBlockNumber",codeUpgradeAllowed:"Option<RelayChainBlockNumber>"},ValidationCode:"Bytes",ValidationCodeHash:"Hash",ValidationData:{persisted:"PersistedValidationData",transient:"TransientValidationData"},ValidationDataType:{validationData:"ValidationData",relayChainState:"Vec<Bytes>"},ValidatorSignature:"Signature",ValidityAttestation:{_enum:{Never:"Null",Implicit:"ValidatorSignature",Explicit:"ValidatorSignature"}},MessagingStateSnapshot:{relayDispatchQueueSize:"(u32, u32)",egressChannels:"Vec<MessagingStateSnapshotEgressEntry>"},MessagingStateSnapshotEgressEntry:"(ParaId, AbridgedHrmpChannel)",SystemInherentData:"ParachainInherentData",VecInboundHrmpMessage:"Vec<InboundHrmpMessage>"}},ML={rpc:{},types:{Approvals:"[bool; 4]"}},ME={rpc:{},types:{AccountStatus:{validity:"AccountValidity",freeBalance:"Balance",lockedBalance:"Balance",signature:"Vec<u8>",vat:"Permill"},AccountValidity:{_enum:["Invalid","Initiated","Pending","ValidLow","ValidHigh","Completed"]}}};const MN=["AssetInstance","Fungibility","Junction","Junctions","MultiAsset","MultiAssetFilter","MultiLocation","Response","WildFungibility","WildMultiAsset","Xcm","XcmError","XcmOrder"];function MS(e){return MN.reduce((t,r)=>TS(t,{[r]:`${r}${e}`}),{})}var MM={rpc:{},types:{BodyId:{_enum:{Unit:"Null",Named:"Vec<u8>",Index:"Compact<u32>",Executive:"Null",Technical:"Null",Legislative:"Null",Judicial:"Null"}},BodyPart:{_enum:{Voice:"Null",Members:"Compact<u32>",Fraction:{nom:"Compact<u32>",denom:"Compact<u32>"},AtLeastProportion:{nom:"Compact<u32>",denom:"Compact<u32>"},MoreThanProportion:{nom:"Compact<u32>",denom:"Compact<u32>"}}},InteriorMultiLocation:"Junctions",NetworkId:{_enum:{Any:"Null",Named:"Vec<u8>",Polkadot:"Null",Kusama:"Null"}},XcmOrigin:{_enum:{Xcm:"MultiLocation"}},XcmpMessageFormat:{_enum:["ConcatenatedVersionedXcm","ConcatenatedEncodedBlob","Signals"]},XcmAssetId:{_enum:{Concrete:"MultiLocation",Abstract:"Bytes"}},InboundStatus:{_enum:["Ok","Suspended"]},OutboundStatus:{_enum:["Ok","Suspended"]},MultiAssets:"Vec<MultiAsset>",FungibilityV0:"FungibilityV1",WildFungibilityV0:"WildFungibilityV1",AssetInstanceV0:{_enum:{Undefined:"Null",Index8:"u8",Index16:"Compact<u16>",Index32:"Compact<u32>",Index64:"Compact<u64>",Index128:"Compact<u128>",Array4:"[u8; 4]",Array8:"[u8; 8]",Array16:"[u8; 16]",Array32:"[u8; 32]",Blob:"Vec<u8>"}},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:{network:"NetworkId",id:"AccountId"},AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},AccountKey20:{network:"NetworkId",key:"[u8; 20]"},PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:{id:"BodyId",part:"BodyPart"}}},MultiAssetV0:{_enum:{None:"Null",All:"Null",AllFungible:"Null",AllNonFungible:"Null",AllAbstractFungible:"Vec<u8>",AllAbstractNonFungible:"Vec<u8>",AllConcreteFungible:"MultiLocationV0",AllConcreteNonFungible:"MultiLocationV0",AbstractFungible:{id:"Vec<u8>",instance:"Compact<u128>"},AbstractNonFungible:{class:"Vec<u8>",instance:"AssetInstanceV0"},ConcreteFungible:{id:"MultiLocationV0",amount:"Compact<u128>"},ConcreteNonFungible:{class:"MultiLocationV0",instance:"AssetInstanceV0"}}},MultiLocationV0:{_enum:{Here:"Null",X1:"JunctionV0",X2:"(JunctionV0, JunctionV0)",X3:"(JunctionV0, JunctionV0, JunctionV0)",X4:"(JunctionV0, JunctionV0, JunctionV0, JunctionV0)",X5:"(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",X6:"(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",X7:"(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",X8:"(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"}},OriginKindV0:{_enum:["Native","SovereignAccount","Superuser","Xcm"]},ResponseV0:{_enum:{Assets:"Vec<MultiAssetV0>"}},XcmV0:{_enum:{WithdrawAsset:{assets:"Vec<MultiAssetV0>",effects:"Vec<XcmOrderV0>"},ReserveAssetDeposit:{assets:"Vec<MultiAssetV0>",effects:"Vec<XcmOrderV0>"},ReceiveTeleportedAsset:{assets:"Vec<MultiAssetV0>",effects:"Vec<XcmOrderV0>"},QueryResponse:{queryId:"Compact<u64>",response:"ResponseV0"},TransferAsset:{assets:"Vec<MultiAssetV0>",dest:"MultiLocationV0"},TransferReserveAsset:{assets:"Vec<MultiAssetV0>",dest:"MultiLocationV0",effects:"Vec<XcmOrderV0>"},Transact:{originType:"XcmOriginKind",requireWeightAtMost:"u64",call:"DoubleEncodedCall"},HrmpNewChannelOpenRequest:{sender:"Compact<u32>",maxMessageSize:"Compact<u32>",maxCapacity:"Compact<u32>"},HrmpChannelAccepted:{recipient:"Compact<u32>"},HrmpChannelClosing:{initiator:"Compact<u32>",sender:"Compact<u32>",recipient:"Compact<u32>"},RelayedFrom:{who:"MultiLocationV0",message:"XcmV0"}}},XcmErrorV0:{_enum:{Undefined:"Null",Overflow:"Null",Unimplemented:"Null",UnhandledXcmVersion:"Null",UnhandledXcmMessage:"Null",UnhandledEffect:"Null",EscalationOfPrivilege:"Null",UntrustedReserveLocation:"Null",UntrustedTeleportLocation:"Null",DestinationBufferOverflow:"Null",SendFailed:"Null",CannotReachDestination:"(MultiLocation, Xcm)",MultiLocationFull:"Null",FailedToDecode:"Null",BadOrigin:"Null",ExceedsMaxMessageSize:"Null",FailedToTransactAsset:"Null",WeightLimitReached:"Weight",Wildcard:"Null",TooMuchWeightRequired:"Null",NotHoldingFees:"Null",WeightNotComputable:"Null",Barrier:"Null",NotWithdrawable:"Null",LocationCannotHold:"Null",TooExpensive:"Null",AssetNotFound:"Null",RecursionLimitReached:"Null"}},XcmOrderV0:{_enum:{Null:"Null",DepositAsset:{assets:"Vec<MultiAssetV0>",dest:"MultiLocationV0"},DepositReserveAsset:{assets:"Vec<MultiAssetV0>",dest:"MultiLocationV0",effects:"Vec<XcmOrderV0>"},ExchangeAsset:{give:"Vec<MultiAssetV0>",receive:"Vec<MultiAssetV0>"},InitiateReserveWithdraw:{assets:"Vec<MultiAssetV0>",reserve:"MultiLocationV0",effects:"Vec<XcmOrderV0>"},InitiateTeleport:{assets:"Vec<MultiAssetV0>",dest:"MultiLocationV0",effects:"Vec<XcmOrderV0>"},QueryHolding:{queryId:"Compact<u64>",dest:"MultiLocationV0",assets:"Vec<MultiAssetV0>"},BuyExecution:{fees:"MultiAssetV0",weight:"u64",debt:"u64",haltOnError:"bool",xcm:"Vec<XcmV0>"}}},AssetInstanceV1:{_enum:{Undefined:"Null",Index:"Compact<u128>",Array4:"[u8; 4]",Array8:"[u8; 8]",Array16:"[u8; 16]",Array32:"[u8; 32]",Blob:"Bytes"}},FungibilityV1:{_enum:{Fungible:"Compact<u128>",NonFungible:"AssetInstanceV1"}},JunctionV1:{_enum:{Parachain:"Compact<u32>",AccountId32:{network:"NetworkId",id:"AccountId"},AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},AccountKey20:{network:"NetworkId",key:"[u8; 20]"},PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:{id:"BodyId",part:"BodyPart"}}},JunctionsV1:{_enum:{Here:"Null",X1:"JunctionV1",X2:"(JunctionV1, JunctionV1)",X3:"(JunctionV1, JunctionV1, JunctionV1)",X4:"(JunctionV1, JunctionV1, JunctionV1, JunctionV1)",X5:"(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",X6:"(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",X7:"(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",X8:"(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"}},MultiAssetsV1:"Vec<MultiAssetV1>",MultiAssetV1:{id:"XcmAssetId",fungibility:"FungibilityV1"},MultiAssetFilterV1:{_enum:{Definite:"MultiAssetsV1",Wild:"WildMultiAssetV1"}},MultiLocationV1:{parents:"u8",interior:"JunctionsV1"},OriginKindV1:"OriginKindV0",ResponseV1:{_enum:{Assets:"MultiAssetsV1"}},WildFungibilityV1:{_enum:["Fungible","NonFungible"]},WildMultiAssetV1:{_enum:{All:"Null",AllOf:{id:"XcmAssetId",fungibility:"WildFungibilityV1"}}},XcmV1:{_enum:{WithdrawAsset:{assets:"MultiAssetsV1",effects:"Vec<XcmOrderV1>"},ReserveAssetDeposit:{assets:"MultiAssetsV1",effects:"Vec<XcmOrderV1>"},ReceiveTeleportedAsset:{assets:"MultiAssetsV1",effects:"Vec<XcmOrderV1>"},QueryResponse:{queryId:"Compact<u64>",response:"ResponseV1"},TransferAsset:{assets:"MultiAssetsV1",dest:"MultiLocationV1"},TransferReserveAsset:{assets:"MultiAssetsV1",dest:"MultiLocationV1",effects:"Vec<XcmOrderV1>"},Transact:{originType:"XcmOriginKind",requireWeightAtMost:"u64",call:"DoubleEncodedCall"},HrmpNewChannelOpenRequest:{sender:"Compact<u32>",maxMessageSize:"Compact<u32>",maxCapacity:"Compact<u32>"},HrmpChannelAccepted:{recipient:"Compact<u32>"},HrmpChannelClosing:{initiator:"Compact<u32>",sender:"Compact<u32>",recipient:"Compact<u32>"},RelayedFrom:{who:"MultiLocationV1",message:"XcmV1"}}},XcmErrorV1:{_enum:{Undefined:"Null",Overflow:"Null",Unimplemented:"Null",UnhandledXcmVersion:"Null",UnhandledXcmMessage:"Null",UnhandledEffect:"Null",EscalationOfPrivilege:"Null",UntrustedReserveLocation:"Null",UntrustedTeleportLocation:"Null",DestinationBufferOverflow:"Null",SendFailed:"Null",CannotReachDestination:"(MultiLocationV1, XcmV1)",MultiLocationFull:"Null",FailedToDecode:"Null",BadOrigin:"Null",ExceedsMaxMessageSize:"Null",FailedToTransactAsset:"Null",WeightLimitReached:"Weight",Wildcard:"Null",TooMuchWeightRequired:"Null",NotHoldingFees:"Null",WeightNotComputable:"Null",Barrier:"Null",NotWithdrawable:"Null",LocationCannotHold:"Null",TooExpensive:"Null",AssetNotFound:"Null",DestinationUnsupported:"Null",RecursionLimitReached:"Null"}},XcmOrderV1:{_enum:{Noop:"Null",DepositAsset:{assets:"MultiAssetFilterV1",maxAssets:"u32",beneficiary:"MultiLocationV1"},DepositReserveAsset:{assets:"MultiAssetFilterV1",maxAssets:"u32",dest:"MultiLocationV1",effects:"Vec<XcmOrderV1>"},ExchangeAsset:{give:"MultiAssetFilterV1",receive:"MultiAssetsV1"},InitiateReserveWithdraw:{assets:"MultiAssetFilterV1",reserve:"MultiLocationV1",effects:"Vec<XcmOrderV1>"},InitiateTeleport:{assets:"MultiAssetFilterV1",dest:"MultiLocationV1",effects:"Vec<XcmOrderV1>"},QueryHolding:{queryId:"Compact<u64>",dest:"MultiLocationV1",assets:"MultiAssetFilterV1"},BuyExecution:{fees:"MultiAssetV1",weight:"u64",debt:"u64",haltOnError:"bool",instructions:"Vec<XcmV1>"}}},AssetInstanceV2:"AssetInstanceV1",FungibilityV2:"FungibilityV1",JunctionV2:"JunctionV1",JunctionsV2:"JunctionsV1",MultiAssetsV2:"MultiAssetsV1",MultiAssetV2:"MultiAssetV1",MultiAssetFilterV2:"MultiAssetFilterV1",MultiLocationV2:"MultiLocationV1",OriginKindV2:"OriginKindV1",WildFungibilityV2:"WildFungibilityV1",ResponseV2:{_enum:{Null:"Null",Assets:"MultiAssetsV2",ExecutionResult:"ResponseV2Result"}},ResponseV2Error:"(u32, XcmErrorV2)",ResponseV2Result:"Result<Null, ResponseV2Error>",WeightLimitV2:{_enum:{Unlimited:"Null",Limited:"Compact<u64>"}},InstructionV2:{_enum:{WithdrawAsset:"MultiAssetsV2",ReserveAssetDeposited:"MultiAssetsV2",ReceiveTeleportedAsset:"MultiAssetsV2",QueryResponse:{queryId:"Compact<u64>",response:"ResponseV2",maxWeight:"Compact<u64>"},TransferAsset:{assets:"MultiAssetsV2",beneficiary:"MultiLocationV2"},TransferReserveAsset:{assets:"MultiAssetsV2",dest:"MultiLocationV2",xcm:"XcmV2"},Transact:{originType:"OriginKindV2",requireWeightAtMost:"u64",call:"DoubleEncodedCall"},HrmpNewChannelOpenRequest:{sender:"Compact<u32>",maxMessageSize:"Compact<u32>",maxCapacity:"Compact<u32>"},HrmpChannelAccepted:{recipient:"Compact<u32>"},HrmpChannelClosing:{initiator:"Compact<u32>",sender:"Compact<u32>",recipient:"Compact<u32>"},ClearOrigin:"Null",DescendOrigin:"InteriorMultiLocation",ReportError:{queryId:"Compact<u64>",dest:"MultiLocationV2",maxResponseWeight:"Compact<u64>"},DepositAsset:{assets:"MultiAssetFilterV2",maxAssets:"u32",beneficiary:"MultiLocationV2"},DepositReserveAsset:{assets:"MultiAssetFilterV2",maxAssets:"u32",dest:"MultiLocationV2",xcm:"XcmV2"},ExchangeAsset:{give:"MultiAssetFilterV2",receive:"MultiAssetsV2"},InitiateReserveWithdraw:{assets:"MultiAssetFilterV2",reserve:"MultiLocationV2",xcm:"XcmV2"},InitiateTeleport:{assets:"MultiAssetFilterV2",dest:"MultiLocationV2",xcm:"XcmV2"},QueryHolding:{query_id:"Compact<u64>",dest:"MultiLocationV2",assets:"MultiAssetFilterV2",maxResponse_Weight:"Compact<u64>"},BuyExecution:{fees:"MultiAssetV2",weightLimit:"WeightLimitV2"},RefundSurplus:"Null",SetErrorHandler:"XcmV2",SetAppendix:"XcmV2",ClearError:"Null",ClaimAsset:{assets:"MultiAssetsV2",ticket:"MultiLocationV2"},Trap:"u64"}},WildMultiAssetV2:"WildMultiAssetV1",XcmV2:"Vec<InstructionV2>",XcmErrorV2:{_enum:{Undefined:"Null",Overflow:"Null",Unimplemented:"Null",UnhandledXcmVersion:"Null",UnhandledXcmMessage:"Null",UnhandledEffect:"Null",EscalationOfPrivilege:"Null",UntrustedReserveLocation:"Null",UntrustedTeleportLocation:"Null",DestinationBufferOverflow:"Null",MultiLocationFull:"Null",MultiLocationNotInvertible:"Null",FailedToDecode:"Null",BadOrigin:"Null",ExceedsMaxMessageSize:"Null",FailedToTransactAsset:"Null",WeightLimitReached:"Weight",Wildcard:"Null",TooMuchWeightRequired:"Null",NotHoldingFees:"Null",WeightNotComputable:"Null",Barrier:"Null",NotWithdrawable:"Null",LocationCannotHold:"Null",TooExpensive:"Null",AssetNotFound:"Null",DestinationUnsupported:"Null",RecursionLimitReached:"Null",Transport:"Null",Unroutable:"Null",UnknownWeightRequired:"Null",Trap:"u64",UnknownClaim:"Null",InvalidLocation:"Null"}},XcmOrderV2:"XcmOrderV1",...MS("V2"),DoubleEncodedCall:{encoded:"Vec<u8>"},XcmOriginKind:{_enum:["Native","SovereignAccount","Superuser","Xcm"]},Outcome:{_enum:{Complete:"Weight",Incomplete:"(Weight, XcmErrorV0)",Error:"XcmErrorV0"}},QueryId:"u64",QueryStatus:{_enum:{Pending:{responder:"VersionedMultiLocation",maybeNotify:"Option<(u8, u8)>",timeout:"BlockNumber"},Ready:{response:"VersionedResponse",at:"BlockNumber"}}},QueueConfigData:{suspendThreshold:"u32",dropThreshold:"u32",resumeThreshold:"u32",thresholdWeight:"Weight",weightRestrictDecay:"Weight"},VersionMigrationStage:{_enum:{MigrateSupportedVersion:"Null",MigrateVersionNotifiers:"Null",NotifyCurrentTargets:"Option<Bytes>",MigrateAndNotifyOldTargets:"Null"}},VersionedMultiAsset:{_enum:{V0:"MultiAssetV0",V1:"MultiAssetV1",V2:"MultiAssetV2"}},VersionedMultiAssets:{_enum:{V0:"Vec<MultiAssetV0>",V1:"MultiAssetsV1",V2:"MultiAssetsV2"}},VersionedMultiLocation:{_enum:{V0:"MultiLocationV0",V1:"MultiLocationV1",V2:"MultiLocationV2"}},VersionedResponse:{V0:"ResponseV0",V1:"ResponseV1",V2:"ResponseV2"},VersionedXcm:{_enum:{V0:"XcmV0",V1:"XcmV1",V2:"XcmV2"}},XcmVersion:"u32"}},Mj={rpc:{},types:{ContractCryptoHasher:{_enum:["Blake2x256","Sha2x256","Keccak256"]},ContractDiscriminant:"u32",ContractLayoutArray:{offset:"ContractLayoutKey",len:"u32",cellsPerElem:"u64",layout:"ContractStorageLayout"},ContractLayoutCell:{key:"ContractLayoutKey",ty:"SiLookupTypeId"},ContractLayoutEnum:{dispatchKey:"ContractLayoutKey",variants:"BTreeMap<ContractDiscriminant, ContractLayoutStruct>"},ContractLayoutHash:{offset:"ContractLayoutKey",strategy:"ContractLayoutHashingStrategy",layout:"ContractStorageLayout"},ContractLayoutHashingStrategy:{hasher:"ContractCryptoHasher",postfix:"Vec<u8>",prefix:"Vec<u8>"},ContractLayoutKey:"[u8; 32]",ContractLayoutStruct:{fields:"Vec<ContractLayoutStructField>"},ContractLayoutStructField:{layout:"ContractStorageLayout",name:"Text"},ContractStorageLayout:{_enum:{Cell:"ContractLayoutCell",Hash:"ContractLayoutHash",Array:"ContractLayoutArray",Struct:"ContractLayoutStruct",Enum:"ContractLayoutEnum"}},ContractConstructorSpecV0:{name:"Text",selector:"ContractSelector",args:"Vec<ContractMessageParamSpecV0>",docs:"Vec<Text>"},ContractConstructorSpecV1:{name:"Vec<Text>",selector:"ContractSelector",args:"Vec<ContractMessageParamSpecV0>",docs:"Vec<Text>"},ContractConstructorSpecV2:{label:"Text",selector:"ContractSelector",args:"Vec<ContractMessageParamSpecV2>",docs:"Vec<Text>"},ContractConstructorSpecV3:{label:"Text",selector:"ContractSelector",payable:"bool",args:"Vec<ContractMessageParamSpecV2>",docs:"Vec<Text>"},ContractConstructorSpecV4:{label:"Text",selector:"ContractSelector",payable:"bool",args:"Vec<ContractMessageParamSpecV2>",docs:"Vec<Text>",default:"bool",returnType:"Option<ContractTypeSpec>"},ContractContractSpecV0:{constructors:"Vec<ContractConstructorSpecV0>",messages:"Vec<ContractMessageSpecV0>",events:"Vec<ContractEventSpecV0>",docs:"Vec<Text>"},ContractContractSpecV1:{constructors:"Vec<ContractConstructorSpecV1>",messages:"Vec<ContractMessageSpecV1>",events:"Vec<ContractEventSpecV1>",docs:"Vec<Text>"},ContractContractSpecV2:{constructors:"Vec<ContractConstructorSpecV2>",messages:"Vec<ContractMessageSpecV2>",events:"Vec<ContractEventSpecV2>",docs:"Vec<Text>"},ContractContractSpecV3:{constructors:"Vec<ContractConstructorSpecV3>",messages:"Vec<ContractMessageSpecV2>",events:"Vec<ContractEventSpecV2>",docs:"Vec<Text>"},ContractContractSpecV4:{constructors:"Vec<ContractConstructorSpecV4>",messages:"Vec<ContractMessageSpecV3>",events:"Vec<ContractEventSpecV2>",docs:"Vec<Text>",environment:"ContractEnvironmentV4"},ContractDisplayName:"SiPath",ContractEventParamSpecV0:{name:"Text",indexed:"bool",type:"ContractTypeSpec",docs:"Vec<Text>"},ContractEventParamSpecV2:{label:"Text",indexed:"bool",type:"ContractTypeSpec",docs:"Vec<Text>"},ContractEventSpecV0:{name:"Text",args:"Vec<ContractEventParamSpecV0>",docs:"Vec<Text>"},ContractEventSpecV1:{name:"Text",args:"Vec<ContractEventParamSpecV0>",docs:"Vec<Text>"},ContractEventSpecV2:{label:"Text",args:"Vec<ContractEventParamSpecV2>",docs:"Vec<Text>"},ContractMessageParamSpecV0:{name:"Text",type:"ContractTypeSpec"},ContractMessageParamSpecV2:{label:"Text",type:"ContractTypeSpec"},ContractMessageSpecV0:{name:"Text",selector:"ContractSelector",mutates:"bool",payable:"bool",args:"Vec<ContractMessageParamSpecV0>",returnType:"Option<ContractTypeSpec>",docs:"Vec<Text>"},ContractMessageSpecV1:{name:"Vec<Text>",selector:"ContractSelector",mutates:"bool",payable:"bool",args:"Vec<ContractMessageParamSpecV0>",returnType:"Option<ContractTypeSpec>",docs:"Vec<Text>"},ContractMessageSpecV2:{label:"Text",selector:"ContractSelector",mutates:"bool",payable:"bool",args:"Vec<ContractMessageParamSpecV2>",returnType:"Option<ContractTypeSpec>",docs:"Vec<Text>"},ContractMessageSpecV3:{label:"Text",selector:"ContractSelector",mutates:"bool",payable:"bool",args:"Vec<ContractMessageParamSpecV2>",returnType:"Option<ContractTypeSpec>",docs:"Vec<Text>",default:"bool"},ContractSelector:"[u8; 4]",ContractTypeSpec:{type:"SiLookupTypeId",displayName:"ContractDisplayName"},ContractConstructorSpecLatest:"ContractConstructorSpecV4",ContractEventSpecLatest:"ContractEventSpecV2",ContractEventParamSpecLatest:"ContractEventParamSpecV2",ContractMessageParamSpecLatest:"ContractMessageParamSpecV2",ContractMessageSpecLatest:"ContractMessageSpecV3",ContractMetadataLatest:"ContractMetadataV4",ContractProjectInfo:{source:"ContractProjectSource",contract:"ContractProjectContract"},ContractMetadataV0:{metadataVersion:"Text",types:"Vec<Si0Type>",spec:"ContractContractSpecV0"},ContractMetadataV1:{types:"Vec<PortableType>",spec:"ContractContractSpecV1"},ContractMetadataV2:{types:"Vec<PortableType>",spec:"ContractContractSpecV2"},ContractMetadataV3:{types:"Vec<PortableType>",spec:"ContractContractSpecV3"},ContractMetadataV4:{types:"Vec<PortableType>",spec:"ContractContractSpecV4"},ContractMetadata:{_enum:{V0:"ContractMetadataV0",V1:"ContractMetadataV1",V2:"ContractMetadataV2",V3:"ContractMetadataV3",V4:"ContractMetadataV4"}},ContractProjectV0:{metadataVersion:"Text",source:"ContractProjectSource",contract:"ContractProjectContract",types:"Vec<Si0Type>",spec:"ContractContractSpecV0"},ContractProject:"(ContractProjectInfo, ContractMetadata)",ContractProjectContract:{_alias:{docs:"documentation"},name:"Text",version:"Text",authors:"Vec<Text>",description:"Option<Text>",docs:"Option<Text>",repository:"Option<Text>",homepage:"Option<Text>",license:"Option<Text>"},ContractProjectSource:{_alias:{wasmHash:"hash"},wasmHash:"[u8; 32]",language:"Text",compiler:"Text",wasm:"Raw"},ContractEnvironmentV4:{_alias:{hashType:"hash"},// NOTE These are not marked optional in the Rust code, however since we
// convert from older versions to newer, we may not have these fields.
// The Option<...> works since our inputs are always JSON, so it will
// be None when not specified.
//
// Additionally we don't mark the full structure as Option, rather we
// do it on a per-field basis since fields may be added as the versions
// progress.
accountId:"Option<ContractTypeSpec>",balance:"Option<ContractTypeSpec>",blockNumber:"Option<ContractTypeSpec>",hashType:"Option<ContractTypeSpec>",timestamp:"Option<ContractTypeSpec>",maxEventTopics:"Option<u32>"}}};const MH={account_basic:{description:"Returns pallet_evm::Accounts by address.",params:[{name:"address",type:"H160"}],type:"EvmAccount"},account_code_at:{description:"For a given account address, returns pallet_evm::AccountCodes.",params:[{name:"address",type:"H160"}],type:"Bytes"},author:{description:"Returns the converted FindAuthor::find_author authority id.",params:[],type:"H160"},call:{description:"Returns a frame_ethereum::call response. If `estimate` is true,",params:[{name:"from",type:"H160"},{name:"to",type:"H160"},{name:"data",type:"Vec<u8>"},{name:"value",type:"U256"},{name:"gasLimit",type:"U256"},{name:"maxFeePerGas",type:"Option<U256>"},{name:"maxPriorityFeePerGas",type:"Option<U256>"},{name:"nonce",type:"Option<U256>"},{name:"estimate",type:"bool"},{name:"accessList",type:"Option<Vec<(H160, Vec<H256>)>>"}],type:"Result<EvmCallInfo, DispatchError>"},chain_id:{description:"Returns runtime defined pallet_evm::ChainId.",params:[],type:"u64"},create:{description:"Returns a frame_ethereum::call response. If `estimate` is true,",params:[{name:"from",type:"H160"},{name:"data",type:"Vec<u8>"},{name:"value",type:"U256"},{name:"gasLimit",type:"U256"},{name:"maxFeePerGas",type:"Option<U256>"},{name:"maxPriorityFeePerGas",type:"Option<U256>"},{name:"nonce",type:"Option<U256>"},{name:"estimate",type:"bool"},{name:"accessList",type:"Option<Vec<(H160, Vec<H256>)>>"}],type:"Result<EvmCreateInfo, DispatchError>"},current_all:{description:"Return all the current data for a block in a single runtime call.",params:[],type:"(Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>)"},current_block:{description:"Return the current block.",params:[],type:"BlockV2"},current_receipts:{description:"Return the current receipt.",params:[],type:"Option<Vec<EthReceiptV3>>"},current_transaction_statuses:{description:"Return the current transaction status.",params:[],type:"Option<Vec<EthTransactionStatus>>"},elasticity:{description:"Return the elasticity multiplier.",params:[],type:"Option<Permill>"},extrinsic_filter:{description:"Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.",params:[{name:"xts",type:"Vec<Extrinsic>"}],type:"Vec<TransactionV2>"},gas_price:{description:"Returns FixedGasPrice::min_gas_price",params:[],type:"u256"},storage_at:{description:"For a given account address and index, returns pallet_evm::AccountStorages.",params:[{name:"address",type:"H160"},{name:"index",type:"u256"}],type:"H256"}},MR={ConvertTransactionRuntimeApi:[{methods:{convert_transaction:{description:"Converts an Ethereum-style transaction to Extrinsic",params:[{name:"transaction",type:"TransactionV2"}],type:"Extrinsic"}},version:2}],DebugRuntimeApi:[{methods:{trace_block:{description:"Trace all block extrinsics",params:[{name:"extrinsics",type:"Vec<Extrinsic>"},{name:"knownTransactions",type:"Vec<H256>"}],type:"Result<(), DispatchError>"},trace_transaction:{description:"Trace transaction extrinsics",params:[{name:"extrinsics",type:"Vec<Extrinsic>"},{name:"transaction",type:"EthTransaction"}],type:"Result<(), DispatchError>"}},version:4}],EthereumRuntimeRPCApi:[{methods:{...MH},version:4},{methods:{...MH,call:{description:"Returns a frame_ethereum::call response. If `estimate` is true,",params:[{name:"from",type:"H160"},{name:"to",type:"H160"},{name:"data",type:"Vec<u8>"},{name:"value",type:"U256"},{name:"gasLimit",type:"U256"},{name:"maxFeePerGas",type:"Option<U256>"},{name:"maxPriorityFeePerGas",type:"Option<U256>"},{name:"nonce",type:"Option<U256>"},{name:"estimate",type:"bool"},{name:"accessList",type:"Option<Vec<(H160, Vec<H256>)>>"}],type:"Result<EvmCallInfoV2, DispatchError>"},create:{description:"Returns a frame_ethereum::call response. If `estimate` is true,",params:[{name:"from",type:"H160"},{name:"data",type:"Vec<u8>"},{name:"value",type:"U256"},{name:"gasLimit",type:"U256"},{name:"maxFeePerGas",type:"Option<U256>"},{name:"maxPriorityFeePerGas",type:"Option<U256>"},{name:"nonce",type:"Option<U256>"},{name:"estimate",type:"bool"},{name:"accessList",type:"Option<Vec<(H160, Vec<H256>)>>"}],type:"Result<EvmCreateInfoV2, DispatchError>"}},version:5}]};var MI={rpc:{listening:{aliasSection:"net",description:"Returns true if client is actively listening for network connections. Otherwise false.",params:[],type:"bool"},peerCount:{aliasSection:"net",description:"Returns number of peers connected to node.",params:[],type:"Text"},version:{aliasSection:"net",description:"Returns protocol version.",params:[],type:"Text"},clientVersion:{aliasSection:"web3",description:"Returns current client version.",params:[],type:"Text"},sha3:{aliasSection:"web3",description:"Returns sha3 of the given data",params:[{name:"data",type:"Bytes"}],type:"H256"},accounts:{description:"Returns accounts list.",params:[],type:"Vec<H160>"},blockNumber:{description:"Returns the blockNumber",params:[],type:"U256"},call:{description:"Call contract, returning the output data.",params:[{name:"request",type:"EthCallRequest"},{isHistoric:!0,isOptional:!0,name:"number",type:"BlockNumber"}],type:"Bytes"},chainId:{description:"Returns the chain ID used for transaction signing at the current best block. None is returned if not available.",params:[],type:"U64"},coinbase:{description:"Returns block author.",params:[],type:"H160"},estimateGas:{description:"Estimate gas needed for execution of given contract.",params:[{name:"request",type:"EthCallRequest"},{isHistoric:!0,isOptional:!0,name:"number",type:"BlockNumber"}],type:"U256"},feeHistory:{description:"Returns fee history for given block count & reward percentiles",params:[{name:"blockCount",type:"U256"},{name:"newestBlock",type:"BlockNumber"},{name:"rewardPercentiles",type:"Option<Vec<f64>>"}],type:"EthFeeHistory"},gasPrice:{description:"Returns current gas price.",params:[],type:"U256"},getBalance:{description:"Returns balance of the given account.",params:[{name:"address",type:"H160"},{isHistoric:!0,isOptional:!0,name:"number",type:"BlockNumber"}],type:"U256"},getBlockByHash:{description:"Returns block with given hash.",params:[{name:"hash",type:"H256"},{name:"full",type:"bool"}],type:"Option<EthRichBlock>"},getBlockByNumber:{description:"Returns block with given number.",params:[{name:"block",type:"BlockNumber"},{name:"full",type:"bool"}],type:"Option<EthRichBlock>"},getBlockTransactionCountByHash:{description:"Returns the number of transactions in a block with given hash.",params:[{name:"hash",type:"H256"}],type:"U256"},getBlockTransactionCountByNumber:{description:"Returns the number of transactions in a block with given block number.",params:[{name:"block",type:"BlockNumber"}],type:"U256"},getCode:{description:"Returns the code at given address at given time (block number).",params:[{name:"address",type:"H160"},{isHistoric:!0,isOptional:!0,name:"number",type:"BlockNumber"}],type:"Bytes"},getFilterChanges:{description:"Returns filter changes since last poll.",params:[{name:"index",type:"U256"}],type:"EthFilterChanges"},getFilterLogs:{description:"Returns all logs matching given filter (in a range 'from' - 'to').",params:[{name:"index",type:"U256"}],type:"Vec<EthLog>"},getLogs:{description:"Returns logs matching given filter object.",params:[{name:"filter",type:"EthFilter"}],type:"Vec<EthLog>"},getProof:{description:"Returns proof for account and storage.",params:[{name:"address",type:"H160"},{name:"storageKeys",type:"Vec<H256>"},{name:"number",type:"BlockNumber"}],type:"EthAccount"},getStorageAt:{description:"Returns content of the storage at given address.",params:[{name:"address",type:"H160"},{name:"index",type:"U256"},{isHistoric:!0,isOptional:!0,name:"number",type:"BlockNumber"}],type:"H256"},getTransactionByBlockHashAndIndex:{description:"Returns transaction at given block hash and index.",params:[{name:"hash",type:"H256"},{name:"index",type:"U256"}],type:"EthTransaction"},getTransactionByBlockNumberAndIndex:{description:"Returns transaction by given block number and index.",params:[{name:"number",type:"BlockNumber"},{name:"index",type:"U256"}],type:"EthTransaction"},getTransactionByHash:{description:"Get transaction by its hash.",params:[{name:"hash",type:"H256"}],type:"EthTransaction"},getTransactionCount:{description:"Returns the number of transactions sent from given address at given time (block number).",params:[{name:"address",type:"H160"},{isHistoric:!0,isOptional:!0,name:"number",type:"BlockNumber"}],type:"U256"},getTransactionReceipt:{description:"Returns transaction receipt by transaction hash.",params:[{name:"hash",type:"H256"}],type:"EthReceipt"},getUncleByBlockHashAndIndex:{description:"Returns an uncles at given block and index.",params:[{name:"hash",type:"H256"},{name:"index",type:"U256"}],type:"EthRichBlock"},getUncleByBlockNumberAndIndex:{description:"Returns an uncles at given block and index.",params:[{name:"number",type:"BlockNumber"},{name:"index",type:"U256"}],type:"EthRichBlock"},getUncleCountByBlockHash:{description:"Returns the number of uncles in a block with given hash.",params:[{name:"hash",type:"H256"}],type:"U256"},getUncleCountByBlockNumber:{description:"Returns the number of uncles in a block with given block number.",params:[{name:"number",type:"BlockNumber"}],type:"U256"},getWork:{description:"Returns the hash of the current block, the seedHash, and the boundary condition to be met.",params:[],type:"EthWork"},hashrate:{description:"Returns the number of hashes per second that the node is mining with.",params:[],type:"U256"},maxPriorityFeePerGas:{description:"Returns max priority fee per gas",params:[],type:"U256"},mining:{description:"Returns true if client is actively mining new blocks.",params:[],type:"bool"},newBlockFilter:{description:"Returns id of new block filter.",params:[],type:"U256"},newFilter:{description:"Returns id of new filter.",params:[{name:"filter",type:"EthFilter"}],type:"U256"},newPendingTransactionFilter:{description:"Returns id of new block filter.",params:[],type:"U256"},protocolVersion:{description:"Returns protocol version encoded as a string (quotes are necessary).",params:[],type:"u64"},sendRawTransaction:{description:"Sends signed transaction, returning its hash.",params:[{name:"bytes",type:"Bytes"}],type:"H256"},sendTransaction:{description:"Sends transaction; will block waiting for signer to return the transaction hash",params:[{name:"tx",type:"EthTransactionRequest"}],type:"H256"},submitHashrate:{description:"Used for submitting mining hashrate.",params:[{name:"index",type:"U256"},{name:"hash",type:"H256"}],type:"bool"},submitWork:{description:"Used for submitting a proof-of-work solution.",params:[{name:"nonce",type:"H64"},{name:"headerHash",type:"H256"},{name:"mixDigest",type:"H256"}],type:"bool"},subscribe:{description:"Subscribe to Eth subscription.",params:[{name:"kind",type:"EthSubKind"},{isOptional:!0,name:"params",type:"EthSubParams"}],pubsub:["subscription","subscribe","unsubscribe"],type:"Null"},syncing:{description:"Returns an object with data about the sync status or false.",params:[],type:"EthSyncStatus"},uninstallFilter:{description:"Uninstalls filter.",params:[{name:"index",type:"U256"}],type:"bool"}},runtime:MR,types:{BlockV0:{header:"EthHeader",transactions:"Vec<TransactionV0>",ommers:"Vec<EthHeader>"},LegacyTransaction:{nonce:"U256",gasPrice:"U256",gasLimit:"U256",action:"EthTransactionAction",value:"U256",input:"Bytes",signature:"EthTransactionSignature"},TransactionV0:"LegacyTransaction",BlockV1:{header:"EthHeader",transactions:"Vec<TransactionV1>",ommers:"Vec<EthHeader>"},EIP2930Transaction:{chainId:"u64",nonce:"U256",gasPrice:"U256",gasLimit:"U256",action:"EthTransactionAction",value:"U256",input:"Bytes",accessList:"EthAccessList",oddYParity:"bool",r:"H256",s:"H256"},TransactionV1:{_enum:{Legacy:"LegacyTransaction",EIP2930:"EIP2930Transaction"}},BlockV2:{header:"EthHeader",transactions:"Vec<TransactionV2>",ommers:"Vec<EthHeader>"},EIP1559Transaction:{chainId:"u64",nonce:"U256",maxPriorityFeePerGas:"U256",maxFeePerGas:"U256",gasLimit:"U256",action:"EthTransactionAction",value:"U256",input:"Bytes",accessList:"EthAccessList",oddYParity:"bool",r:"H256",s:"H256"},TransactionV2:{_enum:{Legacy:"LegacyTransaction",EIP2930:"EIP2930Transaction",EIP1559:"EIP1559Transaction"}},EthereumAccountId:"GenericEthereumAccountId",EthereumAddress:"GenericEthereumAccountId",EthereumLookupSource:"GenericEthereumLookupSource",EthereumSignature:"[u8; 65]",EthAccessListItem:{address:"EthAddress",slots:"Vec<H256>"},EthAccessList:"Vec<EthAccessListItem>",EthAccount:{address:"EthAddress",balance:"U256",nonce:"U256",codeHash:"H256",storageHash:"H256",accountProof:"Vec<Bytes>",storageProof:"Vec<EthStorageProof>"},EthAddress:"H160",EthBlock:{header:"EthHeader",transactions:"Vec<EthTransaction>",ommers:"Vec<EthHeader>"},EthHeader:{parentHash:"H256",ommersHash:"H256",beneficiary:"EthAddress",stateRoot:"H256",transactionsRoot:"H256",receiptsRoot:"H256",logsBloom:"EthBloom",difficulty:"U256",number:"U256",gasLimit:"U256",gasUsed:"U256",timestamp:"u64",extraData:"Bytes",mixMash:"H256",nonce:"H64"},EthRichBlock:{_alias:{blockHash:"hash",blockSize:"size"},blockHash:"Option<H256>",parentHash:"H256",sha3Uncles:"H256",author:"EthAddress",miner:"EthAddress",stateRoot:"H256",transactionsRoot:"H256",receiptsRoot:"H256",number:"Option<U256>",gasUsed:"U256",gasLimit:"U256",extraData:"Bytes",logsBloom:"EthBloom",timestamp:"U256",difficulty:"U256",totalDifficulty:"Option<U256>",sealFields:"Vec<Bytes>",uncles:"Vec<H256>",transactions:"Vec<EthTransaction>",blockSize:"Option<U256>"},EthBloom:"H2048",EthCallRequest:{from:"Option<EthAddress>",to:"Option<EthAddress>",gasPrice:"Option<U256>",gas:"Option<U256>",value:"Option<U256>",data:"Option<Bytes>",nonce:"Option<U256>"},EthFeeHistory:{oldestBlock:"U256",baseFeePerGas:"Vec<U256>",gasUsedRatio:"Vec<f64>",reward:"Option<Vec<Vec<U256>>>"},EthFilter:{fromBlock:"Option<BlockNumber>",toBlock:"Option<BlockNumber>",blockHash:"Option<H256>",address:"Option<EthFilterAddress>",topics:"Option<EthFilterTopic>"},EthFilterAddress:{_enum:{Single:"EthAddress",Multiple:"Vec<EthAddress>",Null:"Null"}},EthFilterChanges:{_enum:{Logs:"Vec<EthLog>",Hashes:"Vec<H256>",Empty:"Null"}},EthFilterTopic:{_enum:{Single:"EthFilterTopicInner",Multiple:"Vec<EthFilterTopicInner>",Null:"Null"}},EthFilterTopicEntry:"Option<H256>",EthFilterTopicInner:{_enum:{Single:"EthFilterTopicEntry",Multiple:"Vec<EthFilterTopicEntry>",Null:"Null"}},EthRichHeader:{_alias:{blockHash:"hash",blockSize:"size"},blockHash:"Option<H256>",parentHash:"H256",sha3Uncles:"H256",author:"EthAddress",miner:"EthAddress",stateRoot:"H256",transactionsRoot:"H256",receiptsRoot:"H256",number:"Option<U256>",gasUsed:"U256",gasLimit:"U256",extraData:"Bytes",logsBloom:"EthBloom",timestamp:"U256",difficulty:"U256",sealFields:"Vec<Bytes>",blockSize:"Option<U256>"},EthLog:{address:"EthAddress",topics:"Vec<H256>",data:"Bytes",blockHash:"Option<H256>",blockNumber:"Option<U256>",transactionHash:"Option<H256>",transactionIndex:"Option<U256>",logIndex:"Option<U256>",transactionLogIndex:"Option<U256>",removed:"bool"},EthReceipt:{transactionHash:"Option<H256>",transactionIndex:"Option<U256>",blockHash:"Option<H256>",from:"Option<EthAddress>",to:"Option<EthAddress>",blockNumber:"Option<U256>",cumulativeGasUsed:"U256",gasUsed:"Option<U256>",contractAddress:"Option<EthAddress>",logs:"Vec<EthLog>",root:"Option<H256>",logsBloom:"EthBloom",statusCode:"Option<U64>"},// not convinced, however the original commit matches, so... (maybe V3 is incorrect?)
EthReceiptV0:"EthReceipt",EthReceiptV3:"EthReceipt",EthStorageProof:{key:"U256",value:"U256",proof:"Vec<Bytes>"},EthSubKind:{_enum:["newHeads","logs","newPendingTransactions","syncing"]},EthSubParams:{_enum:{None:"Null",Logs:"EthFilter"}},EthSubResult:{_enum:{Header:"EthRichHeader",Log:"EthLog",TransactionHash:"H256",SyncState:"EthSyncStatus"}},EthSyncInfo:{startingBlock:"U256",currentBlock:"U256",highestBlock:"U256",warpChunksAmount:"Option<U256>",warpChunksProcessed:"Option<U256>"},EthSyncStatus:{_enum:{Info:"EthSyncInfo",None:"Null"}},EthTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",transactionIndex:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"Option<U256>",maxFeePerGas:"Option<U256>",maxPriorityFeePerGas:"Option<U256>",gas:"U256",input:"Bytes",creates:"Option<H160>",raw:"Bytes",publicKey:"Option<H512>",chainId:"Option<U64>",standardV:"U256",v:"U256",r:"U256",s:"U256",accessList:"Option<Vec<EthAccessListItem>>",transactionType:"Option<U256>"},EthTransactionSignature:{v:"u64",r:"H256",s:"H256"},EthTransactionAction:{_enum:{Call:"H160",Create:"Null"}},EthTransactionCondition:{_enum:{block:"u64",time:"u64"}},EthTransactionRequest:{from:"Option<EthAddress>",to:"Option<EthAddress>",gasPrice:"Option<U256>",gas:"Option<U256>",value:"Option<U256>",data:"Option<Bytes>",nonce:"Option<U256>"},EthTransactionStatus:{transactionHash:"H256",transactionIndex:"u32",from:"EthAddress",to:"Option<EthAddress>",contractAddress:"Option<EthAddress>",logs:"Vec<EthLog>",logsBloom:"EthBloom"},EthWork:{powHash:"H256",seedHash:"H256",target:"H256",number:"Option<u64>"}}},MB={rpc:{},runtime:{// deprecated, the NimbusApi is current - this is for backwards compat
AuthorFilterAPI:[{methods:{can_author:{description:"The runtime api used to predict whether an author will be eligible in the given slot",params:[{name:"author",type:"AccountId"},{name:"relayParent",type:"u32"},{name:"parentHeader",type:"Header"}],type:"bool"}},version:2},{methods:{can_author:{description:"The runtime api used to predict whether an author will be eligible in the given slot",params:[{name:"author",type:"AccountId"},{name:"relayParent",type:"u32"}],type:"bool"}},version:1}],NimbusApi:[{methods:{can_author:{description:"The runtime api used to predict whether a Nimbus author will be eligible in the given slot",params:[{name:"author",type:"AccountId"},{name:"relayParent",type:"u32"},{name:"parentHeader",type:"Header"}],type:"bool"}},version:1}]},types:{}},MV={rpc:{},runtime:{// https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/oracle/rpc/runtime-api/src/lib.rs#L12-L21
OracleApi:[{methods:{get_all_values:{description:"Retrieves all values",params:[{name:"providerId",// This is a Codec type
type:"Raw"}],// This won't actually work as expected - since we have
// no information about the actual Raw sizes, we cannot
// handle it in this format (it would need an override
// for the specific Codec). So return the Raw value.
// type: 'Vec<(Raw, Option<Raw>)>'
type:"Raw"},get_value:{description:"Retrieves a single value",params:[{name:"providerId",// This is a Codec type
type:"Raw"},{name:"key",// This is a Codec type
type:"Raw"}],// This is an Option<Codec> type
type:"Option<Raw>"}},version:1}]},types:{}},MX={rpc:{},runtime:{// https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/tokens/rpc/runtime-api/src/lib.rs#L11-L18
TokensApi:[{methods:{query_existential_deposit:{description:"Query the existential amount for a specific currency",params:[{name:"currencyId",// This is CurrencyId, as per the return value, we are unsure
// if this is specialized and/or global to the chain or not
type:"Raw"}],// This is Balance - since we don't understand enough about the way
// in which this is used, we default to u128 here (it certainly could
// be a specialized type that doesn't map to the on-chain Balance)
type:"u128"}},version:1}]},types:{}},MU={rpc:{methods:{description:"Retrieves the list of RPC methods that are exposed by the node",params:[],type:"RpcMethods"}},types:{RpcMethods:{version:"u32",methods:"Vec<Text>"}}},MA={rpc:{hasKey:{description:"Returns true if the keystore has private keys for the given public key and key type.",isUnsafe:!0,params:[{name:"publicKey",type:"Bytes"},{name:"keyType",type:"Text"}],type:"bool"},hasSessionKeys:{description:"Returns true if the keystore has private keys for the given session public keys.",isUnsafe:!0,params:[{name:"sessionKeys",type:"Bytes"}],type:"bool"},insertKey:{description:"Insert a key into the keystore.",isUnsafe:!0,params:[{name:"keyType",type:"Text"},{name:"suri",type:"Text"},{name:"publicKey",type:"Bytes"}],type:"Bytes"},pendingExtrinsics:{description:"Returns all pending extrinsics, potentially grouped by sender",params:[],type:"Vec<Extrinsic>"},removeExtrinsic:{description:"Remove given extrinsic from the pool and temporarily ban it to prevent reimporting",isUnsafe:!0,params:[{name:"bytesOrHash",type:"Vec<ExtrinsicOrHash>"}],type:"Vec<Hash>"},rotateKeys:{description:"Generate new session keys and returns the corresponding public keys",isUnsafe:!0,params:[],type:"Bytes"},submitAndWatchExtrinsic:{description:"Submit and subscribe to watch an extrinsic until unsubscribed",isSigned:!0,params:[{name:"extrinsic",type:"Extrinsic"}],pubsub:["extrinsicUpdate","submitAndWatchExtrinsic","unwatchExtrinsic"],type:"ExtrinsicStatus"},submitExtrinsic:{description:"Submit a fully formatted extrinsic for block inclusion",isSigned:!0,params:[{name:"extrinsic",type:"Extrinsic"}],type:"Hash"}},types:{ExtrinsicOrHash:{_enum:{Hash:"Hash",Extrinsic:"Bytes"}},ExtrinsicStatus:{_enum:{Future:"Null",Ready:"Null",Broadcast:"Vec<Text>",InBlock:"Hash",Retracted:"Hash",FinalityTimeout:"Hash",Finalized:"Hash",Usurped:"Hash",Dropped:"Null",Invalid:"Null"}}}},MD={rpc:{getBlock:{description:"Get header and body of a relay chain block",params:[{isHistoric:!0,isOptional:!0,name:"hash",type:"BlockHash"}],type:"SignedBlock"},getBlockHash:{description:"Get the block hash for a specific block",params:[{isOptional:!0,name:"blockNumber",type:"BlockNumber"}],type:"BlockHash"},getFinalizedHead:{alias:["chain_getFinalisedHead"],description:"Get hash of the last finalized block in the canon chain",params:[],type:"BlockHash"},getHeader:{alias:["chain_getHead"],description:"Retrieves the header for a specific block",params:[{isHistoric:!0,isOptional:!0,name:"hash",type:"BlockHash"}],type:"Header"},subscribeAllHeads:{description:"Retrieves the newest header via subscription",params:[],pubsub:["allHead","subscribeAllHeads","unsubscribeAllHeads"],type:"Header"},subscribeFinalizedHeads:{alias:["chain_subscribeFinalisedHeads","chain_unsubscribeFinalisedHeads"],description:"Retrieves the best finalized header via subscription",params:[],pubsub:["finalizedHead","subscribeFinalizedHeads","unsubscribeFinalizedHeads"],type:"Header"},subscribeNewHeads:{alias:["chain_unsubscribeNewHeads","subscribe_newHead","unsubscribe_newHead"],description:"Retrieves the best header via subscription",params:[],// NOTE These still has the aliassed version, compatible with 1.x
pubsub:["newHead","subscribeNewHead","unsubscribeNewHead"],type:"Header"}},types:{BlockHash:"Hash"}},MC={rpc:{getKeys:{description:"Returns the keys with prefix from a child storage, leave empty to get all the keys",params:[{name:"childKey",type:"PrefixedStorageKey"},{name:"prefix",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"Hash"}],type:"Vec<StorageKey>"},getKeysPaged:{alias:["childstate_getKeysPagedAt"],description:"Returns the keys with prefix from a child storage with pagination support",params:[{name:"childKey",type:"PrefixedStorageKey"},{name:"prefix",type:"StorageKey"},{name:"count",type:"u32"},{isOptional:!0,name:"startKey",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"Hash"}],type:"Vec<StorageKey>"},getStorage:{description:"Returns a child storage entry at a specific block state",params:[{name:"childKey",type:"PrefixedStorageKey"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"Hash"}],type:"Option<StorageData>"},getStorageEntries:{description:"Returns child storage entries for multiple keys at a specific block state",params:[{name:"childKey",type:"PrefixedStorageKey"},{name:"keys",type:"Vec<StorageKey>"},{isHistoric:!0,isOptional:!0,name:"at",type:"Hash"}],type:"Vec<Option<StorageData>>"},getStorageHash:{description:"Returns the hash of a child storage entry at a block state",params:[{name:"childKey",type:"PrefixedStorageKey"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"Hash"}],type:"Option<Hash>"},getStorageSize:{description:"Returns the size of a child storage entry at a block state",params:[{name:"childKey",type:"PrefixedStorageKey"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"Hash"}],type:"Option<u64>"}},types:{// StorageKey extends Bytes
PrefixedStorageKey:"StorageKey"}},MF={rpc:{localStorageGet:{description:"Get offchain local storage under given key and prefix",isUnsafe:!0,params:[{name:"kind",type:"StorageKind"},{name:"key",type:"Bytes"}],type:"Option<Bytes>"},localStorageSet:{description:"Set offchain local storage under given key and prefix",isUnsafe:!0,params:[{name:"kind",type:"StorageKind"},{name:"key",type:"Bytes"},{name:"value",type:"Bytes"}],type:"Null"}},runtime:{OffchainWorkerApi:[{methods:{offchain_worker:{description:"Starts the off-chain task for given block header.",params:[{name:"header",type:"Header"}],type:"Null"}},version:2},{methods:{offchain_worker:{description:"Starts the off-chain task for given block header.",params:[{name:"number",type:"BlockNumber"}],type:"Null"}},version:1}]},types:{StorageKind:{_enum:{PERSISTENT:1,LOCAL:2}}}};const MZ={query_fee_details:{description:"The transaction fee details",params:[{name:"uxt",type:"Extrinsic"},{name:"len",type:"u32"}],type:"FeeDetails"}},Mq={query_call_fee_details:{description:"The call fee details",params:[{name:"call",type:"Call"},{name:"len",type:"u32"}],type:"FeeDetails"}},MG={query_info:{description:"The transaction info",params:[{name:"uxt",type:"Extrinsic"},{name:"len",type:"u32"}],type:"RuntimeDispatchInfo"}},MW={query_call_info:{description:"The call info",params:[{name:"call",type:"Call"},{name:"len",type:"u32"}],type:"RuntimeDispatchInfo"}},MY={query_length_to_fee:{description:"Query the output of the current LengthToFee given some input",params:[{name:"length",type:"u32"}],type:"Balance"},query_weight_to_fee:{description:"Query the output of the current WeightToFee given some input",params:[{name:"weight",type:"Weight"}],type:"Balance"}},MK={TransactionPaymentApi:[{// V4 is equivalent to V3 (V4 just dropped all V1 references)
methods:{...MY,...MG,...MZ},version:4},{methods:{...MY,...MG,...MZ},version:3},{methods:{...MG,...MZ},version:2},{methods:{query_info:{description:"The transaction info",params:[{name:"uxt",type:"Extrinsic"},{name:"len",type:"u32"}],// NOTE: _Should_ be V1 (as per current Substrate), however the interface was
// changed mid-flight between versions. So we have some of each depending on
// runtime. (We do detect the weight type, so correct)
type:"RuntimeDispatchInfo"},...MZ},version:1}],TransactionPaymentCallApi:[{methods:{...MY,...MW,...Mq},version:3},{methods:{...MW,...Mq},version:2},{methods:{CALL:{description:"The call info",params:[{name:"call",type:"Call"},{name:"len",type:"u32"}],// NOTE: As per the above comment, the below is correct according to Substrate, but
// _may_ yield fallback decoding on some versions of the runtime
type:"RuntimeDispatchInfo"},...Mq},version:1}]};var MJ={rpc:{queryFeeDetails:{// NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
deprecated:"Use `api.call.transactionPaymentApi.queryFeeDetails` instead",description:"Query the detailed fee of a given encoded extrinsic",params:[{name:"extrinsic",type:"Bytes"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"FeeDetails"},queryInfo:{// NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
deprecated:"Use `api.call.transactionPaymentApi.queryInfo` instead",description:"Retrieves the fee information for an encoded extrinsic",params:[{name:"extrinsic",type:"Bytes"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],// NOTE: Stuck on V1 forever (at least for the time being)
type:"RuntimeDispatchInfoV1"}},runtime:MK,types:{FeeDetails:{inclusionFee:"Option<InclusionFee>"},InclusionFee:{baseFee:"Balance",lenFee:"Balance",adjustedWeightFee:"Balance"},RuntimeDispatchInfo:{weight:"Weight",class:"DispatchClass",partialFee:"Balance"},RuntimeDispatchInfoV1:{weight:"WeightV1",class:"DispatchClass",partialFee:"Balance"},RuntimeDispatchInfoV2:{weight:"WeightV2",class:"DispatchClass",partialFee:"Balance"}}},MQ={rpc:{call:{alias:["state_callAt"],description:"Perform a call to a builtin on the chain",params:[{name:"method",type:"Text"},{name:"data",type:"Bytes"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Bytes"},getChildKeys:{description:"Retrieves the keys with prefix of a specific child storage",params:[{name:"childStorageKey",type:"StorageKey"},{name:"childDefinition",type:"StorageKey"},{name:"childType",type:"u32"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Vec<StorageKey>"},getChildReadProof:{description:"Returns proof of storage for child key entries at a specific block state.",params:[{name:"childStorageKey",type:"PrefixedStorageKey"},{name:"keys",type:"Vec<StorageKey>"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"ReadProof"},getChildStorage:{description:"Retrieves the child storage for a key",params:[{name:"childStorageKey",type:"StorageKey"},{name:"childDefinition",type:"StorageKey"},{name:"childType",type:"u32"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"StorageData"},getChildStorageHash:{description:"Retrieves the child storage hash",params:[{name:"childStorageKey",type:"StorageKey"},{name:"childDefinition",type:"StorageKey"},{name:"childType",type:"u32"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Hash"},getChildStorageSize:{description:"Retrieves the child storage size",params:[{name:"childStorageKey",type:"StorageKey"},{name:"childDefinition",type:"StorageKey"},{name:"childType",type:"u32"},{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"u64"},getKeys:{deprecated:"Use `api.rpc.state.getKeysPaged` to retrieve keys",description:"Retrieves the keys with a certain prefix",params:[{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Vec<StorageKey>"},getKeysPaged:{alias:["state_getKeysPagedAt"],description:"Returns the keys with prefix with pagination support.",params:[{name:"key",type:"StorageKey"},{name:"count",type:"u32"},{isOptional:!0,name:"startKey",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Vec<StorageKey>"},getMetadata:{description:"Returns the runtime metadata",params:[{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Metadata"},getPairs:{deprecated:"Use `api.rpc.state.getKeysPaged` to retrieve keys",description:"Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)",isUnsafe:!0,params:[{name:"prefix",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Vec<KeyValue>"},getReadProof:{description:"Returns proof of storage entries at a specific block state",params:[{name:"keys",type:"Vec<StorageKey>"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"ReadProof"},getRuntimeVersion:{alias:["chain_getRuntimeVersion"],description:"Get the runtime version",params:[{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"RuntimeVersion"},getStorage:{alias:["state_getStorageAt"],description:"Retrieves the storage for a key",params:[{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"StorageData"},getStorageHash:{alias:["state_getStorageHashAt"],description:"Retrieves the storage hash",params:[{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Hash"},getStorageSize:{alias:["state_getStorageSizeAt"],description:"Retrieves the storage size",params:[{name:"key",type:"StorageKey"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"u64"},queryStorage:{description:"Query historical storage entries (by key) starting from a start block",isUnsafe:!0,params:[{name:"keys",type:"Vec<StorageKey>"},{name:"fromBlock",type:"Hash"},{isOptional:!0,name:"toBlock",type:"BlockHash"}],type:"Vec<StorageChangeSet>"},queryStorageAt:{description:"Query storage entries (by key) starting at block hash given as the second parameter",params:[{name:"keys",type:"Vec<StorageKey>"},{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"Vec<StorageChangeSet>"},subscribeRuntimeVersion:{alias:["chain_subscribeRuntimeVersion","chain_unsubscribeRuntimeVersion"],description:"Retrieves the runtime version via subscription",params:[],pubsub:["runtimeVersion","subscribeRuntimeVersion","unsubscribeRuntimeVersion"],type:"RuntimeVersion"},subscribeStorage:{description:"Subscribes to storage changes for the provided keys",// NOTE Just marking it here to follow the logic - this is unsafe when no
// keys are provided (i.e. subscribing to all), generally this is used
// extensively with normal subscriptions
// isUnsafe: true,
params:[{isOptional:!0,name:"keys",type:"Vec<StorageKey>"}],pubsub:["storage","subscribeStorage","unsubscribeStorage"],type:"StorageChangeSet"},traceBlock:{description:"Provides a way to trace the re-execution of a single block",isUnsafe:!0,params:[{name:"block",type:"Hash"},{name:"targets",type:"Option<Text>"},{name:"storageKeys",type:"Option<Text>"},{name:"methods",type:"Option<Text>"}],type:"TraceBlockResponse"},trieMigrationStatus:{description:"Check current migration state",isUnsafe:!0,params:[{isHistoric:!0,isOptional:!0,name:"at",type:"BlockHash"}],type:"MigrationStatusResult"}},types:{ApiId:"[u8; 8]",BlockTrace:{blockHash:"Text",parentHash:"Text",tracingTargets:"Text",storageKeys:"Text",spans:"Vec<BlockTraceSpan>",events:"Vec<BlockTraceEvent>"},BlockTraceEvent:{target:"Text",data:"BlockTraceEventData",parentId:"Option<u64>"},BlockTraceEventData:{stringValues:"HashMap<Text, Text>"},BlockTraceSpan:{id:"u64",parentId:"Option<u64>",name:"Text",target:"Text",wasm:"bool"},KeyValueOption:"(StorageKey, Option<StorageData>)",MigrationStatusResult:{topRemainingToMigrate:"u64",childRemainingToMigrate:"u64"},ReadProof:{at:"Hash",proof:"Vec<Bytes>"},RuntimeVersionApi:"(ApiId, u32)",RuntimeVersion:{specName:"Text",implName:"Text",authoringVersion:"u32",specVersion:"u32",implVersion:"u32",apis:"Vec<RuntimeVersionApi>",transactionVersion:"u32",stateVersion:"u8"},RuntimeVersionPre4:{specName:"Text",implName:"Text",authoringVersion:"u32",specVersion:"u32",implVersion:"u32",apis:"Vec<RuntimeVersionApi>",transactionVersion:"u32"},RuntimeVersionPre3:{specName:"Text",implName:"Text",authoringVersion:"u32",specVersion:"u32",implVersion:"u32",apis:"Vec<RuntimeVersionApi>"},RuntimeVersionPartial:{specName:"Text",specVersion:"u32",apis:"Vec<RuntimeVersionApi>"},SpecVersion:"u32",StorageChangeSet:{block:"Hash",changes:"Vec<KeyValueOption>"},TraceBlockResponse:{_enum:{TraceError:"TraceError",BlockTrace:"BlockTrace"}},TraceError:{error:"Text"}}};V(Su,Sd),a=T9,({name:e})=>a(e);const M_=sh(0),M$=sh(1),M0=sh("11400714785074694791"),M1=sh("14029467366897019727"),M2=sh("1609587929392839161"),M5=sh("9650029242287828579"),M3=sh("2870177450012600261"),M8=sh("0xffffffffffffffff"),M9=sh(7),M6=sh(11),M4=sh(12),M7=sh(16),je=sh(18),jt=sh(23),jr=sh(27),jn=sh(29),ja=sh(31),ji=sh(32),jo=sh(33),js=sh(64),jl=sh(256);function jc(e,t){let r=e&M8;return(r<<t|r>>js-t)&M8}function ju(e,t,r){let n=Array(r),a=0;for(let i=0;i<r;i++,a+=2)n[i]=sh(e[t+a]|e[t+1+a]<<8);let i=M_;for(let e=r-1;e>=0;e--)i=(i<<M7)+n[e];return i}function jd(e,t=64,r){let n=Math.ceil(t/64),a=OE(e);if(!Ov||!r&&Eh())return Ep(a,n);let i=new Uint8Array(8*n);for(let e=0;e<n;e++)i.set((function(e,t){let{seed:r,u8a:n,u8asize:a,v1:i,v2:o,v3:s,v4:l}=function(e,t){let r={seed:e,u8a:new Uint8Array(32),u8asize:0,v1:e+M0+M1,v2:e+M1,v3:e,v4:e-M0};if(t.length<32)return r.u8a.set(t),r.u8asize=t.length,r;let n=t.length-32,a=0;if(n>=0){let e=e=>M0*jc(e+M1*ju(t,a,4),ja);do r.v1=e(r.v1),a+=8,r.v2=e(r.v2),a+=8,r.v3=e(r.v3),a+=8,r.v4=e(r.v4),a+=8;while(a<=n)}return a<t.length&&(r.u8a.set(t.subarray(a,t.length)),r.u8asize=t.length-a),r}(sh(t),e),c=0,u=M8&sh(e.length)+(e.length>=32?((((jc(i,M$)+jc(o,M9)+jc(s,M4)+jc(l,je)^M0*jc(i*M1,ja))*M0+M5^M0*jc(o*M1,ja))*M0+M5^M0*jc(s*M1,ja))*M0+M5^M0*jc(l*M1,ja))*M0+M5:r+M3);for(;c<=a-8;)u=M8&M5+M0*jc(u^M0*jc(M1*ju(n,c,4),ja),jr),c+=8;for(c+4<=a&&(u=M8&M2+M1*jc(u^M0*ju(n,c,2),jt),c+=4);c<a;)u=M8&M0*jc(u^M3*sh(n[c++]),M6);u=M8&M1*(u^u>>jo),u=M8&M2*(u^u>>jn),u=M8&(u^u>>ji);let d=new Uint8Array(8);for(let e=7;e>=0;e--)d[e]=Number(u%jl),u/=jl;return d})(a,e).reverse(),8*e);return i}const jf=e=>jd(e,128),jp={Blake2_128:e=>Eb(e,128),Blake2_128Concat:e=>EL(Eb(e,128),OE(e)),Blake2_256:e=>Eb(e,256),Identity:e=>OE(e),Twox128:e=>jd(e,128),Twox256:e=>jd(e,256),Twox64Concat:e=>EL(jd(e,64),OE(e))},jh={args:[],hashers:[],keys:[]};/** @internal */function jb(e){return!E9(e)}/** @internal */function jy({method:e,section:t},{args:r,keys:n}){if(Array.isArray(r)){if(r.filter(jb).length!==n.length)throw Error(`Call to ${T9(t||"unknown")}.${T9(e||"unknown")} needs ${n.length} arguments, found [${r.join(", ")}]`)}else throw Error(`Call to ${T9(t||"unknown")}.${T9(e||"unknown")} needs ${n.length} arguments`)}function jm(e,t,{args:r,hashers:n,keys:a}){let i=a.length,o=Array(i);for(let t=0;t<i;t++)o[t]=(jp[n[t].type]||jf)(e.createTypeUnsafe(e.createLookupType(a[t]),[r[t]]).toU8a());return[[jd(t.prefix,128),jd(t.method,128)],o]}function jg(e,t,r){jy(t,r);let{meta:n}=t,[a,i]=jm(e,t,r),o=[];if(n.type.isMap){let{hashers:t,key:r}=n.type.asMap;o=1===t.length?[`${t[0].type}(${So(e.lookup,r)})`]:e.lookup.getSiType(r).def.asTuple.map((r,n)=>`${t[n].type}(${So(e.lookup,r)})`)}let s=["module","method"].concat(...r.args.map((e,t)=>o[t]));return{inner:a.concat(...i).map((e,t)=>({name:s[t],outer:[e]}))}}function jv(e,t,r){let[n,a]=jm(e,t,r);return EL(...n,...a)}/** @internal */function jx(e,t,r){// always add the length prefix (underlying it is Bytes)
return jy(t,r),EV(jv(e,t,r))}function jw(e,t){let r=t.toLowerCase();return e.lookup.types.find(e=>e.type.def.isPrimitive&&e.type.def.asPrimitive.toString().toLowerCase()===r||e.type.def.isHistoricMetaCompat&&e.type.def.asHistoricMetaCompat.toString().toLowerCase()===r)}function jP(e,t,r){return function({method:e,prefix:t,section:r},n,{docs:a,type:i}){return o=>(function(e,t,r){let{meta:{type:n}}=t,a=/** @internal */function(e,t,r){let{meta:n,method:a,prefix:i,section:o}=t,s=/** @internal */function(e,t,r){let{meta:{type:n}}=t,a=null;// Can only have zero or one argument:
    //   - storage.system.account(address)
    //   - storage.timestamp.blockPeriod()
    // For higher-map queries the params are passed in as an tuple, [key1, key2]
    return(...i)=>{if(n.isPlain)return a||(a=r.skipHashing?EV(OE(r.key)):jx(e,t,jh)),a;let{hashers:o,key:s}=n.asMap;return 1===o.length?jx(e,t,{args:i,hashers:o,keys:[s]}):jx(e,t,{args:i,hashers:o,keys:e.lookup.getSiType(s).def.asTuple})}}(e,t,r);return s.inspect=/** @internal */function(e,t,r){let{meta:{type:n}}=t;return(...a)=>{if(n.isPlain)return r.skipHashing?{inner:[],name:"wellKnown",outer:[OE(r.key)]}:jg(e,t,jh);let{hashers:i,key:o}=n.asMap;return 1===i.length?jg(e,t,{args:a,hashers:i,keys:[o]}):jg(e,t,{args:a,hashers:i,keys:e.lookup.getSiType(o).def.asTuple})}}(e,t,r),s.meta=n,s.method=T9(a),s.prefix=i,s.section=o,// explicitly add the actual method in the toJSON, this gets used to determine caching and without it
    // instances (e.g. collective) will not work since it is only matched on param meta
    s.toJSON=()=>TJ({storage:{method:a,prefix:i,section:o}},n.toJSON()),s}(e,t,r);return n.isMap&&/** @internal */function(e,t,r){let{meta:{type:n},method:a,section:i}=t;r.iterKey=/** @internal */function(e,{meta:{docs:t,name:r,type:n},section:a},{method:i},o){// metadata with a fallback value using the type of the key, the normal
    // meta fallback only applies to actual entry values, create one for head
    let s=e.createTypeUnsafe("StorageEntryMetadataLatest",[{docs:t,fallback:e.createTypeUnsafe("Bytes",[]),modifier:e.createTypeUnsafe("StorageEntryModifierLatest",[1]),name:r,type:e.createTypeUnsafe("StorageEntryTypeLatest",[n.asMap.key,0])}]);o.meta=s;let l=(...t)=>e.createTypeUnsafe("StorageKey",[o(...t),{method:i,section:a}]);return l.meta=s,l}(e,t,r,(...r)=>{if(r.length&&(n.isPlain||r.length>=n.asMap.hashers.length))throw Error(`Iteration of ${T9(i||"unknown")}.${T9(a||"unknown")} needs arguments to be at least one less than the full arguments, found [${r.join(", ")}]`);if(r.length&&n.isMap){let{hashers:a,key:i}=n.asMap,o=1===a.length?[i]:e.lookup.getSiType(i).def.asTuple;return new z2(e,jv(e,t,{args:r,hashers:a.slice(0,r.length),keys:o.slice(0,r.length)}))}return new z2(e,jv(e,t,jh))})}(e,t,a),a.keyPrefix=(...e)=>a.iterKey&&a.iterKey(...e)||function(e){let[t,r]=EU(e),n=t+r.toNumber();return[n,e.subarray(t,n)]}(a())[1],a})(o,{meta:o.createTypeUnsafe("StorageEntryMetadataLatest",[{docs:o.createTypeUnsafe("Vec<Text>",[[a]]),modifier:o.createTypeUnsafe("StorageEntryModifierLatest",["Required"]),name:o.createTypeUnsafe("Text",[e]),toJSON:()=>n,type:o.createTypeUnsafe("StorageEntryTypeLatest",[{Plain:function(e,t){let r=jw(e,t);// some types are either Sequence or Arrays, cater for these
    // specifically (these all come from the base substrate known keys)
    if(!r&&("Bytes"===t||t.startsWith("[u8;"))){let n=jw(e,"u8");if(n){if("Bytes"===t)r=e.lookup.types.find(e=>e.type.def.isSequence&&e.type.def.asSequence.type.eq(n.id)||e.type.def.isHistoricMetaCompat&&e.type.def.asHistoricMetaCompat.eq(t));else{let a=TD(t);r=e.lookup.types.find(e=>e.type.def.isArray&&e.type.def.asArray.eq({len:a.length,type:n.id})||e.type.def.isHistoricMetaCompat&&e.type.def.asHistoricMetaCompat.eq(t))}}}return r||// type will not return valid values, rather it will most probably
    // be decoded incorrectly
    console.warn(`Unable to map ${t} to a lookup index`),r}(o,i)?.id||0}])}]),method:e,prefix:t,section:r},{key:n,skipHashing:!0})}({method:e,prefix:"Substrate",section:"substrate"},t,r)}jP("changesTrieConfig",":changes_trie",{docs:"Changes trie configuration is stored under this key.",type:"u32"}),jP("childStorageKeyPrefix",":child_storage:",{docs:"Prefix of child storage keys.",type:"u32"}),jP("code",":code",{docs:"Wasm code of the runtime.",type:"Bytes"}),jP("extrinsicIndex",":extrinsic_index",{docs:"Current extrinsic index (u32) is stored under this key.",type:"u32"}),jP("heapPages",":heappages",{docs:"Number of wasm linear memory pages required for execution of the runtime.",type:"u64"}),jP("intrablockEntropy",":intrablock_entropy",{docs:"Current intra-block entropy (a universally unique `[u8; 32]` value) is stored here.",type:"[u8; 32]"});const jO=e=>e.toString(),jT=["BTreeMap","BTreeSet","Compact","HashMap","Option","Result","Vec"];function jz(e,t,r){let{info:n,sub:a}=t;switch(n){case R.BTreeMap:case R.BTreeSet:case R.Compact:case R.HashMap:case R.Linkage:case R.Option:case R.Range:case R.RangeInclusive:case R.Result:case R.Vec:case R.WrapperKeepOpaque:case R.WrapperOpaque:return function(e,t,r=jO){return`${e}${t?`<${(Array.isArray(t)?t:[t]).map(r).join(", ")}>`:""}`}(r,a,t=>jN(e,t))}throw Error(`Unable to encode ${Tj(t)} with params`)}function jk(e,t,r,n){let a=t.map(({name:e})=>e);if(!a.every(e=>!!e))throw Error(`Subtypes does not have consistent names, ${a.join(", ")}`);let i=TS({},n);for(let r=0,n=t.length;r<n;r++){let n=t[r];if(!n.name)throw Error(`No name found in ${Tj(n)}`);i[n.name]=jN(e,n)}return Tj(r?{_enum:i}:i)}const jL={[R.BTreeMap]:(e,t)=>jz(e,t,"BTreeMap"),[R.BTreeSet]:(e,t)=>jz(e,t,"BTreeSet"),[R.Compact]:(e,t)=>jz(e,t,"Compact"),[R.DoNotConstruct]:(e,{displayName:t,lookupIndex:r,lookupName:n})=>`DoNotConstruct<${n||t||(void 0===r?"Unknown":e.createLookupType(r))}>`,[R.Enum]:(e,{sub:t})=>{if(!Array.isArray(t))throw Error("Unable to encode Enum type");// c-like enums have all Null entries
// TODO We need to take the disciminant into account and auto-add empty entries
return t.every(({type:e})=>"Null"===e)?Tj({_enum:t.map(({name:e},t)=>`${e||`Empty${t}`}`)}):jk(e,t,!0)},[R.HashMap]:(e,t)=>jz(e,t,"HashMap"),[R.Int]:(e,{length:t=32})=>`Int<${t}>`,[R.Linkage]:(e,t)=>jz(e,t,"Linkage"),[R.Null]:(e,t)=>"Null",[R.Option]:(e,t)=>jz(e,t,"Option"),[R.Plain]:(e,{displayName:t,type:r})=>t||r,[R.Range]:(e,t)=>jz(e,t,"Range"),[R.RangeInclusive]:(e,t)=>jz(e,t,"RangeInclusive"),[R.Result]:(e,t)=>jz(e,t,"Result"),[R.Set]:(e,{length:t=8,sub:r})=>{if(!Array.isArray(r))throw Error("Unable to encode Set type");return Tj({_set:r.reduce((e,{index:t,name:r},n)=>TS(e,{[`${r||`Unknown${t||n}`}`]:t||n}),{_bitLength:t||8})})},[R.Si]:(e,{lookupName:t,type:r})=>t||r,[R.Struct]:(e,{alias:t,sub:r})=>{if(!Array.isArray(r))throw Error("Unable to encode Struct type");return jk(e,r,!1,t?{_alias:[...t.entries()].reduce((e,[t,r])=>TS(e,{[t]:r}),{})}:{})},[R.Tuple]:(e,{sub:t})=>{if(!Array.isArray(t))throw Error("Unable to encode Tuple type");return`(${t.map(t=>jN(e,t)).join(",")})`},[R.UInt]:(e,{length:t=32})=>`UInt<${t}>`,[R.Vec]:(e,t)=>jz(e,t,"Vec"),[R.VecFixed]:(e,{length:t,sub:r})=>{if(!TN(t)||!r||Array.isArray(r))throw Error("Unable to encode VecFixed type");return`[${r.type};${t}]`},[R.WrapperKeepOpaque]:(e,t)=>jz(e,t,"WrapperKeepOpaque"),[R.WrapperOpaque]:(e,t)=>jz(e,t,"WrapperOpaque")};function jE(e,t,r=!0){return r&&t.lookupName?t.lookupName:jL[t.info](e,t)}function jN(e,t){// In the case of contracts we do have the unfortunate situation where the displayName would
// refer to "Option" when it is an option. For these, string it out, only using when actually
// not a top-level element to be used
return t.displayName&&!jT.some(e=>t.displayName===e)?t.displayName:jE(e,t)}function jS(e,t){return TS({},t,{type:jE(e,t,!1)})}const jM=Tg("PortableRegistry"),jj={toNumber:()=>-1},jH={Char:"u32",Str:"Text"},jR=jC([// full matching on exact names...
// these are well-known types with additional encoding
"sp_core::crypto::AccountId32","sp_runtime::generic::era::Era","sp_runtime::multiaddress::MultiAddress",// ethereum overrides (Frontier, Moonbeam, Polkadot claims)
"fp_account::AccountId20","account::AccountId20","polkadot_runtime_common::claims::EthereumAddress",// weights 2 is a structure, however for 1.5. with a single field it
// should be flatenned (can appear in Compact<Weight> extrinsics)
"frame_support::weights::weight_v2::Weight","sp_weights::weight_v2::Weight",// wildcard matching in place...
// these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
"*_democracy::vote::Vote","*_conviction_voting::vote::Vote","*_identity::types::Data",// these are opaque Vec<u8> wrappers
"sp_core::OpaqueMetadata","sp_core::OpaquePeerId","sp_core::offchain::OpaqueMultiaddr",// shorten some well-known types
"primitive_types::*","sp_arithmetic::per_things::*",// runtime
"*_runtime::RuntimeCall","*_runtime::RuntimeEvent",// ink!
"ink::env::types::*","ink::primitives::types::*","ink_env::types::*","ink_primitives::types::*",// noir
"np_runtime::accountname::AccountName","np_runtime::universaladdress::UniversalAddress"]),jI=jC(["pallet_identity::types::BitFlags"]),jB=["bitvec::order::Lsb0","BitOrderLsb0"],jV=[...jB,"bitvec::order::Msb0","BitOrderMsb0"],jX=["BoundedBTreeMap","BoundedBTreeSet","BoundedVec","Box","BTreeMap","BTreeSet","Cow","Option","Range","RangeInclusive","Result","WeakBoundedVec","WrapperKeepOpaque","WrapperOpaque"],jU=[// JS reserved words
"entries","keys","new","size",// exposed by all Codec objects
"hash","registry"],jA=["generic","misc","pallet","traits","types"];/** @internal Converts a Text[] into string[] (used as part of definitions) */function jD(e){let t=e.length,r=Array(t);for(let n=0;n<t;n++)r[n]=e[n].toString();return r}/** @internal Split a namespace with :: into individual parts */function jC(e){let t=e.length,r=Array(t);for(let n=0;n<t;n++)r[n]=e[n].split("::");return r}/** @internal Match a namespace based on parts (alongside wildcards) */function jF(e,t){return e.length===t.length&&e.every((e,r)=>{let n=t[r].toString();if("*"===e||e===n)return!0;if(e.includes("*")&&e.includes("_")&&n.includes("_")){let t=e.split("_"),r=n.split("_");// match initial *'s to multiples if we have a match for the other
if("*"===t[0]){let e=r.indexOf(t[1]);-1!==e&&(t=t.slice(1),r=r.slice(e))}return(// check for * matches at the end, adjust accordingly
2===t.length&&"*"===t[1]&&t[0]===r[0]||jF(t,r))}return!1})}/** @internal Converts a type name into a JS-API compatible name */function jZ(e,t,r,n,a=!1){let i=n.length;// if we have no path or determined as a wrapper, we just skip it
if(0===i||jX.includes(n[i-1].toString()))return null;let o=Array(i),s=Array(i);// initially just create arrays of the camelCase and lowercase path
// parts - we will check these to extract the final values. While
// we have 2 loops here, we also don't do the same operation twice
for(let e=0;e<i;e++){let t=T6(a?n[e].replace("pallet_",""):n[e]),r=t.toLowerCase();o[e]=t,s[e]=r}let l="";for(let e=0;e<i;e++){let t=s[e];// Remove ::{generic, misc, pallet, traits, types}::
1===e&&jA.includes(t)||t===s[e+1]||(l+=o[e])}// do magic for RawOrigin lookup, e.g. pallet_collective::RawOrigin
if("RawOrigin"===o[1]&&2===i&&2===r.length&&r[1].type.isSome){let t=e[r[1].type.unwrap().toNumber()];2===t.type.path.length&&(l=`${l}${t.type.path[1].toString()}`)}return{lookupIndex:t,name:l,params:r}}/** @internal Checks to see if a type is a full duplicate (with all params matching) */function jq(e,t){let r=e.length;for(let t=0;t<r;t++){let n=e[t];for(let a=t+1;a<r;a++){let t=e[a];// if the indexes are not the same and the names match, we have a dupe
if(n.lookupIndex!==t.lookupIndex&&n.name===t.name)return!1}}// add all the adjusted values to the rewite map
for(let n=0;n<r;n++){let r=e[n];t[r.lookupIndex]=r.name}return!0}new Uint8Array(2),Tg("registry");var oI=(A("dEXSZ"),A("dEXSZ"));MS("V0"),MS("V1"),MS("V0"),MS("V1"),MS("V0"),MS("V1"),MS("V0"),MS("V1"),MS("V0"),MS("V1"),MS("V0"),MS("V1");var oI=A("dEXSZ");const jG="0123456789abcdef",jW=new Uint8Array(256),jY=new Uint8Array(65536);for(let e=0,t=jG.length;e<t;e++)jW[0|jG[e].charCodeAt(0)]=0|e,e>9&&(jW[0|jG[e].toUpperCase().charCodeAt(0)]=0|e);for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)jY[t|r]=jW[e]<<4|jW[r]}var jK={};r(jK,"kusama",()=>jJ),r(jK,"polkadot",()=>jQ),r(jK,"westend",()=>j_);const jJ=[[0,1020,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[26669,1021,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[38245,1022,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[54248,1023,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[59659,1024,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[67651,1025,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[82191,1027,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[83238,1028,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[101503,1029,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[203466,1030,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[295787,1031,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[461692,1032,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[504329,1033,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[569327,1038,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",1],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[587687,1039,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[653183,1040,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[693488,1042,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[901442,1045,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1375086,1050,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1445458,1051,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1472960,1052,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1475648,1053,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1491596,1054,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1574408,1055,[["0xdf6acb689907609b",2],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",1],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2064961,1058,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2201991,1062,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2671528,2005,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2704202,2007,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2728002,2008,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2832534,2011,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2962294,2012,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[324e4,2013,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3274408,2015,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3323565,2019,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3534175,2022,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3860281,2023,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4143129,2024,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4401242,2025,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4841367,2026,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5961600,2027,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6137912,2028,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6561855,2029,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7100891,2030,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7468792,9010,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7668600,9030,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7812476,9040,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8010981,9050,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8073833,9070,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8555825,9080,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8945245,9090,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9611377,9100,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9625129,9111,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9866422,9122,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10403784,9130,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10960765,9150,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11006614,9151,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11404482,9160,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11601803,9170,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[12008022,9180,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[12405451,9190,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[12665416,9200,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[12909508,9220,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[13109752,9230,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[13555777,9250,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[13727747,9260,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[14248044,9271,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0x17a6bc0d0062aeb3",1]]],[14433840,9280,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[14645900,9291,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[15048375,9300,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[15426015,9320,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[15680713,9340,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[15756296,9350,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]]],jQ=[[0,0,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[29231,1,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[188836,5,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[199405,6,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[214264,7,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[244358,8,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[303079,9,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[314201,10,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[342400,11,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[443963,12,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[528470,13,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[687751,14,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[746085,15,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[787923,16,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[799302,17,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1205128,18,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1603423,23,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1733218,24,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2005673,25,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2436698,26,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3613564,27,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3899547,28,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4345767,29,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4876134,30,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5661442,9050,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6321619,9080,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6713249,9090,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7217907,9100,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7229126,9110,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7560558,9122,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8115869,9140,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8638103,9151,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9280179,9170,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9738717,9180,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10156856,9190,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10458576,9200,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10655116,9220,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10879371,9230,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11328884,9250,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11532856,9260,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11933818,9270,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[12217535,9280,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1]]],[12245277,9281,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1]]],[12532644,9291,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1]]],[12876189,9300,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0x17a6bc0d0062aeb3",1],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1]]]],j_=[[214356,4,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",1],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[392764,7,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[409740,8,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[809976,20,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[877581,24,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[879238,25,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[889472,26,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[902937,27,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[932751,28,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[991142,29,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1030162,31,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1119657,32,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1199282,33,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1342534,34,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1392263,35,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1431703,36,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1433369,37,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[1490972,41,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2087397,43,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2316688,44,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[2549864,45,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3925782,46,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[3925843,47,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4207800,48,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[4627944,49,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5124076,50,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5478664,900,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5482450,9e3,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",4],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5584305,9010,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5784566,9030,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5879822,9031,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5896856,9032,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[5897316,9033,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6117927,9050,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6210274,9070,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",2],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6379314,9080,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",2],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[6979141,9090,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7568453,9100,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7766394,9111,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7911691,9120,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7968866,9121,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[7982889,9122,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[8514322,9130,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9091726,9140,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9091774,9150,[["0xdf6acb689907609b",3],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",1],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9406726,9160,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[9921066,9170,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10007115,9180,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",5],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10480973,9190,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10578091,9200,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10678509,9210,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[10811001,9220,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11096116,9230,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11409279,9250,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11584820,9251,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11716837,9260,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11876919,9261,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1]]],[11987927,9270,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0x17a6bc0d0062aeb3",1]]],[12077324,9271,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0x17a6bc0d0062aeb3",1]]],[12301871,9280,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[12604343,9290,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",2],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[12841034,9300,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[13128237,9310,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",1],["0xf3ff14d5ab527059",1],["0x17a6bc0d0062aeb3",1]]],[13272363,9320,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[13483497,9330,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[13649433,9340,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]],[13761100,9350,[["0xdf6acb689907609b",4],["0x37e397fc7c91f5e4",1],["0x40fe3ad401f8959a",6],["0xd2bc9897eed08f15",3],["0xf78b278be53f454c",2],["0xaf2c0297a23e6d3d",3],["0x49eaaf1b548a0cb0",1],["0x91d5df18b0d2cf58",1],["0xed99c5acb25eedf5",3],["0xcbca25e39f142387",2],["0x687ad44ad37f03c2",1],["0xab3c0572291feb8b",1],["0xbc9d89904f5b923f",1],["0x37c8bb1350a9a2a8",2],["0xf3ff14d5ab527059",2],["0x17a6bc0d0062aeb3",1]]]],j$={westend:{genesisHash:["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"]}};/** @internal */function j0(e){return e.toString().padStart(2,"0")}Object.entries(jK).map(/** @internal */function([e,t]){let r=cF.find(t=>t.network===e)||j$[e];if(!r)throw Error(`Unable to find info for chain ${e}`);return{genesisHash:function(e,t=-1){if(!e)return new Uint8Array;let r=e.startsWith("0x")?2:0,n=Math.ceil((e.length-r)/2),a=Math.ceil(-1===t?n:t/8),i=new Uint8Array(a),o=a>n?a-n:0;for(let t=o;t<a;t++,r+=2)// HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
// same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
// also the faster operation by at least 2x with the character map above
i[t]=jY[e.charCodeAt(r)<<8|e.charCodeAt(r+1)];return i}(r.genesisHash[0]),network:e,versions:t.map(([e,t,r])=>({apis:r,blockNumber:new/*@__PURE__*/(n(oI))(e),specVersion:new/*@__PURE__*/(n(oI))(t)}))}});const j1={debug:"log",error:"error",log:"log",warn:"warn"};function j2(e,t,r,n=-1){if(1===r.length&&sm(r[0])){let a=r[0]();return j2(e,t,Array.isArray(a)?a:[a],n)}console[j1[e]](function(e){let t=e.getFullYear().toString(),r=j0(e.getMonth()+1),n=j0(e.getDate()),a=j0(e.getHours()),i=j0(e.getMinutes()),o=j0(e.getSeconds());return`${t}-${r}-${n} ${a}:${i}:${o}`}(new Date),t,...r.map(function e(t){return Array.isArray(t)?t.map(e):fy(t)?t.toString():sv(t)||sg(t)?cS(sx(t)):function(t){if(t&&d0(t)&&t.constructor===Object){let r={};for(let[n,a]of Object.entries(t))r[n]=e(a);return r}return t}(t)}).map(e=>{if(n<=0)return e;let t=`${e}`;return t.length<n?e:`${t.substring(0,n)} ...`}))}function j5(e){let t=`${e.toUpperCase()}:`.padStart(16),[r,n]=function(e){let t=parseInt(o9.process?.env?.DEBUG_MAX||"-1",10);return[function(e,t){let r=!1;for(let n of e)n&&("*"===n||t===n||n.endsWith("*")&&t.startsWith(n.slice(0,-1)))?r=!0:n&&n.startsWith("-")&&(t===n.slice(1)||n.endsWith("*")&&t.startsWith(n.slice(1,-1)))&&(r=!1);return r}((o9.process?.env?.DEBUG||"").toLowerCase().split(","),e),isNaN(t)?-1:t]}(e.toLowerCase());return{debug:r?(...e)=>j2("debug",t,e,n):Py,error:(...e)=>j2("error",t,e),log:(...e)=>j2("log",t,e),noop:Py,warn:(...e)=>j2("warn",t,e)}}var j3=Pm(function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}),j8=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return Px(t,e),t.prototype.lift=function(e){var t=new j9(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new j3},t.prototype.next=function(e){var t=this;PA(function(){var r,n;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var a=PP(t.currentObservers),i=a.next();!i.done;i=a.next())i.value.next(e)}catch(e){r={error:e}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(r)throw r.error}}}})},t.prototype.error=function(e){var t=this;PA(function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var r=t.observers;r.length;)r.shift().error(e)}})},t.prototype.complete=function(){var e=this;PA(function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}})},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,r=this.hasError,n=this.isStopped,a=this.observers;return r||n?PS:(this.currentObservers=null,a.push(e),new PN(function(){t.currentObservers=null,PE(a,e)}))},t.prototype._checkFinalizedStatuses=function(e){var t=this.hasError,r=this.thrownError,n=this.isStopped;t?e.error(r):n&&e.complete()},t.prototype.asObservable=function(){var e=new P9;return e.source=this,e},t.create=function(e,t){return new j9(e,t)},t}(P9),j9=function(e){function t(t,r){var n=e.call(this)||this;return n.destination=t,n.source=r,n}return Px(t,e),t.prototype.next=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===r||r.call(t,e)},t.prototype.error=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===r||r.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,r;return null!==(r=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==r?r:PS},t}(j8),j6=function(e){function t(t){var r=e.call(this)||this;return r._value=t,r}return Px(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),t.prototype._subscribe=function(t){var r=e.prototype._subscribe.call(this,t);return r.closed||t.next(this._value),r},t.prototype.getValue=function(){var e=this.hasError,t=this.thrownError,r=this._value;if(e)throw t;return this._throwIfClosed(),r},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(j8),j4=Array.isArray,j7=Object.getPrototypeOf,He=Object.prototype,Ht=Object.keys,Hr=Array.isArray;function Hn(){for(var e,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var n=P1(t),a=Pk(P0(t))?t.pop():void 0,i=function(e){if(1===e.length){var t=e[0];if(j4(t))return{args:t,keys:null};if(t&&"object"==typeof t&&j7(t)===He){var r=Ht(t);return{args:r.map(function(e){return t[e]}),keys:r}}}return{args:e,keys:null}}(t),o=i.args,s=i.keys;if(0===o.length)return Ou([],n);var l=new P9((void 0===(e=s?function(e){return s.reduce(function(t,r,n){return t[r]=e[n],t},{})}:P8)&&(e=P8),function(t){var r,a,i;r=n,a=function(){for(var r=o.length,a=Array(r),i=r,s=r,l=function(r){var l,c,u;l=n,c=function(){var l=Ou(o[r],n),c=!1;l.subscribe(PQ(t,function(n){a[r]=n,!c&&(c=!0,s--),s||t.next(e(a.slice()))},function(){--i||t.complete()}))},u=t,l?Oo(u,l,c):c()},c=0;c<r;c++)l(c)},i=t,r?Oo(i,r,a):a()}));return a?l.pipe(P$(function(e){return Hr(e)?a.apply(void 0,PT([],PO(e))):a(e)})):l}function Ha(e,t,r){var n=Pk(e)||t||r?{next:e,error:t,complete:r}:e;return n?PJ(function(e,t){null===(r=n.subscribe)||void 0===r||r.call(n);var r,a=!0;e.subscribe(PQ(t,function(e){var r;null===(r=n.next)||void 0===r||r.call(n,e),t.next(e)},function(){var e;a=!1,null===(e=n.complete)||void 0===e||e.call(n),t.complete()},function(e){var r;a=!1,null===(r=n.error)||void 0===r||r.call(n,e),t.error(e)},function(){var e,t;a&&(null===(e=n.unsubscribe)||void 0===e||e.call(n)),null===(t=n.finalize)||void 0===t||t.call(n)}))}):P8}var Hi=function(e,t){return e.push(t),e};function Ho(){return PJ(function(e,t){(function(e,t){var r;return PJ((r=arguments.length>=2,function(n,a){var i=r,o=t,s=0;n.subscribe(PQ(a,function(t){var r=s++;o=i?e(o,t,r):(i=!0,t)},function(){i&&a.next(o),a.complete()}))}))})(Hi,[])(e).subscribe(t)})}/**
 * @name lazyMethod
 * @description
 * Creates a lazy, on-demand getter for the specific value. Upon get the value will be evaluated.
 */function Hs(e,t,r,n,a=0){let i;let o=n?n(t,a):t.toString();Object.defineProperty(e,o,{// This allows for re-configuration with the embedded defineProperty below
// and ensures that on tested browsers and Node, it _will_ be redefined
// and thus short-circuited for future access
configurable:!0,enumerable:!0,// Use a function here, we don't want to capture the outer this, i.e.
// don't use arrow functions in this context since we have a this inside
get:function(){// This check should _always_ be false and unneeded, since we override
// with a value below ... however we ensure we are quire vigilant against
// all environment failures, so we are rather be safe than sorry
if(void 0===i){i=r(t,a,this);try{// re-define the property as a value, next time around this
// getter will only return the computed value
Object.defineProperty(this,o,{value:i})}catch{// ignore any errors, since this _should_ not happen due to
// the "configurable" property above. But if it ever does
// from here-on we will be the cached value the next time
// around (with a very slight dip in performance)
}}return i}})}var Hl={},Hc={};/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */function Hu(e){return"function"==typeof e}/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */function Hd(e){// here we defer the instanceof check which is actually slightly
// slower than just checking the constrctor (direct instances)
return(e&&e.constructor)===Uint8Array||e instanceof Uint8Array}r(Hc,"accountId",()=>RI);const Hf=/^0x[\da-fA-F]+$/,Hp=/^[\da-fA-F]+$/;function Hh(e,t=-1,r){return"string"==typeof e&&("0x"===e||Hf.test(e))&&(-1===t?r||e.length%2==0:e.length===2+Math.ceil(t/4))}const Hb="0123456789abcdef",Hy=new Uint8Array(256),Hm=new Uint8Array(65536);for(let e=0,t=Hb.length;e<t;e++)Hy[0|Hb[e].charCodeAt(0)]=0|e,e>9&&(Hy[0|Hb[e].toUpperCase().charCodeAt(0)]=0|e);for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)Hm[t|r]=Hy[e]<<4|Hy[r]}const Hg="function"==typeof sh&&"function"==typeof sh.asIntN,Hv="function"==typeof o9.Buffer&&"function"==typeof o9.Buffer.isBuffer;o9.process;const Hx=new o8.TextEncoder;function Hw(e){return e?Hx.encode(e.toString()):new Uint8Array}function HP(e){return Hd(e)?Hv&&e&&Hu(e.readDoubleLE)&&o9.Buffer.isBuffer(e)?new Uint8Array(e):e:Hh(e)?function(e,t=-1){if(!e)return new Uint8Array;let r=e.startsWith("0x")?2:0,n=Math.ceil((e.length-r)/2),a=Math.ceil(-1===t?n:t/8),i=new Uint8Array(a),o=a>n?a-n:0;for(let t=o;t<a;t++,r+=2)// HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
// same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
// also the faster operation by at least 2x with the character map above
i[t]=Hm[e.charCodeAt(r)<<8|e.charCodeAt(r+1)];return i}(e):Array.isArray(e)?new Uint8Array(e):Hw(e)}const HO={chars:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",coder:sf,ipfs:"z",type:"base58"},HT=function({chars:e,ipfs:t,type:r,withPadding:n}){return(a,i)=>{if("string"!=typeof a)throw Error(`Expected ${r} string input`);if(t&&i&&!a.startsWith(t))throw Error(`Expected ipfs-compatible ${r} to start with '${t}'`);for(let t=i?1:0,o=a.length;t<o;t++)if(e.includes(a[t]));else if(n&&"="===a[t]){if(t===o-1);else if("="===a[t+1]);else throw Error(`Invalid ${r} padding sequence "${a[t]}${a[t+1]}" at index ${t}`)}else throw Error(`Invalid ${r} character "${a[t]}" (0x${a.charCodeAt(t).toString(16)}) at index ${t}`);return!0}}(HO),Hz=function({coder:e,ipfs:t},r){return(n,a)=>(r(n,a),e.decode(t&&a?n.substring(1):n))}(HO,HT);function Hk(...e){let t=e.length,r=Array(t),n=0;for(let a=0;a<t;a++)r[a]=HP(e[a]),n+=r[a].length;return function(e,t=0){let r=e.length,n=0;if(!t)for(let n=0;n<r;n++)t+=e[n].length;let a=new Uint8Array(t);for(let t=0;t<r;t++)a.set(e[t],n),n+=e[t].length;return a}(r,n)}const HL=new lw.TextDecoder("utf-8");function HE(e){return e?HL.decode(e):""}var HN={};Object.defineProperty(HN,"__esModule",{value:!0}),HN.getRandomValues=HN.crypto=HN.packageInfo=void 0;var HS={},HM="node_modules/@kiltprotocol/core/node_modules/@polkadot/api-derive/node_modules/@polkadot/x-randomvalues/cjs";Object.defineProperty(HS,"__esModule",{value:!0}),HS.packageInfo=void 0,HS.packageInfo={name:"@polkadot/x-randomvalues",path:"string"==typeof HM?HM:"auto",type:"cjs",version:"12.6.2"},Object.defineProperty(HN,"packageInfo",{enumerable:!0,get:function(){return HS.packageInfo}}),HN.crypto=o9.crypto,HN.getRandomValues=function(e){return HN.crypto.getRandomValues(e)};const Hj={getRandomValues:HN.getRandomValues},HH={crypto:Hj};class HR{__internal__bridge;constructor(e){this.__internal__bridge=e}/** @internal */abort=()=>{throw Error("abort")};/** @internal */__wbindgen_is_undefined=e=>void 0===this.__internal__bridge.getObject(e);/** @internal */__wbindgen_throw=(e,t)=>{throw Error(this.__internal__bridge.getString(e,t))};/** @internal */__wbg_self_1b7a39e3a92c949c=()=>this.__internal__bridge.addObject(HH);/** @internal */__wbg_require_604837428532a733=(e,t)=>{throw Error(`Unable to require ${this.__internal__bridge.getString(e,t)}`)};/** @internal */__wbg_crypto_968f1772287e2df0=e=>this.__internal__bridge.addObject(Hj);/** @internal */__wbg_getRandomValues_a3d34b4fee3c2869=e=>this.__internal__bridge.addObject(Hj.getRandomValues);/** @internal */__wbg_getRandomValues_f5e14ab7ac8e995d=(e,t,r)=>{Hj.getRandomValues(this.__internal__bridge.getU8a(t,r))};/** @internal */__wbg_randomFillSync_d5bd2d655fdf256a=(e,t,r)=>{throw Error("randomFillsync is not available");// getObject(idx).randomFillSync(getU8a(ptr, len));
};/** @internal */__wbindgen_object_drop_ref=e=>{this.__internal__bridge.takeObject(e)}}var HI={};Object.defineProperty(HI,"__esModule",{value:!0}),HI.createWasm=HI.packageInfo=void 0;const HB="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",HV=Array(256);for(let e=0,t=HB.length;e<t;e++)HV[HB.charCodeAt(e)]=e;const HX=Uint8Array,HU=Uint16Array,HA=Uint32Array,HD=new HX([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),HC=new HX([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,/* unused */0,0,/* impossible */0]),HF=new HX([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,/* unused */0,0]),HZ=(e,t)=>{let r=new HU(31);for(let n=0;n<31;++n)r[n]=t+=1<<e[n-1];// numbers here are at max 18 bits
let n=new HA(r[30]);for(let e=1;e<30;++e)for(let t=r[e];t<r[e+1];++t)n[t]=t-r[e]<<5|e;return[r,n]},[Hq,HG]=HZ(HC,2);Hq[28]=258,HG[258]=28;const[HW]=HZ(HF,0),HY=new HU(32768);for(let e=0;e<32768;++e){// reverse table algorithm from SO
let t=(43690&e)>>>1|(21845&e)<<1;t=(61680&(t=(52428&t)>>>2|(13107&t)<<2))>>>4|(3855&t)<<4,HY[e]=((65280&t)>>>8|(255&t)<<8)>>>1}const HK=(e,t,r)=>{let n;let a=e.length,i=0,o=new HU(t);// length of cd must be 288 (total # of codes)
for(;i<a;++i)e[i]&&++o[e[i]-1];// u16 "map": index -> minimum code for bit length = index
let s=new HU(t);for(i=1;i<t;++i)s[i]=s[i-1]+o[i-1]<<1;if(r){// u16 "map": index -> number of actual bits, symbol for code
n=new HU(1<<t);// bits to remove for reverser
let r=15-t;for(i=0;i<a;++i)if(e[i]){// num encoding both symbol and bits read
let a=i<<4|e[i],o=t-e[i],l=s[e[i]-1]++<<o;// m is end value
for(let e=l|(1<<o)-1;l<=e;++l)n[HY[l]>>r]=a}}else for(i=0,n=new HU(a);i<a;++i)e[i]&&(n[i]=HY[s[e[i]-1]++]>>15-e[i]);return n},HJ=new HX(288);for(let e=0;e<144;++e)HJ[e]=8;for(let e=144;e<256;++e)HJ[e]=9;for(let e=256;e<280;++e)HJ[e]=7;for(let e=280;e<288;++e)HJ[e]=8;const HQ=new HX(32);for(let e=0;e<32;++e)HQ[e]=5;const H_=HK(HJ,9,1),H$=HK(HQ,5,1),H0=(e,t,r)=>{let n=t>>>3;return(e[n]|e[n+1]<<8)>>>(7&t)&r},H1=(e,t)=>{let r=t>>>3;return(e[r]|e[r+1]<<8|e[r+2]<<16)>>>(7&t)},H2=e=>(e>>>3)+(7&e&&1),H5=(e,t,r)=>{(null==t||t<0)&&(t=0),(null==r||r>e.length)&&(r=e.length);// can't use .constructor in case user-supplied
let n=new(e instanceof HU?HU:e instanceof HA?HA:HX)(r-t);return n.set(e.subarray(t,r)),n},H3=e=>{let t=e[0];for(let r=1,n=e.length;r<n;++r)e[r]>t&&(t=e[r]);return t},H8=(k=function(e,t){let r=0,n=0,a=-1;for(let i=0,o=t.length-1;a!==o;i++)// each character represents 6 bits
r=r<<6|HV[e.charCodeAt(i)],(n+=6)>=8&&(t[++a]=r>>>(n-=8)&255);return t}("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",new Uint8Array(171008)),L=new Uint8Array(339468),((e,t,r)=>{let n=!r||r.i;r||(r={});// source length
let a=e.length,i=!t||!n;// Assumes roughly 33% compression ratio average
t||(t=new HX(3*a));// ensure buffer can fit at least l elements
let o=e=>{let r=t.length;// need to increase size to fit
if(e>r){// Double or set to necessary, whichever is greater
let n=new HX(Math.max(r<<1,e));n.set(t),t=n}},s=r.f||0,l=r.p||0,c=r.b||0,u=r.l,d=r.d,f=r.m,p=r.n;if(s&&!u)return t;// total bits
let h=a<<3;do{if(!u){// BFINAL - this is only 1 when last chunk is next
r.f=s=H0(e,l,1);// type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
let b=H0(e,l+1,3);if(l+=3,b){if(1==b)u=H_,d=H$,f=9,p=5;else if(2==b){//  literal                            lengths
let t=H0(e,l,31)+257,r=H0(e,l+10,15)+4,a=t+H0(e,l+5,31)+1;l+=14;// length+distance tree
let i=new HX(a),o=new HX(19);for(let t=0;t<r;++t)o[HD[t]]=H0(e,l+3*t,7);l+=3*r;// code lengths bits
let s=H3(o),c=(1<<s)-1;if(!n&&l+a*(s+7)>h)break;// code lengths map
let b=HK(o,s,1);for(let t=0;t<a;){let r=b[H0(e,l,c)];// bits read
l+=15&r;// symbol
let n=r>>>4;// code length to copy
if(n<16)i[t++]=n;else{//  copy   count
let r=0,a=0;for(16==n?(a=3+H0(e,l,3),l+=2,r=i[t-1]):17==n?(a=3+H0(e,l,7),l+=3):18==n&&(a=11+H0(e,l,127),l+=7);a--;)i[t++]=r}}//    length tree                 distance tree
let y=i.subarray(0,t),m=i.subarray(t);// max length bits
f=H3(y),// max dist bits
p=H3(m),u=HK(y,f,1),d=HK(m,p,1)}else throw"invalid block type"}else{// go to end of byte boundary
let s=H2(l)+4,u=e[s-4]|e[s-3]<<8,d=s+u;if(d>a){if(n)throw"unexpected EOF";break}i&&o(c+u),// Copy over uncompressed data
t.set(e.subarray(s,d),c),// Get new bitpos, update byte count
r.b=c+=u,r.p=l=d<<3;continue}if(l>h)throw"unexpected EOF"}i&&o(c+131072);let b=(1<<f)-1,y=(1<<p)-1,m=f+p+18;for(;n||l+m<h;){// bits read, code
let r=u[H1(e,l)&b],n=r>>>4;if((l+=15&r)>h)throw"unexpected EOF";if(!r)throw"invalid length/literal";if(n<256)t[c++]=n;else if(256==n){u=void 0;break}else{let r=n-254;// no extra bits needed if less
if(n>264){// index
let t=n-257,a=HC[t];r=H0(e,l,(1<<a)-1)+Hq[t],l+=a}// dist
let a=d[H1(e,l)&y],s=a>>>4;if(!a)throw"invalid distance";l+=15&a;let u=HW[s];if(s>3){let t=HF[s];u+=H1(e,l)&(1<<t)-1,l+=t}if(l>h)throw"unexpected EOF";i&&o(c+131072);let f=c+r;for(;c<f;c+=4)t[c]=t[c-u],t[c+1]=t[c+1-u],t[c+2]=t[c+2-u],t[c+3]=t[c+3-u];c=f}}r.l=u,r.p=l,r.b=c,u&&(s=1,r.m=f,r.d=d,r.n=p)}while(!s)return c==t.length?t:H5(t,0,c)})(((e=>{if((15&e[0])!=8||e[0]>>>4>7||(e[0]<<8|e[1])%31)throw"invalid zlib data";if(32&e[1])throw"invalid zlib data: preset dictionaries not supported"})(k),k.subarray(2,-4)),L));var H9={},H6="node_modules/@kiltprotocol/core/node_modules/@polkadot/api-derive/node_modules/@polkadot/wasm-crypto-init/cjs";Object.defineProperty(H9,"__esModule",{value:!0}),H9.packageInfo=void 0,H9.packageInfo={name:"@polkadot/wasm-crypto-init",path:"string"==typeof H6?H6:"auto",type:"cjs",version:"7.3.2"},Object.defineProperty(HI,"packageInfo",{enumerable:!0,get:function(){return H9.packageInfo}}),/**
 * @name createWasm
 * @description
 * Creates an interface using only WASM
 */HI.createWasm=async e=>{let t={error:null,type:"none",wasm:null};try{if(H8?.length){if("object"!=typeof WebAssembly||"function"!=typeof WebAssembly.instantiate)throw Error("WebAssembly is not available in your environment")}else throw Error("No WebAssembly provided for initialization");let r=await WebAssembly.instantiate(H8,{wbg:e});t.wasm=r.instance.exports,t.type="wasm"}catch(e){// if we have a valid supplied asm.js, return that
t.error=`FATAL: Unable to initialize @polkadot/wasm-crypto:: ${e.message}`,console.error(t.error)}return t};const H4=new class{__internal__createWasm;__internal__heap;__internal__wbg;__internal__cachegetInt32;__internal__cachegetUint8;__internal__heapNext;__internal__wasm;__internal__wasmError;__internal__wasmPromise;__internal__type;constructor(e){this.__internal__createWasm=e,this.__internal__cachegetInt32=null,this.__internal__cachegetUint8=null,this.__internal__heap=Array(32).fill(void 0).concat(void 0,null,!0,!1),this.__internal__heapNext=this.__internal__heap.length,this.__internal__type="none",this.__internal__wasm=null,this.__internal__wasmError=null,this.__internal__wasmPromise=null,this.__internal__wbg={...new HR(this)}}/** @description Returns the init error */get error(){return this.__internal__wasmError}/** @description Returns the init type */get type(){return this.__internal__type}/** @description Returns the created wasm interface */get wasm(){return this.__internal__wasm}/** @description Performs the wasm initialization */async init(e){(!this.__internal__wasmPromise||e)&&(this.__internal__wasmPromise=(e||this.__internal__createWasm)(this.__internal__wbg));let{error:t,type:r,wasm:n}=await this.__internal__wasmPromise;return this.__internal__type=r,this.__internal__wasm=n,this.__internal__wasmError=t,this.__internal__wasm}/**
     * @internal
     * @description Gets an object from the heap
     */getObject(e){return this.__internal__heap[e]}/**
     * @internal
     * @description Removes an object from the heap
     */dropObject(e){e<36||(this.__internal__heap[e]=this.__internal__heapNext,this.__internal__heapNext=e)}/**
     * @internal
     * @description Retrieves and removes an object to the heap
     */takeObject(e){let t=this.getObject(e);return this.dropObject(e),t}/**
     * @internal
     * @description Adds an object to the heap
     */addObject(e){this.__internal__heapNext===this.__internal__heap.length&&this.__internal__heap.push(this.__internal__heap.length+1);let t=this.__internal__heapNext;return this.__internal__heapNext=this.__internal__heap[t],this.__internal__heap[t]=e,t}/**
     * @internal
     * @description Retrieve an Int32 in the WASM interface
     */getInt32(){return(null===this.__internal__cachegetInt32||this.__internal__cachegetInt32.buffer!==this.__internal__wasm.memory.buffer)&&(this.__internal__cachegetInt32=new Int32Array(this.__internal__wasm.memory.buffer)),this.__internal__cachegetInt32}/**
     * @internal
     * @description Retrieve an Uint8Array in the WASM interface
     */getUint8(){return(null===this.__internal__cachegetUint8||this.__internal__cachegetUint8.buffer!==this.__internal__wasm.memory.buffer)&&(this.__internal__cachegetUint8=new Uint8Array(this.__internal__wasm.memory.buffer)),this.__internal__cachegetUint8}/**
     * @internal
     * @description Retrieves an Uint8Array in the WASM interface
     */getU8a(e,t){return this.getUint8().subarray(e/1,e/1+t)}/**
     * @internal
     * @description Retrieves a string in the WASM interface
     */getString(e,t){return HE(this.getU8a(e,t))}/**
     * @internal
     * @description Allocates an Uint8Array in the WASM interface
     */allocU8a(e){let t=this.__internal__wasm.__wbindgen_malloc(1*e.length);return this.getUint8().set(e,t/1),[t,e.length]}/**
     * @internal
     * @description Allocates a string in the WASM interface
     */allocString(e){return this.allocU8a(Hw(e))}/**
     * @internal
     * @description Retrieves an Uint8Array from the WASM interface
     */resultU8a(){let e=this.getInt32()[2],t=this.getInt32()[3],r=this.getU8a(e,t).slice();return this.__internal__wasm.__wbindgen_free(e,1*t),r}/**
     * @internal
     * @description Retrieve a string from the WASM interface
     */resultString(){return HE(this.resultU8a())}}(HI.createWasm),H7=(E=(e,t,r,n)=>(e.ext_blake2b(8,...H4.allocU8a(t),...H4.allocU8a(r),n),H4.resultU8a()),(...e)=>{if(!H4.wasm)throw Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");return E(H4.wasm,...e)}),Re=Array(256),Rt=Array(65536);for(let e=0;e<256;e++)Re[e]=e.toString(16).padStart(2,"0");for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)Rt[t|r]=Re[e]+Re[r]}/** @internal */function Rr(e,t){let r=e.length%2|0,n=e.length-r|0;for(let r=0;r<n;r+=2)t+=Rt[e[r]<<8|e[r+1]];return r&&(t+=Re[0|e[n]]),t}function Rn(e,t=-1,r=!0){// this is not 100% correct sinmce we support isPrefixed = false....
let n=r?"0x":"";if(!e?.length)return n;if(t>0){let r=Math.ceil(t/8);if(e.length>r)return`${Rr(e.subarray(0,r/2),n)}\u{2026}${Rr(e.subarray(e.length-r/2),"")}`}return Rr(e,n)}function Ra(e,t=256,r,n){let a=Math.ceil(t/8),i=HP(e);return Hg&&(n||!H4.wasm)?r?(0,sR.blake2b)(i,{dkLen:a,key:r}):(0,sR.blake2b)(i,{dkLen:a}):H7(i,HP(r),a)}const Ri=Hw("SS58PRE"),Ro={allowedDecodedLengths:[1,2,4,8,32,33],// publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
allowedEncodedLengths:[3,4,6,10,35,36,37,38],allowedPrefix:cC.map(({prefix:e})=>e),prefix:42};function Rs(e,t,r=-1){if(!e)throw Error("Invalid empty address passed");if(Hd(e)||Hh(e))return HP(e);try{let n=Hz(e);if(!Ro.allowedEncodedLengths.includes(n.length))throw Error("Invalid decoded address length");let[a,i,o,s]=function(e){let t=64&e[0]?2:1,r=1===t?e[0]:(63&e[0])<<2|e[1]>>6|(63&e[1])<<8,n=[34+t,35+t].includes(e.length),a=e.length-(n?2:1),i=Ra(Hk(Ri,e.subarray(0,a)),512),o=(128&e[0])==0&&![46,47].includes(e[0])&&(n?e[e.length-2]===i[0]&&e[e.length-1]===i[1]:e[e.length-1]===i[0]);return[o,a,t,r]}(n);if(a||t){if(-1!==r&&r!==s)throw Error(`Expected ss58Format ${r}, received ${s}`)}else throw Error("Invalid decoded address checksum");return n.slice(o,i)}catch(t){throw Error(`Decoding ${e}: ${t.message}`)}}/** @internal */function Rl(e,t){return"bigint"==typeof t?t.toString():t}function Rc(e,t){return JSON.stringify(e,Rl,t)}function Ru(){return"none"}function Rd(e){return PJ(function(t,r){var n,a=null,i=!1;a=t.subscribe(PQ(r,void 0,void 0,function(o){n=Oa(e(o,Rd(e)(t))),a?(a.unsubscribe(),a=null,n.subscribe(r)):i=!0})),i&&(a.unsubscribe(),a=null,n.subscribe(r))})}function Rf(e,t){return e===t}var Rp={now:function(){return(Rp.delegate||Date).now()},delegate:void 0},Rh=function(e){function t(t,r,n){void 0===t&&(t=1/0),void 0===r&&(r=1/0),void 0===n&&(n=Rp);var a=e.call(this)||this;return a._bufferSize=t,a._windowTime=r,a._timestampProvider=n,a._buffer=[],a._infiniteTimeWindow=!0,a._infiniteTimeWindow=r===1/0,a._bufferSize=Math.max(1,t),a._windowTime=Math.max(1,r),a}return Px(t,e),t.prototype.next=function(t){var r=this.isStopped,n=this._buffer,a=this._infiniteTimeWindow,i=this._timestampProvider,o=this._windowTime;!r&&(n.push(t),a||n.push(i.now()+o)),this._trimBuffer(),e.prototype.next.call(this,t)},t.prototype._subscribe=function(e){this._throwIfClosed(),this._trimBuffer();for(var t=this._innerSubscribe(e),r=this._infiniteTimeWindow,n=this._buffer.slice(),a=0;a<n.length&&!e.closed;a+=r?1:2)e.next(n[a]);return this._checkFinalizedStatuses(e),t},t.prototype._trimBuffer=function(){var e=this._bufferSize,t=this._timestampProvider,r=this._buffer,n=this._infiniteTimeWindow,a=(n?1:2)*e;if(e<1/0&&a<r.length&&r.splice(0,r.length-a),!n){for(var i=t.now(),o=0,s=1;s<r.length&&r[s]<=i;s+=2)o=s;o&&r.splice(0,o+1)}},t}(j8);function Rb(){return PJ(function(e,t){var r=null;e._refCount++;var n=PQ(t,void 0,void 0,void 0,function(){if(!e||e._refCount<=0||0<--e._refCount){r=null;return}var n=e._connection,a=r;r=null,n&&(!a||n===a)&&n.unsubscribe(),t.unsubscribe()});e.subscribe(n),n.closed||(r=e.connect())})}var Ry=function(e){function t(t,r){var n=e.call(this)||this;return n.source=t,n.subjectFactory=r,n._subject=null,n._refCount=0,n._connection=null,PK(t)&&(n.lift=t.lift),n}return Px(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return(!e||e.isStopped)&&(this._subject=this.subjectFactory()),this._subject},t.prototype._teardown=function(){this._refCount=0;var e=this._connection;this._subject=this._connection=null,null==e||e.unsubscribe()},t.prototype.connect=function(){var e=this,t=this._connection;if(!t){t=this._connection=new PN;var r=this.getSubject();t.add(this.source.subscribe(PQ(r,void 0,function(){e._teardown(),r.complete()},function(t){e._teardown(),r.error(t)},function(){return e._teardown()}))),t.closed&&(this._connection=null,t=PN.EMPTY)}return t},t.prototype.refCount=function(){return Rb()(this)},t}(P9),Rm=function(e){function t(t,r){return e.call(this)||this}return Px(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(PN),Rg={setInterval:function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var a=Rg.delegate;return(null==a?void 0:a.setInterval)?a.setInterval.apply(a,PT([e,t],PO(r))):setInterval.apply(void 0,PT([e,t],PO(r)))},clearInterval:function(e){var t=Rg.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},Rv=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n.pending=!1,n}return Px(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r,n=this.id,a=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(a,n,t)),this.pending=!0,this.delay=t,this.id=null!==(r=this.id)&&void 0!==r?r:this.requestAsyncId(a,this.id,t),this},t.prototype.requestAsyncId=function(e,t,r){return void 0===r&&(r=0),Rg.setInterval(e.flush.bind(e,this),r)},t.prototype.recycleAsyncId=function(e,t,r){if(void 0===r&&(r=0),null!=r&&this.delay===r&&!1===this.pending)return t;null!=t&&Rg.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return Error("executing a cancelled action");this.pending=!1;var r=this._execute(e,t);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var r,n=!1;try{this.work(e)}catch(e){n=!0,r=e||Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),r},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,r=this.scheduler,n=r.actions;this.work=this.state=this.scheduler=null,this.pending=!1,PE(n,this),null!=t&&(this.id=this.recycleAsyncId(r,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(Rm),Rx=1,Rw={};function RP(e){return e in Rw&&(delete Rw[e],!0)}var RO={setImmediate:function(e){var t=Rx++;return Rw[t]=!0,I||(I=Promise.resolve()),I.then(function(){return RP(t)&&e()}),t},clearImmediate:function(e){RP(e)}},RT=RO.setImmediate,Rz=RO.clearImmediate,Rk={setImmediate:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=Rk.delegate;return((null==r?void 0:r.setImmediate)||RT).apply(void 0,PT([],PO(e)))},clearImmediate:function(e){var t=Rk.delegate;return((null==t?void 0:t.clearImmediate)||Rz)(e)},delegate:void 0},RL=function(e){function t(t,r){var n=e.call(this,t,r)||this;return n.scheduler=t,n.work=r,n}return Px(t,e),t.prototype.requestAsyncId=function(t,r,n){return(void 0===n&&(n=0),null!==n&&n>0)?e.prototype.requestAsyncId.call(this,t,r,n):(t.actions.push(this),t._scheduled||(t._scheduled=Rk.setImmediate(t.flush.bind(t,void 0))))},t.prototype.recycleAsyncId=function(t,r,n){if(void 0===n&&(n=0),null!=n?n>0:this.delay>0)return e.prototype.recycleAsyncId.call(this,t,r,n);var a,i=t.actions;null!=r&&(null===(a=i[i.length-1])||void 0===a?void 0:a.id)!==r&&(Rk.clearImmediate(r),t._scheduled===r&&(t._scheduled=void 0))},t}(Rv),RE=function(){function e(t,r){void 0===r&&(r=e.now),this.schedulerActionCtor=t,this.now=r}return e.prototype.schedule=function(e,t,r){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(r,t)},e.now=Rp.now,e}(),RN=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Px(t,e),t.prototype.flush=function(e){this._active=!0;var t,r=this._scheduled;this._scheduled=void 0;var n=this.actions;e=e||n.shift();do if(t=e.execute(e.state,e.delay))break;while((e=n[0])&&e.id===r&&n.shift())if(this._active=!1,t){for(;(e=n[0])&&e.id===r&&n.shift();)e.unsubscribe();throw t}},t}(function(e){function t(t,r){void 0===r&&(r=RE.now);var n=e.call(this,t,r)||this;return n.actions=[],n._active=!1,n}return Px(t,e),t.prototype.flush=function(e){var t,r=this.actions;if(this._active){r.push(e);return}this._active=!0;do if(t=e.execute(e.state,e.delay))break;while(e=r.shift())if(this._active=!1,t){for(;e=r.shift();)e.unsubscribe();throw t}},t}(RE)))(RL);function RS(e,t){return Rc({t:e})===Rc({t:t})}function RM(e){throw e}function Rj(){// empty
}function RH({delay:e,skipChange:t=!1,skipTimeout:r=!1}={}){return n=>{var a,i,o,s,l,c,u;return n.pipe(Rd(RM),t?Ha(Rj):(a=RS,void 0===i&&(i=P8),a=null!=a?a:Rf,PJ(function(e,t){var r,n=!0;e.subscribe(PQ(t,function(e){var o=i(e);(n||!a(r,o))&&(n=!1,r=o,t.next(e))}))})),(o=1,l&&!Pk(l)&&(c=l),u=Pk(l)?l:void 0,function(e){var t,r,n;return(t=new Rh(1,void 0,c),r=u,n=Pk(t)?t:function(){return t},Pk(r)?PJ(function(e,t){var a=n();Oa(r(new P9(function(e){return a.subscribe(e)}))).subscribe(t),t.add(e.subscribe(a))}):function(e){return new Ry(e,n)})(e)}),r?Rb():function(e=1750){return t=>{// state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected
let[r,n,a,i]=[0,0,PN.EMPTY,PN.EMPTY];return new P9(o=>(t.subscribe(o),0==n++&&(1===r?i.unsubscribe():a=t.connect(),r=3),()=>{0==--n&&(2===r?(r=0,i.unsubscribe()):(// state === 3
    r=1,i=RN.schedule(()=>{r=0,a.unsubscribe()},e)))}))}}(e))}}function RR(e,t){let r=function(e,{getInstanceId:t=Ru}={}){let r={},n=(...n)=>{let a=Rc(n),i=t();return r[i]||(r[i]={}),void 0===r[i][a]&&(r[i][a]=e(...n)),r[i][a]};return n.unmemoize=(...e)=>{let n=Rc(e),a=t();r[a]?.[n]!==void 0&&delete r[a][n]},n}((...e)=>new P9(n=>{let a=t(...e).subscribe(n);return()=>{r.unmemoize(...e),a.unsubscribe()}}).pipe(RH()),{getInstanceId:()=>e});return r}function RI(e,t){return RR(e,e=>{let r=Hd(e)?e:Rs((e||"").toString());if(r.length>8)return Od(t.registry.createType("AccountId",r));let n=t.registry.createType("AccountIndex",r);return t.derive.accounts.indexToId(n.toString()).pipe(P$(e=>(!function(e,t){if(!e)throw Error(Hu(t)?t():t)}(null!=e,"Unable to retrieve accountId"),e)))})}var RB={};function RV(e,t){return RR(e,()=>{let e=[void 0,[],[],[],void 0],r=[(t.query.elections||t.query.phragmenElection||t.query.electionsPhragmen)?.members,t.query.council?.members,t.query.technicalCommittee?.members,t.query.society?.members,t.query.sudo?.key],n=r.filter(e=>e);return n.length?t.queryMulti(n).pipe(P$(t=>{let n=-1;for(let a=0,i=r.length;a<i;a++)Hu(r[a])&&(e[a]=t[++n]);return e})):Od(e)})}function RX(e,t){return RR(e,e=>t.derive.accounts._flags().pipe(P$(t=>(function(e,[t,r,n,a,i]){let o=e?.toString(),s=e=>e.toString()===o;return{isCouncil:(t?.map(e=>Array.isArray(e)?e[0]:e.who)||r||[]).some(s),isSociety:(a||[]).some(s),isSudo:i?.toString()===o,isTechCommittee:(n||[]).some(s)}})(e,t))))}r(RB,"_flags",()=>RV),r(RB,"flags",()=>RX);var RU={};function RA(e,t){return RR(e,e=>{try{// yes, this can fail, don't care too much, catch will catch it
let r=Hd(e)?e:Rs((e||"").toString());if(r.length>8){let e=t.registry.createType("AccountId",r);return t.derive.accounts.idToIndex(e).pipe(P$(t=>[e,t]))}let n=t.registry.createType("AccountIndex",r);return t.derive.accounts.indexToId(n.toString()).pipe(P$(e=>[e,n]))}catch{return Od([void 0,void 0])}})}r(RU,"idAndIndex",()=>RA);var RD={};function RC(e){return e.pipe(P$(([e])=>e))}function RF(e){return(t,r)=>RR(t,(...t)=>RC(e(r,...t)))}r(RD,"_identity",()=>RG),r(RD,"identity",()=>RW),r(RD,"hasIdentity",()=>RY),r(RD,"hasIdentityMulti",()=>RK);const RZ={toHex:()=>void 0};function Rq(e){return e.isRaw?HE(e.asRaw.toU8a(!0)):e.isNone?void 0:e.toHex()}function RG(e,t){return RR(e,e=>e&&t.query.identity?.identityOf?Hn([t.query.identity.identityOf(e),t.query.identity.superOf(e)]):Od([void 0,void 0]))}function RW(e,t){return RR(e,e=>t.derive.accounts._identity(e).pipe(Of(([e,r])=>(function(e,t,r){if(t?.isSome)return Od([t,void 0]);if(r?.isSome){let t=r.unwrap();return Hn([e.derive.accounts._identity(t[0]).pipe(P$(([e])=>e)),Od(t)])}// nothing of value returned
        return Od([void 0,void 0])})(t,e,r)),P$(([e,t])=>(function(e,t){if(!e?.isSome)return{judgements:[]};let{info:r,judgements:n}=e.unwrap(),a=Rq(r.display);return{display:t&&Rq(t[1])||a,displayParent:t&&a,email:Rq(r.email),image:Rq(r.image),judgements:n,legal:Rq(r.legal),other:r.additional.reduce((e,[t,r])=>{let n=Rq(t),a=Rq(r);return n&&a&&(e[n]=a),e},{}),parent:t?.[0],pgp:r.pgpFingerprint.unwrapOr(RZ).toHex(),riot:Rq(r.riot),twitter:Rq(r.twitter),web:Rq(r.web)}})(e,t))))}const RY=RF((e,t)=>e.derive.accounts.hasIdentityMulti([t]));function RK(e,t){return RR(e,e=>t.query.identity?.identityOf?Hn([t.query.identity.identityOf.multi(e),t.query.identity.superOf.multi(e)]).pipe(P$(([e,t])=>e.map((e,r)=>{let n;let a=t[r],i=a&&a.isSome?a.unwrap()[0].toString():void 0;if(e&&e.isSome){let t=Rq(e.unwrap().info.display);t&&!Hh(t)&&(n=t)}return{display:n,hasIdentity:!!(n||i),parentId:i}}))):Od(e.map(()=>({hasIdentity:!1}))))}var RJ={};function RQ(e,t){return RR(e,e=>t.derive.accounts.indexes().pipe(P$(t=>t[e.toString()])))}r(RJ,"idToIndex",()=>RQ);var R_={};function R$(e,t,r){return(void 0===r&&(r=1/0),Pk(t))?R$(function(r,n){return P$(function(e,a){return t(r,e,n,a)})(Oa(e(r,n)))},r):("number"==typeof t&&(r=t),PJ(function(t,n){var a,i,o,s,l,c,u,d,f,p,h,b;return a=r,c=[],u=0,d=0,f=!1,p=function(){!f||c.length||u||n.complete()},h=function(e){return u<a?b(e):c.push(e)},b=function(t){o&&n.next(t),u++;var r=!1;Oa(e(t,d++)).subscribe(PQ(n,function(e){null==i||i(e),o?h(e):n.next(e)},function(){r=!0},void 0,function(){if(r)try{for(u--;c.length&&u<a;)!function(){var e=c.shift();s?Oo(n,s,function(){return b(e)}):b(e)}();p()}catch(e){n.error(e)}}))},t.subscribe(PQ(n,h,function(){f=!0,p()})),function(){null==l||l()}}))}function R0(){for(var e,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return(void 0===(e=1)&&(e=1/0),R$(P8,e))(Ou(t,P1(t)))}function R1(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=P1(e);return PJ(function(t,n){(r?R0(e,t,r):R0(e,t)).subscribe(n)})}r(R_,"indexes",()=>R5);let R2=null;function R5(e,t){return RR(e,()=>R2?Od(R2):(t.query.indices?t.query.indices.accounts.entries().pipe(P$(e=>e.reduce((e,[r,n])=>(n.isSome&&(e[n.unwrap()[0].toString()]=t.registry.createType("AccountIndex",r.args[0])),e),{}))).pipe(R1({})):Od({})).pipe(P$(e=>(R2=e,e))))}var R3={};function R8(e,t){return RR(e,e=>t.query.indices?t.query.indices.accounts(e).pipe(P$(e=>e.unwrapOr([])[0])):Od(void 0))}r(R3,"indexToId",()=>R8);var R9={};function R6(e,t){return RR(e,e=>t.derive.accounts.idAndIndex(e).pipe(Of(([e,r])=>Hn([Od({accountId:e,accountIndex:r}),t.derive.accounts.identity(e),(e&&t.query.nicks?.nameOf?t.query.nicks.nameOf(e):Od(void 0)).pipe(P$(e=>e?.isSome?HE(e.unwrap()[0]).substring(0,t.consts.nicks.maxLength.toNumber()):void 0))])),P$(([{accountId:e,accountIndex:t},r,n])=>({accountId:e,accountIndex:t,identity:r,nickname:n}))))}r(R9,"info",()=>R6),V(Hl,Hc),V(Hl,RB),V(Hl,RU),V(Hl,RD),V(Hl,RJ),V(Hl,R_),V(Hl,R3),V(Hl,R9);var R4={};function R7(e,t){return(r,n)=>RR(r,t(function(e,t){let r=e.registry.getModuleInstances(e.runtimeVersion.specName,t),n=r?.length?r[0]:t;return e.query[n]}(n,e),n,r))}function Ie(e,t){return r=>R7(r,r=>()=>Hu(r?.[e])?r[e]():Od(t))}function It(e,t,r){return(Hu(t?.proposals)&&r.length?Hn([Od(r),// this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
// however we have had cases on Edgeware where the indices have moved around after an
// upgrade, which results in invalid on-chain data
t.proposalOf.multi(r).pipe(Rd(()=>Od(r.map(()=>null)))),t.voting.multi(r)]):Od([[],[],[]])).pipe(P$(t=>(function(e,[t,r,n]){return r.map((r,a)=>({hash:e.registry.createType("Hash",t[a]),proposal:r&&r.isSome?r.unwrap():null,votes:n[a].unwrapOr(null)}))})(e,t)))}function Ir(e){return R7(e,e=>()=>Od(Hu(e?.proposals)))}function In(e){return R7(e,(t,r)=>()=>r.derive[e].proposalHashes().pipe(Of(e=>It(r,t,e))))}function Ia(e){return R7(e,(e,t)=>r=>Hu(e?.proposals)?RC(It(t,e,[r])):Od(null))}r(R4,"members",()=>Ic),r(R4,"hasProposals",()=>Iu),r(R4,"proposal",()=>Id),r(R4,"proposalCount",()=>If),r(R4,"proposalHashes",()=>Ip),r(R4,"proposals",()=>Ih),r(R4,"prime",()=>Ib);const Ii=Ie("proposalCount",null),Io=Ie("proposals",[]),Is=Ie("members",[]);function Il(e){return R7(e,e=>()=>Hu(e?.prime)?e.prime().pipe(P$(e=>e.unwrapOr(null))):Od(null))}const Ic=Is("allianceMotion"),Iu=Ir("allianceMotion"),Id=Ia("allianceMotion"),If=Ii("allianceMotion"),Ip=Io("allianceMotion"),Ih=In("allianceMotion"),Ib=Il("allianceMotion");var Iy={},Im={};r(Im,"_getIds",()=>IS),r(Im,"all",()=>IM),r(Im,"get",()=>Ij);var oI=A("dEXSZ");const Ig=/*#__PURE__*/new/*@__PURE__*/(n(oI))(0),Iv=/*#__PURE__*/new/*@__PURE__*/(n(oI))(1),Ix=/*#__PURE__*/new/*@__PURE__*/(n(oI))(1e9);Ix.mul(Ix);const Iw=/*#__PURE__*/new/*@__PURE__*/(n(oI))(Number.MAX_SAFE_INTEGER),IP=/*#__PURE__*/new/*@__PURE__*/(n(oI))(94906265);var oI=A("dEXSZ");/**
 * @name isObject
 * @summary Tests for an `object`.
 * @description
 * Checks to see if the input value is a JavaScript object.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isObject } from '@polkadot/util';
 *
 * isObject({}); // => true
 * isObject('something'); // => false
 * ```
 */function IO(e){return!!e&&"object"==typeof e}function IT(...e){return t=>(IO(t)||Hu(t))&&e.every(e=>Hu(t[e]))}const Iz=IT("toBigInt"),Ik=IT("toBn");var oI=A("dEXSZ");function IL(e){return e?/*@__PURE__*/n(oI).isBN(e)?e:Hh(e)?function(e,{isLe:t=!1,isNegative:r=!1}={}){if(!e||"0x"===e)return new/*@__PURE__*/(n(oI))(0);let a=function(e){if(!e||"0x"===e)return"";if(Hf.test(e))return e.substring(2);if(Hp.test(e))return e;throw Error(`Expected hex value to convert, found '${e}'`)}(e),i=new/*@__PURE__*/(n(oI))(a,16,t?"le":"be");// fromTwos takes as parameter the number of bits, which is the hex length
// multiplied by 4 (2 bytes being 8 bits)
return r?i.fromTwos(4*a.length):i}(e.toString()):"bigint"==typeof e?new/*@__PURE__*/(n(oI))(e.toString()):Ik(e)?e.toBn():new/*@__PURE__*/(n(oI))(Iz(e)?e.toBigInt().toString():e):new/*@__PURE__*/(n(oI))(0)}/**
 * @name objectSpread
 * @summary Concats all sources into the destination
 */function IE(e,...t){for(let r=0,n=t.length;r<n;r++){let n=t[r];if(n){if("function"==typeof n.entries)for(let[t,r]of n.entries())e[t]=r;else Object.assign(e,n)}}return e}function IN(e){return e.query.voterList||// previous substrate
e.query.voterBagsList||e.query.bagsList}function IS(e,t){let r=IN(t);return RR(e,e=>{let t=e.map(e=>IL(e));return t.length?r.listBags.multi(t).pipe(P$(e=>(function(e,t){let r=e.map((e,r)=>({bag:t[r].unwrapOr(null),id:e,key:e.toString()})).sort((e,t)=>t.id.cmp(e.id)),n=r.length-1;return r.map((e,t)=>IE(e,{bagLower:t===n?Ig:r[t+1].id,bagUpper:e.id,index:t}))})(t,e))):Od([])})}function IM(e,t){let r=IN(t);return RR(e,()=>r.listBags.keys().pipe(Of(e=>t.derive.bagsList._getIds(e.map(({args:[e]})=>e))),P$(e=>e.filter(({bag:e})=>e))))}function Ij(e,t){return RR(e,e=>t.derive.bagsList._getIds([IL(e)]).pipe(P$(e=>e[0])))}var IH={};function IR(e,t){return RR(e,e=>t.derive.bagsList.listNodes(e.bag).pipe(P$(t=>IE({nodes:t},e))))}function II(e,t){return RR(e,e=>t.derive.bagsList.get(e).pipe(Of(e=>t.derive.bagsList.expand(e))))}r(IH,"expand",()=>IR),r(IH,"getExpanded",()=>II);var IB={};/**
 * @name nextTick
 * @description Defer the operation to the queue for evaluation on the next tick
 */function IV(e,t){// While Promise.resolve().then(...) would defer to the nextTick, this
// actually does not play as nicely in browsers like the setTimeout(...)
// approach. So the safer, though less optimal approach is the one taken here
setTimeout(()=>{Promise.resolve().then(()=>{e()}).catch(e=>{t?t(e):console.error(e)})},0)}function IX(e,t){return RR(e,e=>e&&e.head.isSome?function(e,t){let r=new j6(t),n=IN(e);return r.pipe(Of(e=>n.listNodes(e)),Ha(e=>{IV(()=>{e.isSome&&e.value.next.isSome?r.next(e.unwrap().next.unwrap()):r.complete()})}),Ho(),P$(e=>e.map(e=>e.unwrap())))}(t,e.head.unwrap()):Od([]))}r(IB,"listNodes",()=>IX),V(Iy,Im),V(Iy,IH),V(Iy,IB);var IU={};r(IU,"votingBalance",()=>I1),r(IU,"all",()=>IG);var oI=A("dEXSZ");/** @internal */function IA(e){return(...t)=>{let r=t.length;if(0===r)throw Error("Must provide one or more arguments");let n=t[0];for(let a=1;a<r;a++)e(t[a],n)&&(n=t[a]);return n}}const ID=IA((e,t)=>e.gt(t)),IC=IA((e,t)=>e.lt(t));function IF(e,t,r,a){let{allLocked:i,lockedBalance:o,lockedBreakdown:s,vestingLocked:l}=function(e,t,r){let a=e.registry.createType("Balance"),i=[],o=e.registry.createType("Balance"),s=!1;if(Array.isArray(r)){s=// only get the locks that are valid until passed the current block
(i=r.filter(({until:e})=>!e||t&&e.gt(t))).some(({amount:e})=>e&&e.isMax()),o=e.registry.createType("Balance",i.filter(({id:e})=>e.eq("0x76657374696e6720")).reduce((e,{amount:t})=>e.iadd(t),new/*@__PURE__*/(n(oI))(0)));// get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699
let l=i.filter(({amount:e})=>e&&!e.isMax());l.length&&(a=e.registry.createType("Balance",ID(...l.map(({amount:e})=>e))))}return{allLocked:s,lockedBalance:a,lockedBreakdown:i,vestingLocked:o}}(e,t,a);return IE({},r,{availableBalance:e.registry.createType("Balance",i?0:ID(new/*@__PURE__*/(n(oI))(0),r?.freeBalance?r.freeBalance.sub(o):new/*@__PURE__*/(n(oI))(0))),lockedBalance:o,lockedBreakdown:s,vestingLocked:l})}const IZ=e=>!!e;function Iq(e){return[e.map(e=>!e),e.filter(IZ)]}function IG(e,t){let r=t.registry.getModuleInstances(t.runtimeVersion.specName,"balances");return RR(e,e=>Hn([t.derive.balances.account(e),Hu(t.query.system?.account)||Hu(t.query.balances?.account)?function(e,t,r=["balances"]){let[n,a]=Iq(r.map(t=>e.derive[t]?.customLocks||e.query[t]?.locks)),[i,o]=Iq(r.map(t=>e.query[t]?.reserves));return Hn([e.query.vesting?.vesting?e.query.vesting.vesting(t):Od(e.registry.createType("Option<VestingInfo>")),a.length?Hn(a.map(e=>e(t))):Od([]),o.length?Hn(o.map(e=>e(t))):Od([])]).pipe(P$(([t,r,a])=>{let o=-1,s=-1,l=t.unwrapOr(null);return[l?Array.isArray(l)?l:[l]:null,n.map(t=>t?e.registry.createType("Vec<BalanceLock>"):r[++o]),i.map(t=>t?e.registry.createType("Vec<PalletBalancesReserveData>"):a[++s])]}))}(t,e,r):Hn([t.query.balances.locks(e),t.query.balances.vesting(e)]).pipe(P$(([e,r])=>{let n=null;if(r.isSome){let{offset:e,perBlock:a,startingBlock:i}=r.unwrap();n=t.registry.createType("VestingInfo",{locked:e,perBlock:a,startingBlock:i})}return[n?[n]:null,[e],[]]}))]).pipe(Of(([e,r])=>Hn([Od(e),Od(r),t.derive.chain.bestNumber()])),P$(e=>(function(e,t){let[r,[a,i,o],s]=t,l=IF(e,s,r,i[0]);return IE(l,function(e,t,r){// Calculate the vesting balances,
        //  - offset = balance locked at startingBlock
        //  - perBlock is the unlock amount
        let a=r||[],i=!t.vestingLocked.isZero(),o=a.map(({locked:t,perBlock:r,startingBlock:n})=>e.gt(n)?IC(t,r.mul(e.sub(n))):Ig),s=o.reduce((e,t)=>e.iadd(t),new/*@__PURE__*/(n(oI))(0)),l=a.reduce((e,{locked:t})=>e.iadd(t),new/*@__PURE__*/(n(oI))(0));return{isVesting:i,vestedBalance:s,vestedClaimable:i?t.vestingLocked.sub(l.sub(s)):Ig,vesting:a.map(({locked:e,perBlock:t,startingBlock:r},n)=>({endBlock:e.div(t).iadd(r),locked:e,perBlock:t,startingBlock:r,vested:o[n]})).filter(({locked:e})=>!e.isZero()),vestingTotal:l}}(s,l,a),{accountId:r.accountId,accountNonce:r.accountNonce,additional:i.slice(1).map((t,n)=>IF(e,s,r.additional[n],t)),namedReserves:o})})(t,e))))}var IW={};function IY(e){return e.registry.createType("Balance")}function IK(e,[t,r,n,a]){let i=e.registry.createType("Balance",t.toBn());return{freeBalance:t,frozenFee:n,frozenMisc:a,reservedBalance:r,votingBalance:i}}function IJ(e,t){let r=t=>[t,[[IY(e),IY(e),IY(e),IY(e)]]];return Hu(e.query.system.account)?e.query.system.account(t).pipe(P$(({nonce:e})=>r(e))):Hu(e.query.system.accountNonce)?e.query.system.accountNonce(t).pipe(P$(e=>r(e))):Od(r(e.registry.createType("Index")))}function IQ(e,t,r=["balances"]){let n=r.map(t=>e.derive[t]?.customAccount||e.query[t]?.account).filter(e=>Hu(e)),a=(e,t)=>[e,t.map(({feeFrozen:e,free:t,miscFrozen:r,reserved:n})=>[t,n,e,r])];// NOTE this is for the first case where we do have instances specified
return n.length?Hu(e.query.system.account)?Hn([e.query.system.account(t),...n.map(e=>e(t))]).pipe(P$(([{nonce:e},...t])=>a(e,t))):Hn([e.query.system.accountNonce(t),...n.map(e=>e(t))]).pipe(P$(([e,...t])=>a(e,t))):IJ(e,t)}function I_(e,t){let r=t.registry.getModuleInstances(t.runtimeVersion.specName,"balances"),n=r&&"balances"!==r[0];return RR(e,e=>t.derive.accounts.accountId(e).pipe(Of(e=>e?Hn([Od(e),n?IQ(t,e,r):Hu(t.query.system?.account)?t.query.system.account(e).pipe(P$(e=>{let r=e.nonce?e.data:e[1],n=e.nonce||e[0];if(!r||r.isEmpty)return[n,[[IY(t),IY(t),IY(t),IY(t)]]];let{feeFrozen:a,free:i,miscFrozen:o,reserved:s}=r;return[n,[[i,s,a,o]]]})):Hu(t.query.balances?.account)?IQ(t,e):Hu(t.query.balances?.freeBalance)?Hn([t.query.balances.freeBalance(e),t.query.balances.reservedBalance(e),t.query.system.accountNonce(e)]).pipe(P$(([e,r,n])=>[n,[[e,r,IY(t),IY(t)]]])):IJ(t,e)]):Od([t.registry.createType("AccountId"),[t.registry.createType("Index"),[[IY(t),IY(t),IY(t),IY(t)]]]])),P$(e=>(function(e,[t,[r,[n,...a]]]){return IE({accountId:t,accountNonce:r,additional:a.map(t=>IK(e,t))},IK(e,n))})(t,e))))}r(IW,"account",()=>I_);var I$={};function I0(e,t){return RR(e,e=>e?.length?Hn(e.map(e=>t.derive.balances.account(e))):Od([]))}r(I$,"votingBalances",()=>I0);const I1=IG;V(IU,IW),V(IU,I$);var I2={};function I5([e,t,r,n]){let a=[];return e.forEach((e,i)=>{e.isSome&&a.push({bounty:e.unwrap(),description:t[i].unwrapOrDefault().toUtf8(),index:r[i],proposals:n.filter(e=>e.proposal&&r[i].eq(e.proposal.args[0]))})}),a}function I3(e,t){let r=t.query.bounties||t.query.treasury;return RR(e,()=>r.bounties?Hn([r.bountyCount(),t.query.council?t.query.council.proposalCount():Od(0)]).pipe(Of(()=>Hn([r.bounties.keys(),t.derive.council?t.derive.council.proposals():Od([])])),Of(([e,n])=>{let a=e.map(({args:[e]})=>e);return Hn([r.bounties.multi(a),r.bountyDescriptions.multi(a),Od(a),Od(function(e,t){let r=e.tx.bounties?e.tx.bounties:e.tx.treasury,n=[r.approveBounty,r.closeBounty,r.proposeCurator,r.unassignCurator];return t.filter(e=>n.find(t=>e.proposal&&t.is(e.proposal)))}(t,n))])}),P$(I5)):Od(I5([[],[],[],[]])))}r(I2,"bounties",()=>I3),V({},I2);var I8={},I9={};r(I9,"bestNumber",()=>Bt);const I6=function(...e){return t=>IO(t)&&e.every(e=>Hu(t[e]))}("toBigInt","toBn","toNumber","unwrap");function I4(e){return I6(e.number)?e.number.unwrap():e.number}function I7(e){return(t,r)=>RR(t,()=>e(r).pipe(P$(I4)))}function Be(e,t,r){// For on-chain state, we need to retrieve it as per the start
// of the block being constructed, i.e. session validators would
// be at the point of the block construction, not when all operations
// has been supplied.
//
// However for the first block (no parentHash available), we would
// just use the as-is
return e.queryAt(t.parentHash.isEmpty?r||t.hash:t.parentHash).pipe(Of(e=>/** @internal */(function(e,t){let r=t.session?.validators?t.session.validators():Od(null),{logs:[n]}=e.digest,a=n&&(n.isConsensus&&n.asConsensus[0].isNimbus&&n.asConsensus[1]||n.isPreRuntime&&n.asPreRuntime[0].isNimbus&&n.asPreRuntime[1]);if(a){// use the author mapping pallet, if available (ie: moonbeam, moonriver), to map session (nimbus) key to author (collator/validator) key
    if(t.authorMapping?.mappingWithDeposit)return Hn([Od(e),r,t.authorMapping.mappingWithDeposit(a).pipe(P$(e=>e.unwrapOr({account:null}).account))]);// fall back to session and parachain staking pallets, if available (ie: manta, calamari), to map session (nimbus) key to author (collator) key
    if(t.parachainStaking?.selectedCandidates&&t.session?.nextKeys){let n=a.toHex();return Hn([Od(e),r,t.parachainStaking.selectedCandidates().pipe(R$(e=>Hn([Od(e),t.session.nextKeys.multi(e).pipe(P$(e=>e.findIndex(e=>e.unwrapOrDefault().nimbus.toHex()===n)))])),P$(([e,t])=>-1===t?null:e[t]))])}}// normal operation, non-mapping
    return Hn([Od(e),r,Od(null)])})(t,e)))}const Bt=I7(e=>e.rpc.chain.subscribeNewHeads());var Br={};r(Br,"bestNumberFinalized",()=>Bn);const Bn=I7(e=>e.rpc.chain.subscribeFinalizedHeads());var Ba={};function Bi(e,t){return RR(e,()=>Hn([t.derive.chain.bestNumber(),t.derive.chain.bestNumberFinalized()]).pipe(P$(([e,r])=>t.registry.createType("BlockNumber",e.sub(r)))))}r(Ba,"bestNumberLag",()=>Bi);var Bo={};function Bs(e,t){let r;let[n]=e.logs.filter(e=>e.isConsensus),[a]=e.logs.filter(e=>e.isPreRuntime),[i]=e.logs.filter(e=>e.isSeal);try{// This is critical to be first for BABE (before Consensus)
// If not first, we end up dropping the author at session-end
if(a){let[e,n]=a.asPreRuntime;r=e.extractAuthor(n,t)}if(!r&&n){let[e,a]=n.asConsensus;r=e.extractAuthor(a,t)}// SEAL, still used in e.g. Kulupu for pow
if(!r&&i){let[e,n]=i.asSeal;r=e.extractAuthor(n,t)}}catch{// ignore
}return r}function Bl(e,t){return RR(e,e=>Hn([t.rpc.chain.getBlock(e),t.queryAt(e)]).pipe(Of(([r,n])=>Hn([Od(r),n.system.events(),Be(t,r.block.header,e)])),P$(([e,t,[,r,n]])=>(function(e,t,r,n,a){// an instance of the base extrinsic for us to extend
        let i=e.createClass("SignedBlock");return new class extends i{__internal__author;__internal__events;__internal__extrinsics;constructor(e,t,r,n,a){var i,o;super(e,t),this.__internal__author=a||Bs(this.block.header.digest,n||[]),this.__internal__events=r||[],this.__internal__extrinsics=(i=this.block.extrinsics,o=this.__internal__events,i.map((e,t)=>{let r,n;let a=o.filter(({phase:e})=>e.isApplyExtrinsic&&e.asApplyExtrinsic.eq(t)).map(({event:e})=>("system"===e.section&&("ExtrinsicSuccess"===e.method?n=e.data[0]:"ExtrinsicFailed"===e.method&&(r=e.data[0],n=e.data[1])),e));return{dispatchError:r,dispatchInfo:n,events:a,extrinsic:e}})),this.createdAtHash=t?.createdAtHash}/**
         * @description Convenience method, returns the author for the block
         */get author(){return this.__internal__author}/**
         * @description Convenience method, returns the events associated with the block
         */get events(){return this.__internal__events}/**
         * @description Returns the extrinsics and their events, mapped
         */get extrinsics(){return this.__internal__extrinsics}}(e,t,r,n,a)})(t.registry,e,t,r,n))))}r(Bo,"getBlock",()=>Bl);var Bc={};function Bu(e,t){return RR(e,e=>t.rpc.chain.getBlockHash(e).pipe(Of(e=>t.derive.chain.getBlock(e))))}r(Bc,"getBlockByNumber",()=>Bu);var Bd={};function Bf(e,t,r,n){// an instance of the base extrinsic for us to extend
let a=e.createClass("Header");return new class extends a{__internal__author;constructor(e,t,r,n){super(e,t),this.__internal__author=n||Bs(this.digest,r||[]),this.createdAtHash=t?.createdAtHash}/**
         * @description Convenience method, returns the author for the block
         */get author(){return this.__internal__author}}(e,t,r,n)}function Bp(e,t){return RR(e,e=>t.rpc.chain.getHeader(e).pipe(Of(r=>Be(t,r,e)),P$(([e,t,r])=>Bf((t||e).registry,e,t,r))))}r(Bd,"getHeader",()=>Bp);var Bh={};function Bb(e,t){return RR(e,()=>t.derive.chain.subscribeFinalizedHeads().pipe(Of(e=>t.derive.chain.getBlock(e.createdAtHash||e.hash))))}r(Bh,"subscribeFinalizedBlocks",()=>Bb);var By={};function Bm(e,t){return RR(e,(e,r,n=[])=>t.rpc.chain.getHeader(e).pipe(Of(e=>e.parentHash.eq(r)?Od([e,...n]):t.derive.chain._getHeaderRange(e.parentHash,r,[e,...n]))))}function Bg(e,t){return RR(e,()=>{let e=null;return t.rpc.chain.subscribeFinalizedHeads().pipe(Of(r=>{let n=e,a=r.parentHash;return e=r.createdAtHash=r.hash,null===n||a.eq(n)?Od(r):t.derive.chain._getHeaderRange(a,n,[r]).pipe(Of(e=>Ou(e)))}))})}r(By,"_getHeaderRange",()=>Bm),r(By,"subscribeFinalizedHeads",()=>Bg);var Bv={};function Bx(e,t){return RR(e,()=>t.derive.chain.subscribeNewHeads().pipe(Of(e=>t.derive.chain.getBlock(e.createdAtHash||e.hash))))}r(Bv,"subscribeNewBlocks",()=>Bx);var Bw={};function BP(e,t){return RR(e,()=>t.rpc.chain.subscribeNewHeads().pipe(Of(e=>Be(t,e)),P$(([e,t,r])=>(e.createdAtHash=e.hash,Bf(e.registry,e,t,r)))))}r(Bw,"subscribeNewHeads",()=>BP),V(I8,I9),V(I8,Br),V(I8,Ba),V(I8,Bo),V(I8,Bc),V(I8,Bd),V(I8,Bh),V(I8,By),V(I8,Bv),V(I8,Bw);var BO={};function BT(e,t){return RR(e,()=>Od([// deprecated
    t.consts.contracts.callBaseFee||t.registry.createType("Balance"),t.consts.contracts.contractFee||t.registry.createType("Balance"),t.consts.contracts.creationFee||t.registry.createType("Balance"),t.consts.contracts.transactionBaseFee||t.registry.createType("Balance"),t.consts.contracts.transactionByteFee||t.registry.createType("Balance"),t.consts.contracts.transferFee||t.registry.createType("Balance"),// current
    t.consts.contracts.rentByteFee||t.registry.createType("Balance"),t.consts.contracts.rentDepositOffset||t.registry.createType("Balance"),t.consts.contracts.surchargeReward||t.registry.createType("Balance"),t.consts.contracts.tombstoneDeposit||t.registry.createType("Balance")]).pipe(P$(([e,t,r,n,a,i,o,s,l,c])=>({callBaseFee:e,contractFee:t,creationFee:r,rentByteFee:o,rentDepositOffset:s,surchargeReward:l,tombstoneDeposit:c,transactionBaseFee:n,transactionByteFee:a,transferFee:i}))))}r(BO,"fees",()=>BT),V({},BO);var Bz={};r(Bz,"members",()=>BS),r(Bz,"hasProposals",()=>BM),r(Bz,"proposal",()=>Bj),r(Bz,"proposalCount",()=>BH),r(Bz,"proposalHashes",()=>BR),r(Bz,"proposals",()=>BI),r(Bz,"prime",()=>BB);var Bk={};function BL(e,t){let r=t.query.elections||t.query.phragmenElection||t.query.electionsPhragmen;return RR(e,()=>r?r.stakeOf?Hn([r.stakeOf.entries().pipe(P$(e=>e.map(([{args:[e]},t])=>[e,t]))),r.votesOf.entries().pipe(P$(e=>e.map(([{args:[e]},t])=>[e,t])))]).pipe(P$(([e,r])=>{let n=[];return r.forEach(([e,r])=>{n.push([e,{stake:t.registry.createType("Balance"),votes:r}])}),e.forEach(([e,t])=>{let r=n.find(([t])=>t.eq(e));r?r[1].stake=t:n.push([e,{stake:t,votes:[]}])}),n})):r.voting.entries().pipe(P$(e=>e.map(([{args:[e]},t])=>[e,Array.isArray(t)?{stake:t[0],votes:t[1]}:{stake:t.stake,votes:t.votes}]))):Od([]))}r(Bk,"votes",()=>BL);var BE={};function BN(e,t){return RR(e,e=>t.derive.council.votes().pipe(P$(r=>(r.find(([t])=>t.eq(e))||[null,{stake:t.registry.createType("Balance"),votes:[]}])[1])))}r(BE,"votesOf",()=>BN);const BS=Is("council"),BM=Ir("council"),Bj=Ia("council"),BH=Ii("council"),BR=Io("council"),BI=In("council"),BB=Il("council");V(Bz,Bk),V(Bz,BE);var BV={},BX={};function BU(e,t){return RR(e,e=>t.query.crowdloan.funds(e).pipe(P$(e=>{var t;return e.isSome?Rn(Hk(":child_storage:default:",Ra(Hk("crowdloan",((t=e.unwrap()).fundIndex||t.trieIndex).toU8a())))):null})))}r(BX,"childKey",()=>BU);var BA={};r(BA,"contributions",()=>BZ);var BD=new P9(function(e){return e.complete()});/**
 * @name arrayFlatten
 * @summary Merge T[][] into T[]
 * @description
 * Returns a new array with all arrays merged into one
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayFlatten } from '@polkadot/util';
 *
 * arrayFlatten([[1, 2], [3, 4], [5]]); // [1, 2, 3, 4, 5]
 * ```
 */function BC(e){let t=e.length;// shortcuts for the empty & single-entry case
if(0===t)return[];if(1===t)return e[0];// pre-allocate based on the combined size
let r=0;for(let n=0;n<t;n++)r+=e[n].length;let n=Array(r),a=-1;for(let r=0;r<t;r++){let t=e[r];// instead of pushing, we just set the entries
for(let e=0,r=t.length;e<r;e++)n[++a]=t[e]}return n}function BF(e,t){return t.filter(({event:{data:[,t],method:r,section:n}})=>"crowdloan"===n&&["Contributed","Withdrew"].includes(r)&&t.eq(e)).reduce((e,{event:{data:[t],method:r}})=>("Contributed"===r?e.added.push(t.toHex()):e.removed.push(t.toHex()),e),{added:[],blockHash:t.createdAtHash?.toHex()||"-",removed:[]})}function BZ(e,t){return RR(e,e=>t.derive.crowdloan.childKey(e).pipe(Of(r=>{let n,a;return r?Hn([t.query.system.events().pipe(Of(t=>{let r=t.filter(({event:{data:[t],method:r,section:n}})=>"crowdloan"===n&&["AllRefunded","Dissolved","PartiallyRefunded"].includes(r)&&t.eq(e));return r.length?Od(t.createdAtHash?.toHex()||"-"):BD}),R1("-")).pipe(Of(()=>Hu(t.rpc.childstate.getKeysPaged)?function(e,t){let r=new j6(void 0);return r.pipe(Of(r=>e.rpc.childstate.getKeysPaged(t,"0x",1e3,r)),Ha(e=>{IV(()=>{1e3===e.length?r.next(e[999].toHex()):r.complete()})}),Ho(),P$(e=>BC(e)))}(t,r):t.rpc.childstate.getKeys(r,"0x")),P$(e=>e.map(e=>e.toHex()))),(n=[],a=[],t.query.system.events().pipe(Of(t=>{let r=BF(e,t);return r.added.length||r.removed.length?(n=n.concat(...r.added),a=a.concat(...r.removed),Od({added:n,addedDelta:r.added,blockHash:t.createdAtHash?.toHex()||"-",removed:a,removedDelta:r.removed})):BD}),R1({added:n,addedDelta:[],blockHash:"-",removed:a,removedDelta:[]})))]).pipe(P$(([e,{added:t,blockHash:r,removed:n}])=>{let a={};return e.forEach(e=>{a[e]=!0}),t.forEach(e=>{a[e]=!0}),n.forEach(e=>{delete a[e]}),{blockHash:r,contributorsHex:Object.keys(a)}})):Od({blockHash:"-",contributorsHex:[]})})))}var Bq={};function BG(e,t,r){// We actually would love to use multi-keys https://github.com/paritytech/substrate/issues/9203
return Hn(r.map(r=>e.rpc.childstate.getStorage(t,r))).pipe(P$(t=>t.map(t=>e.registry.createType("Option<StorageData>",t)).map(t=>t.isSome?e.registry.createType("Balance",t.unwrap()):e.registry.createType("Balance")).reduce((e,t,n)=>IE(e,{[r[n]]:t}),{})))}function BW(e,t){return RR(e,(e,r)=>t.derive.crowdloan.childKey(e).pipe(Of(n=>n&&r.length?Hn([BG(t,n,r),t.query.system.events().pipe(Of(a=>{let i=BF(e,a),o=r.filter(e=>i.added.includes(e)||i.removed.includes(e));return o.length?BG(t,n,o):BD}),R1({}))]).pipe(P$(([e,t])=>IE({},e,t))):Od({}))))}r(Bq,"ownContributions",()=>BW),V(BV,BX),V(BV,BA),V(BV,Bq);var BY={},BK={};r(BK,"dispatchQueue",()=>B0);var oI=(A("dEXSZ"),A("dEXSZ"));function BJ(e){let t=IL(e);if(t.isNeg())throw Error("square root of negative numbers is not supported");// https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/
// shortcut <= 2^53 - 1 to use the JS utils
if(t.lte(Iw))return new/*@__PURE__*/(n(oI))(~~Math.sqrt(t.toNumber()));// Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the
// output will be larger than this, we expect this to be a safe start
let r=IP.clone();for(;;){let e=t.div(r).iadd(r).ishrn(1);if(r.eq(e)||r.eq(e.sub(Iv)))return r;r=e}}function BQ(e,t,r,n){for(;;){let a=e.div(t),i=r.div(n);if(a.lt(i))return!0;if(i.lt(a))return!1;let o=e.mod(t),s=r.mod(n);if(s.isZero())return!1;if(o.isZero())return!0;e=n,r=t,t=s,n=o}}function B_(e){return e.isLegacy?e.asLegacy.hash_.toHex():e.isLookup?e.asLookup.hash_.toHex():e.isInline?e.asInline.hash.toHex():"string"==typeof e||e instanceof String?Hh(e)?e:Rn(Hw(e)):Hd(e)?Rn(e):e.toHex()}const B$=Rn(Hw("democrac"));function B0(e,t){return RR(e,()=>Hu(t.query.scheduler?.agenda)?t.derive.democracy.referendumsFinished().pipe(Of(()=>t.query.scheduler.agenda.keys()),Of(e=>{let r=e.map(({args:[e]})=>e);return r.length?Hn([Od(r),// this should simply be api.query.scheduler.agenda.multi,
    // however we have had cases on Darwinia where the indices have moved around after an
    // upgrade, which results in invalid on-chain data
    t.query.scheduler.agenda.multi(r).pipe(Rd(()=>Od(r.map(()=>[]))))]):Od([[],[]])})).pipe(Of(([e,r])=>{let n=[];return e.forEach((e,a)=>{(r[a]||[]).filter(e=>e.isSome).forEach(r=>{let a=r.unwrap();if(a.maybeId.isSome){let r=a.maybeId.unwrap().toHex();if(r.startsWith(B$)){var i;let o=a.call instanceof kh?(i=a.call).isInline||i.isLegacy||i.isLookup?B_(a.call):a.call.isHash?a.call.asHash.toHex():a.call.asValue.args[0].toHex():a.call.args[0].toHex();n.push({at:e,imageHash:o,index:t.registry.createType("(u64, ReferendumIndex)",r)[1]})}}})}),Hn([Od(n),n.length?t.derive.democracy.preimages(n.map(({imageHash:e})=>e)):Od([])])}),P$(([e,t])=>e.map((e,r)=>IE({image:t[r]},e)))):t.query.democracy.dispatchQueue?t.query.democracy.dispatchQueue().pipe(Of(e=>Hn([Od(e),t.derive.democracy.preimages(e.map(([,e])=>e))])),P$(([e,t])=>e.map(([e,r,n],a)=>({at:e,image:t[a],imageHash:B_(r),index:n})))):Od([]))}var B1={};/**
 * @name isUndefined
 * @summary Tests for a `undefined` values.
 * @description
 * Checks to see if the input value is `undefined`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUndefined } from '@polkadot/util';
 *
 * console.log('isUndefined', isUndefined(void(0))); // => true
 * ```
 */function B2(e){return void 0===e}r(B1,"locks",()=>B3);const B5=[0,1,2,4,8,16,32];function B3(e,t){return RR(e,e=>t.query.democracy.votingOf?t.query.democracy.votingOf(e).pipe(Of(e=>e.isDirect?function(e,{votes:t}){return t.length?e.query.democracy.referendumInfoOf.multi(t.map(([e])=>e)).pipe(P$(r=>t.map((e,t)=>[e,r[t].unwrapOr(null)]).filter(e=>!!e[1]&&B2(e[1].end)&&e[0][1].isStandard).map(([t,r])=>(function(e,[t,r],n){let{balance:a,vote:i}=r.asStandard,[o,s]=n.isFinished?function(e,t,{approved:r,end:n}){return[n,r.isTrue&&t.isAye||r.isFalse&&t.isNay?n.add((e.consts.democracy.voteLockingPeriod||e.consts.democracy.enactmentPeriod).muln(B5[t.conviction.index])):Ig]}(e,i,n.asFinished):[Ig,Ig];return{balance:a,isDelegated:!1,isFinished:n.isFinished,referendumEnd:o,referendumId:t,unlockAt:s,vote:i}})(e,t,r)))):Od([])}(t,e.asDirect):e.isDelegating?function(e,{balance:t,conviction:r,target:n}){return e.derive.democracy.locks(n).pipe(P$(n=>n.map(({isFinished:n,referendumEnd:a,referendumId:i,unlockAt:o,vote:s})=>({balance:t,isDelegated:!0,isFinished:n,referendumEnd:a,referendumId:i,unlockAt:o.isZero()?o:a.add((e.consts.democracy.voteLockingPeriod||e.consts.democracy.enactmentPeriod).muln(B5[r.index])),vote:e.registry.createType("Vote",{aye:s.isAye,conviction:r})}))))}(t,e.asDelegating):Od([]))):Od([]))}var B8={};function B9(e,t){return RR(e,()=>t.query.democracy?.nextExternal?t.query.democracy.nextExternal().pipe(Of(e=>(function(e,t){if(t.isNone)return Od(null);let[r,n]=t.unwrap();return e.derive.democracy.preimage(r).pipe(P$(e=>({image:e,imageHash:B_(r),threshold:n})))})(t,e))):Od(null))}r(B8,"nextExternal",()=>B9);var B6={};function B4(e,[t,r,n,a]){let i;try{i=e.registry.createType("Call",t.toU8a(!0))}catch(e){console.error(e)}return{at:a,balance:n,proposal:i,proposer:r}}function B7(e,t){return RR(e,e=>e.length?Hu(t.query.democracy.preimages)?function(e,t){let r=t.map(e=>B_(e));return e.query.democracy.preimages.multi(r).pipe(P$(t=>t.map(t=>(function(e,t){if(!t.isNone){if(t&&!e.query.democracy.dispatchQueue){let r=t.unwrap();if(r.isMissing)return;let{data:n,deposit:a,provider:i,since:o}=r.asAvailable;return B4(e,[n,i,a,o])}return B4(e,t.unwrap())}})(e,t))))}(t,e):Hu(t.query.preimage.preimageFor)?function(e,t){let r=t.map(e=>B_(e)),n=e.registry.lookup.getTypeDef(e.query.preimage.preimageFor.creator.meta.type.asMap.key).type;return e.query.preimage.statusFor.multi(r).pipe(Of(t=>{let a=t.map(e=>e.unwrapOr(null)),i=a.map((e,t)=>e?"H256"===n?r[t]:e.isRequested?[r[t],e.asRequested.len.unwrapOr(0)]:[r[t],e.asUnrequested.len]:null).filter(e=>!!e);return e.query.preimage.preimageFor.multi(i).pipe(P$(t=>{let n=-1;return a.map((e,a)=>e?[r[a],e,t[++n].unwrapOr(null)]:[r[a],null,null]).map(t=>(function(e,[t,r,n]){var a,i;let o;if(!r)return;let[s,l]=r.isUnrequested?(a=r.asUnrequested).ticket||a.deposit:((i=r.asRequested).maybeTicket||i.deposit).unwrapOrDefault();if(n)try{o=e.registry.createType("Call",n.toU8a(!0))}catch(e){console.error(e)}return{at:Ig,balance:l,proposal:o,proposalHash:t,proposer:s}})(e,t))}))}))}(t,e):Od([]):Od([]))}r(B6,"preimages",()=>B7),r(B6,"preimage",()=>Ve);const Ve=RF((e,t)=>e.derive.democracy.preimages([t]));var Vt={};function Vr([e,t,r]){return e.filter(([,,e],t)=>!!r[t]?.isSome&&!e.isEmpty).map(([e,n,a],i)=>{let o=r[i].unwrap();return IE({image:t[i],imageHash:B_(n),index:e,proposer:a},Hu(o[1].mul)?{balance:o[1],seconds:o[0]}:{balance:o[0],seconds:o[1]})})}function Vn(e,t){return RR(e,()=>Hu(t.query.democracy?.publicProps)?t.query.democracy.publicProps().pipe(Of(e=>e.length?Hn([Od(e),t.derive.democracy.preimages(e.map(([,e])=>e)),t.query.democracy.depositOf.multi(e.map(([e])=>e))]):Od([[],[],[]])),P$(Vr)):Od([]))}r(Vt,"proposals",()=>Vn);var Va={};function Vi(e,t){return RR(e,()=>t.query.democracy?.lowestUnbaked?t.queryMulti([t.query.democracy.lowestUnbaked,t.query.democracy.referendumCount]).pipe(P$(([e,t])=>t.gt(e)?[...Array(t.sub(e).toNumber())].map((t,r)=>e.addn(r)):[])):Od([]))}r(Va,"referendumIds",()=>Vi);var Vo={};function Vs(e,t){return RR(e,()=>t.derive.democracy.referendumsActive().pipe(Of(e=>e.length?Hn([Od(e),t.derive.democracy._referendumsVotes(e)]):Od([[],[]])),P$(([e,t])=>e.map((e,r)=>IE({},e,t[r])))))}r(Vo,"referendums",()=>Vs);var Vl={};function Vc(e,t){return RR(e,()=>t.derive.democracy.referendumIds().pipe(Of(e=>e.length?t.derive.democracy.referendumsInfo(e):Od([]))))}r(Vl,"referendumsActive",()=>Vc);var Vu={};function Vd(e,t){return RR(e,()=>t.derive.democracy.referendumIds().pipe(Of(e=>t.query.democracy.referendumInfoOf.multi(e)),P$(e=>e.map(e=>e.unwrapOr(null)).filter(e=>!!e&&e.isFinished).map(e=>e.asFinished))))}r(Vu,"referendumsFinished",()=>Vd);var Vf={};function Vp(e,t){return RR(e,e=>{var r,a;return Hn([t.derive.democracy.sqrtElectorate(),Hu(t.query.democracy.votingOf)?(r=e.index,t.query.democracy.votingOf.entries().pipe(P$(e=>{let n=e.map(([{args:[e]},t])=>[e,t]),a=n.filter(([,e])=>e.isDirect).map(([e,t])=>[e,t.asDirect.votes.filter(([e])=>e.eq(r))]).filter(([,e])=>!!e.length).reduce((e,[t,r])=>r.reduce((e,[,r])=>(r.isStandard&&e.push(IE({accountId:t,isDelegating:!1},r.asStandard)),e),e),[]),i=n.filter(([,e])=>e.isDelegating).map(([e,t])=>[e,t.asDelegating]);return(// add delegations
i.forEach(([e,{balance:r,conviction:n,target:o}])=>{// Are we delegating to a delegator
let s=i.find(([e])=>e.eq(o)),l=a.find(({accountId:e})=>e.eq(s?s[0]:o));// this delegation has a target
l&&a.push({accountId:e,balance:r,isDelegating:!0,vote:t.registry.createType("Vote",{aye:l.vote.isAye,conviction:n})})}),a)}))):(a=e.index,t.query.democracy.votersFor(a).pipe(Of(e=>Hn([Od(e),e.length?t.query.democracy.voteOf.multi(e.map(e=>[a,e])):Od([]),t.derive.balances.votingBalances(e)])),P$(([e,r,n])=>e.map((e,a)=>({accountId:e,balance:n[a].votingBalance||t.registry.createType("Balance"),isDelegating:!1,vote:r[a]||t.registry.createType("Vote")})))))]).pipe(P$(([t,r])=>(function(e,t,r){var a;let i=t.status.tally?function(e,t){let r=[],n=[];return t.forEach(e=>{e.vote.isAye?r.push(e):n.push(e)}),{allAye:r,allNay:n,voteCount:r.length+n.length,voteCountAye:r.length,voteCountNay:n.length,votedAye:e.ayes,votedNay:e.nays,votedTotal:e.turnout}}(t.status.tally,r):r.reduce((e,t)=>{let{balance:r,vote:n}=t,a=0===n.conviction.index,i=r.muln(a?1:n.conviction.index).divn(a?10:1);return n.isAye?(e.allAye.push(t),e.voteCountAye++,e.votedAye.iadd(i)):(e.allNay.push(t),e.voteCountNay++,e.votedNay.iadd(i)),e.voteCount++,e.votedTotal.iadd(i),e},{allAye:[],allNay:[],voteCount:0,voteCountAye:0,voteCountNay:0,votedAye:new/*@__PURE__*/(n(oI))(0),votedNay:new/*@__PURE__*/(n(oI))(0),votedTotal:new/*@__PURE__*/(n(oI))(0)});return IE({},i,{isPassing:(a=t.status.threshold).isSimpleMajority?i.votedAye.gt(i.votedNay):function(e,t,{votedAye:r,votedNay:n,votedTotal:a}){let i=BJ(a);return!i.isZero()&&(e.isSuperMajorityApprove?BQ(n,i,r,t):BQ(n,t,r,i))}(a,e,i),votes:r})})(t,e,r)))})}function Vh(e,t){return RR(e,e=>e.length?Hn(e.map(e=>t.derive.democracy._referendumVotes(e))):Od([]))}function Vb(e,t){return RR(e,(e,r)=>{let n=function(e){if(e.isNone)return null;let t=e.unwrap();return t.proposalHash?t:t.isOngoing?t.asOngoing:null}(r);return n?t.derive.democracy.preimage(n.proposal||n.proposalHash).pipe(P$(r=>({image:r,imageHash:B_(n.proposal||n.proposalHash),index:t.registry.createType("ReferendumIndex",e),status:n}))):Od(null)})}function Vy(e,t){return RR(e,e=>e.length?t.query.democracy.referendumInfoOf.multi(e).pipe(Of(r=>Hn(e.map((e,n)=>t.derive.democracy._referendumInfo(e,r[n])))),P$(e=>e.filter(e=>!!e))):Od([]))}r(Vf,"_referendumVotes",()=>Vp),r(Vf,"_referendumsVotes",()=>Vh),r(Vf,"_referendumInfo",()=>Vb),r(Vf,"referendumsInfo",()=>Vy);var Vm={};function Vg(e,t){return RR(e,()=>t.query.balances.totalIssuance().pipe(P$(BJ)))}r(Vm,"sqrtElectorate",()=>Vg),V(BY,BK),V(BY,B1),V(BY,B8),V(BY,B6),V(BY,Vt),V(BY,Va),V(BY,Vo),V(BY,Vl),V(BY,Vu),V(BY,Vf),V(BY,Vm);var Vv={};function Vx(e){return Array.isArray(e)?e:[e.who,e.stake]}function Vw(e){return Array.isArray(e)?e[0]:e}function VP([,e],[,t]){return t.cmp(e)}function VO(e,t){return RR(e,()=>{let[e,r]=function(e){let[t]=e.registry.getModuleInstances(e.runtimeVersion.specName,"council")||["council"],r=e.query.phragmenElection?"phragmenElection":e.query.electionsPhragmen?"electionsPhragmen":e.query.elections?"elections":null;return[t,r]}(t);return(r?t.queryMulti([t.query[e].members,t.query[r].candidates,t.query[r].members,t.query[r].runnersUp]):Hn([t.query[e].members(),Od([]),Od([]),Od([])])).pipe(P$(([e,n,a,i])=>IE({},r?{candidacyBond:t.consts[r].candidacyBond,desiredRunnersUp:t.consts[r].desiredRunnersUp,desiredSeats:t.consts[r].desiredMembers,termDuration:t.consts[r].termDuration,votingBond:t.consts[r].votingBond,votingBondBase:t.consts[r].votingBondBase,votingBondFactor:t.consts[r].votingBondFactor}:{},{candidateCount:t.registry.createType("u32",n.length),candidates:n.map(Vw),members:a.length?a.map(Vx).sort(VP):e.map(e=>[e,t.registry.createType("Balance")]),runnersUp:i.map(Vx).sort(VP)})))})}r(Vv,"info",()=>VO),V({},Vv);var VT={};function Vz([e,t,r,n]){return t.forEach((t,a)=>{let i=t.toString(),o=n[a],s=!r[a].isEmpty,l=e[i];l&&l.hasMessage===s&&l.blockCount.eq(o)||(e[i]={blockCount:o,hasMessage:s,isOnline:s||o.gt(Ig)})}),e}function Vk(e,t){return RR(e,()=>t.query.imOnline?.receivedHeartbeats?t.derive.staking.overview().pipe(Of(({currentIndex:e,validators:r})=>Hn([Od({}),Od(r),t.query.imOnline.receivedHeartbeats.multi(r.map((t,r)=>[e,r])),t.query.imOnline.authoredBlocks.multi(r.map(t=>[e,t]))])),P$(Vz)):Od({}))}r(VT,"receivedHeartbeats",()=>Vk),V({},VT);var VL={};r(VL,"members",()=>VE),r(VL,"hasProposals",()=>VN),r(VL,"proposal",()=>VS),r(VL,"proposalCount",()=>VM),r(VL,"proposalHashes",()=>Vj),r(VL,"proposals",()=>VH),r(VL,"prime",()=>VR);const VE=Is("membership"),VN=Ir("membership"),VS=Ia("membership"),VM=Ii("membership"),Vj=Io("membership"),VH=In("membership"),VR=Il("membership");var VI={},VB={};function VV(e,t){return!!e.isSome&&e.unwrap().some(e=>e.eq(t))}function VX(e,t){return t.map(t=>{let r=t.find(([t])=>t===e);return r?r[1]:null})}function VU(e,t){return RR(e,e=>t.query.registrar&&t.query.parachains?t.queryMulti([t.query.registrar.active,t.query.registrar.retryQueue,t.query.registrar.selectedThreads,t.query.parachains.didUpdate,[t.query.registrar.paras,e],[t.query.registrar.pendingSwap,e],[t.query.parachains.heads,e],[t.query.parachains.relayDispatchQueue,e]]).pipe(P$(r=>(function(e,[t,r,n,a,i,o,s,l]){return i.isNone?null:{active:function(e,t){let r=t.find(([t])=>t===e);if(r&&r[1].isSome){let[e,t]=r[1].unwrap();return IE({collatorId:e},t.isWithRetries?{isRetriable:!0,retries:t.asWithRetries.toNumber()}:{isRetriable:!1,retries:0})}return null}(e,t),didUpdate:VV(a,e),heads:s,id:e,info:IE({id:e},i.unwrap()),pendingSwapId:o.unwrapOr(null),relayDispatchQueue:l,retryCollators:VX(e,r),selectedCollators:VX(e,n)}})(t.registry.createType("ParaId",e),r))):Od(null))}r(VB,"info",()=>VU);var VA={};function VD([e,t,r,n,a]){return e.map((e,i)=>({didUpdate:VV(t,e),id:e,info:IE({id:e},n[i].unwrapOr(null)),pendingSwapId:a[i].unwrapOr(null),relayDispatchQueueSize:r[i][0].toNumber()}))}function VC(e,t){return RR(e,()=>t.query.registrar?.parachains&&t.query.parachains?t.query.registrar.parachains().pipe(Of(e=>Hn([Od(e),t.query.parachains.didUpdate(),t.query.parachains.relayDispatchQueueSize.multi(e),t.query.registrar.paras.multi(e),t.query.registrar.pendingSwap.multi(e)])),P$(VD)):Od([]))}r(VA,"overview",()=>VC),V(VI,VB),V(VI,VA);var VF={},VZ={};function Vq([e,t,r,n,a]){return{activeEra:t,activeEraStart:r,currentEra:n,currentIndex:e,validatorCount:a}}function VG(e,t){return RR(e,()=>t.query.session?t.query.staking?t.queryMulti([t.query.session.currentIndex,t.query.staking.activeEra,t.query.staking.currentEra,t.query.staking.validatorCount]).pipe(P$(([e,t,r,n])=>{let{index:a,start:i}=t.unwrapOrDefault();return Vq([e,a,i,r.unwrapOrDefault(),n])})):t.query.session.currentIndex().pipe(P$(e=>Vq([e,t.registry.createType("EraIndex"),t.registry.createType("Option<Moment>"),t.registry.createType("EraIndex"),t.registry.createType("u32")]))):Od(Vq([t.registry.createType("SessionIndex",1),t.registry.createType("EraIndex"),t.registry.createType("Option<Moment>"),t.registry.createType("EraIndex"),t.registry.createType("u32")])))}r(VZ,"indexes",()=>VG);var VW={};function VY(e,t){return RR(e,()=>t.derive.session.indexes().pipe(P$(e=>{let r=t.consts?.babe?.epochDuration||t.registry.createType("u64",1),n=t.consts?.staking?.sessionsPerEra||t.registry.createType("SessionIndex",1);return IE({eraLength:t.registry.createType("BlockNumber",n.mul(r)),isEpoch:!!t.query.babe,sessionLength:r,sessionsPerEra:n},e)})))}r(VW,"info",()=>VY);var VK={};function VJ(e){return(t,r)=>RR(t,()=>r.derive.session.progress().pipe(P$(t=>t[e])))}function VQ(e,t){return RR(e,()=>t.query.babe?t.derive.session.info().pipe(Of(e=>Hn([Od(e),// we may have no staking, but have babe (permissioned)
        t.query.staking?.erasStartSessionIndex?t.queryMulti([t.query.babe.currentSlot,t.query.babe.epochIndex,t.query.babe.genesisSlot,[t.query.staking.erasStartSessionIndex,e.activeEra]]):t.queryMulti([t.query.babe.currentSlot,t.query.babe.epochIndex,t.query.babe.genesisSlot])])),P$(([e,[r,n,a,i]])=>[e,[r,n,a,i&&i.isSome?i.unwrap():t.registry.createType("SessionIndex",1)]])).pipe(P$(([e,r])=>(function(e,t,[r,n,a,i]){let o=n.mul(t.sessionLength).iadd(a),s=r.sub(o),l=t.currentIndex.sub(i).imul(t.sessionLength).iadd(s);return IE({eraProgress:e.registry.createType("BlockNumber",l),sessionProgress:e.registry.createType("BlockNumber",s)},t)})(t,e,r))):t.derive.session.info().pipe(P$(e=>IE({eraProgress:t.registry.createType("BlockNumber"),sessionProgress:t.registry.createType("BlockNumber")},e))))}r(VK,"progress",()=>VQ),r(VK,"eraLength",()=>V_),r(VK,"eraProgress",()=>V$),r(VK,"sessionProgress",()=>V0);const V_=/*#__PURE__*/VJ("eraLength"),V$=/*#__PURE__*/VJ("eraProgress"),V0=/*#__PURE__*/VJ("sessionProgress");V(VF,VZ),V(VF,VW),V(VF,VK);var V1={},V2={};function V5(e,t){return RR(e,()=>t.query.society.suspendedCandidates&&t.query.society.candidates.creator.meta.type.isPlain?t.query.society.candidates().pipe(Of(e=>Hn([Od(e),t.query.society.suspendedCandidates.multi(e.map(({who:e})=>e))])),P$(([e,t])=>e.map(({kind:e,value:r,who:n},a)=>({accountId:n,isSuspended:t[a].isSome,kind:e,value:r})))):t.query.society.candidates.entries().pipe(P$(e=>e.filter(([,e])=>e.isSome).map(([{args:[e]},t])=>[e,t.unwrap()])// FIXME We are missing the new fields from the candidate record
        .map(([e,{bid:t,kind:r}])=>({accountId:e,isSuspended:!1,kind:r,value:t})))))}r(V2,"candidates",()=>V5);var V3={};function V8(e,t){return RR(e,()=>Hn([t.query.society.bids(),t.query.society.defender?t.query.society.defender():Od(void 0),t.query.society.founder(),t.query.society.head(),t.query.society.maxMembers?t.query.society.maxMembers():Od(void 0),t.query.society.pot()]).pipe(P$(([e,t,r,n,a,i])=>({bids:e,defender:t?.unwrapOr(void 0),founder:r.unwrapOr(void 0),hasDefender:t?.isSome&&n.isSome&&!n.eq(t)||!1,head:n.unwrapOr(void 0),maxMembers:a,pot:i}))))}r(V3,"info",()=>V8);var V9={};function V6(e,t){return RR(e,e=>t.derive.society._members([e]).pipe(P$(([e])=>e)))}r(V9,"member",()=>V6);var V4={};function V7(e,t){return RR(e,e=>t.query.society.members.creator.meta.type.isMap?Hn([Od(e),t.query.society.members.multi(e),t.query.society.payouts.multi(e),t.query.society.defenderVotes.multi(e),t.query.society.suspendedMembers.multi(e)]).pipe(P$(([e,t,r,n,a])=>e.map((e,i)=>t[i].isSome?{accountId:e,isDefenderVoter:!!n[i].isSome&&n[i].unwrap().approve.isTrue,isSuspended:a[i].isSome,member:t[i].unwrap(),payouts:r[i].payouts}:null).filter(e=>!!e).map(({accountId:e,isDefenderVoter:t,isSuspended:r,member:n,payouts:a})=>({accountId:e,isDefenderVoter:t,isSuspended:r,payouts:a,strikes:n.strikes,vouching:n.vouching.unwrapOr(void 0)})))):Hn([Od(e),t.query.society.payouts.multi(e),t.query.society.strikes.multi(e),t.query.society.defenderVotes.multi(e),t.query.society.suspendedMembers.multi(e),t.query.society.vouching.multi(e)]).pipe(P$(([e,t,r,n,a,i])=>e.map((e,o)=>({accountId:e,isDefenderVoter:n[o].isSome,isSuspended:a[o].isTrue,payouts:t[o],strikes:r[o],vote:n[o].unwrapOr(void 0),vouching:i[o].unwrapOr(void 0)})))))}function Xe(e,t){return RR(e,()=>t.query.society.members.creator.meta.type.isMap?t.query.society.members.keys().pipe(Of(e=>t.derive.society._members(e.map(({args:[e]})=>e)))):t.query.society.members().pipe(Of(e=>t.derive.society._members(e))))}r(V4,"_members",()=>V7),r(V4,"members",()=>Xe),V(V1,V2),V(V1,V3),V(V1,V9),V(V1,V4);var Xt={},Xr={};r(Xr,"accounts",()=>Xa),r(Xr,"account",()=>Xi);var oI=A("dEXSZ");const Xn={withDestination:!0,withLedger:!0,withNominations:!0,withPrefs:!0};function Xa(e,t){return RR(e,(e,r=Xn)=>t.derive.session.info().pipe(Of(a=>Hn([t.derive.staking.keysMulti(e),t.derive.staking.queryMulti(e,r)]).pipe(P$(([e,r])=>r.map((r,i)=>{var o;return IE({},e[i],r,{redeemable:(o=r.stakingLedger,t.registry.createType("Balance",(o?.unlocking||[]).reduce((e,{era:t,value:r})=>t.unwrap().gt(a.currentEra)?e:e.iadd(r.unwrap()),new/*@__PURE__*/(n(oI))(0)))),unlocking:function(e,t,r){let a=Object.entries((t?.unlocking||[]).filter(({era:e})=>e.unwrap().gt(r.activeEra)).reduce((e,{era:t,value:r})=>{let n=t.toString();return e[n]=(e[n]||Ig).add(r.unwrap()),e},{})).map(([t,a])=>({remainingEras:new/*@__PURE__*/(n(oI))(t).isub(r.activeEra),value:e.registry.createType("Balance",a)}));return a.length?a:void 0}(t,r.stakingLedger,a)})}))))))}const Xi=RF((e,t,r)=>e.derive.staking.accounts([t],r));var Xo={};function Xs(e,t){return RR(e,()=>t.derive.session.indexes().pipe(Of(({activeEra:e})=>t.query.staking.erasRewardPoints(e))))}r(Xo,"currentPoints",()=>Xs);var Xl={};r(Xl,"electedInfo",()=>Xu);const Xc={withController:!0,withExposure:!0,withPrefs:!0};function Xu(e,t){return RR(e,(e=Xc)=>t.derive.staking.validators().pipe(Of(({nextElected:r,validators:n})=>t.derive.staking.queryMulti(BC([r,n.filter(e=>!r.find(t=>t.eq(e)))]),e).pipe(P$(e=>({info:e,nextElected:r,validators:n}))))))}var Xd={};r(Xd,"_eraExposure",()=>XO),r(Xd,"eraExposure",()=>XT),r(Xd,"_erasExposure",()=>Xz),r(Xd,"erasExposure",()=>Xk);const Xf={del:()=>void 0,forEach:()=>void 0,get:()=>void 0,set:(e,t)=>t};function Xp(e,r,n){let a=`${e}-${r.toString()}`;return[a,n?void 0:t.get(a)]}function Xh(e,r,n){let a=n?[]:r.map(r=>t.get(`${e}-${r.toString()}`)).filter(e=>!!e);return a}function Xb(e,r,n){return r||t.set(e,n),n}function Xy(e,r,n){return r||n.forEach(r=>t.set(`${e}-${r.era.toString()}`,r)),n}function Xm(e,t,r){return e.map(e=>t.find(({era:t})=>e.eq(t))||r.find(({era:t})=>e.eq(t))).filter(e=>!!e)}function Xg(e,t){return e.filter(e=>!t.some(({era:t})=>e.eq(t)))}function Xv(e){return(t,r)=>RR(t,(t=!1)=>r.derive.staking.erasHistoric(t).pipe(Of(n=>r.derive.staking[e](n,t))))}function Xx(e){return(t,r)=>RR(t,(t,n=!1)=>r.derive.staking.erasHistoric(n).pipe(Of(a=>r.derive.staking[e](t,a,n))))}function Xw(e){return(t,r)=>RR(t,t=>r.derive.staking[e](t,!0))}function XP(e){return(t,r)=>RR(t,(t,n)=>t.length?function(e,t){let r=/**
 * @name arrayChunk
 * @summary Split T[] into T[][] based on the defind size
 * @description
 * Returns a set ao arrays based on the chunksize
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayChunk } from '@polkadot/util';
 *
 * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]
 * ```
 */function(e,t){let r=Math.ceil(e.length/t);// shortcut for the single-split case
        if(1===r)return[e];let n=Array(r);for(let a=0;a<r;a++){let r=a*t;n[a]=e.slice(r,r+t)}return n}(e,14),n=0,a=new j6(r[n]);return a.pipe(Of(t),Ha(()=>{IV(()=>{++n===r.length?a.complete():a.next(r[n])})}),Ho(),P$(BC))}(t,t=>Hn(t.map(t=>r.derive.staking[e](t,n)))):Od([]))}function XO(e,t){return RR(e,(e,r=!1)=>{let[n,a]=Xp("eraExposure",e,r);return a?Od(a):t.query.staking.erasStakersClipped.entries(e).pipe(P$(t=>Xb(n,r,function(e,t){let r={},n={};return t.forEach(([e,t])=>{let a=e.args[1].toString();n[a]=t,t.others.forEach(({who:e},t)=>{let n=e.toString();r[n]=r[n]||[],r[n].push({validatorId:a,validatorIndex:t})})}),{era:e,nominators:r,validators:n}}(e,t))))})}!function(e="",r){var n,a;t=r?(n=`derive:${e}:`,{del:e=>a.del(`${n}${e}`),forEach:(a=r).forEach,get:e=>{let t=`${n}${e}`,r=a.get(t);if(r)return r.x=Date.now(),a.set(t,r),r.v},set:(e,t)=>{a.set(`${n}${e}`,{v:t,x:Date.now()})}}):Xf,r&&function(e){// clear all expired values
let t=Date.now(),r=[];e.forEach((e,{x:n})=>{t-n>6048e5&&r.push(e)}),// don't do delete inside loop, just in-case
r.forEach(t=>e.del(t))}(r)}();const XT=Xw("_eraExposure"),Xz=XP("_eraExposure"),Xk=Xv("_erasExposure");var XL={};function XE(e,t){return RR(e,e=>Hn([t.query.staking.activeEra(),t.consts.staking.historyDepth?Od(t.consts.staking.historyDepth):t.query.staking.historyDepth()]).pipe(P$(([r,n])=>{let a=[],i=n.toNumber(),o=r.unwrapOrDefault().index,s=o;for(;s.gte(Ig)&&a.length<i;)(s!==o||!0===e)&&a.push(t.registry.createType("EraIndex",s)),s=s.sub(Iv);// go from oldest to newest
    return a.reverse()})))}r(XL,"erasHistoric",()=>XE);var XN={};r(XN,"_erasPoints",()=>XM),r(XN,"erasPoints",()=>Xj);const XS="eraPoints";function XM(e,t){return RR(e,(e,r)=>{if(!e.length)return Od([]);let n=Xh(XS,e,r),a=Xg(e,n);return a.length?t.query.staking.erasRewardPoints.multi(a).pipe(P$(t=>Xm(e,n,Xy(XS,r,a.map((e,r)=>({era:e,eraPoints:t[r].total,validators:function({individual:e}){return[...e.entries()].filter(([,e])=>e.gt(Ig)).reduce((e,[t,r])=>(e[t.toString()]=r,e),{})}(t[r])})))))):Od(n)})}const Xj=Xv("_erasPoints");var XH={};function XR(e,t){return RR(e,(e,r)=>{let[n,a]=Xp("eraPrefs",e,r);return a?Od(a):t.query.staking.erasValidatorPrefs.entries(e).pipe(P$(t=>Xb(n,r,function(e,t){let r={};return t.forEach(([e,t])=>{r[e.args[1].toString()]=t}),{era:e,validators:r}}(e,t))))})}r(XH,"_eraPrefs",()=>XR),r(XH,"eraPrefs",()=>XI),r(XH,"_erasPrefs",()=>XB),r(XH,"erasPrefs",()=>XV);const XI=Xw("_eraPrefs"),XB=XP("_eraPrefs"),XV=Xv("_erasPrefs");var XX={};r(XX,"_erasRewards",()=>XA),r(XX,"erasRewards",()=>XD);const XU="eraRewards";function XA(e,t){return RR(e,(e,r)=>{if(!e.length)return Od([]);let n=Xh(XU,e,r),a=Xg(e,n);return a.length?t.query.staking.erasValidatorReward.multi(a).pipe(P$(t=>Xm(e,n,Xy(XU,r,a.map((e,r)=>({era:e,eraReward:t[r].unwrapOrDefault()})))))):Od(n)})}const XD=Xv("_erasRewards");var XC={};function XF(e,t){return RR(e,(e,r)=>{let[n,a]=Xp("eraSlashes",e,r);return a?Od(a):Hn([t.query.staking.nominatorSlashInEra.entries(e),t.query.staking.validatorSlashInEra.entries(e)]).pipe(P$(([t,a])=>Xb(n,r,function(e,t,r){let n={},a={};return t.forEach(([e,t])=>{n[e.args[1].toString()]=t.unwrap()}),r.forEach(([e,t])=>{a[e.args[1].toString()]=t.unwrapOrDefault()[1]}),{era:e,nominators:n,validators:a}}(e,t,a))))})}r(XC,"_eraSlashes",()=>XF),r(XC,"eraSlashes",()=>XZ),r(XC,"_erasSlashes",()=>Xq),r(XC,"erasSlashes",()=>XG);const XZ=Xw("_eraSlashes"),Xq=XP("_eraSlashes"),XG=Xv("_erasSlashes");var XW={};r(XW,"keys",()=>XY),r(XW,"keysMulti",()=>XK);const XY=RF((e,t)=>e.derive.staking.keysMulti([t]));function XK(e,t){return RR(e,e=>e.length?t.query.session.queuedKeys().pipe(Of(r=>Hn([Od(r),t.consts.session?.dedupKeyPrefix?t.query.session.nextKeys.multi(e.map(e=>[t.consts.session.dedupKeyPrefix,e])):Hn(e.map(e=>t.query.session.nextKeys(e)))])),P$(([t,r])=>e.map((e,n)=>(function(e,t,r){let n=(t.find(([t])=>t.eq(e))||[void 0,[]])[1],a=r.unwrapOr([]);return{nextSessionIds:Array.isArray(a)?a:[...a.values()],sessionIds:Array.isArray(n)?n:[...n.values()]}})(e,t,r[n])))):Od([]))}var XJ={};function XQ(e,t){return RR(e,()=>Hn([t.derive.session.indexes(),t.derive.staking.validators()]).pipe(P$(([e,{nextElected:t,validators:r}])=>IE({},e,{nextElected:t,validators:r}))))}r(XJ,"overview",()=>XQ);var X_={};function X$(e,t){return RR(e,(e,r,n)=>r.length?Hn([Hn(r.map(r=>t.query.staking.erasStakersClipped(r,e))),Hn(r.map(r=>t.query.staking.erasStakers(r,e)))]).pipe(P$(([e,t])=>r.map((r,n)=>({clipped:e[n],era:r,exposure:t[n]})))):Od([]))}r(X_,"_ownExposures",()=>X$),r(X_,"ownExposure",()=>X0),r(X_,"ownExposures",()=>X1);const X0=RF((e,t,r)=>e.derive.staking._ownExposures(t,[r],!0)),X1=Xx("_ownExposures");var X2={};function X5(e,t){return RR(e,(e,r,n)=>r.length?Hn([Hn(r.map(r=>t.query.staking.validatorSlashInEra(r,e))),Hn(r.map(r=>t.query.staking.nominatorSlashInEra(r,e)))]).pipe(P$(([e,t])=>r.map((r,n)=>({era:r,total:e[n].isSome?e[n].unwrap()[1]:t[n].unwrapOrDefault()})))):Od([]))}r(X2,"_ownSlashes",()=>X5),r(X2,"ownSlash",()=>X3),r(X2,"ownSlashes",()=>X8);const X3=RF((e,t,r)=>e.derive.staking._ownSlashes(t,[r],!0)),X8=Xx("_ownSlashes");var X9={};r(X9,"query",()=>X6),r(X9,"queryMulti",()=>X4);const X6=RF((e,t,r)=>e.derive.staking.queryMulti([t],r));function X4(e,t){return RR(e,(e,r)=>t.derive.session.indexes().pipe(Of(({activeEra:n})=>{let a=e.map(e=>t.registry.createType("AccountId",e));return a.length?(function(e,t,r,{withController:n,withDestination:a,withExposure:i,withLedger:o,withNominations:s,withPrefs:l}){let c=e.registry.createType("Option<Nominations>"),u=e.registry.createType("RewardDestination"),d=e.registry.createType("Exposure"),f=e.registry.createType("ValidatorPrefs");return Hn([n||o?Hn(t.map(t=>e.query.staking.bonded(t))):Od(t.map(()=>null)),s?Hn(t.map(t=>e.query.staking.nominators(t))):Od(t.map(()=>c)),a?Hn(t.map(t=>e.query.staking.payee(t))):Od(t.map(()=>u)),l?Hn(t.map(t=>e.query.staking.validators(t))):Od(t.map(()=>f)),i?Hn(t.map(t=>e.query.staking.erasStakers(r,t))):Od(t.map(()=>d))])})(t,a,n,r).pipe(Of(([e,n,i,o,s])=>(function(e,t,{withLedger:r=!1}){let n=t.filter(e=>r&&!!e&&e.isSome).map(e=>e.unwrap()),a=e.registry.createType("Option<StakingLedger>");return(n.length?Hn(n.map(t=>e.query.staking.ledger(t))):Od([])).pipe(P$(e=>{let r=-1;return t.map(t=>t&&t.isSome&&e[++r]||a)}))})(t,e,r).pipe(P$(t=>a.map((r,a)=>{var l,c,u,d,f,p;return l=e[a],c=n[a],u=i[a],d=o[a],f=s[a],p=t[a],{accountId:r,controllerId:l?.unwrapOr(null)||null,exposure:f,nominators:c.isSome?c.unwrap().targets:[],rewardDestination:u,stakingLedger:p.unwrapOrDefault(),stashId:r,validatorPrefs:d}}))))):Od([])})))}var X7={};function Ue(e,t){return RR(e,(e,r,n=!1)=>{let a=e.map(e=>t.registry.createType("AccountId",e).toString());return t.derive.staking._erasExposure(r,n).pipe(P$(e=>a.map(t=>e.map(({era:e,nominators:r,validators:n})=>{let a=!!n[t],i={},o=r[t]||[];return a?i[t]=n[t]:o&&o.forEach(({validatorId:e})=>{i[e]=n[e]}),{era:e,isEmpty:!Object.keys(i).length,isValidator:a,nominating:o,validators:i}}))))})}function Ut(e,t){return RR(e,(e,r=!1)=>t.derive.staking.erasHistoric(r).pipe(Of(n=>t.derive.staking._stakerExposures(e,n,r))))}r(X7,"_stakerExposures",()=>Ue),r(X7,"stakerExposures",()=>Ut),r(X7,"stakerExposure",()=>Ur);const Ur=RF((e,t,r)=>e.derive.staking.stakerExposures([t],r));var Un={};function Ua(e,t){return RR(e,(e,r,n)=>{let a=t.registry.createType("AccountId",e).toString();return t.derive.staking._erasPoints(r,n).pipe(P$(e=>e.map(({era:e,eraPoints:r,validators:n})=>({era:e,eraPoints:r,points:n[a]||t.registry.createType("RewardPoint")}))))})}r(Un,"_stakerPoints",()=>Ua),r(Un,"stakerPoints",()=>Ui);const Ui=Xx("_stakerPoints");var Uo={};function Us(e,t){return RR(e,(e,r,n)=>t.query.staking.erasValidatorPrefs.multi(r.map(t=>[t,e])).pipe(P$(e=>e.map((e,t)=>({era:r[t],validatorPrefs:e})))))}r(Uo,"_stakerPrefs",()=>Us),r(Uo,"stakerPrefs",()=>Ul);const Ul=Xx("_stakerPrefs");var Uc={};function Uu(e){return e?e.legacyClaimedRewards||e.claimedRewards:[]}function Ud(e,t){return RR(e,(e,r=!1)=>Hn([t.derive.staking._erasPoints(e,r),t.derive.staking._erasPrefs(e,r),t.derive.staking._erasRewards(e,r)]))}function Uf(e,t){return RR(e,(e,r,n=!1)=>Hn([t.derive.staking.queryMulti(e,{withLedger:!0}),t.derive.staking._stakerExposures(e,r,n),t.derive.staking._stakerRewardsEras(r,n)]).pipe(Of(([e,a,i])=>{let o=e.map(({stakingLedger:e,stashId:r},n)=>r&&e?function(e,t,[r,n,a],i){return i.map(({era:i,isEmpty:o,isValidator:s,nominating:l,validators:c})=>{let{eraPoints:u,validators:d}=r.find(e=>e.era.eq(i))||{eraPoints:Ig,validators:{}},{eraReward:f}=a.find(e=>e.era.eq(i))||{eraReward:e.registry.createType("Balance")},{validators:p}=n.find(e=>e.era.eq(i))||{validators:{}},h={},b=t.toString();return Object.entries(c).forEach(([t,r])=>{let n;let a=d[t]||Ig,i=p[t]?.commission.unwrap()||Ig,o=r.total?.unwrap()||Ig,s=Ig;if(!(o.isZero()||a.isZero()||u.isZero())){let e;s=f.mul(a).div(u);let l=i.mul(s).div(Ix);if(t===b)e=r.own.unwrap();else{let t=r.others.find(({who:e})=>e.eq(b));e=t?t.value.unwrap():Ig}n=s.sub(l).imul(e).div(o).iadd(t===b?l:Ig)}h[t]={total:e.registry.createType("Balance",s),value:e.registry.createType("Balance",n)}}),{era:i,eraReward:f,isEmpty:o,isValidator:s,nominating:l,validators:h}})}(t,r,i,a[n]):[]);if(n)return Od(o);let[s,l]=o.reduce(([e,t],r)=>{let n=[];return t.push(n),r.forEach(({validators:t})=>Object.keys(t).forEach(t=>{n.includes(t)||(n.push(t),e.includes(t)||e.push(t))})),[e,t]},[[],[]]);return t.derive.staking.queryMulti(s,{withLedger:!0}).pipe(P$(t=>e.map(({stakingLedger:e},n)=>(function(e,t,{rewards:r,stakingLedger:n}){let a=e.filter(e=>!Uu(n).some(t=>t.eq(e))),i=t.map(([e])=>e),o=t.map(([,e])=>e);return r.filter(({isEmpty:e})=>!e).filter(e=>!!a.some(t=>e.era.eq(t))&&(!function(e,t,r){let n=[];Object.keys(r.validators).forEach(a=>{let i=e.indexOf(a);if(-1!==i){let e=t[i].stakingLedger;Uu(e).some(e=>r.era.eq(e))&&n.push(a)}}),n.forEach(e=>{delete r.validators[e]})}(i,o,e),!0)).filter(({validators:e})=>0!==Object.keys(e).length).map(e=>IE({},e,{nominators:e.nominating.filter(t=>e.validators[t.validatorId])}))})(r,l[n].map(e=>[e,t.find(t=>t.accountId.eq(e))]).filter(e=>!!e[1]),{rewards:o[n],stakingLedger:e}))))})))}r(Uc,"_stakerRewardsEras",()=>Ud),r(Uc,"_stakerRewards",()=>Uf),r(Uc,"stakerRewards",()=>Up),r(Uc,"stakerRewardsMultiEras",()=>Uh),r(Uc,"stakerRewardsMulti",()=>Ub);const Up=RF((e,t,r)=>e.derive.staking.erasHistoric(r).pipe(Of(n=>e.derive.staking._stakerRewards([t],n,r))));function Uh(e,t){return RR(e,(e,r)=>e.length&&r.length?t.derive.staking._stakerRewards(e,r,!1):Od([]))}function Ub(e,t){return RR(e,(e,r=!1)=>t.derive.staking.erasHistoric(r).pipe(Of(r=>t.derive.staking.stakerRewardsMultiEras(e,r))))}var Uy={};function Um(e,t){return RR(e,(e,r,n)=>{let a=t.registry.createType("AccountId",e).toString();return t.derive.staking._erasSlashes(r,n).pipe(P$(e=>e.map(({era:e,nominators:r,validators:n})=>({era:e,total:r[a]||n[a]||t.registry.createType("Balance")}))))})}r(Uy,"_stakerSlashes",()=>Um),r(Uy,"stakerSlashes",()=>Ug);const Ug=Xx("_stakerSlashes");var Uv={};function Ux(e,t){return RR(e,()=>{let e;return(e=Date.now(),t.query.system.events().pipe(P$(t=>e=t.filter(({event:e,phase:t})=>{try{return t.isApplyExtrinsic&&"staking"===e.section&&"Bonded"===e.method}catch{return!1}})?Date.now():e),R1(e),RH({skipTimeout:!0}))).pipe(Of(()=>t.query.staking.validators.keys()),P$(e=>e.map(({args:[e]})=>e).filter(e=>e)))})}r(Uv,"stashes",()=>Ux);var Uw={};function UP(e,t){return RR(e,()=>t.query.staking.erasStakers?t.derive.session.indexes().pipe(Of(({currentEra:e})=>t.query.staking.erasStakers.keys(e)),P$(e=>e.map(({args:[,e]})=>e))):t.query.staking.currentElected())}function UO(e,t){return RR(e,()=>Hn([t.query.session?t.query.session.validators():Od([]),t.query.staking?t.derive.staking.nextElected():Od([])]).pipe(P$(([e,t])=>({nextElected:t.length?t:e,validators:e}))))}r(Uw,"nextElected",()=>UP),r(Uw,"validators",()=>UO);var UT={};r(UT,"waitingInfo",()=>Uk);const Uz={withController:!0,withPrefs:!0};function Uk(e,t){return RR(e,(e=Uz)=>Hn([t.derive.staking.validators(),t.derive.staking.stashes()]).pipe(Of(([{nextElected:r},n])=>{let a=r.map(e=>e.toString()),i=n.filter(e=>!a.includes(e.toString()));return t.derive.staking.queryMulti(i,e).pipe(P$(e=>({info:e,waiting:i})))})))}V(Xt,Xr),V(Xt,Xo),V(Xt,Xl),V(Xt,Xd),V(Xt,XL),V(Xt,XN),V(Xt,XH),V(Xt,XX),V(Xt,XC),V(Xt,XW),V(Xt,XJ),V(Xt,X_),V(Xt,X2),V(Xt,X9),V(Xt,X7),V(Xt,Un),V(Xt,Uo),V(Xt,Uc),V(Xt,Uy),V(Xt,Uv),V(Xt,Uw),V(Xt,UT);var UL={};r(UL,"members",()=>UE),r(UL,"hasProposals",()=>UN),r(UL,"proposal",()=>US),r(UL,"proposalCount",()=>UM),r(UL,"proposalHashes",()=>Uj),r(UL,"proposals",()=>UH),r(UL,"prime",()=>UR);const UE=Is("technicalCommittee"),UN=Ir("technicalCommittee"),US=Ia("technicalCommittee"),UM=Ii("technicalCommittee"),Uj=Io("technicalCommittee"),UH=In("technicalCommittee"),UR=Il("technicalCommittee");var UI={};function UB(e,t){return RR(e,()=>t.query.treasury?Hn([t.query.treasury.proposalCount(),t.query.treasury.approvals()]).pipe(Of(([e,r])=>(function(e,t,r){let n=[],a=t.toNumber();for(let t=0;t<a;t++)r.some(e=>e.eqn(t))||n.push(e.registry.createType("ProposalIndex",t));let i=[...n,...r];return Hn([e.query.treasury.proposals.multi(i),e.derive.council?e.derive.council.proposals():Od([])]).pipe(P$(([n,a])=>(function(e,{allIds:t,allProposals:r,approvalIds:n,councilProposals:a,proposalCount:i}){let o=[],s=[],l=a.filter(({proposal:t})=>t&&(e.tx.treasury.approveProposal.is(t)||e.tx.treasury.rejectProposal.is(t)));return t.forEach((e,t)=>{if(r[t].isSome){let a=l.filter(({proposal:t})=>t&&e.eq(t.args[0])).sort((e,t)=>e.proposal&&t.proposal?e.proposal.method.localeCompare(t.proposal.method):e.proposal?-1:1),i=n.some(t=>t.eq(e)),c={council:a,id:e,proposal:r[t].unwrap()};i?o.push(c):s.push(c)}}),{approvals:o,proposalCount:i,proposals:s}})(e,{allIds:i,allProposals:n,approvalIds:r,councilProposals:a,proposalCount:t})))})(t,e,r))):Od({approvals:[],proposalCount:t.registry.createType("ProposalIndex"),proposals:[]}))}r(UI,"proposals",()=>UB),V({},UI);var UV={},UX={};function UU(e,t){return RR(e,e=>Hn([t.rpc.chain.getBlock(e),t.queryAt(e).pipe(Of(e=>e.system.events()))]).pipe(P$(([e,t])=>({block:e,events:t}))))}r(UX,"events",()=>UU);var UA={};r(UA,"signingInfo",()=>Uq);var oI=A("dEXSZ");const UD=new/*@__PURE__*/(n(oI))(6e3),UC=new/*@__PURE__*/(n(oI))(5),UF=new/*@__PURE__*/(n(oI))(3e5);function UZ(e,t){return e.derive.balances.account(t).pipe(P$(({accountNonce:e})=>e))}function Uq(e,t){// no memo, we want to do this fresh on each run
return(e,r,n)=>Hn([B2(r)?UZ(t,e):-1===r?t.rpc.system?.accountNextIndex?t.rpc.system.accountNextIndex(e):UZ(t,e):Od(t.registry.createType("Index",r)),B2(n)||"number"==typeof n&&n>0?Hn([t.rpc.chain.getHeader().pipe(Of(e=>// we do need to allow transactions at chain start (also dev/seal chains)
        e.parentHash.isEmpty?Od(e):t.rpc.chain.getHeader(e.parentHash).pipe(Rd(()=>Od(e))))),t.rpc.chain.getFinalizedHead().pipe(Of(e=>t.rpc.chain.getHeader(e).pipe(Rd(()=>Od(null)))))]).pipe(P$(([e,t])=>!t||I4(e).sub(I4(t)).gt(UC)?e:t)):Od(null)]).pipe(P$(([e,r])=>({header:r,mortalLength:Math.min(t.consts.system?.blockHashCount?.toNumber()||250,UF.div(t.consts.babe?.expectedBlockTime||t.consts.timestamp?.minimumPeriod.muln(2)||UD).iadd(UC).toNumber()),nonce:e})))}V(UV,UX),V(UV,UA);const UG={};Object.keys(Su).forEach(e=>Object.entries(Su[e].rpc||{}).forEach(([t,r])=>{// allow for section overrides
    let n=r.aliasSection||e;UG[n]||(UG[n]={}),UG[n][t]=TJ({},r,{isSubscription:!!r.pubsub,jsonrpc:`${n}_${t}`,method:t,section:n})}));const UW="0123456789abcdef",UY=new Uint8Array(256),UK=new Uint8Array(65536);for(let e=0,t=UW.length;e<t;e++)UY[0|UW[e].charCodeAt(0)]=0|e,e>9&&(UY[0|UW[e].toUpperCase().charCodeAt(0)]=0|e);for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)UK[t|r]=UY[e]<<4|UY[r]}/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */function UJ(e){return"function"==typeof e}/** @internal */function UQ(e){return e.toString().padStart(2,"0")}var oI=A("dEXSZ");"function"==typeof sh&&sh.asIntN;const U_="function"==typeof o9.Buffer&&"function"==typeof o9.Buffer.isBuffer;function U$(e){// we do check a function first, since it is slightly faster than isBuffer itself
return U_&&!!e&&UJ(e.readDoubleLE)&&o9.Buffer.isBuffer(e)}/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */function U0(e){// here we defer the instanceof check which is actually slightly
// slower than just checking the constrctor (direct instances)
return(e&&e.constructor)===Uint8Array||e instanceof Uint8Array}o9.process;const U1=Array(256),U2=Array(65536);for(let e=0;e<256;e++)U1[e]=e.toString(16).padStart(2,"0");for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)U2[t|r]=U1[e]+U1[r]}/** @internal */function U5(e,t){let r=e.length%2|0,n=e.length-r|0;for(let r=0;r<n;r+=2)t+=U2[e[r]<<8|e[r+1]];return r&&(t+=U1[0|e[n]]),t}const U3=/^0x[\da-fA-F]+$/,U8=new o8.TextEncoder;function U9(){// noop
}const U6={debug:"log",error:"error",log:"log",warn:"warn"};function U4(e,t,r,a=-1){if(1===r.length&&UJ(r[0])){let n=r[0]();return U4(e,t,Array.isArray(n)?n:[n],a)}console[U6[e]](function(e){let t=e.getFullYear().toString(),r=UQ(e.getMonth()+1),n=UQ(e.getDate()),a=UQ(e.getHours()),i=UQ(e.getMinutes()),o=UQ(e.getSeconds());return`${t}-${r}-${n} ${a}:${i}:${o}`}(new Date),t,...r.map(function e(t){var r;return Array.isArray(t)?t.map(e):/*@__PURE__*/n(oI).isBN(t)?t.toString():U0(t)||U$(t)?function(e,t=-1,r=!0){// this is not 100% correct sinmce we support isPrefixed = false....
let n=r?"0x":"";if(!e?.length)return n;if(t>0){let r=Math.ceil(t/8);if(e.length>r)return`${U5(e.subarray(0,r/2),n)}\u{2026}${U5(e.subarray(e.length-r/2),"")}`}return U5(e,n)}(U0(r=t)?U$(r)?new Uint8Array(r):r:!function(e,t=-1,r){return"string"==typeof e&&("0x"===e||U3.test(e))&&(-1===t?e.length%2==0:e.length===2+Math.ceil(t/4))}(r)?Array.isArray(r)?new Uint8Array(r):r?U8.encode(r.toString()):new Uint8Array:function(e,t=-1){if(!e)return new Uint8Array;let r=e.startsWith("0x")?2:0,n=Math.ceil((e.length-r)/2),a=Math.ceil(-1===t?n:t/8),i=new Uint8Array(a),o=a>n?a-n:0;for(let t=o;t<a;t++,r+=2)// HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
// same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
// also the faster operation by at least 2x with the character map above
i[t]=UK[e.charCodeAt(r)<<8|e.charCodeAt(r+1)];return i}(r)):function(t){var r;if(t&&(r=t)&&"object"==typeof r&&t.constructor===Object){let r={};for(let[n,a]of Object.entries(t))r[n]=e(a);return r}return t}(t)}).map(e=>{if(a<=0)return e;let t=`${e}`;return t.length<a?e:`${t.substring(0,a)} ...`}))}const U7=function(e){let t=`${e.toUpperCase()}:`.padStart(16),[r,n]=function(e){let t=parseInt(o9.process?.env?.DEBUG_MAX||"-1",10);return[function(e,t){let r=!1;for(let n of e)n&&("*"===n||t===n||n.endsWith("*")&&t.startsWith(n.slice(0,-1)))?r=!0:n&&n.startsWith("-")&&(t===n.slice(1)||n.endsWith("*")&&t.startsWith(n.slice(1,-1)))&&(r=!1);return r}((o9.process?.env?.DEBUG||"").toLowerCase().split(","),e),isNaN(t)?-1:t]}(e.toLowerCase());return{debug:r?(...e)=>U4("debug",t,e,n):U9,error:(...e)=>U4("error",t,e),log:(...e)=>U4("log",t,e),noop:U9,warn:(...e)=>U4("warn",t,e)}}("rpc-core");var Ae={},At=Object.prototype.hasOwnProperty,Ar="~";/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */function An(){}/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */function Aa(e,t,r){this.fn=e,this.context=t,this.once=r||!1}/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */function Ai(e,t,r,n,a){if("function"!=typeof r)throw TypeError("The listener must be a function");var i=new Aa(r,n||e,a),o=Ar?Ar+t:t;return e._events[o]?e._events[o].fn?e._events[o]=[e._events[o],i]:e._events[o].push(i):(e._events[o]=i,e._eventsCount++),e}/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */function Ao(e,t){0==--e._eventsCount?e._events=new An:delete e._events[t]}/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */function As(){this._events=new An,this._eventsCount=0}/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */function Al(e){return"function"==typeof e}Object.create&&(An.prototype=Object.create(null),new An().__proto__||(Ar=!1)),/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */As.prototype.eventNames=function(){var e,t,r=[];if(0===this._eventsCount)return r;for(t in e=this._events)At.call(e,t)&&r.push(Ar?t.slice(1):t);return Object.getOwnPropertySymbols?r.concat(Object.getOwnPropertySymbols(e)):r},/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */As.prototype.listeners=function(e){var t=Ar?Ar+e:e,r=this._events[t];if(!r)return[];if(r.fn)return[r.fn];for(var n=0,a=r.length,i=Array(a);n<a;n++)i[n]=r[n].fn;return i},/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */As.prototype.listenerCount=function(e){var t=Ar?Ar+e:e,r=this._events[t];return r?r.fn?1:r.length:0},/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */As.prototype.emit=function(e,t,r,n,a,i){var o=Ar?Ar+e:e;if(!this._events[o])return!1;var s,l,c=this._events[o],u=arguments.length;if(c.fn){switch(c.once&&this.removeListener(e,c.fn,void 0,!0),u){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,t),!0;case 3:return c.fn.call(c.context,t,r),!0;case 4:return c.fn.call(c.context,t,r,n),!0;case 5:return c.fn.call(c.context,t,r,n,a),!0;case 6:return c.fn.call(c.context,t,r,n,a,i),!0}for(l=1,s=Array(u-1);l<u;l++)s[l-1]=arguments[l];c.fn.apply(c.context,s)}else{var d,f=c.length;for(l=0;l<f;l++)switch(c[l].once&&this.removeListener(e,c[l].fn,void 0,!0),u){case 1:c[l].fn.call(c[l].context);break;case 2:c[l].fn.call(c[l].context,t);break;case 3:c[l].fn.call(c[l].context,t,r);break;case 4:c[l].fn.call(c[l].context,t,r,n);break;default:if(!s)for(d=1,s=Array(u-1);d<u;d++)s[d-1]=arguments[d];c[l].fn.apply(c[l].context,s)}}return!0},/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */As.prototype.on=function(e,t,r){return Ai(this,e,t,r,!1)},/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */As.prototype.once=function(e,t,r){return Ai(this,e,t,r,!0)},/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */As.prototype.removeListener=function(e,t,r,n){var a=Ar?Ar+e:e;if(!this._events[a])return this;if(!t)return Ao(this,a),this;var i=this._events[a];if(i.fn)i.fn!==t||n&&!i.once||r&&i.context!==r||Ao(this,a);else{for(var o=0,s=[],l=i.length;o<l;o++)(i[o].fn!==t||n&&!i[o].once||r&&i[o].context!==r)&&s.push(i[o]);//
// Reset the array, or remove it completely if we have no more listeners.
//
s.length?this._events[a]=1===s.length?s[0]:s:Ao(this,a)}return this},/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */As.prototype.removeAllListeners=function(e){var t;return e?(t=Ar?Ar+e:e,this._events[t]&&Ao(this,t)):(this._events=new An,this._eventsCount=0),this},//
// Alias methods names because people roll like that.
//
As.prototype.off=As.prototype.removeListener,As.prototype.addListener=As.prototype.on,//
// Expose the prefix.
//
As.prefixed=Ar,//
// Allow `EventEmitter` to be imported as module namespace.
//
As.EventEmitter=As,Ae=As;const Ac=function(...e){return t=>Al(t)&&e.every(e=>Al(t[e]))}("isPrototypeOf","hasOwnProperty");/**
 * @name isUndefined
 * @summary Tests for a `undefined` values.
 * @description
 * Checks to see if the input value is `undefined`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUndefined } from '@polkadot/util';
 *
 * console.log('isUndefined', isUndefined(void(0))); // => true
 * ```
 */function Au(e){return void 0===e}/** @internal */function Ad(e){return e.toString().padStart(2,"0")}var oI=A("dEXSZ");"function"==typeof sh&&sh.asIntN;const Af="function"==typeof o9.Buffer&&"function"==typeof o9.Buffer.isBuffer;function Ap(e){// we do check a function first, since it is slightly faster than isBuffer itself
return Af&&!!e&&Al(e.readDoubleLE)&&o9.Buffer.isBuffer(e)}/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */function Ah(e){// here we defer the instanceof check which is actually slightly
// slower than just checking the constrctor (direct instances)
return(e&&e.constructor)===Uint8Array||e instanceof Uint8Array}o9.process;const Ab=Array(256),Ay=Array(65536);for(let e=0;e<256;e++)Ab[e]=e.toString(16).padStart(2,"0");for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)Ay[t|r]=Ab[e]+Ab[r]}/** @internal */function Am(e,t){let r=e.length%2|0,n=e.length-r|0;for(let r=0;r<n;r+=2)t+=Ay[e[r]<<8|e[r+1]];return r&&(t+=Ab[0|e[n]]),t}const Ag="0123456789abcdef",Av=new Uint8Array(256),Ax=new Uint8Array(65536);for(let e=0,t=Ag.length;e<t;e++)Av[0|Ag[e].charCodeAt(0)]=0|e,e>9&&(Av[0|Ag[e].toUpperCase().charCodeAt(0)]=0|e);for(let e=0;e<256;e++){let t=e<<8;for(let r=0;r<256;r++)Ax[t|r]=Av[e]<<4|Av[r]}const Aw=/^0x[\da-fA-F]+$/,AP=new o8.TextEncoder;function AO(){// noop
}const AT={debug:"log",error:"error",log:"log",warn:"warn"};function Az(e,t,r,a=-1){if(1===r.length&&Al(r[0])){let n=r[0]();return Az(e,t,Array.isArray(n)?n:[n],a)}console[AT[e]](function(e){let t=e.getFullYear().toString(),r=Ad(e.getMonth()+1),n=Ad(e.getDate()),a=Ad(e.getHours()),i=Ad(e.getMinutes()),o=Ad(e.getSeconds());return`${t}-${r}-${n} ${a}:${i}:${o}`}(new Date),t,...r.map(function e(t){return Array.isArray(t)?t.map(e):/*@__PURE__*/n(oI).isBN(t)?t.toString():Ah(t)||Ap(t)?function(e,t=-1,r=!0){// this is not 100% correct sinmce we support isPrefixed = false....
let n=r?"0x":"";if(!e?.length)return n;if(t>0){let r=Math.ceil(t/8);if(e.length>r)return`${Am(e.subarray(0,r/2),n)}\u{2026}${Am(e.subarray(e.length-r/2),"")}`}return Am(e,n)}(Ah(t)?Ap(t)?new Uint8Array(t):t:!function(e,t=-1,r){return"string"==typeof e&&("0x"===e||Aw.test(e))&&(-1===t?e.length%2==0:e.length===2+Math.ceil(t/4))}(t)?Array.isArray(t)?new Uint8Array(t):t?AP.encode(t.toString()):new Uint8Array:function(e,t=-1){if(!e)return new Uint8Array;let r=e.startsWith("0x")?2:0,n=Math.ceil((e.length-r)/2),a=Math.ceil(-1===t?n:t/8),i=new Uint8Array(a),o=a>n?a-n:0;for(let t=o;t<a;t++,r+=2)// HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
// same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
// also the faster operation by at least 2x with the character map above
i[t]=Ax[e.charCodeAt(r)<<8|e.charCodeAt(r+1)];return i}(t)):function(t){var r;if(t&&(r=t)&&"object"==typeof r&&t.constructor===Object){let r={};for(let[n,a]of Object.entries(t))r[n]=e(a);return r}return t}(t)}).map(e=>{if(a<=0)return e;let t=`${e}`;return t.length<a?e:`${t.substring(0,a)} ...`}))}var Ak={};Object.defineProperty(Ak,"__esModule",{value:!0}),Ak.WebSocket=Ak.packageInfo=void 0;var AL={},AE="node_modules/@kiltprotocol/core/node_modules/@polkadot/x-ws/cjs";/**
 * @name isNumber
 * @summary Tests for a JavaScript number.
 * @description
 * Checks to see if the input value is a valid number.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNumber } from '@polkadot/util';
 *
 * console.log('isNumber', isNumber(1234)); // => true
 * ```
 */function AN(e){return"number"==typeof e}/**
 * @name isString
 * @summary Tests for a string.
 * @description
 * Checks to see if the input value is a JavaScript string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isString } from '@polkadot/util';
 *
 * console.log('isString', isString('test')); // => true
 * ```
 */function AS(e){return"string"==typeof e||e instanceof String}/** @internal */function AM(e,t){return"bigint"==typeof t?t.toString():t}function Aj(e,t){return JSON.stringify(e,AM,t)}function AH(e,t,r){Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:r})}Object.defineProperty(AL,"__esModule",{value:!0}),AL.packageInfo=void 0,AL.packageInfo={name:"@polkadot/x-ws",path:"string"==typeof AE?AE:"auto",type:"cjs",version:"12.6.2"},Object.defineProperty(Ak,"packageInfo",{enumerable:!0,get:function(){return AL.packageInfo}}),Ak.WebSocket=o9.WebSocket;class AR extends Error{code;data;message;name;stack;constructor(e="",t=-99999,r){if(super(),AH(this,"message",String(e)),AH(this,"name",this.constructor.name),AH(this,"data",r),AH(this,"code",t),Al(Error.captureStackTrace))Error.captureStackTrace(this,this.constructor);else{let{stack:t}=Error(e);t&&AH(this,"stack",t)}}static CODES={ASSERT:-90009,INVALID_JSONRPC:-99998,METHOD_NOT_FOUND:-32601,UNKNOWN:-99999}}function AI(e){if(e){let{code:t,data:r,message:n}=e;throw new AR(`${t}: ${n}${function(e){if(Au(e))return"";let t=`: ${AS(e)?e.replace(/Error\("/g,"").replace(/\("/g,"(").replace(/"\)/g,")").replace(/\(/g,", ").replace(/\)/g,""):Aj(e)}`;// We need some sort of cut-off here since these can be very large and
// very nested, pick a number and trim the result display to it
return t.length<=256?t:`${t.substring(0,255)}\u{2026}`}(r)}`,t,r)}}class AB{__internal__id=0;decodeResponse(e){if(!e||"2.0"!==e.jsonrpc)throw Error("Invalid jsonrpc field in decoded object");let t=!Au(e.params)&&!Au(e.method);if(!AN(e.id)&&(!t||!AN(e.params.subscription)&&!AS(e.params.subscription)))throw Error("Invalid id field in decoded object");if(AI(e.error),void 0===e.result&&!t)throw Error("No result found in jsonrpc response");return t?(AI(e.params.error),e.params.result):e.result}encodeJson(e,t){let[r,n]=this.encodeObject(e,t);return[r,Aj(n)]}encodeObject(e,t){let r=++this.__internal__id;return[r,{id:r,jsonrpc:"2.0",method:e,params:t}]}}class AV{key;next;prev;constructor(e){this.key=e,this.next=this.prev=this}}class AX{capacity;__internal__data=new Map;__internal__refs=new Map;__internal__length=0;__internal__head;__internal__tail;constructor(e=128){this.capacity=e,this.__internal__head=this.__internal__tail=new AV("<empty>")}get length(){return this.__internal__length}get lengthData(){return this.__internal__data.size}get lengthRefs(){return this.__internal__refs.size}entries(){let e=this.keys(),t=e.length,r=Array(t);for(let n=0;n<t;n++){let t=e[n];r[n]=[t,this.__internal__data.get(t)]}return r}keys(){let e=[];if(this.__internal__length){let t=this.__internal__head;for(;t!==this.__internal__tail;)e.push(t.key),t=t.next;e.push(t.key)}return e}get(e){let t=this.__internal__data.get(e);return t?(this.__internal__toHead(e),t):null}set(e,t){if(this.__internal__data.has(e))this.__internal__toHead(e);else{let t=new AV(e);this.__internal__refs.set(t.key,t),0===this.length?this.__internal__head=this.__internal__tail=t:(this.__internal__head.prev=t,t.next=this.__internal__head,this.__internal__head=t),this.__internal__length===this.capacity?(this.__internal__data.delete(this.__internal__tail.key),this.__internal__refs.delete(this.__internal__tail.key),this.__internal__tail=this.__internal__tail.prev,this.__internal__tail.next=this.__internal__head):this.__internal__length+=1}this.__internal__data.set(e,t)}__internal__toHead(e){let t=this.__internal__refs.get(e);t&&t!==this.__internal__head&&(t.prev.next=t.next,t.next.prev=t.prev,t.next=this.__internal__head,this.__internal__head.prev=t,this.__internal__head=t)}}const AU={1e3:"Normal Closure",1001:"Going Away",1002:"Protocol Error",1003:"Unsupported Data",1004:"(For future)",1005:"No Status Received",1006:"Abnormal Closure",1007:"Invalid frame payload data",1008:"Policy Violation",1009:"Message too big",1010:"Missing Extension",1011:"Internal Error",1012:"Service Restart",1013:"Try Again Later",1014:"Bad Gateway",1015:"TLS Handshake"},AA={chain_finalisedHead:"chain_finalizedHead",chain_subscribeFinalisedHeads:"chain_subscribeFinalizedHeads",chain_unsubscribeFinalisedHeads:"chain_unsubscribeFinalizedHeads"},AD=function(e){let t=`${e.toUpperCase()}:`.padStart(16),[r,n]=function(e){let t=parseInt(o9.process?.env?.DEBUG_MAX||"-1",10);return[function(e,t){let r=!1;for(let n of e)n&&("*"===n||t===n||n.endsWith("*")&&t.startsWith(n.slice(0,-1)))?r=!0:n&&n.startsWith("-")&&(t===n.slice(1)||n.endsWith("*")&&t.startsWith(n.slice(1,-1)))&&(r=!1);return r}((o9.process?.env?.DEBUG||"").toLowerCase().split(","),e),isNaN(t)?-1:t]}(e.toLowerCase());return{debug:r?(...e)=>Az("debug",t,e,n):AO,error:(...e)=>Az("error",t,e),log:(...e)=>Az("log",t,e),noop:AO,warn:(...e)=>Az("warn",t,e)}}("api-ws");/** @internal Clears a Record<*> of all keys, optionally with all callback on clear */function AC(e,t){Object.keys(e).forEach(r=>{t&&t(e[r]),delete e[r]})}/** @internal Creates a default/empty stats object */function AF(){return{bytesRecv:0,bytesSent:0,cached:0,errors:0,requests:0,subscriptions:0,timeout:0}}class AZ{__internal__callCache;__internal__coder;__internal__endpoints;__internal__headers;__internal__eventemitter;__internal__handlers={};__internal__isReadyPromise;__internal__stats;__internal__waitingForId={};__internal__autoConnectMs;__internal__endpointIndex;__internal__endpointStats;__internal__isConnected=!1;__internal__subscriptions={};__internal__timeoutId=null;__internal__websocket;__internal__timeout;/**
     * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
     * @param {number | false} autoConnectMs Whether to connect automatically or not (default). Provided value is used as a delay between retries.
     * @param {Record<string, string>} headers The headers provided to the underlying WebSocket
     * @param {number} [timeout] Custom timeout value used per request . Defaults to `DEFAULT_TIMEOUT_MS`
     */constructor(e="ws://127.0.0.1:9944",t=2500,r={},n,a){let i=Array.isArray(e)?e:[e];if(0===i.length)throw Error("WsProvider requires at least one Endpoint");i.forEach(e=>{if(!/^(wss|ws):\/\//.test(e))throw Error(`Endpoint should start with 'ws://', received '${e}'`)}),this.__internal__callCache=new AX(a||128),this.__internal__eventemitter=new Ae.EventEmitter,this.__internal__autoConnectMs=t||0,this.__internal__coder=new AB,this.__internal__endpointIndex=-1,this.__internal__endpoints=i,this.__internal__headers=r,this.__internal__websocket=null,this.__internal__stats={active:{requests:0,subscriptions:0},total:AF()},this.__internal__endpointStats=AF(),this.__internal__timeout=n||6e4,t&&t>0&&this.connectWithRetry().catch(AO),this.__internal__isReadyPromise=new Promise(e=>{this.__internal__eventemitter.once("connected",()=>{e(this)})})}/**
     * @summary `true` when this provider supports subscriptions
     */get hasSubscriptions(){return!0}/**
     * @summary `true` when this provider supports clone()
     */get isClonable(){return!0}/**
     * @summary Whether the node is connected or not.
     * @return {boolean} true if connected
     */get isConnected(){return this.__internal__isConnected}/**
     * @description Promise that resolves the first time we are connected and loaded
     */get isReady(){return this.__internal__isReadyPromise}get endpoint(){return this.__internal__endpoints[this.__internal__endpointIndex]}/**
     * @description Returns a clone of the object
     */clone(){return new AZ(this.__internal__endpoints)}selectEndpointIndex(e){return(this.__internal__endpointIndex+1)%e.length}/**
     * @summary Manually connect
     * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
     * connect manually using this method.
     */// eslint-disable-next-line @typescript-eslint/require-await
async connect(){if(this.__internal__websocket)throw Error("WebSocket is already connected");try{var e,t;this.__internal__endpointIndex=this.selectEndpointIndex(this.__internal__endpoints),// the as here is Deno-specific - not available on the globalThis
this.__internal__websocket=void 0!==o9.WebSocket&&(e=o9.WebSocket,t=Ak.WebSocket,Ac(t)&&Ac(e)&&(e===t||e.isPrototypeOf(t)))?new Ak.WebSocket(this.endpoint):new Ak.WebSocket(this.endpoint,void 0,{headers:this.__internal__headers}),this.__internal__websocket&&(this.__internal__websocket.onclose=this.__internal__onSocketClose,this.__internal__websocket.onerror=this.__internal__onSocketError,this.__internal__websocket.onmessage=this.__internal__onSocketMessage,this.__internal__websocket.onopen=this.__internal__onSocketOpen),// timeout any handlers that have not had a response
this.__internal__timeoutId=setInterval(()=>this.__internal__timeoutHandlers(),5e3)}catch(e){throw AD.error(e),this.__internal__emit("error",e),e}}/**
     * @description Connect, never throwing an error, but rather forcing a retry
     */async connectWithRetry(){if(this.__internal__autoConnectMs>0)try{await this.connect()}catch{setTimeout(()=>{this.connectWithRetry().catch(AO)},this.__internal__autoConnectMs)}}/**
     * @description Manually disconnect from the connection, clearing auto-connect logic
     */// eslint-disable-next-line @typescript-eslint/require-await
async disconnect(){// switch off autoConnect, we are in manual mode now
this.__internal__autoConnectMs=0;try{this.__internal__websocket&&this.__internal__websocket.close(1e3)}catch(e){throw AD.error(e),this.__internal__emit("error",e),e}}/**
     * @description Returns the connection stats
     */get stats(){return{active:{requests:Object.keys(this.__internal__handlers).length,subscriptions:Object.keys(this.__internal__subscriptions).length},total:this.__internal__stats.total}}get endpointStats(){return this.__internal__endpointStats}/**
     * @summary Listens on events after having subscribed using the [[subscribe]] function.
     * @param  {ProviderInterfaceEmitted} type Event
     * @param  {ProviderInterfaceEmitCb}  sub  Callback
     * @return unsubscribe function
     */on(e,t){return this.__internal__eventemitter.on(e,t),()=>{this.__internal__eventemitter.removeListener(e,t)}}/**
     * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
     * @param method The RPC methods to execute
     * @param params Encoded parameters as applicable for the method
     * @param subscription Subscription details (internally used)
     */send(e,t,r,n){this.__internal__endpointStats.requests++,this.__internal__stats.total.requests++;let[a,i]=this.__internal__coder.encodeJson(e,t),o=r?this.__internal__callCache.get(i):null;return o?(this.__internal__endpointStats.cached++,this.__internal__stats.total.cached++):(o=this.__internal__send(a,i,e,t,n),r&&this.__internal__callCache.set(i,o)),o}async __internal__send(e,t,r,n,a){return new Promise((i,o)=>{try{if(!this.isConnected||null===this.__internal__websocket)throw Error("WebSocket is not connected");AD.debug(()=>["calling",r,t]),this.__internal__handlers[e]={callback:(e,t)=>{e?o(e):i(t)},method:r,params:n,start:Date.now(),subscription:a};let s=t.length;this.__internal__endpointStats.bytesSent+=s,this.__internal__stats.total.bytesSent+=s,this.__internal__websocket.send(t)}catch(e){this.__internal__endpointStats.errors++,this.__internal__stats.total.errors++,o(e)}})}/**
     * @name subscribe
     * @summary Allows subscribing to a specific event.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const provider = new WsProvider('ws://127.0.0.1:9944');
     * const rpc = new Rpc(provider);
     *
     * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
     *   console.log(values)
     * }).then((subscriptionId) => {
     *   console.log('balance changes subscription id: ', subscriptionId)
     * })
     * ```
     */subscribe(e,t,r,n){// subscriptions are not cached, LRU applies to .at(<blockHash>) only
return this.__internal__endpointStats.subscriptions++,this.__internal__stats.total.subscriptions++,this.send(t,r,!1,{callback:n,type:e})}/**
     * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
     */async unsubscribe(e,t,r){let n=`${e}::${r}`;// FIXME This now could happen with re-subscriptions. The issue is that with a re-sub
// the assigned id now does not match what the API user originally received. It has
// a slight complication in solving - since we cannot rely on the send id, but rather
// need to find the actual subscription id to map it
if(Au(this.__internal__subscriptions[n]))return AD.debug(()=>`Unable to find active subscription=${n}`),!1;delete this.__internal__subscriptions[n];try{var a;return!this.isConnected||(a=this.__internal__websocket,null===a)||this.send(t,[r])}catch{return!1}}__internal__emit=(e,...t)=>{this.__internal__eventemitter.emit(e,...t)};__internal__onSocketClose=e=>{let t=Error(`disconnected from ${this.endpoint}: ${e.code}:: ${e.reason||function(e){if(e>=0&&e<=999)return"(Unused)";if(e>=1016){if(e<=1999)return"(For WebSocket standard)";if(e<=2999)return"(For WebSocket extensions)";if(e<=3999)return"(For libraries and frameworks)";if(e<=4999)return"(For applications)"}return AU[e]||"(Unknown)"}(e.code)}`);this.__internal__autoConnectMs>0&&AD.error(t.message),this.__internal__isConnected=!1,this.__internal__websocket&&(this.__internal__websocket.onclose=null,this.__internal__websocket.onerror=null,this.__internal__websocket.onmessage=null,this.__internal__websocket.onopen=null,this.__internal__websocket=null),this.__internal__timeoutId&&(clearInterval(this.__internal__timeoutId),this.__internal__timeoutId=null),// reject all hanging requests
AC(this.__internal__handlers,e=>{try{e.callback(t,void 0)}catch(e){// does not throw
AD.error(e)}}),AC(this.__internal__waitingForId),// Reset stats for active endpoint
this.__internal__endpointStats=AF(),this.__internal__emit("disconnected"),this.__internal__autoConnectMs>0&&setTimeout(()=>{this.connectWithRetry().catch(AO)},this.__internal__autoConnectMs)};__internal__onSocketError=e=>{AD.debug(()=>["socket error",e]),this.__internal__emit("error",e)};__internal__onSocketMessage=e=>{AD.debug(()=>["received",e.data]);let t=e.data.length;this.__internal__endpointStats.bytesRecv+=t,this.__internal__stats.total.bytesRecv+=t;let r=JSON.parse(e.data);return Au(r.method)?this.__internal__onSocketMessageResult(r):this.__internal__onSocketMessageSubscribe(r)};__internal__onSocketMessageResult=e=>{let t=this.__internal__handlers[e.id];if(!t){AD.debug(()=>`Unable to find handler for id=${e.id}`);return}try{let{method:r,params:n,subscription:a}=t,i=this.__internal__coder.decodeResponse(e);if(// first send the result - in case of subs, we may have an update
// immediately if we have some queued results already
t.callback(null,i),a){let e=`${a.type}::${i}`;this.__internal__subscriptions[e]=/**
 * @name objectSpread
 * @summary Concats all sources into the destination
 */function(e,...t){for(let r=0,n=t.length;r<n;r++){let n=t[r];if(n){if("function"==typeof n.entries)for(let[t,r]of n.entries())e[t]=r;else Object.assign(e,n)}}return e}({},a,{method:r,params:n}),this.__internal__waitingForId[e]&&this.__internal__onSocketMessageSubscribe(this.__internal__waitingForId[e])}}catch(e){this.__internal__endpointStats.errors++,this.__internal__stats.total.errors++,t.callback(e,void 0)}delete this.__internal__handlers[e.id]};__internal__onSocketMessageSubscribe=e=>{if(!e.method)throw Error("No method found in JSONRPC response");let t=AA[e.method]||e.method,r=`${t}::${e.params.subscription}`,n=this.__internal__subscriptions[r];if(!n){// store the JSON, we could have out-of-order subid coming in
this.__internal__waitingForId[r]=e,AD.debug(()=>`Unable to find handler for subscription=${r}`);return}// housekeeping
delete this.__internal__waitingForId[r];try{let t=this.__internal__coder.decodeResponse(e);n.callback(null,t)}catch(e){this.__internal__endpointStats.errors++,this.__internal__stats.total.errors++,n.callback(e,void 0)}};__internal__onSocketOpen=()=>{if(null===this.__internal__websocket)throw Error("WebSocket cannot be null in onOpen");return AD.debug(()=>["connected to",this.endpoint]),this.__internal__isConnected=!0,this.__internal__resubscribe(),this.__internal__emit("connected"),!0};__internal__resubscribe=()=>{let e=this.__internal__subscriptions;this.__internal__subscriptions={},Promise.all(Object.keys(e).map(async t=>{let{callback:r,method:n,params:a,type:i}=e[t];// only re-create subscriptions which are not in author (only area where
// transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
// are not included (and will not be re-broadcast)
if(!i.startsWith("author_"))try{await this.subscribe(i,n,a,r)}catch(e){AD.error(e)}})).catch(AD.error)};__internal__timeoutHandlers=()=>{let e=Date.now(),t=Object.keys(this.__internal__handlers);for(let r=0,n=t.length;r<n;r++){let n=this.__internal__handlers[t[r]];if(e-n.start>this.__internal__timeout){try{n.callback(Error(`No response received from RPC endpoint in ${this.__internal__timeout/1e3}s`),void 0)}catch{// ignore
}this.__internal__endpointStats.timeout++,this.__internal__stats.total.timeout++,delete this.__internal__handlers[t[r]]}}}}var oI=(A("dEXSZ"),A("dEXSZ"));const Aq=Array(256),AG=Array(256);for(let e=0,t=Aq.length;e<t;e++)AG[e]=String.fromCharCode(e).toLowerCase(),Aq[e]=String.fromCharCode(e).toUpperCase();/** @internal */function AW(e){return e.slice(0,e.length-1).toLowerCase()+Aq[e.charCodeAt(e.length-1)]}N=(e,t)=>(t?Aq[e.charCodeAt(0)]:AG[e.charCodeAt(0)])+e.slice(1),e=>{let t=e// replace all separators (including consequtive) with spaces
.replace(/[-_., ]+/g," ")// we don't want leading or trailing spaces
.trim()// split into words
.split(" "),r="";for(let e=0,n=t.length;e<n;e++){let n=t[e];// apply the formatting
r+=N(/^[\dA-Z]+$/.test(n)?n.toLowerCase():n.replace(/^[\dA-Z]{2,}[^a-z]/,AW),e)}return r};const AY=e=>e;function AK(e,t,r,n){return e.filter(({event:e})=>t===e.section&&r.includes(e.method)).map(e=>n(e))}function AJ({event:{data:[e]}}){return e}function AQ({event:{data:e,method:t}}){return"ExtrinsicSuccess"===t?e[0]:e[1]}function A_(e,t,r){return pr({blockHash:e.genesisHash,genesisHash:e.genesisHash},t,r,{runtimeVersion:e.runtimeVersion,signedExtensions:e.registry.signedExtensions,version:e.extrinsicType})}const A$=j5("api/augment");function A0(e,t,r=[]){return t.length?` ${t.length} ${e}${r.length?" and":""}`:""}function A1(e,t){return t.length?`
	${e.padStart(7)}: ${t.sort().join(", ")}`:""}j5("api/init"),j5("api/init");/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */const A2={// Runtime
DispatchError:"DispatchErrorPre6First",AccountInfo:"AccountInfoWithTripleRefCount",Address:"MultiAddress",AmountOf:"i128",Balance:"u128",BlockNumber:"u64",Index:"u64",LookupSource:"MultiAddress",// Ctypes
CtypeCreatorOf:"AccountId",CtypeHashOf:"Hash",ClaimHashOf:"Hash",// Attestations
AttesterOf:"AccountId",AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool"},// Delegations
Permissions:"u32",DelegationNodeIdOf:"Hash",DelegatorIdOf:"AccountId",DelegateSignatureTypeOf:"Vec<u8>",DelegationRoot:{ctypeHash:"CtypeHashOf",owner:"DelegatorIdOf",revoked:"bool"},DelegationNode:{rootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",owner:"DelegatorIdOf",permissions:"Permissions",revoked:"bool"},// DIDs
KeyIdOf:"Hash",DidIdentifierOf:"AccountId",AccountIdentifierOf:"AccountId",BlockNumberOf:"BlockNumber",DidCallableOf:"Call",DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]"}},DidEncryptionKey:{_enum:{X25519:"[u8; 32]"}},DidPublicKey:{_enum:{PublicVerificationKey:"DidVerificationKey",PublicEncryptionKey:"DidEncryptionKey"}},DidVerificationKeyRelationship:{_enum:["Authentication","CapabilityDelegation","CapabilityInvocation","AssertionMethod"]},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature"}},DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",UrlError:"UrlError",InputError:"InputError",InternalError:"Null"}},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce"]},KeyError:{_enum:["InvalidVerificationKeyFormat","InvalidEncryptionKeyFormat"]},UrlError:{_enum:["InvalidUrlEncoding","InvalidUrlScheme"]},InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded","MaxUrlLengthExceeded"]},DidPublicKeyDetails:{key:"DidPublicKey",blockNumber:"BlockNumberOf"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",endpointUrl:"Option<Url>",lastTxCounter:"u64"},DidCreationOperation:{did:"DidIdentifierOf",newAuthenticationKey:"DidVerificationKey",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateOperation:{did:"DidIdentifierOf",newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>",txCounter:"u64"},DidVerificationKeyUpdateAction:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},DidDeletionOperation:{did:"DidIdentifierOf",txCounter:"u64"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf"},HttpUrl:{payload:"Text"},FtpUrl:{payload:"Text"},IpfsUrl:{payload:"Text"},Url:{_enum:{Http:"HttpUrl",Ftp:"FtpUrl",Ipfs:"IpfsUrl"}},// LaunchPallet
LockedBalance:{block:"BlockNumber",amount:"Balance"},// Staking
BalanceOf:"Balance",RoundInfo:{current:"SessionIndex",first:"BlockNumber",length:"BlockNumber"},OrderedSet:"Vec<Stake>",Stake:{owner:"AccountId",amount:"Balance"},TotalStake:{collators:"Balance",delegators:"Balance"},InflationInfo:{collator:"StakingInfo",delegator:"StakingInfo"},StakingInfo:{maxRate:"Perquintill",rewardRate:"RewardRate"},RewardRate:{annual:"Perquintill",perBlock:"Perquintill"},Delegator:{delegations:"Vec<Stake>",total:"Balance"},CollatorSnapshot:{stake:"Balance",delegators:"Vec<Stake>",total:"Balance"},Collator:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},// Staking updated types
DelegationCounter:{round:"SessionIndex",counter:"u32"},// DID updated types
DidVerificationKey:{_enum:{Ed25519:"[u8; 32]",Sr25519:"[u8; 32]",Secp256k1:"[u8; 33]"}},DidSignature:{_enum:{Ed25519:"Ed25519Signature",Sr25519:"Sr25519Signature","Ecdsa-Secp256k1":"EcdsaSignature"}},// Delegation updated types
DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BTreeSet<DelegationNodeIdOf>",details:"DelegationDetails"},DelegationDetails:{owner:"DelegatorIdOf",revoked:"bool",permissions:"Permissions"},DelegationHierarchyDetails:{ctypeHash:"CtypeHashOf"},DelegationStorageVersion:{_enum:["V1","V2"]}};/**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Copyright (c) 2018-2023, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 *//**
 * Removes parts of the type definition without altering the original object.
 *
 * @param oldTypes The old types that should be updated.
 * @param newTypes The new types that will be merged with the old types. Types with the same key will be overwritten by the new types.
 * @param deleteKeys Keys that will get removed from the new and old types.
 * @returns The adjusted types.
 */function A5(e,t,r){let n={...e,...t};return r.forEach(e=>{delete n[e]}),n}const A3=A5(A2,{// DID management update
DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newEndpointUrl:"Option<Url>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidVerificationKeyUpdateAction",delegationKeyUpdate:"DidVerificationKeyUpdateAction",publicKeysToRemove:"BTreeSet<KeyIdOf>",newEndpointUrl:"Option<Url>"}},["DidCreationOperation","DidUpdateOperation","DidDeletionOperation"]),A8=A5(A3,{ServiceEndpoints:{contentHash:"Hash",urls:"Vec<Url>",contentType:"ContentType"},DidFragmentUpdateAction_ServiceEndpoints:{_enum:{Ignore:"Null",Change:"ServiceEndpoints",Delete:"Null"}},DidFragmentUpdateAction_DidVerificationKey:{_enum:{Ignore:"Null",Change:"DidVerificationKey",Delete:"Null"}},ContentType:{_enum:["ApplicationJson","ApplicationJsonLd"]},// Updated types
DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",newKeyAgreementKeys:"BTreeSet<DidEncryptionKey>",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",publicKeysToRemove:"BTreeSet<KeyIdOf>",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"BTreeSet<KeyIdOf>",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",publicKeys:"BTreeMap<KeyIdOf, DidPublicKeyDetails>",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DidStorageVersion:{_enum:["V1","V2"]}},["DidVerificationKeyUpdateAction"]),A9=A5(A8,{// Staking
OrderedSet:"BoundedVec<Stake, MaxCollatorCandidates>",MaxCollatorCandidates:"u32",Collator:{id:"AccountId",stake:"Balance",// new
delegators:"OrderedSet<Stake, MaxDelegatorsPerCollator>",total:"Balance",state:"CollatorStatus"},MaxDelegatorsPerCollator:"u32",Delegator:{// new
delegations:"OrderedSet<Stake, MaxCollatorsPerDelegator>",total:"Balance"},MaxCollatorsPerDelegator:"u32",StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4"]},// Attestation
MaxDelegatedAttestations:"u32",// KILT Launch
MaxClaims:"u32",// Delegation
DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",// new
children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails"},MaxChildren:"u32",// DIDs
DidNewKeyAgreementKeys:"BoundedBTreeSet<DidEncryptionKey, MaxNewKeyAgreementKeys>",DidKeyAgreementKeys:"BoundedBTreeSet<KeyIdOf, MaxTotalKeyAgreementKeys>",DidVerificationKeysToRevoke:"BoundedBTreeSet<KeyIdOf, MaxVerificationKeysToRevoke>",MaxNewKeyAgreementKeys:"u32",MaxTotalKeyAgreementKeys:"u32",MaxVerificationKeysToRevoke:"u32",MaxPublicKeysPerDid:"u32",DidPublicKeyMap:"BoundedBTreeMap<KeyIdOf, DidPublicKeyDetails, MaxPublicKeysPerDid>",DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAttestationKey:"Option<DidVerificationKey>",newDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidUpdateDetails:{newAuthenticationKey:"Option<DidVerificationKey>",// new
newKeyAgreementKeys:"DidNewKeyAgreementKeys",attestationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",delegationKeyUpdate:"DidFragmentUpdateAction_DidVerificationKey",// new
publicKeysToRemove:"DidVerificationKeysToRevoke",serviceEndpointsUpdate:"DidFragmentUpdateAction_ServiceEndpoints"},DidDetails:{authenticationKey:"KeyIdOf",// new
keyAgreementKeys:"DidKeyAgreementKeys",delegationKey:"Option<KeyIdOf>",attestationKey:"Option<KeyIdOf>",// new
publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},ServiceEndpoints:{contentHash:"Hash",// new
urls:"BoundedVec<Url, MaxEndpointUrlsCount>",contentType:"ContentType"},MaxUrlLength:"u32",MaxEndpointUrlsCount:"u32",StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",// new
MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}}},["CollatorSnapshot"]),A6=A5(A9,{StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",VerificationKeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxTxCounterValue:"Null",MaxPublicKeysPerDidKeyIdentifierExceeded:"Null",// renamed
MaxTotalKeyAgreementKeysExceeded:"Null",MaxOldAttestationKeysExceeded:"Null"}},DidCreationDetails:{did:"DidIdentifierOf",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>",newServiceEndpoints:"Option<ServiceEndpoints>"},DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",// renamed
capabilityDelegationKey:"Option<KeyIdOf>",// renamed
assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",serviceEndpoints:"Option<ServiceEndpoints>",lastTxCounter:"u64"},DelegateSignatureTypeOf:"DidSignature",ContentType:{_enum:["application/json","application/ld+json"]},// fix: generics mostly don't work here, but OrderedSet is reduced to a Vec anyway
Collator:{id:"AccountId",stake:"Balance",// fix
delegators:"Vec<Stake>",total:"Balance",state:"CollatorStatus"},Delegator:{// fix
delegations:"Vec<Stake>",total:"Balance"},Keys:"SessionKeys1"},["DidUpdateDetails","OrderedSet"]),A4=A5(A6,{MinCollators:"u32",MaxTopCandidates:"u32",// Renamed collator to candidate since they are not always collators (most of them are candidates)
Candidate:{id:"AccountId",stake:"Balance",delegators:"Vec<Stake>",total:"Balance",// renamed from state to status to be consistent
status:"CandidateStatus"},CandidateStatus:{_enum:{Active:"Null",Leaving:"SessionIndex"}},StakingStorageVersion:{_enum:["V1_0_0","V2_0_0","V3_0_0","V4","V5"]}},["MaxCollatorCandidates","MinSelectedCandidates","Collator","CollatorStatus"]),A7={// Use the old types as the base of the new types.
...A4,// We add these new type:
DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",submitter:"AccountId"}},De=A5(A7,{// Add deposit for attestations
Deposit:{owner:"AccountId",amount:"Balance"},AttestationDetails:{ctypeHash:"CtypeHashOf",attester:"AttesterOf",delegationId:"Option<DelegationNodeIdOf>",revoked:"bool",// Added
deposit:"Deposit"},DidAuthorizedCallOperation:{did:"DidIdentifierOf",txCounter:"u64",call:"DidCallableOf",// Added
blockNumber:"BlockNumber",submitter:"AccountId"},// Remove serviceEndpoints
DidDetails:{authenticationKey:"KeyIdOf",keyAgreementKeys:"DidKeyAgreementKeys",capabilityDelegationKey:"Option<KeyIdOf>",assertionMethodKey:"Option<KeyIdOf>",publicKeys:"DidPublicKeyMap",lastTxCounter:"u64",// Added
deposit:"Deposit"},// Remove newServiceEndpoints
DidCreationDetails:{did:"DidIdentifierOf",// Added
submitter:"AccountId",newKeyAgreementKeys:"DidNewKeyAgreementKeys",newAssertionMethodKey:"Option<DidVerificationKey>",newCapabilityDelegationKey:"Option<DidVerificationKey>"},// Remove UrlError
DidError:{_enum:{StorageError:"StorageError",SignatureError:"SignatureError",InputError:"InputError",InternalError:"Null"}},// Remove MaxUrlLengthExceeded
InputError:{_enum:["MaxKeyAgreementKeysLimitExceeded","MaxVerificationKeysToRemoveLimitExceeded"]},StorageError:{_enum:{DidAlreadyPresent:"Null",DidNotPresent:"Null",DidKeyNotPresent:"DidVerificationKeyRelationship",KeyNotPresent:"Null",CurrentlyActiveKey:"Null",MaxPublicKeysPerDidExceeded:"Null",MaxTotalKeyAgreementKeysExceeded:"Null",DidAlreadyDeleted:"Null"}},SignatureError:{_enum:["InvalidSignatureFormat","InvalidSignature","InvalidNonce","TransactionExpired"]},DelegationNode:{hierarchyRootId:"DelegationNodeIdOf",parent:"Option<DelegationNodeIdOf>",children:"BoundedBTreeSet<DelegationNodeIdOf, MaxChildren>",details:"DelegationDetails",// new
deposit:"Deposit"},// Add V3
DidStorageVersion:{_enum:["V1","V2","V3"]}},["ServiceEndpoints","UrlError","ContentType","Url","HttpUrl","FtpUrl","IpfsUrl","MaxEndpointUrlsCount","MaxUrlLength","DelegationRoot"]),Dt=(A5(De,{},["DispatchError"]),{query_did_by_w3n:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_did_by_account_id:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query_did:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}}),Dr={query_by_web3_name:{description:"Return the information relative to the owner of the provided web3name, if any.",params:[{name:"name",type:"Text"}],type:"Option<RawDidLinkedInfo>"},query_by_account:{description:"Return the information relative to the DID to which the provided account is linked, if any.",params:[{name:"account",type:"DidApiAccountId"}],type:"Option<RawDidLinkedInfo>"},query:{description:"Return the information relative to the owner of the provided DID, if present.",params:[{name:"did",type:"AccountId32"}],type:"Option<RawDidLinkedInfo>"}},Dn={DidApi:[{methods:{...Dt},version:1},// Same calls, since the type of AccountId is overwritten in the type definitions
{methods:{...Dt},version:2}],Did:[{methods:{...Dr},version:1},// Same calls, since the type of AccountId is overwritten in the type definitions
{methods:{...Dr},version:2}]},Da={PublicCredentials:[{methods:{get_by_id:{description:"Return the public credential with the specified ID, if found.",params:[{name:"credential_id",type:"Hash"}],type:"Option<PublicCredentialsCredentialsCredentialEntry>"},get_by_subject:{description:`Return all the public credentials linked to the specified subject.
          An optional filter can be passed to be applied to the result before being returned to the client.
          It returns an error if the provided specified subject ID is not valid.
          `,params:[{name:"subject",type:"Text"},{name:"filter",type:"Option<PublicCredentialFilter>"}],type:"Result<Vec<(Hash, PublicCredentialsCredentialsCredentialEntry)>, PublicCredentialError>"}},version:1}]};({...Dn,...Da});const Di={$id:"kilt:ctype:0x2a63756ff4934eb51d5c405476ea92dfa9413388a8a33c37755442e2111304b5",$schema:"ipfs://bafybeiah66wbkhqbqn7idkostj2iqyan2tstc4tpqt65udlhimd7hcxjyq/",additionalProperties:!1,properties:{Anschlussnetzbetreiber:{type:"string"},"Art der Anlage":{type:"string"},Betreiber:{type:"string"},Betreiberstatus:{type:"string"},Bruttoleistung:{type:"number"},"EEG Inbetriebnahmedatum":{format:"date",type:"string"},"EEG Registrierungsdatum":{format:"date",type:"string"},"Errichtungsort (Lage)":{type:"string"},Inbetriebnahmedatum:{format:"date",type:"string"},"Installierte Leistung":{type:"number"},"Marktlokations-ID":{type:"string"},"Messlokations-ID":{type:"string"},"Meter ID":{type:"string"},"Name der Einheit":{type:"string"},"Registrierungsdatum im aktuellen Betriebsstatus":{format:"date",type:"string"},"SMGW ID":{type:"string"},Standort:{type:"string"},Wechselrichterleistung:{type:"number"}},title:"DIVE Anlagezertifikat",type:"object"},Do={$id:"kilt:ctype:0x707806fa456431dc285a57dbb06258709ee9dad517cbd98a856bb83a57f19a28",$schema:"ipfs://bafybeiah66wbkhqbqn7idkostj2iqyan2tstc4tpqt65udlhimd7hcxjyq/",additionalProperties:!1,properties:{address:{type:"string"},name:{type:"string"}},title:"Selbstauskunfts Zertifikat",type:"object"};async function Ds(e){if(!e)throw Error("No provider");let t="challenge",r=await ey.get(t);if(200!==r.status)throw Error("No valid challenge received");let{dAppName:n,dAppEncryptionKeyUri:a,challenge:i}=await r.json(),o=await e.startSession(n,a,i),s=await ey.post(t,{json:o});if(200!==s.status)throw Error("No valid Session.");return o}async function Dl(e,t){let r="credential",n=await ey.post(`${r}/terms`,{json:t});if(200!==n.status)throw Error("Failed to get terms",await n.json());let a=await n.json(),i=await new Promise((t,r)=>{try{e.listen(async e=>{t(e)}),e.send(a)}catch(e){r(e)}}),o=await ey.post(r,{json:i,timeout:!1});if(200!==o.status)throw Error("Failed to get terms",await o.json())}var Dc=({address:e,ownerDidPending:t,boxDidPending:r,progress:n,ownerDIDReady:a,ownerDIDs:i,handleCreateOwnerDIDClick:o,handleGetOwnerDIDsClick:s})=>{let[l,c]=(0,Z.useState)(window.kilt),u=(0,Z.useCallback)(async e=>{e.preventDefault();let t=new FormData(e.currentTarget),r=Object.fromEntries(t.entries()),n=(0,eE.getExtensions)(),a=n.find(e=>"Sporran"===e.name),i=await a.getDidList(),o=i[0].did,s=mO.fromCTypeAndClaimContents(Do,r,o),l=await Ds(a);await Dl(l,s)},[]);return(// useEffects
(0,Z.useEffect)(()=>{function e(){c({...window.kilt})}return window.addEventListener("kilt-extension#initialized",e),window.dispatchEvent(new CustomEvent("kilt-dapp#initialized")),()=>{window.removeEventListener("kilt-extension#initialized",e)}},[]),/*#__PURE__*/(0,C.jsx)(C.Fragment,{children:e&&/*#__PURE__*/(0,C.jsxs)(Z.Fragment,{children:[0===Object.entries(l).length&&/*#__PURE__*/(0,C.jsxs)("p",{children:["❌️ KILT Wallet nicht vorhanden, bitte installieren"," ",/*#__PURE__*/(0,C.jsx)("a",{href:"https://www.sporran.org/",target:"_blank",rel:"noreferrer",children:"Sporran"}),"!"]}),!t&&/*#__PURE__*/(0,C.jsx)("p",{children:Object.entries(l).map(([e,{name:t,getSignedDidCreationExtrinsic:n}])=>n&&/*#__PURE__*/(0,C.jsxs)("button",{type:"button",name:e,onClick:o,disabled:r,children:["Identit\xe4t erstellen mit ",t]},e))}),t&&/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsx)("progress",{max:40,value:n})}),a&&/*#__PURE__*/(0,C.jsx)("p",{children:Object.entries(l).map(([e,{name:t,getDidList:n}])=>n&&/*#__PURE__*/(0,C.jsxs)("button",{type:"button",name:e,onClick:s,disabled:r,children:["Identit\xe4t abfragen von ",t]},e))}),i.length>0&&/*#__PURE__*/(0,C.jsx)("ul",{children:i.map(({did:e,name:t})=>/*#__PURE__*/(0,C.jsxs)("li",{children:[e," ",t&&`(${t})`]},e))}),/*#__PURE__*/(0,C.jsx)("form",{onSubmit:u,children:/*#__PURE__*/(0,C.jsxs)("fieldset",{children:[/*#__PURE__*/(0,C.jsx)("legend",{children:"Selbstauskunftszertifikat"}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Name: ",/*#__PURE__*/(0,C.jsx)("input",{name:"name",required:!0})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Adresse: ",/*#__PURE__*/(0,C.jsx)("input",{name:"address",required:!0})]})}),/*#__PURE__*/(0,C.jsx)("button",{type:"submit",children:"Anfordern"})]})})]})}))},Z=(A("acw62"),A("acw62")),Du={};s=A("acw62"),Du=function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t||4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(n,a,(function(t){return e[t]}).bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=48)}([function(e,t){e.exports=s},function(e,t){var r=e.exports={version:"2.6.12"};"number"==typeof __e&&(__e=r)},function(e,t,r){var n=r(26)("wks"),a=r(17),i=r(3).Symbol,o="function"==typeof i;(e.exports=function(e){return n[e]||(n[e]=o&&i[e]||(o?i:a)("Symbol."+e))}).store=n},function(e,t){var r=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(e,t,r){e.exports=!r(8)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},function(e,t,r){var n=r(7),a=r(16);e.exports=r(4)?function(e,t,r){return n.f(e,t,a(1,r))}:function(e,t,r){return e[t]=r,e}},function(e,t,r){var n=r(10),a=r(35),i=r(23),o=Object.defineProperty;t.f=r(4)?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),a)try{return o(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,r){var n=r(40),a=r(22);e.exports=function(e){return n(a(e))}},function(e,t,r){var n=r(11);e.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){e.exports={}},function(e,t,r){var n=r(39),a=r(27);e.exports=Object.keys||function(e){return n(e,a)}},function(e,t){e.exports=!0},function(e,t,r){var n=r(3),a=r(1),i=r(53),o=r(6),s=r(5),l=function(e,t,r){var c,u,d,f=e&l.F,p=e&l.G,h=e&l.S,b=e&l.P,y=e&l.B,m=e&l.W,g=p?a:a[t]||(a[t]={}),v=g.prototype,x=p?n:h?n[t]:(n[t]||{}).prototype;for(c in p&&(r=t),r)(u=!f&&x&&void 0!==x[c])&&s(g,c)||(d=u?x[c]:r[c],g[c]=p&&"function"!=typeof x[c]?r[c]:y&&u?i(d,n):m&&x[c]==d?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(d):b&&"function"==typeof d?i(Function.call,d):d,b&&((g.virtual||(g.virtual={}))[c]=d,e&l.R&&v&&!v[c]&&o(v,c,d)))};l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,e.exports=l},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var r=0,n=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++r+n).toString(36))}},function(e,t,r){var n=r(22);e.exports=function(e){return Object(n(e))}},function(e,t){t.f=({}).propertyIsEnumerable},function(e,t,r){var n=r(52)(!0);r(34)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,r){var n=r(11);e.exports=function(e,t){var r,a;if(!n(e))return e;if(t&&"function"==typeof(r=e.toString)&&!n(a=r.call(e))||"function"==typeof(r=e.valueOf)&&!n(a=r.call(e))||!t&&"function"==typeof(r=e.toString)&&!n(a=r.call(e)))return a;throw TypeError("Can't convert object to primitive value")}},function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},function(e,t,r){var n=r(26)("keys"),a=r(17);e.exports=function(e){return n[e]||(n[e]=a(e))}},function(e,t,r){var n=r(1),a=r(3),i=a["__core-js_shared__"]||(a["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:n.version,mode:r(14)?"pure":"global",copyright:"\xa9 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,r){var n=r(7).f,a=r(5),i=r(2)("toStringTag");e.exports=function(e,t,r){e&&!a(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},function(e,t,r){r(62);for(var n=r(3),a=r(6),i=r(12),o=r(2)("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),l=0;l<s.length;l++){var c=s[l],u=n[c],d=u&&u.prototype;d&&!d[o]&&a(d,o,c),i[c]=i.Array}},function(e,t,r){t.f=r(2)},function(e,t,r){var n=r(3),a=r(1),i=r(14),o=r(30),s=r(7).f;e.exports=function(e){var t=a.Symbol||(a.Symbol=i?{}:n.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:o.f(e)})}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t){e.exports=function(e,t,r){return Math.min(Math.max(e,t),r)}},function(e,t,r){var n=r(14),a=r(15),i=r(37),o=r(6),s=r(12),l=r(55),c=r(28),u=r(61),d=r(2)("iterator"),f=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,r,h,b,y,m){l(r,t,h);var g,v,x,w=function(e){return!f&&e in z?z[e]:function(){return new r(this,e)}},P=t+" Iterator",O="values"==b,T=!1,z=e.prototype,k=z[d]||z["@@iterator"]||b&&z[b],L=k||w(b),E=b?O?w("entries"):L:void 0,N="Array"==t&&z.entries||k;if(N&&(x=u(N.call(new e)))!==Object.prototype&&x.next&&(c(x,P,!0),n||"function"==typeof x[d]||o(x,d,p)),O&&k&&"values"!==k.name&&(T=!0,L=function(){return k.call(this)}),(!n||m)&&(f||T||!z[d])&&o(z,d,L),s[t]=L,s[P]=p,b){if(g={values:O?L:w("values"),keys:y?L:w("keys"),entries:E},m)for(v in g)v in z||i(z,v,g[v]);else a(a.P+a.F*(f||T),t,g)}return g}},function(e,t,r){e.exports=!r(4)&&!r(8)(function(){return 7!=Object.defineProperty(r(36)("div"),"a",{get:function(){return 7}}).a})},function(e,t,r){var n=r(11),a=r(3).document,i=n(a)&&n(a.createElement);e.exports=function(e){return i?a.createElement(e):{}}},function(e,t,r){e.exports=r(6)},function(e,t,r){var n=r(10),a=r(56),i=r(27),o=r(25)("IE_PROTO"),s=function(){},l=function(){var e,t=r(36)("iframe"),n=i.length;for(t.style.display="none",r(60).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object</script>"),e.close(),l=e.F;n--;)delete l.prototype[i[n]];return l()};e.exports=Object.create||function(e,t){var r;return null!==e?(s.prototype=n(e),r=new s,s.prototype=null,r[o]=e):r=l(),void 0===t?r:a(r,t)}},function(e,t,r){var n=r(5),a=r(9),i=r(57)(!1),o=r(25)("IE_PROTO");e.exports=function(e,t){var r,s=a(e),l=0,c=[];for(r in s)r!=o&&n(s,r)&&c.push(r);for(;t.length>l;)n(s,r=t[l++])&&(~i(c,r)||c.push(r));return c}},function(e,t,r){var n=r(24);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},function(e,t,r){var n=r(39),a=r(27).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,a)}},function(e,t,r){var n=r(24),a=r(2)("toStringTag"),i="Arguments"==n(function(){return arguments}());e.exports=function(e){var t,r,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),a))?r:i?n(t):"Object"==(o=n(t))&&"function"==typeof t.callee?"Arguments":o}},function(e,t){var r;r=function(){return this}();try{r=r||Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t){var r=/-?\d+(\.\d+)?%?/g;e.exports=function(e){return e.match(r)}},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.getBase16Theme=t.createStyling=t.invertTheme=void 0;var n=p(r(49)),a=p(r(76)),i=p(r(81)),o=p(r(89)),s=p(r(93)),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(94)),c=p(r(132)),u=p(r(133)),d=p(r(138)),f=r(139);function p(e){return e&&e.__esModule?e:{default:e}}var h=l.default,b=(0,o.default)(h),y=(0,d.default)(u.default,f.rgb2yuv,function(e){var t=(0,i.default)(e,3),r=t[0];return[r<.25?1:r<.5?.9-r:1.1-r,t[1],t[2]]},f.yuv2rgb,c.default),m=function(e){return function(t){return{className:[t.className,e.className].filter(Boolean).join(" "),style:(0,a.default)({},t.style||{},e.style||{})}}},g=function(e,t){var r=(0,o.default)(t);for(var i in e)-1===r.indexOf(i)&&r.push(i);return r.reduce(function(r,i){return r[i]=function(e,t){if(void 0===e)return t;if(void 0===t)return e;var r=void 0===e?"undefined":(0,n.default)(e),i=void 0===t?"undefined":(0,n.default)(t);switch(r){case"string":switch(i){case"string":return[t,e].filter(Boolean).join(" ");case"object":return m({className:e,style:t});case"function":return function(r){for(var n=arguments.length,a=Array(n>1?n-1:0),i=1;i<n;i++)a[i-1]=arguments[i];return m({className:e})(t.apply(void 0,[r].concat(a)))}}case"object":switch(i){case"string":return m({className:t,style:e});case"object":return(0,a.default)({},t,e);case"function":return function(r){for(var n=arguments.length,a=Array(n>1?n-1:0),i=1;i<n;i++)a[i-1]=arguments[i];return m({style:e})(t.apply(void 0,[r].concat(a)))}}case"function":switch(i){case"string":return function(r){for(var n=arguments.length,a=Array(n>1?n-1:0),i=1;i<n;i++)a[i-1]=arguments[i];return e.apply(void 0,[m(r)({className:t})].concat(a))};case"object":return function(r){for(var n=arguments.length,a=Array(n>1?n-1:0),i=1;i<n;i++)a[i-1]=arguments[i];return e.apply(void 0,[m(r)({style:t})].concat(a))};case"function":return function(r){for(var n=arguments.length,a=Array(n>1?n-1:0),i=1;i<n;i++)a[i-1]=arguments[i];return e.apply(void 0,[t.apply(void 0,[r].concat(a))].concat(a))}}}}(e[i],t[i]),r},{})},v=function(e,t){for(var r=arguments.length,i=Array(r>2?r-2:0),s=2;s<r;s++)i[s-2]=arguments[s];if(null===t)return e;Array.isArray(t)||(t=[t]);var l=t.map(function(t){return e[t]}).filter(Boolean).reduce(function(e,t){return"string"==typeof t?e.className=[e.className,t].filter(Boolean).join(" "):"object"===(void 0===t?"undefined":(0,n.default)(t))?e.style=(0,a.default)({},e.style,t):"function"==typeof t&&(e=(0,a.default)({},e,t.apply(void 0,[e].concat(i)))),e},{className:"",style:{}});return l.className||delete l.className,0===(0,o.default)(l.style).length&&delete l.style,l},x=t.invertTheme=function(e){return(0,o.default)(e).reduce(function(t,r){return t[r]=/^base/.test(r)?y(e[r]):"scheme"===r?e[r]+":inverted":e[r],t},{})},w=(t.createStyling=(0,s.default)(function(e){for(var t=arguments.length,r=Array(t>3?t-3:0),n=3;n<t;n++)r[n-3]=arguments[n];var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},c=i.defaultBase16,u=void 0===c?h:c,d=i.base16Themes,f=w(l,void 0===d?null:d);f&&(l=(0,a.default)({},f,l));var p=b.reduce(function(e,t){return e[t]=l[t]||u[t],e},{}),y=g((0,o.default)(l).reduce(function(e,t){return -1===b.indexOf(t)&&(e[t]=l[t]),e},{}),e(p));return(0,s.default)(v,2).apply(void 0,[y].concat(r))},3),t.getBase16Theme=function(e,t){if(e&&e.extend&&(e=e.extend),"string"==typeof e){var r=e.split(":"),n=(0,i.default)(r,2),a=n[0],o=n[1];e=(t||{})[a]||l[a],"inverted"===o&&(e=x(e))}return e&&e.hasOwnProperty("base00")?e:void 0})},function(e,t,r){var n,a="object"==typeof Reflect?Reflect:null,i=a&&"function"==typeof a.apply?a.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=a&&"function"==typeof a.ownKeys?a.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,e.exports.once=function(e,t){return new Promise(function(r,n){var a;function i(){void 0!==a&&e.removeListener("error",a),r([].slice.call(arguments))}"error"!==t&&(a=function(r){e.removeListener(t,i),n(r)},e.once("error",a)),e.once(t,i)})},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var l=10;function c(e){if("function"!=typeof e)throw TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function d(e,t,r,n){var a,i,o;if(c(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),o=i[t]),void 0===o)o=i[t]=r,++e._eventsCount;else if("function"==typeof o?o=i[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),(a=u(e))>0&&o.length>a&&!o.warned){o.warned=!0;var s=Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");s.name="MaxListenersExceededWarning",s.emitter=e,s.type=t,s.count=o.length,console&&console.warn&&console.warn(s)}return e}function f(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0==arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function p(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},a=f.bind(n);return a.listener=r,n.wrapFn=a,a}function h(e,t,r){var n=e._events;if(void 0===n)return[];var a=n[t];return void 0===a?[]:"function"==typeof a?r?[a.listener||a]:[a]:r?function(e){for(var t=Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(a):y(a,a.length)}function b(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function y(e,t){for(var r=Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||o(e))throw RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return u(this)},s.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,a=this._events;if(void 0!==a)n=n&&void 0===a.error;else if(!n)return!1;if(n){if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var o,s=Error("Unhandled error."+(o?" ("+o.message+")":""));throw s.context=o,s}var l=a[e];if(void 0===l)return!1;if("function"==typeof l)i(l,this,t);else{var c=l.length,u=y(l,c);for(r=0;r<c;++r)i(u[r],this,t)}return!0},s.prototype.addListener=function(e,t){return d(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return d(this,e,t,!0)},s.prototype.once=function(e,t){return c(t),this.on(e,p(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return c(t),this.prependListener(e,p(this,e,t)),this},s.prototype.removeListener=function(e,t){var r,n,a,i,o;if(c(t),void 0===(n=this._events)||void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(a=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){o=r[i].listener,a=i;break}if(a<0)return this;0===a?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,a),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,o||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0==arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0==arguments.length){var a,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(a=i[n])&&this.removeAllListeners(a);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},s.prototype.listeners=function(e){return h(this,e,!0)},s.prototype.rawListeners=function(e){return h(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):b.call(e,t)},s.prototype.listenerCount=b,s.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(e,t,r){e.exports.Dispatcher=r(140)},function(e,t,r){e.exports=r(142)},function(e,t,r){t.__esModule=!0;var n=o(r(50)),a=o(r(65)),i="function"==typeof a.default&&"symbol"==typeof n.default?function(e){return typeof e}:function(e){return e&&"function"==typeof a.default&&e.constructor===a.default&&e!==a.default.prototype?"symbol":typeof e};function o(e){return e&&e.__esModule?e:{default:e}}t.default="function"==typeof a.default&&"symbol"===i(n.default)?function(e){return void 0===e?"undefined":i(e)}:function(e){return e&&"function"==typeof a.default&&e.constructor===a.default&&e!==a.default.prototype?"symbol":void 0===e?"undefined":i(e)}},function(e,t,r){e.exports={default:r(51),__esModule:!0}},function(e,t,r){r(20),r(29),e.exports=r(30).f("iterator")},function(e,t,r){var n=r(21),a=r(22);e.exports=function(e){return function(t,r){var i,o,s=String(a(t)),l=n(r),c=s.length;return l<0||l>=c?e?"":void 0:(i=s.charCodeAt(l))<55296||i>56319||l+1===c||(o=s.charCodeAt(l+1))<56320||o>57343?e?s.charAt(l):i:e?s.slice(l,l+2):o-56320+(i-55296<<10)+65536}}},function(e,t,r){var n=r(54);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,a){return e.call(t,r,n,a)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,r){var n=r(38),a=r(16),i=r(28),o={};r(6)(o,r(2)("iterator"),function(){return this}),e.exports=function(e,t,r){e.prototype=n(o,{next:a(1,r)}),i(e,t+" Iterator")}},function(e,t,r){var n=r(7),a=r(10),i=r(13);e.exports=r(4)?Object.defineProperties:function(e,t){a(e);for(var r,o=i(t),s=o.length,l=0;s>l;)n.f(e,r=o[l++],t[r]);return e}},function(e,t,r){var n=r(9),a=r(58),i=r(59);e.exports=function(e){return function(t,r,o){var s,l=n(t),c=a(l.length),u=i(o,c);if(e&&r!=r){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((e||u in l)&&l[u]===r)return e||u||0;return!e&&-1}}},function(e,t,r){var n=r(21),a=Math.min;e.exports=function(e){return e>0?a(n(e),9007199254740991):0}},function(e,t,r){var n=r(21),a=Math.max,i=Math.min;e.exports=function(e,t){return(e=n(e))<0?a(e+t,0):i(e,t)}},function(e,t,r){var n=r(3).document;e.exports=n&&n.documentElement},function(e,t,r){var n=r(5),a=r(18),i=r(25)("IE_PROTO"),o=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return n(e=a(e),i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?o:null}},function(e,t,r){var n=r(63),a=r(64),i=r(12),o=r(9);e.exports=r(34)(Array,"Array",function(e,t){this._t=o(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,a(1)):a(0,"keys"==t?r:"values"==t?e[r]:[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,r){e.exports={default:r(66),__esModule:!0}},function(e,t,r){r(67),r(73),r(74),r(75),e.exports=r(1).Symbol},function(e,t,r){var n=r(3),a=r(5),i=r(4),o=r(15),s=r(37),l=r(68).KEY,c=r(8),u=r(26),d=r(28),f=r(17),p=r(2),h=r(30),b=r(31),y=r(69),m=r(70),g=r(10),v=r(11),x=r(18),w=r(9),P=r(23),O=r(16),T=r(38),z=r(71),k=r(72),L=r(32),E=r(7),N=r(13),S=k.f,M=E.f,j=z.f,H=n.Symbol,R=n.JSON,I=R&&R.stringify,B=p("_hidden"),V=p("toPrimitive"),X={}.propertyIsEnumerable,U=u("symbol-registry"),A=u("symbols"),D=u("op-symbols"),C=Object.prototype,F="function"==typeof H&&!!L.f,Z=n.QObject,q=!Z||!Z.prototype||!Z.prototype.findChild,G=i&&c(function(){return 7!=T(M({},"a",{get:function(){return M(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=S(C,t);n&&delete C[t],M(e,t,r),n&&e!==C&&M(C,t,n)}:M,W=function(e){var t=A[e]=T(H.prototype);return t._k=e,t},Y=F&&"symbol"==typeof H.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof H},K=function(e,t,r){return e===C&&K(D,t,r),g(e),t=P(t,!0),g(r),a(A,t)?(r.enumerable?(a(e,B)&&e[B][t]&&(e[B][t]=!1),r=T(r,{enumerable:O(0,!1)})):(a(e,B)||M(e,B,O(1,{})),e[B][t]=!0),G(e,t,r)):M(e,t,r)},J=function(e,t){g(e);for(var r,n=y(t=w(t)),a=0,i=n.length;i>a;)K(e,r=n[a++],t[r]);return e},Q=function(e){var t=X.call(this,e=P(e,!0));return!(this===C&&a(A,e)&&!a(D,e))&&(!(t||!a(this,e)||!a(A,e)||a(this,B)&&this[B][e])||t)},_=function(e,t){if(e=w(e),t=P(t,!0),e!==C||!a(A,t)||a(D,t)){var r=S(e,t);return!r||!a(A,t)||a(e,B)&&e[B][t]||(r.enumerable=!0),r}},$=function(e){for(var t,r=j(w(e)),n=[],i=0;r.length>i;)a(A,t=r[i++])||t==B||t==l||n.push(t);return n},ee=function(e){for(var t,r=e===C,n=j(r?D:w(e)),i=[],o=0;n.length>o;)a(A,t=n[o++])&&(!r||a(C,t))&&i.push(A[t]);return i};F||(s((H=function(){if(this instanceof H)throw TypeError("Symbol is not a constructor!");var e=f(arguments.length>0?arguments[0]:void 0),t=function(r){this===C&&t.call(D,r),a(this,B)&&a(this[B],e)&&(this[B][e]=!1),G(this,e,O(1,r))};return i&&q&&G(C,e,{configurable:!0,set:t}),W(e)}).prototype,"toString",function(){return this._k}),k.f=_,E.f=K,r(41).f=z.f=$,r(19).f=Q,L.f=ee,i&&!r(14)&&s(C,"propertyIsEnumerable",Q,!0),h.f=function(e){return W(p(e))}),o(o.G+o.W+!F*o.F,{Symbol:H});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),er=0;et.length>er;)p(et[er++]);for(var en=N(p.store),ea=0;en.length>ea;)b(en[ea++]);o(o.S+!F*o.F,"Symbol",{for:function(e){return a(U,e+="")?U[e]:U[e]=H(e)},keyFor:function(e){if(!Y(e))throw TypeError(e+" is not a symbol!");for(var t in U)if(U[t]===e)return t},useSetter:function(){q=!0},useSimple:function(){q=!1}}),o(o.S+!F*o.F,"Object",{create:function(e,t){return void 0===t?T(e):J(T(e),t)},defineProperty:K,defineProperties:J,getOwnPropertyDescriptor:_,getOwnPropertyNames:$,getOwnPropertySymbols:ee});var ei=c(function(){L.f(1)});o(o.S+o.F*ei,"Object",{getOwnPropertySymbols:function(e){return L.f(x(e))}}),R&&o(o.S+o.F*(!F||c(function(){var e=H();return"[null]"!=I([e])||"{}"!=I({a:e})||"{}"!=I(Object(e))})),"JSON",{stringify:function(e){for(var t,r,n=[e],a=1;arguments.length>a;)n.push(arguments[a++]);if(r=t=n[1],(v(t)||void 0!==e)&&!Y(e))return m(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!Y(t))return t}),n[1]=t,I.apply(R,n)}}),H.prototype[V]||r(6)(H.prototype,V,H.prototype.valueOf),d(H,"Symbol"),d(Math,"Math",!0),d(n.JSON,"JSON",!0)},function(e,t,r){var n=r(17)("meta"),a=r(11),i=r(5),o=r(7).f,s=0,l=Object.isExtensible||function(){return!0},c=!r(8)(function(){return l(Object.preventExtensions({}))}),u=function(e){o(e,n,{value:{i:"O"+ ++s,w:{}}})},d=e.exports={KEY:n,NEED:!1,fastKey:function(e,t){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,n)){if(!l(e))return"F";if(!t)return"E";u(e)}return e[n].i},getWeak:function(e,t){if(!i(e,n)){if(!l(e))return!0;if(!t)return!1;u(e)}return e[n].w},onFreeze:function(e){return c&&d.NEED&&l(e)&&!i(e,n)&&u(e),e}}},function(e,t,r){var n=r(13),a=r(32),i=r(19);e.exports=function(e){var t=n(e),r=a.f;if(r)for(var o,s=r(e),l=i.f,c=0;s.length>c;)l.call(e,o=s[c++])&&t.push(o);return t}},function(e,t,r){var n=r(24);e.exports=Array.isArray||function(e){return"Array"==n(e)}},function(e,t,r){var n=r(9),a=r(41).f,i={}.toString,o="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return o&&"[object Window]"==i.call(e)?function(e){try{return a(e)}catch(e){return o.slice()}}(e):a(n(e))}},function(e,t,r){var n=r(19),a=r(16),i=r(9),o=r(23),s=r(5),l=r(35),c=Object.getOwnPropertyDescriptor;t.f=r(4)?c:function(e,t){if(e=i(e),t=o(t,!0),l)try{return c(e,t)}catch(e){}if(s(e,t))return a(!n.f.call(e,t),e[t])}},function(e,t){},function(e,t,r){r(31)("asyncIterator")},function(e,t,r){r(31)("observable")},function(e,t,r){t.__esModule=!0;var n=r(77),a=n&&n.__esModule?n:{default:n};t.default=a.default||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}},function(e,t,r){e.exports={default:r(78),__esModule:!0}},function(e,t,r){r(79),e.exports=r(1).Object.assign},function(e,t,r){var n=r(15);n(n.S+n.F,"Object",{assign:r(80)})},function(e,t,r){var n=r(4),a=r(13),i=r(32),o=r(19),s=r(18),l=r(40),c=Object.assign;e.exports=!c||r(8)(function(){var e={},t={},r=Symbol(),n="abcdefghijklmnopqrst";return e[r]=7,n.split("").forEach(function(e){t[e]=e}),7!=c({},e)[r]||Object.keys(c({},t)).join("")!=n})?function(e,t){for(var r=s(e),c=arguments.length,u=1,d=i.f,f=o.f;c>u;)for(var p,h=l(arguments[u++]),b=d?a(h).concat(d(h)):a(h),y=b.length,m=0;y>m;)p=b[m++],n&&!f.call(h,p)||(r[p]=h[p]);return r}:c},function(e,t,r){t.__esModule=!0;var n=i(r(82)),a=i(r(85));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){if(Array.isArray(e))return e;if((0,n.default)(Object(e)))return function(e,t){var r=[],n=!0,i=!1,o=void 0;try{for(var s,l=(0,a.default)(e);!(n=(s=l.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{!n&&l.return&&l.return()}finally{if(i)throw o}}return r}(e,t);throw TypeError("Invalid attempt to destructure non-iterable instance")}},function(e,t,r){e.exports={default:r(83),__esModule:!0}},function(e,t,r){r(29),r(20),e.exports=r(84)},function(e,t,r){var n=r(42),a=r(2)("iterator"),i=r(12);e.exports=r(1).isIterable=function(e){var t=Object(e);return void 0!==t[a]||"@@iterator"in t||i.hasOwnProperty(n(t))}},function(e,t,r){e.exports={default:r(86),__esModule:!0}},function(e,t,r){r(29),r(20),e.exports=r(87)},function(e,t,r){var n=r(10),a=r(88);e.exports=r(1).getIterator=function(e){var t=a(e);if("function"!=typeof t)throw TypeError(e+" is not iterable!");return n(t.call(e))}},function(e,t,r){var n=r(42),a=r(2)("iterator"),i=r(12);e.exports=r(1).getIteratorMethod=function(e){if(null!=e)return e[a]||e["@@iterator"]||i[n(e)]}},function(e,t,r){e.exports={default:r(90),__esModule:!0}},function(e,t,r){r(91),e.exports=r(1).Object.keys},function(e,t,r){var n=r(18),a=r(13);r(92)("keys",function(){return function(e){return a(n(e))}})},function(e,t,r){var n=r(15),a=r(1),i=r(8);e.exports=function(e,t){var r=(a.Object||{})[e]||Object[e],o={};o[e]=t(r),n(n.S+n.F*i(function(){r(1)}),"Object",o)}},function(e,t,r){(function(t){var r=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],n=/^\s+|\s+$/g,a=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,i=/\{\n\/\* \[wrapped with (.+)\] \*/,o=/,? & /,s=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,c=/^\[object .+?Constructor\]$/,u=/^0o[0-7]+$/i,d=/^(?:0|[1-9]\d*)$/,f=parseInt,p="object"==typeof t&&t&&t.Object===Object&&t,h="object"==typeof self&&self&&self.Object===Object&&self,b=p||h||Function("return this")();function y(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}function m(e){return e!=e}function g(e,t){for(var r=-1,n=e.length,a=0,i=[];++r<n;){var o=e[r];o!==t&&"__lodash_placeholder__"!==o||(e[r]="__lodash_placeholder__",i[a++]=r)}return i}var v,x,w,P=Function.prototype,O=Object.prototype,T=b["__core-js_shared__"],z=(v=/[^.]+$/.exec(T&&T.keys&&T.keys.IE_PROTO||""))?"Symbol(src)_1."+v:"",k=P.toString,L=O.hasOwnProperty,E=O.toString,N=RegExp("^"+k.call(L).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),S=Object.create,M=Math.max,j=Math.min,H=(x=X(Object,"defineProperty"),(w=X.name)&&w.length>2?x:void 0);function R(e){return function(){var t,r=arguments;switch(r.length){case 0:return new e;case 1:return new e(r[0]);case 2:return new e(r[0],r[1]);case 3:return new e(r[0],r[1],r[2]);case 4:return new e(r[0],r[1],r[2],r[3]);case 5:return new e(r[0],r[1],r[2],r[3],r[4]);case 6:return new e(r[0],r[1],r[2],r[3],r[4],r[5]);case 7:return new e(r[0],r[1],r[2],r[3],r[4],r[5],r[6])}var n=D(t=e.prototype)?S(t):{},a=e.apply(n,r);return D(a)?a:n}}function I(e,t,r,n,a,i,o,s,l,c){var u=128&t,f=1&t,p=2&t,h=24&t,y=512&t,m=p?void 0:R(e);return function v(){for(var x=arguments.length,w=Array(x),P=x;P--;)w[P]=arguments[P];if(h)var O=V(v),T=function(e,t){for(var r=e.length,n=0;r--;)e[r]===t&&n++;return n}(w,O);if(n&&(w=function(e,t,r,n){for(var a=-1,i=e.length,o=r.length,s=-1,l=t.length,c=M(i-o,0),u=Array(l+c),d=!n;++s<l;)u[s]=t[s];for(;++a<o;)(d||a<i)&&(u[r[a]]=e[a]);for(;c--;)u[s++]=e[a++];return u}(w,n,a,h)),i&&(w=function(e,t,r,n){for(var a=-1,i=e.length,o=-1,s=r.length,l=-1,c=t.length,u=M(i-s,0),d=Array(u+c),f=!n;++a<u;)d[a]=e[a];for(var p=a;++l<c;)d[p+l]=t[l];for(;++o<s;)(f||a<i)&&(d[p+r[o]]=e[a++]);return d}(w,i,o,h)),x-=T,h&&x<c){var z=g(w,O);return B(e,t,I,v.placeholder,r,w,z,s,l,c-x)}var k=f?r:this,L=p?k[e]:e;return x=w.length,s?w=function(e,t){for(var r=e.length,n=j(t.length,r),a=function(e,t){var r=-1,n=e.length;for(t||(t=Array(n));++r<n;)t[r]=e[r];return t}(e);n--;){var i,o=t[n];e[n]=(i=null==(i=r)?9007199254740991:i)&&("number"==typeof o||d.test(o))&&o>-1&&o%1==0&&o<i?a[o]:void 0}return e}(w,s):y&&x>1&&w.reverse(),u&&l<x&&(w.length=l),this&&this!==b&&this instanceof v&&(L=m||R(L)),L.apply(k,w)}}function B(e,t,r,n,a,i,o,s,l,c){var u=8&t;t|=u?32:64,4&(t&=~(u?64:32))||(t&=-4);var d=r(e,t,a,u?i:void 0,u?o:void 0,u?void 0:i,u?void 0:o,s,l,c);return d.placeholder=n,U(d,e,t)}function V(e){return e.placeholder}function X(e,t){var r,n=null==e?void 0:e[t];return!(!D(n)||z&&z in n)&&("[object Function]"==(r=D(n)?E.call(n):"")||"[object GeneratorFunction]"==r||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(n)?N:c).test(function(e){if(null!=e){try{return k.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(n))?n:void 0}var U=H?function(e,t,n){var s,l,c,u,d,f,p=t+"";return H(e,"toString",{configurable:!0,enumerable:!1,value:(d=(u=(s=(l=p.match(i))?l[1].split(o):[],function(e,t){for(var r=-1,n=e?e.length:0;++r<n&&!1!==t(e[r],r,e););}(r,function(e){var t="_."+e[0];!(n&e[1])||(s?s.length:0)&&function(e,t,r){if(t!=t)return function(e,t,r,n){for(var a=e.length,i=r+(n?1:-1);n?i--:++i<a;)if(t(e[i],i,e))return i;return -1}(e,m,r);for(var n=r-1,a=e.length;++n<a;)if(e[n]===t)return n;return -1}(s,t,0)>-1||s.push(t)}),c=s.sort()).length)-1,c[d]=(u>1?"& ":"")+c[d],c=c.join(u>2?", ":" "),f=p.replace(a,"{\n/* [wrapped with "+c+"] */\n"),function(){return f})})}:function(e){return e};function A(e,t,r){var n=function(e,t,r,n,a,i,o,s){var l=2&t;if(!l&&"function"!=typeof e)throw TypeError("Expected a function");var c=n?n.length:0;if(c||(t&=-97,n=a=void 0),o=void 0===o?o:M(C(o),0),s=void 0===s?s:C(s),c-=a?a.length:0,64&t){var u=n,d=a;n=a=void 0}var f=[e,t,r,n,a,u,d,i,o,s];if(e=f[0],t=f[1],r=f[2],n=f[3],a=f[4],(s=f[9]=null==f[9]?l?0:e.length:M(f[9]-c,0))||!(24&t)||(t&=-25),t&&1!=t)j=8==t||16==t?(p=e,h=t,m=s,v=R(p),function e(){for(var t=arguments.length,r=Array(t),n=t,a=V(e);n--;)r[n]=arguments[n];var i=t<3&&r[0]!==a&&r[t-1]!==a?[]:g(r,a);return(t-=i.length)<m?B(p,h,I,e.placeholder,void 0,r,i,void 0,void 0,m-t):y(this&&this!==b&&this instanceof e?v:p,this,r)}):32!=t&&33!=t||a.length?I.apply(void 0,f):(x=e,w=t,P=r,O=n,T=1&w,z=R(x),function e(){for(var t=-1,r=arguments.length,n=-1,a=O.length,i=Array(a+r),o=this&&this!==b&&this instanceof e?z:x;++n<a;)i[n]=O[n];for(;r--;)i[n++]=arguments[++t];return y(o,T?P:this,i)});else var p,h,m,v,x,w,P,O,T,z,k,L,E,N,S,j=(k=e,L=t,E=r,N=1&L,S=R(k),function e(){return(this&&this!==b&&this instanceof e?S:k).apply(N?E:this,arguments)});return U(j,e,t)}(e,8,void 0,void 0,void 0,void 0,void 0,t=r?void 0:t);return n.placeholder=A.placeholder,n}function D(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function C(e){var t,r=(t=e)?(t=function(e){if("number"==typeof e)return e;if("symbol"==typeof(t=e)||t&&"object"==typeof t&&"[object Symbol]"==E.call(t))return NaN;if(D(e)){var t,r="function"==typeof e.valueOf?e.valueOf():e;e=D(r)?r+"":r}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var a=l.test(e);return a||u.test(e)?f(e.slice(2),a?2:8):s.test(e)?NaN:+e}(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0,a=r%1;return r==r?a?r-a:r:0}A.placeholder={},e.exports=A}).call(this,r(43))},function(e,t,r){function n(e){return e&&e.__esModule?e.default:e}t.__esModule=!0;var a=r(95);t.threezerotwofour=n(a);var i=r(96);t.apathy=n(i);var o=r(97);t.ashes=n(o);var s=r(98);t.atelierDune=n(s);var l=r(99);t.atelierForest=n(l);var c=r(100);t.atelierHeath=n(c);var u=r(101);t.atelierLakeside=n(u);var d=r(102);t.atelierSeaside=n(d);var f=r(103);t.bespin=n(f);var p=r(104);t.brewer=n(p);var h=r(105);t.bright=n(h);var b=r(106);t.chalk=n(b);var y=r(107);t.codeschool=n(y);var m=r(108);t.colors=n(m);var g=r(109);t.default=n(g);var v=r(110);t.eighties=n(v);var x=r(111);t.embers=n(x);var w=r(112);t.flat=n(w);var P=r(113);t.google=n(P);var O=r(114);t.grayscale=n(O);var T=r(115);t.greenscreen=n(T);var z=r(116);t.harmonic=n(z);var k=r(117);t.hopscotch=n(k);var L=r(118);t.isotope=n(L);var E=r(119);t.marrakesh=n(E);var N=r(120);t.mocha=n(N);var S=r(121);t.monokai=n(S);var M=r(122);t.ocean=n(M);var j=r(123);t.paraiso=n(j);var H=r(124);t.pop=n(H);var R=r(125);t.railscasts=n(R);var I=r(126);t.shapeshifter=n(I);var B=r(127);t.solarized=n(B);var V=r(128);t.summerfruit=n(V);var X=r(129);t.tomorrow=n(X);var U=r(130);t.tube=n(U);var A=r(131);t.twilight=n(A)},function(e,t,r){t.__esModule=!0,t.default={scheme:"threezerotwofour",author:"jan t. sott (http://github.com/idleberg)",base00:"#090300",base01:"#3a3432",base02:"#4a4543",base03:"#5c5855",base04:"#807d7c",base05:"#a5a2a2",base06:"#d6d5d4",base07:"#f7f7f7",base08:"#db2d20",base09:"#e8bbd0",base0A:"#fded02",base0B:"#01a252",base0C:"#b5e4f4",base0D:"#01a0e4",base0E:"#a16a94",base0F:"#cdab53"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"apathy",author:"jannik siebert (https://github.com/janniks)",base00:"#031A16",base01:"#0B342D",base02:"#184E45",base03:"#2B685E",base04:"#5F9C92",base05:"#81B5AC",base06:"#A7CEC8",base07:"#D2E7E4",base08:"#3E9688",base09:"#3E7996",base0A:"#3E4C96",base0B:"#883E96",base0C:"#963E4C",base0D:"#96883E",base0E:"#4C963E",base0F:"#3E965B"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"ashes",author:"jannik siebert (https://github.com/janniks)",base00:"#1C2023",base01:"#393F45",base02:"#565E65",base03:"#747C84",base04:"#ADB3BA",base05:"#C7CCD1",base06:"#DFE2E5",base07:"#F3F4F5",base08:"#C7AE95",base09:"#C7C795",base0A:"#AEC795",base0B:"#95C7AE",base0C:"#95AEC7",base0D:"#AE95C7",base0E:"#C795AE",base0F:"#C79595"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"atelier dune",author:"bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/dune)",base00:"#20201d",base01:"#292824",base02:"#6e6b5e",base03:"#7d7a68",base04:"#999580",base05:"#a6a28c",base06:"#e8e4cf",base07:"#fefbec",base08:"#d73737",base09:"#b65611",base0A:"#cfb017",base0B:"#60ac39",base0C:"#1fad83",base0D:"#6684e1",base0E:"#b854d4",base0F:"#d43552"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"atelier forest",author:"bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/forest)",base00:"#1b1918",base01:"#2c2421",base02:"#68615e",base03:"#766e6b",base04:"#9c9491",base05:"#a8a19f",base06:"#e6e2e0",base07:"#f1efee",base08:"#f22c40",base09:"#df5320",base0A:"#d5911a",base0B:"#5ab738",base0C:"#00ad9c",base0D:"#407ee7",base0E:"#6666ea",base0F:"#c33ff3"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"atelier heath",author:"bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/heath)",base00:"#1b181b",base01:"#292329",base02:"#695d69",base03:"#776977",base04:"#9e8f9e",base05:"#ab9bab",base06:"#d8cad8",base07:"#f7f3f7",base08:"#ca402b",base09:"#a65926",base0A:"#bb8a35",base0B:"#379a37",base0C:"#159393",base0D:"#516aec",base0E:"#7b59c0",base0F:"#cc33cc"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"atelier lakeside",author:"bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/lakeside/)",base00:"#161b1d",base01:"#1f292e",base02:"#516d7b",base03:"#5a7b8c",base04:"#7195a8",base05:"#7ea2b4",base06:"#c1e4f6",base07:"#ebf8ff",base08:"#d22d72",base09:"#935c25",base0A:"#8a8a0f",base0B:"#568c3b",base0C:"#2d8f6f",base0D:"#257fad",base0E:"#5d5db1",base0F:"#b72dd2"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"atelier seaside",author:"bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/seaside/)",base00:"#131513",base01:"#242924",base02:"#5e6e5e",base03:"#687d68",base04:"#809980",base05:"#8ca68c",base06:"#cfe8cf",base07:"#f0fff0",base08:"#e6193c",base09:"#87711d",base0A:"#c3c322",base0B:"#29a329",base0C:"#1999b3",base0D:"#3d62f5",base0E:"#ad2bee",base0F:"#e619c3"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"bespin",author:"jan t. sott",base00:"#28211c",base01:"#36312e",base02:"#5e5d5c",base03:"#666666",base04:"#797977",base05:"#8a8986",base06:"#9d9b97",base07:"#baae9e",base08:"#cf6a4c",base09:"#cf7d34",base0A:"#f9ee98",base0B:"#54be0d",base0C:"#afc4db",base0D:"#5ea6ea",base0E:"#9b859d",base0F:"#937121"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"brewer",author:"timoth\xe9e poisot (http://github.com/tpoisot)",base00:"#0c0d0e",base01:"#2e2f30",base02:"#515253",base03:"#737475",base04:"#959697",base05:"#b7b8b9",base06:"#dadbdc",base07:"#fcfdfe",base08:"#e31a1c",base09:"#e6550d",base0A:"#dca060",base0B:"#31a354",base0C:"#80b1d3",base0D:"#3182bd",base0E:"#756bb1",base0F:"#b15928"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"bright",author:"chris kempson (http://chriskempson.com)",base00:"#000000",base01:"#303030",base02:"#505050",base03:"#b0b0b0",base04:"#d0d0d0",base05:"#e0e0e0",base06:"#f5f5f5",base07:"#ffffff",base08:"#fb0120",base09:"#fc6d24",base0A:"#fda331",base0B:"#a1c659",base0C:"#76c7b7",base0D:"#6fb3d2",base0E:"#d381c3",base0F:"#be643c"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"chalk",author:"chris kempson (http://chriskempson.com)",base00:"#151515",base01:"#202020",base02:"#303030",base03:"#505050",base04:"#b0b0b0",base05:"#d0d0d0",base06:"#e0e0e0",base07:"#f5f5f5",base08:"#fb9fb1",base09:"#eda987",base0A:"#ddb26f",base0B:"#acc267",base0C:"#12cfc0",base0D:"#6fc2ef",base0E:"#e1a3ee",base0F:"#deaf8f"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"codeschool",author:"brettof86",base00:"#232c31",base01:"#1c3657",base02:"#2a343a",base03:"#3f4944",base04:"#84898c",base05:"#9ea7a6",base06:"#a7cfa3",base07:"#b5d8f6",base08:"#2a5491",base09:"#43820d",base0A:"#a03b1e",base0B:"#237986",base0C:"#b02f30",base0D:"#484d79",base0E:"#c59820",base0F:"#c98344"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"colors",author:"mrmrs (http://clrs.cc)",base00:"#111111",base01:"#333333",base02:"#555555",base03:"#777777",base04:"#999999",base05:"#bbbbbb",base06:"#dddddd",base07:"#ffffff",base08:"#ff4136",base09:"#ff851b",base0A:"#ffdc00",base0B:"#2ecc40",base0C:"#7fdbff",base0D:"#0074d9",base0E:"#b10dc9",base0F:"#85144b"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"default",author:"chris kempson (http://chriskempson.com)",base00:"#181818",base01:"#282828",base02:"#383838",base03:"#585858",base04:"#b8b8b8",base05:"#d8d8d8",base06:"#e8e8e8",base07:"#f8f8f8",base08:"#ab4642",base09:"#dc9656",base0A:"#f7ca88",base0B:"#a1b56c",base0C:"#86c1b9",base0D:"#7cafc2",base0E:"#ba8baf",base0F:"#a16946"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"eighties",author:"chris kempson (http://chriskempson.com)",base00:"#2d2d2d",base01:"#393939",base02:"#515151",base03:"#747369",base04:"#a09f93",base05:"#d3d0c8",base06:"#e8e6df",base07:"#f2f0ec",base08:"#f2777a",base09:"#f99157",base0A:"#ffcc66",base0B:"#99cc99",base0C:"#66cccc",base0D:"#6699cc",base0E:"#cc99cc",base0F:"#d27b53"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"embers",author:"jannik siebert (https://github.com/janniks)",base00:"#16130F",base01:"#2C2620",base02:"#433B32",base03:"#5A5047",base04:"#8A8075",base05:"#A39A90",base06:"#BEB6AE",base07:"#DBD6D1",base08:"#826D57",base09:"#828257",base0A:"#6D8257",base0B:"#57826D",base0C:"#576D82",base0D:"#6D5782",base0E:"#82576D",base0F:"#825757"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"flat",author:"chris kempson (http://chriskempson.com)",base00:"#2C3E50",base01:"#34495E",base02:"#7F8C8D",base03:"#95A5A6",base04:"#BDC3C7",base05:"#e0e0e0",base06:"#f5f5f5",base07:"#ECF0F1",base08:"#E74C3C",base09:"#E67E22",base0A:"#F1C40F",base0B:"#2ECC71",base0C:"#1ABC9C",base0D:"#3498DB",base0E:"#9B59B6",base0F:"#be643c"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"google",author:"seth wright (http://sethawright.com)",base00:"#1d1f21",base01:"#282a2e",base02:"#373b41",base03:"#969896",base04:"#b4b7b4",base05:"#c5c8c6",base06:"#e0e0e0",base07:"#ffffff",base08:"#CC342B",base09:"#F96A38",base0A:"#FBA922",base0B:"#198844",base0C:"#3971ED",base0D:"#3971ED",base0E:"#A36AC7",base0F:"#3971ED"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"grayscale",author:"alexandre gavioli (https://github.com/alexx2/)",base00:"#101010",base01:"#252525",base02:"#464646",base03:"#525252",base04:"#ababab",base05:"#b9b9b9",base06:"#e3e3e3",base07:"#f7f7f7",base08:"#7c7c7c",base09:"#999999",base0A:"#a0a0a0",base0B:"#8e8e8e",base0C:"#868686",base0D:"#686868",base0E:"#747474",base0F:"#5e5e5e"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"green screen",author:"chris kempson (http://chriskempson.com)",base00:"#001100",base01:"#003300",base02:"#005500",base03:"#007700",base04:"#009900",base05:"#00bb00",base06:"#00dd00",base07:"#00ff00",base08:"#007700",base09:"#009900",base0A:"#007700",base0B:"#00bb00",base0C:"#005500",base0D:"#009900",base0E:"#00bb00",base0F:"#005500"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"harmonic16",author:"jannik siebert (https://github.com/janniks)",base00:"#0b1c2c",base01:"#223b54",base02:"#405c79",base03:"#627e99",base04:"#aabcce",base05:"#cbd6e2",base06:"#e5ebf1",base07:"#f7f9fb",base08:"#bf8b56",base09:"#bfbf56",base0A:"#8bbf56",base0B:"#56bf8b",base0C:"#568bbf",base0D:"#8b56bf",base0E:"#bf568b",base0F:"#bf5656"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"hopscotch",author:"jan t. sott",base00:"#322931",base01:"#433b42",base02:"#5c545b",base03:"#797379",base04:"#989498",base05:"#b9b5b8",base06:"#d5d3d5",base07:"#ffffff",base08:"#dd464c",base09:"#fd8b19",base0A:"#fdcc59",base0B:"#8fc13e",base0C:"#149b93",base0D:"#1290bf",base0E:"#c85e7c",base0F:"#b33508"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"isotope",author:"jan t. sott",base00:"#000000",base01:"#404040",base02:"#606060",base03:"#808080",base04:"#c0c0c0",base05:"#d0d0d0",base06:"#e0e0e0",base07:"#ffffff",base08:"#ff0000",base09:"#ff9900",base0A:"#ff0099",base0B:"#33ff00",base0C:"#00ffff",base0D:"#0066ff",base0E:"#cc00ff",base0F:"#3300ff"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"marrakesh",author:"alexandre gavioli (http://github.com/alexx2/)",base00:"#201602",base01:"#302e00",base02:"#5f5b17",base03:"#6c6823",base04:"#86813b",base05:"#948e48",base06:"#ccc37a",base07:"#faf0a5",base08:"#c35359",base09:"#b36144",base0A:"#a88339",base0B:"#18974e",base0C:"#75a738",base0D:"#477ca1",base0E:"#8868b3",base0F:"#b3588e"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"mocha",author:"chris kempson (http://chriskempson.com)",base00:"#3B3228",base01:"#534636",base02:"#645240",base03:"#7e705a",base04:"#b8afad",base05:"#d0c8c6",base06:"#e9e1dd",base07:"#f5eeeb",base08:"#cb6077",base09:"#d28b71",base0A:"#f4bc87",base0B:"#beb55b",base0C:"#7bbda4",base0D:"#8ab3b5",base0E:"#a89bb9",base0F:"#bb9584"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"monokai",author:"wimer hazenberg (http://www.monokai.nl)",base00:"#272822",base01:"#383830",base02:"#49483e",base03:"#75715e",base04:"#a59f85",base05:"#f8f8f2",base06:"#f5f4f1",base07:"#f9f8f5",base08:"#f92672",base09:"#fd971f",base0A:"#f4bf75",base0B:"#a6e22e",base0C:"#a1efe4",base0D:"#66d9ef",base0E:"#ae81ff",base0F:"#cc6633"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"ocean",author:"chris kempson (http://chriskempson.com)",base00:"#2b303b",base01:"#343d46",base02:"#4f5b66",base03:"#65737e",base04:"#a7adba",base05:"#c0c5ce",base06:"#dfe1e8",base07:"#eff1f5",base08:"#bf616a",base09:"#d08770",base0A:"#ebcb8b",base0B:"#a3be8c",base0C:"#96b5b4",base0D:"#8fa1b3",base0E:"#b48ead",base0F:"#ab7967"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"paraiso",author:"jan t. sott",base00:"#2f1e2e",base01:"#41323f",base02:"#4f424c",base03:"#776e71",base04:"#8d8687",base05:"#a39e9b",base06:"#b9b6b0",base07:"#e7e9db",base08:"#ef6155",base09:"#f99b15",base0A:"#fec418",base0B:"#48b685",base0C:"#5bc4bf",base0D:"#06b6ef",base0E:"#815ba4",base0F:"#e96ba8"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"pop",author:"chris kempson (http://chriskempson.com)",base00:"#000000",base01:"#202020",base02:"#303030",base03:"#505050",base04:"#b0b0b0",base05:"#d0d0d0",base06:"#e0e0e0",base07:"#ffffff",base08:"#eb008a",base09:"#f29333",base0A:"#f8ca12",base0B:"#37b349",base0C:"#00aabb",base0D:"#0e5a94",base0E:"#b31e8d",base0F:"#7a2d00"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"railscasts",author:"ryan bates (http://railscasts.com)",base00:"#2b2b2b",base01:"#272935",base02:"#3a4055",base03:"#5a647e",base04:"#d4cfc9",base05:"#e6e1dc",base06:"#f4f1ed",base07:"#f9f7f3",base08:"#da4939",base09:"#cc7833",base0A:"#ffc66d",base0B:"#a5c261",base0C:"#519f50",base0D:"#6d9cbe",base0E:"#b6b3eb",base0F:"#bc9458"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"shapeshifter",author:"tyler benziger (http://tybenz.com)",base00:"#000000",base01:"#040404",base02:"#102015",base03:"#343434",base04:"#555555",base05:"#ababab",base06:"#e0e0e0",base07:"#f9f9f9",base08:"#e92f2f",base09:"#e09448",base0A:"#dddd13",base0B:"#0ed839",base0C:"#23edda",base0D:"#3b48e3",base0E:"#f996e2",base0F:"#69542d"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"solarized",author:"ethan schoonover (http://ethanschoonover.com/solarized)",base00:"#002b36",base01:"#073642",base02:"#586e75",base03:"#657b83",base04:"#839496",base05:"#93a1a1",base06:"#eee8d5",base07:"#fdf6e3",base08:"#dc322f",base09:"#cb4b16",base0A:"#b58900",base0B:"#859900",base0C:"#2aa198",base0D:"#268bd2",base0E:"#6c71c4",base0F:"#d33682"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"summerfruit",author:"christopher corley (http://cscorley.github.io/)",base00:"#151515",base01:"#202020",base02:"#303030",base03:"#505050",base04:"#B0B0B0",base05:"#D0D0D0",base06:"#E0E0E0",base07:"#FFFFFF",base08:"#FF0086",base09:"#FD8900",base0A:"#ABA800",base0B:"#00C918",base0C:"#1faaaa",base0D:"#3777E6",base0E:"#AD00A1",base0F:"#cc6633"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"tomorrow",author:"chris kempson (http://chriskempson.com)",base00:"#1d1f21",base01:"#282a2e",base02:"#373b41",base03:"#969896",base04:"#b4b7b4",base05:"#c5c8c6",base06:"#e0e0e0",base07:"#ffffff",base08:"#cc6666",base09:"#de935f",base0A:"#f0c674",base0B:"#b5bd68",base0C:"#8abeb7",base0D:"#81a2be",base0E:"#b294bb",base0F:"#a3685a"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"london tube",author:"jan t. sott",base00:"#231f20",base01:"#1c3f95",base02:"#5a5758",base03:"#737171",base04:"#959ca1",base05:"#d9d8d8",base06:"#e7e7e8",base07:"#ffffff",base08:"#ee2e24",base09:"#f386a1",base0A:"#ffd204",base0B:"#00853e",base0C:"#85cebc",base0D:"#009ddc",base0E:"#98005d",base0F:"#b06110"},e.exports=t.default},function(e,t,r){t.__esModule=!0,t.default={scheme:"twilight",author:"david hart (http://hart-dev.com)",base00:"#1e1e1e",base01:"#323537",base02:"#464b50",base03:"#5f5a60",base04:"#838184",base05:"#a7a7a7",base06:"#c3c3c3",base07:"#ffffff",base08:"#cf6a4c",base09:"#cda869",base0A:"#f9ee98",base0B:"#8f9d6a",base0C:"#afc4db",base0D:"#7587a6",base0E:"#9b859d",base0F:"#9b703f"},e.exports=t.default},function(e,t,r){var n=r(33);function a(e){var t=Math.round(n(e,0,255)).toString(16);return 1==t.length?"0"+t:t}e.exports=function(e){var t=4===e.length?a(255*e[3]):"";return"#"+a(e[0])+a(e[1])+a(e[2])+t}},function(e,t,r){var n=r(134),a=r(135),i=r(136),o=r(137),s={"#":a,hsl:function(e){var t=n(e),r=o(t);return 4===t.length&&r.push(t[3]),r},rgb:i};function l(e){for(var t in s)if(0===e.indexOf(t))return s[t](e)}l.rgb=i,l.hsl=n,l.hex=a,e.exports=l},function(e,t,r){var n=r(44),a=r(33);function i(e,t){switch(e=parseFloat(e),t){case 0:return a(e,0,360);case 1:case 2:return a(e,0,100);case 3:return a(e,0,1)}}e.exports=function(e){return n(e).map(i)}},function(e,t){e.exports=function(e){4!==e.length&&5!==e.length||(e=function(e){for(var t="#",r=1;r<e.length;r++){var n=e.charAt(r);t+=n+n}return t}(e));var t=[parseInt(e.substring(1,3),16),parseInt(e.substring(3,5),16),parseInt(e.substring(5,7),16)];if(9===e.length){var r=parseFloat((parseInt(e.substring(7,9),16)/255).toFixed(2));t.push(r)}return t}},function(e,t,r){var n=r(44),a=r(33);function i(e,t){return t<3?-1!=e.indexOf("%")?Math.round(255*a(parseInt(e,10),0,100)/100):a(parseInt(e,10),0,255):a(parseFloat(e),0,1)}e.exports=function(e){return n(e).map(i)}},function(e,t){e.exports=function(e){var t,r,n,a,i,o=e[0]/360,s=e[1]/100,l=e[2]/100;if(0==s)return[i=255*l,i,i];t=2*l-(r=l<.5?l*(1+s):l+s-l*s),a=[0,0,0];for(var c=0;c<3;c++)(n=o+-(1/3*(c-1)))<0&&n++,n>1&&n--,i=6*n<1?t+6*(r-t)*n:2*n<1?r:3*n<2?t+(r-t)*(2/3-n)*6:t,a[c]=255*i;return a}},function(e,t,r){(function(t){var r="object"==typeof t&&t&&t.Object===Object&&t,n="object"==typeof self&&self&&self.Object===Object&&self,a=r||n||Function("return this")(),i=Object.prototype,o=i.hasOwnProperty,s=i.toString,l=a.Symbol,c=i.propertyIsEnumerable,u=l?l.isConcatSpreadable:void 0,d=Math.max;function f(e){var t,r,n,a,i,l;return y(e)||!!e&&"object"==typeof e&&null!=(t=e)&&"number"==typeof(r=t.length)&&r>-1&&r%1==0&&r<=9007199254740991&&!("[object Function]"==(i=typeof(a=n=t),l=a&&("object"==i||"function"==i)?s.call(n):"")||"[object GeneratorFunction]"==l)&&o.call(e,"callee")&&(!c.call(e,"callee")||"[object Arguments]"==s.call(e))||!!(u&&e&&e[u])}var p,h,b,y=Array.isArray,m=(h=function(e){var t=(e=function e(t,r,n,a,i){var o=-1,s=t.length;for(n||(n=f),i||(i=[]);++o<s;){var l=t[o];r>0&&n(l)?r>1?e(l,r-1,n,a,i):function(e,t){for(var r=-1,n=t.length,a=e.length;++r<n;)e[a+r]=t[r];return e}(i,l):a||(i[i.length]=l)}return i}(e,1)).length,r=t;for(p&&e.reverse();r--;)if("function"!=typeof e[r])throw TypeError("Expected a function");return function(){for(var r=0,n=t?e[r].apply(this,arguments):arguments[0];++r<t;)n=e[r].call(this,n);return n}},b=d(void 0===b?h.length-1:b,0),function(){for(var e=arguments,t=-1,r=d(e.length-b,0),n=Array(r);++t<r;)n[t]=e[b+t];t=-1;for(var a=Array(b+1);++t<b;)a[t]=e[t];return a[b]=n,function(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}(h,this,a)});e.exports=m}).call(this,r(43))},function(e,t,r){Object.defineProperty(t,"__esModule",{value:!0}),t.yuv2rgb=function(e){var t,r,n,a=e[0],i=e[1],o=e[2];return t=1*a+0*i+1.13983*o,r=1*a+-.39465*i+-.5806*o,n=1*a+2.02311*i+0*o,[255*(t=Math.min(Math.max(0,t),1)),255*(r=Math.min(Math.max(0,r),1)),255*(n=Math.min(Math.max(0,n),1))]},t.rgb2yuv=function(e){var t=e[0]/255,r=e[1]/255,n=e[2]/255;return[.299*t+.587*r+.114*n,-.14713*t+-.28886*r+.436*n,.615*t+-.51499*r+-.10001*n]}},function(e,t,r){function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var a=r(141),i=function(){function e(){n(this,"_callbacks",void 0),n(this,"_isDispatching",void 0),n(this,"_isHandled",void 0),n(this,"_isPending",void 0),n(this,"_lastID",void 0),n(this,"_pendingPayload",void 0),this._callbacks={},this._isDispatching=!1,this._isHandled={},this._isPending={},this._lastID=1}var t=e.prototype;return t.register=function(e){var t="ID_"+this._lastID++;return this._callbacks[t]=e,t},t.unregister=function(e){this._callbacks[e]||a(!1),delete this._callbacks[e]},t.waitFor=function(e){this._isDispatching||a(!1);for(var t=0;t<e.length;t++){var r=e[t];this._isPending[r]?this._isHandled[r]||a(!1):(this._callbacks[r]||a(!1),this._invokeCallback(r))}},t.dispatch=function(e){this._isDispatching&&a(!1),this._startDispatching(e);try{for(var t in this._callbacks)this._isPending[t]||this._invokeCallback(t)}finally{this._stopDispatching()}},t.isDispatching=function(){return this._isDispatching},t._invokeCallback=function(e){this._isPending[e]=!0,this._callbacks[e](this._pendingPayload),this._isHandled[e]=!0},t._startDispatching=function(e){for(var t in this._callbacks)this._isPending[t]=!1,this._isHandled[t]=!1;this._pendingPayload=e,this._isDispatching=!0},t._stopDispatching=function(){delete this._pendingPayload,this._isDispatching=!1},e}();e.exports=i},function(e,t,r){var n=function(e){};e.exports=function(e,t){for(var r,a=arguments.length,i=Array(a>2?a-2:0),o=2;o<a;o++)i[o-2]=arguments[o];if(n(t),!e){if(void 0===t)r=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=0;(r=Error(t.replace(/%s/g,function(){return String(i[s++])}))).name="Invariant Violation"}throw r.framesToPop=1,r}}},function(e,t,r){function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach(function(t){var n;n=r[t],t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function i(e,t){if(!(e instanceof t))throw TypeError("Cannot call a class as a function")}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t&&o(e.prototype,t),r&&o(e,r),e}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e,t){if("function"!=typeof t&&null!==t)throw TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e){if(void 0===e)throw ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct||Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(e){return!1}}();return function(){var r,n,a=u(e);if(t){var i=u(this).constructor;n=Reflect.construct(a,arguments,i)}else n=a.apply(this,arguments);return(r=n)&&("object"===d(r)||"function"==typeof r)?r:f(this)}}r.r(t);var h=r(0),b=r.n(h);function y(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function m(e){this.setState((function(t){var r=this.constructor.getDerivedStateFromProps(e,t);return null!=r?r:null}).bind(this))}function g(e,t){try{var r=this.props,n=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(r,n)}finally{this.props=r,this.state=n}}function v(e){var t=e.prototype;if(!t||!t.isReactComponent)throw Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var r=null,n=null,a=null;if("function"==typeof t.componentWillMount?r="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(r="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?n="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(n="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?a="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(a="UNSAFE_componentWillUpdate"),null!==r||null!==n||null!==a)throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+(e.displayName||e.name)+" uses "+("function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()")+" but also contains the following legacy lifecycles:"+(null!==r?"\n  "+r:"")+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks");if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=y,t.componentWillReceiveProps=m),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=g;var i=t.componentDidUpdate;t.componentDidUpdate=function(e,t,r){var n=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:r;i.call(this,e,t,n)}}return e}function x(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}function w(e){var t=({}).toString.call(e).match(/\s([a-zA-Z]+)/)[1].toLowerCase();return"number"===t&&(t=isNaN(e)?"nan":(0|e)!=e?"float":"integer"),t}y.__suppressDeprecationWarning=!0,m.__suppressDeprecationWarning=!0,g.__suppressDeprecationWarning=!0;var P={scheme:"rjv-default",author:"mac gainor",base00:"rgba(0, 0, 0, 0)",base01:"rgb(245, 245, 245)",base02:"rgb(235, 235, 235)",base03:"#93a1a1",base04:"rgba(0, 0, 0, 0.3)",base05:"#586e75",base06:"#073642",base07:"#002b36",base08:"#d33682",base09:"#cb4b16",base0A:"#dc322f",base0B:"#859900",base0C:"#6c71c4",base0D:"#586e75",base0E:"#2aa198",base0F:"#268bd2"},O={scheme:"rjv-grey",author:"mac gainor",base00:"rgba(1, 1, 1, 0)",base01:"rgba(1, 1, 1, 0.1)",base02:"rgba(0, 0, 0, 0.2)",base03:"rgba(1, 1, 1, 0.3)",base04:"rgba(0, 0, 0, 0.4)",base05:"rgba(1, 1, 1, 0.5)",base06:"rgba(1, 1, 1, 0.6)",base07:"rgba(1, 1, 1, 0.7)",base08:"rgba(1, 1, 1, 0.8)",base09:"rgba(1, 1, 1, 0.8)",base0A:"rgba(1, 1, 1, 0.8)",base0B:"rgba(1, 1, 1, 0.8)",base0C:"rgba(1, 1, 1, 0.8)",base0D:"rgba(1, 1, 1, 0.8)",base0E:"rgba(1, 1, 1, 0.8)",base0F:"rgba(1, 1, 1, 0.8)"},T={globalFontFamily:"monospace",globalCursor:"default",braceFontWeight:"bold",braceCursor:"pointer",ellipsisFontSize:"18px",ellipsisLineHeight:"10px",ellipsisCursor:"pointer",keyMargin:"0px 5px",keyLetterSpacing:"0.5px",keyFontStyle:"none",keyVerticalAlign:"top",keyOpacity:"0.85",keyOpacityHover:"1",keyValPaddingTop:"3px",keyValPaddingBottom:"3px",keyValPaddingRight:"5px",keyValBorderLeft:"1px solid",keyValBorderHover:"2px solid",pushedContentMarginLeft:"6px",variableValuePaddingRight:"6px",nullFontSize:"11px",nullFontWeight:"bold",nullPadding:"1px 2px",nullBorderRadius:"3px",nanFontSize:"11px",nanFontWeight:"bold",nanPadding:"1px 2px",nanBorderRadius:"3px",undefinedFontSize:"11px",undefinedPadding:"1px 2px",undefinedBorderRadius:"3px",dataTypeFontSize:"11px",dataTypeMarginRight:"4px",datatypeOpacity:"0.8",objectSizeBorderRadius:"3px",objectSizeFontStyle:"italic",objectSizeMargin:"0px 6px 0px 0px",clipboardCursor:"pointer",clipboardCheckMarginLeft:"-12px",metaDataPadding:"0px 0px 0px 10px",arrayGroupMetaPadding:"0px 0px 0px 4px",iconContainerWidth:"17px",tooltipPadding:"4px",editInputMinWidth:"130px",editInputBorderRadius:"2px",editInputPadding:"5px",editInputMarginRight:"4px",editInputFontFamily:"monospace",iconCursor:"pointer",iconFontSize:"15px",iconPaddingRight:"1px",dateValueMarginLeft:"2px",iconMarginRight:"3px",detectedRowPaddingTop:"3px",addKeyCoverBackground:"rgba(255, 255, 255, 0.3)",addKeyCoverPosition:"absolute",addKeyCoverPositionPx:"0px",addKeyModalWidth:"200px",addKeyModalMargin:"auto",addKeyModalPadding:"10px",addKeyModalRadius:"3px"},z=r(45),k=function(e){var t={backgroundColor:e.base00,ellipsisColor:e.base09,braceColor:e.base07,expandedIcon:e.base0D,collapsedIcon:e.base0E,keyColor:e.base07,arrayKeyColor:e.base0C,objectSize:e.base04,copyToClipboard:e.base0F,copyToClipboardCheck:e.base0D,objectBorder:e.base02,dataTypes:{boolean:e.base0E,date:e.base0D,float:e.base0B,function:e.base0D,integer:e.base0F,string:e.base09,nan:e.base08,null:e.base0A,undefined:e.base05,regexp:e.base0A,background:e.base02},editVariable:{editIcon:e.base0E,cancelIcon:e.base09,removeIcon:e.base09,addIcon:e.base0E,checkIcon:e.base0E,background:e.base01,color:e.base0A,border:e.base07},addKeyModal:{background:e.base05,border:e.base04,color:e.base0A,labelColor:e.base01},validationFailure:{background:e.base09,iconColor:e.base01,fontColor:e.base01}};return{"app-container":{fontFamily:T.globalFontFamily,cursor:T.globalCursor,backgroundColor:t.backgroundColor,position:"relative"},ellipsis:{display:"inline-block",color:t.ellipsisColor,fontSize:T.ellipsisFontSize,lineHeight:T.ellipsisLineHeight,cursor:T.ellipsisCursor},"brace-row":{display:"inline-block",cursor:"pointer"},brace:{display:"inline-block",cursor:T.braceCursor,fontWeight:T.braceFontWeight,color:t.braceColor},"expanded-icon":{color:t.expandedIcon},"collapsed-icon":{color:t.collapsedIcon},colon:{display:"inline-block",margin:T.keyMargin,color:t.keyColor,verticalAlign:"top"},objectKeyVal:function(e,r){return{style:a({paddingTop:T.keyValPaddingTop,paddingRight:T.keyValPaddingRight,paddingBottom:T.keyValPaddingBottom,borderLeft:T.keyValBorderLeft+" "+t.objectBorder,":hover":{paddingLeft:r.paddingLeft-1+"px",borderLeft:T.keyValBorderHover+" "+t.objectBorder}},r)}},"object-key-val-no-border":{padding:T.keyValPadding},"pushed-content":{marginLeft:T.pushedContentMarginLeft},variableValue:function(e,t){return{style:a({display:"inline-block",paddingRight:T.variableValuePaddingRight,position:"relative"},t)}},"object-name":{display:"inline-block",color:t.keyColor,letterSpacing:T.keyLetterSpacing,fontStyle:T.keyFontStyle,verticalAlign:T.keyVerticalAlign,opacity:T.keyOpacity,":hover":{opacity:T.keyOpacityHover}},"array-key":{display:"inline-block",color:t.arrayKeyColor,letterSpacing:T.keyLetterSpacing,fontStyle:T.keyFontStyle,verticalAlign:T.keyVerticalAlign,opacity:T.keyOpacity,":hover":{opacity:T.keyOpacityHover}},"object-size":{color:t.objectSize,borderRadius:T.objectSizeBorderRadius,fontStyle:T.objectSizeFontStyle,margin:T.objectSizeMargin,cursor:"default"},"data-type-label":{fontSize:T.dataTypeFontSize,marginRight:T.dataTypeMarginRight,opacity:T.datatypeOpacity},boolean:{display:"inline-block",color:t.dataTypes.boolean},date:{display:"inline-block",color:t.dataTypes.date},"date-value":{marginLeft:T.dateValueMarginLeft},float:{display:"inline-block",color:t.dataTypes.float},function:{display:"inline-block",color:t.dataTypes.function,cursor:"pointer",whiteSpace:"pre-line"},"function-value":{fontStyle:"italic"},integer:{display:"inline-block",color:t.dataTypes.integer},string:{display:"inline-block",color:t.dataTypes.string},nan:{display:"inline-block",color:t.dataTypes.nan,fontSize:T.nanFontSize,fontWeight:T.nanFontWeight,backgroundColor:t.dataTypes.background,padding:T.nanPadding,borderRadius:T.nanBorderRadius},null:{display:"inline-block",color:t.dataTypes.null,fontSize:T.nullFontSize,fontWeight:T.nullFontWeight,backgroundColor:t.dataTypes.background,padding:T.nullPadding,borderRadius:T.nullBorderRadius},undefined:{display:"inline-block",color:t.dataTypes.undefined,fontSize:T.undefinedFontSize,padding:T.undefinedPadding,borderRadius:T.undefinedBorderRadius,backgroundColor:t.dataTypes.background},regexp:{display:"inline-block",color:t.dataTypes.regexp},"copy-to-clipboard":{cursor:T.clipboardCursor},"copy-icon":{color:t.copyToClipboard,fontSize:T.iconFontSize,marginRight:T.iconMarginRight,verticalAlign:"top"},"copy-icon-copied":{color:t.copyToClipboardCheck,marginLeft:T.clipboardCheckMarginLeft},"array-group-meta-data":{display:"inline-block",padding:T.arrayGroupMetaPadding},"object-meta-data":{display:"inline-block",padding:T.metaDataPadding},"icon-container":{display:"inline-block",width:T.iconContainerWidth},tooltip:{padding:T.tooltipPadding},removeVarIcon:{verticalAlign:"top",display:"inline-block",color:t.editVariable.removeIcon,cursor:T.iconCursor,fontSize:T.iconFontSize,marginRight:T.iconMarginRight},addVarIcon:{verticalAlign:"top",display:"inline-block",color:t.editVariable.addIcon,cursor:T.iconCursor,fontSize:T.iconFontSize,marginRight:T.iconMarginRight},editVarIcon:{verticalAlign:"top",display:"inline-block",color:t.editVariable.editIcon,cursor:T.iconCursor,fontSize:T.iconFontSize,marginRight:T.iconMarginRight},"edit-icon-container":{display:"inline-block",verticalAlign:"top"},"check-icon":{display:"inline-block",cursor:T.iconCursor,color:t.editVariable.checkIcon,fontSize:T.iconFontSize,paddingRight:T.iconPaddingRight},"cancel-icon":{display:"inline-block",cursor:T.iconCursor,color:t.editVariable.cancelIcon,fontSize:T.iconFontSize,paddingRight:T.iconPaddingRight},"edit-input":{display:"inline-block",minWidth:T.editInputMinWidth,borderRadius:T.editInputBorderRadius,backgroundColor:t.editVariable.background,color:t.editVariable.color,padding:T.editInputPadding,marginRight:T.editInputMarginRight,fontFamily:T.editInputFontFamily},"detected-row":{paddingTop:T.detectedRowPaddingTop},"key-modal-request":{position:T.addKeyCoverPosition,top:T.addKeyCoverPositionPx,left:T.addKeyCoverPositionPx,right:T.addKeyCoverPositionPx,bottom:T.addKeyCoverPositionPx,backgroundColor:T.addKeyCoverBackground},"key-modal":{width:T.addKeyModalWidth,backgroundColor:t.addKeyModal.background,marginLeft:T.addKeyModalMargin,marginRight:T.addKeyModalMargin,padding:T.addKeyModalPadding,borderRadius:T.addKeyModalRadius,marginTop:"15px",position:"relative"},"key-modal-label":{color:t.addKeyModal.labelColor,marginLeft:"2px",marginBottom:"5px",fontSize:"11px"},"key-modal-input-container":{overflow:"hidden"},"key-modal-input":{width:"100%",padding:"3px 6px",fontFamily:"monospace",color:t.addKeyModal.color,border:"none",boxSizing:"border-box",borderRadius:"2px"},"key-modal-cancel":{backgroundColor:t.editVariable.removeIcon,position:"absolute",top:"0px",right:"0px",borderRadius:"0px 3px 0px 3px",cursor:"pointer"},"key-modal-cancel-icon":{color:t.addKeyModal.labelColor,fontSize:T.iconFontSize,transform:"rotate(45deg)"},"key-modal-submit":{color:t.editVariable.addIcon,fontSize:T.iconFontSize,position:"absolute",right:"2px",top:"3px",cursor:"pointer"},"function-ellipsis":{display:"inline-block",color:t.ellipsisColor,fontSize:T.ellipsisFontSize,lineHeight:T.ellipsisLineHeight,cursor:T.ellipsisCursor},"validation-failure":{float:"right",padding:"3px 6px",borderRadius:"2px",cursor:"pointer",color:t.validationFailure.fontColor,backgroundColor:t.validationFailure.background},"validation-failure-label":{marginRight:"6px"},"validation-failure-clear":{position:"relative",verticalAlign:"top",cursor:"pointer",color:t.validationFailure.iconColor,fontSize:T.iconFontSize,transform:"rotate(45deg)"}}};function L(e,t,r){var n;return e||console.error("theme has not been set"),(n=P,!1!==e&&"none"!==e||(n=O),Object(z.createStyling)(k,{defaultBase16:n})(e))(t,r)}var E=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=(e.rjvId,e.type_name),r=e.displayDataTypes,n=e.theme;return r?b.a.createElement("span",Object.assign({className:"data-type-label"},L(n,"data-type-label")),t):null}}]),r}(b.a.PureComponent),N=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props;return b.a.createElement("div",L(e.theme,"boolean"),b.a.createElement(E,Object.assign({type_name:"bool"},e)),e.value?"true":"false")}}]),r}(b.a.PureComponent),S=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props;return b.a.createElement("div",L(e.theme,"date"),b.a.createElement(E,Object.assign({type_name:"date"},e)),b.a.createElement("span",Object.assign({className:"date-value"},L(e.theme,"date-value")),e.value.toLocaleTimeString("en-us",{weekday:"short",year:"numeric",month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"})))}}]),r}(b.a.PureComponent),M=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props;return b.a.createElement("div",L(e.theme,"float"),b.a.createElement(E,Object.assign({type_name:"float"},e)),this.props.value)}}]),r}(b.a.PureComponent);function j(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function H(e,t){if(e){if("string"==typeof e)return j(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?j(e,t):void 0}}function R(e){return function(e){if(Array.isArray(e))return j(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||H(e)||function(){throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var I=r(46),B=new(r(47)).Dispatcher,V=new(function(e){c(r,e);var t=p(r);function r(){var e;i(this,r);for(var n=arguments.length,o=Array(n),s=0;s<n;s++)o[s]=arguments[s];return(e=t.call.apply(t,[this].concat(o))).objects={},e.set=function(t,r,n,a){void 0===e.objects[t]&&(e.objects[t]={}),void 0===e.objects[t][r]&&(e.objects[t][r]={}),e.objects[t][r][n]=a},e.get=function(t,r,n,a){return void 0===e.objects[t]||void 0===e.objects[t][r]||null==e.objects[t][r][n]?a:e.objects[t][r][n]},e.handleAction=function(t){var r=t.rjvId,n=t.data;switch(t.name){case"RESET":e.emit("reset-"+r);break;case"VARIABLE_UPDATED":t.data.updated_src=e.updateSrc(r,n),e.set(r,"action","variable-update",a(a({},n),{},{type:"variable-edited"})),e.emit("variable-update-"+r);break;case"VARIABLE_REMOVED":t.data.updated_src=e.updateSrc(r,n),e.set(r,"action","variable-update",a(a({},n),{},{type:"variable-removed"})),e.emit("variable-update-"+r);break;case"VARIABLE_ADDED":t.data.updated_src=e.updateSrc(r,n),e.set(r,"action","variable-update",a(a({},n),{},{type:"variable-added"})),e.emit("variable-update-"+r);break;case"ADD_VARIABLE_KEY_REQUEST":e.set(r,"action","new-key-request",n),e.emit("add-key-request-"+r)}},e.updateSrc=function(t,r){var n=r.name,a=r.namespace,i=r.new_value,o=(r.existing_value,r.variable_removed);a.shift();var s,l=e.get(t,"global","src"),c=e.deepCopy(l,R(a)),u=c,d=function(e,t){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(a=H(e))){a&&(e=a);var r=0,n=function(){};return{s:n,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:n}}throw TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i,o=!0,s=!1;return{s:function(){a=e[Symbol.iterator]()},n:function(){var e=a.next();return o=e.done,e},e:function(e){s=!0,i=e},f:function(){try{o||null==a.return||a.return()}finally{if(s)throw i}}}}(a);try{for(d.s();!(s=d.n()).done;)u=u[s.value]}catch(e){d.e(e)}finally{d.f()}return o?"array"==w(u)?u.splice(n,1):delete u[n]:null!==n?u[n]=i:c=i,e.set(t,"global","src",c),c},e.deepCopy=function(t,r){var n,i=w(t),o=r.shift();return"array"==i?n=R(t):"object"==i&&(n=a({},t)),void 0!==o&&(n[o]=e.deepCopy(t[o],r)),n},e}return r}(I.EventEmitter));B.register(V.handleAction.bind(V));var X=function(e){c(r,e);var t=p(r);function r(e){var n;return i(this,r),(n=t.call(this,e)).toggleCollapsed=function(){n.setState({collapsed:!n.state.collapsed},function(){V.set(n.props.rjvId,n.props.namespace,"collapsed",n.state.collapsed)})},n.getFunctionDisplay=function(e){var t=f(n).props;return e?b.a.createElement("span",null,n.props.value.toString().slice(9,-1).replace(/\{[\s\S]+/,""),b.a.createElement("span",{className:"function-collapsed",style:{fontWeight:"bold"}},b.a.createElement("span",null,"{"),b.a.createElement("span",L(t.theme,"ellipsis"),"..."),b.a.createElement("span",null,"}"))):n.props.value.toString().slice(9,-1)},n.state={collapsed:V.get(e.rjvId,e.namespace,"collapsed",!0)},n}return s(r,[{key:"render",value:function(){var e=this.props,t=this.state.collapsed;return b.a.createElement("div",L(e.theme,"function"),b.a.createElement(E,Object.assign({type_name:"function"},e)),b.a.createElement("span",Object.assign({},L(e.theme,"function-value"),{className:"rjv-function-container",onClick:this.toggleCollapsed}),this.getFunctionDisplay(t)))}}]),r}(b.a.PureComponent),U=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){return b.a.createElement("div",L(this.props.theme,"nan"),"NaN")}}]),r}(b.a.PureComponent),A=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){return b.a.createElement("div",L(this.props.theme,"null"),"NULL")}}]),r}(b.a.PureComponent),D=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props;return b.a.createElement("div",L(e.theme,"integer"),b.a.createElement(E,Object.assign({type_name:"int"},e)),this.props.value)}}]),r}(b.a.PureComponent),C=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props;return b.a.createElement("div",L(e.theme,"regexp"),b.a.createElement(E,Object.assign({type_name:"regexp"},e)),this.props.value.toString())}}]),r}(b.a.PureComponent),F=function(e){c(r,e);var t=p(r);function r(e){var n;return i(this,r),(n=t.call(this,e)).toggleCollapsed=function(){n.setState({collapsed:!n.state.collapsed},function(){V.set(n.props.rjvId,n.props.namespace,"collapsed",n.state.collapsed)})},n.state={collapsed:V.get(e.rjvId,e.namespace,"collapsed",!0)},n}return s(r,[{key:"render",value:function(){this.state.collapsed;var e=this.props,t=e.collapseStringsAfterLength,r=e.theme,n=e.value,a={style:{cursor:"default"}};return"integer"===w(t)&&n.length>t&&(a.style.cursor="pointer",this.state.collapsed&&(n=b.a.createElement("span",null,n.substring(0,t),b.a.createElement("span",L(r,"ellipsis")," ...")))),b.a.createElement("div",L(r,"string"),b.a.createElement(E,Object.assign({type_name:"string"},e)),b.a.createElement("span",Object.assign({className:"string-value"},a,{onClick:this.toggleCollapsed}),'"',n,'"'))}}]),r}(b.a.PureComponent),Z=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){return b.a.createElement("div",L(this.props.theme,"undefined"),"undefined")}}]),r}(b.a.PureComponent);function q(){return(q=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}var G=h.useLayoutEffect,W=function(e){var t=Object(h.useRef)(e);return G(function(){t.current=e}),t},Y=function(e,t){"function"!=typeof e?e.current=t:e(t)},K=function(e,t){var r=Object(h.useRef)();return Object(h.useCallback)(function(n){e.current=n,r.current&&Y(r.current,null),r.current=t,t&&Y(t,n)},[t])},J={"min-height":"0","max-height":"none",height:"0",visibility:"hidden",overflow:"hidden",position:"absolute","z-index":"-1000",top:"0",right:"0"},Q=function(e){Object.keys(J).forEach(function(t){e.style.setProperty(t,J[t],"important")})},_=null,$=function(){},ee=["borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopWidth","boxSizing","fontFamily","fontSize","fontStyle","fontWeight","letterSpacing","lineHeight","paddingBottom","paddingLeft","paddingRight","paddingTop","tabSize","textIndent","textRendering","textTransform","width"],et=!!document.documentElement.currentStyle,er=Object(h.forwardRef)(function(e,t){var r,n=e.cacheMeasurements,a=e.maxRows,i=e.minRows,o=e.onChange,s=void 0===o?$:o,l=e.onHeightChange,c=void 0===l?$:l,u=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t.indexOf(r=i[n])>=0||(a[r]=e[r]);return a}(e,["cacheMeasurements","maxRows","minRows","onChange","onHeightChange"]),d=void 0!==u.value,f=Object(h.useRef)(null),p=K(f,t),b=Object(h.useRef)(0),y=Object(h.useRef)(),m=function(){var e=f.current,t=n&&y.current?y.current:function(e){var t=window.getComputedStyle(e);if(null===t)return null;var r=ee.reduce(function(e,r){return e[r]=t[r],e},{}),n=r.boxSizing;return""===n?null:(et&&"border-box"===n&&(r.width=parseFloat(r.width)+parseFloat(r.borderRightWidth)+parseFloat(r.borderLeftWidth)+parseFloat(r.paddingRight)+parseFloat(r.paddingLeft)+"px"),{sizingStyle:r,paddingSize:parseFloat(r.paddingBottom)+parseFloat(r.paddingTop),borderSize:parseFloat(r.borderBottomWidth)+parseFloat(r.borderTopWidth)})}(e);if(t){y.current=t;var r,o,s,l,u,d,p,h,m,g,v,x,w=(r=e.value||e.placeholder||"x",void 0===(o=i)&&(o=1),void 0===(s=a)&&(s=1/0),_||((_=document.createElement("textarea")).setAttribute("tab-index","-1"),_.setAttribute("aria-hidden","true"),Q(_)),null===_.parentNode&&document.body.appendChild(_),l=t.paddingSize,u=t.borderSize,p=(d=t.sizingStyle).boxSizing,Object.keys(d).forEach(function(e){_.style[e]=d[e]}),Q(_),_.value=r,h=_.scrollHeight,m="border-box"===t.sizingStyle.boxSizing?h+t.borderSize:h-t.paddingSize,_.value="x",v=(g=_.scrollHeight-l)*o,"border-box"===p&&(v=v+l+u),m=Math.max(v,m),x=g*s,"border-box"===p&&(x=x+l+u),[m=Math.min(x,m),g]),P=w[0],O=w[1];b.current!==P&&(b.current=P,e.style.setProperty("height",P+"px","important"),c(P,{rowHeight:O}))}};return Object(h.useLayoutEffect)(m),r=W(m),Object(h.useLayoutEffect)(function(){var e=function(e){r.current(e)};return window.addEventListener("resize",e),function(){window.removeEventListener("resize",e)}},[]),Object(h.createElement)("textarea",q({},u,{onChange:function(e){d||m(),s(e)},ref:p}))});function en(e){e=e.trim();try{if("["===(e=JSON.stringify(JSON.parse(e)))[0])return ea("array",JSON.parse(e));if("{"===e[0])return ea("object",JSON.parse(e));if(e.match(/\-?\d+\.\d+/)&&e.match(/\-?\d+\.\d+/)[0]===e)return ea("float",parseFloat(e));if(e.match(/\-?\d+e-\d+/)&&e.match(/\-?\d+e-\d+/)[0]===e)return ea("float",Number(e));if(e.match(/\-?\d+/)&&e.match(/\-?\d+/)[0]===e)return ea("integer",parseInt(e));if(e.match(/\-?\d+e\+\d+/)&&e.match(/\-?\d+e\+\d+/)[0]===e)return ea("integer",Number(e))}catch(e){}switch(e=e.toLowerCase()){case"undefined":return ea("undefined",void 0);case"nan":return ea("nan",NaN);case"null":return ea("null",null);case"true":return ea("boolean",!0);case"false":return ea("boolean",!1);default:if(e=Date.parse(e))return ea("date",new Date(e))}return ea(!1,null)}function ea(e,t){return{type:e,value:t}}var ei=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.style,r=x(e,["style"]);return b.a.createElement("span",r,b.a.createElement("svg",Object.assign({},em(t),{viewBox:"0 0 24 24",fill:"currentColor",preserveAspectRatio:"xMidYMid meet"}),b.a.createElement("path",{d:"M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7"})))}}]),r}(b.a.PureComponent),eo=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.style,r=x(e,["style"]);return b.a.createElement("span",r,b.a.createElement("svg",Object.assign({},em(t),{viewBox:"0 0 24 24",fill:"currentColor",preserveAspectRatio:"xMidYMid meet"}),b.a.createElement("path",{d:"M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z"})))}}]),r}(b.a.PureComponent),es=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.style,r=x(e,["style"]),n=em(t).style;return b.a.createElement("span",r,b.a.createElement("svg",{fill:n.color,width:n.height,height:n.width,style:n,viewBox:"0 0 1792 1792"},b.a.createElement("path",{d:"M1344 800v64q0 14-9 23t-23 9h-832q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h832q14 0 23 9t9 23zm128 448v-832q0-66-47-113t-113-47h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113zm128-832v832q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z"})))}}]),r}(b.a.PureComponent),el=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.style,r=x(e,["style"]),n=em(t).style;return b.a.createElement("span",r,b.a.createElement("svg",{fill:n.color,width:n.height,height:n.width,style:n,viewBox:"0 0 1792 1792"},b.a.createElement("path",{d:"M1344 800v64q0 14-9 23t-23 9h-352v352q0 14-9 23t-23 9h-64q-14 0-23-9t-9-23v-352h-352q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h352v-352q0-14 9-23t23-9h64q14 0 23 9t9 23v352h352q14 0 23 9t9 23zm128 448v-832q0-66-47-113t-113-47h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113zm128-832v832q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z"})))}}]),r}(b.a.PureComponent),ec=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.style,r=x(e,["style"]);return b.a.createElement("span",r,b.a.createElement("svg",{style:a(a({},em(t).style),{},{paddingLeft:"2px",verticalAlign:"top"}),viewBox:"0 0 15 15",fill:"currentColor"},b.a.createElement("path",{d:"M0 14l6-6-6-6z"})))}}]),r}(b.a.PureComponent),eu=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.style,r=x(e,["style"]);return b.a.createElement("span",r,b.a.createElement("svg",{style:a(a({},em(t).style),{},{paddingLeft:"2px",verticalAlign:"top"}),viewBox:"0 0 15 15",fill:"currentColor"},b.a.createElement("path",{d:"M0 5l6 6 6-6z"})))}}]),r}(b.a.PureComponent),ed=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.style,r=x(e,["style"]);return b.a.createElement("span",r,b.a.createElement("svg",Object.assign({},em(t),{viewBox:"0 0 40 40",fill:"currentColor",preserveAspectRatio:"xMidYMid meet"}),b.a.createElement("g",null,b.a.createElement("path",{d:"m30 35h-25v-22.5h25v7.5h2.5v-12.5c0-1.4-1.1-2.5-2.5-2.5h-7.5c0-2.8-2.2-5-5-5s-5 2.2-5 5h-7.5c-1.4 0-2.5 1.1-2.5 2.5v27.5c0 1.4 1.1 2.5 2.5 2.5h25c1.4 0 2.5-1.1 2.5-2.5v-5h-2.5v5z m-20-27.5h2.5s2.5-1.1 2.5-2.5 1.1-2.5 2.5-2.5 2.5 1.1 2.5 2.5 1.3 2.5 2.5 2.5h2.5s2.5 1.1 2.5 2.5h-20c0-1.5 1.1-2.5 2.5-2.5z m-2.5 20h5v-2.5h-5v2.5z m17.5-5v-5l-10 7.5 10 7.5v-5h12.5v-5h-12.5z m-17.5 10h7.5v-2.5h-7.5v2.5z m12.5-17.5h-12.5v2.5h12.5v-2.5z m-7.5 5h-5v2.5h5v-2.5z"}))))}}]),r}(b.a.PureComponent),ef=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.style,r=x(e,["style"]);return b.a.createElement("span",r,b.a.createElement("svg",Object.assign({},em(t),{viewBox:"0 0 40 40",fill:"currentColor",preserveAspectRatio:"xMidYMid meet"}),b.a.createElement("g",null,b.a.createElement("path",{d:"m28.6 25q0-0.5-0.4-1l-4-4 4-4q0.4-0.5 0.4-1 0-0.6-0.4-1.1l-2-2q-0.4-0.4-1-0.4-0.6 0-1 0.4l-4.1 4.1-4-4.1q-0.4-0.4-1-0.4-0.6 0-1 0.4l-2 2q-0.5 0.5-0.5 1.1 0 0.5 0.5 1l4 4-4 4q-0.5 0.5-0.5 1 0 0.7 0.5 1.1l2 2q0.4 0.4 1 0.4 0.6 0 1-0.4l4-4.1 4.1 4.1q0.4 0.4 1 0.4 0.6 0 1-0.4l2-2q0.4-0.4 0.4-1z m8.7-5q0 4.7-2.3 8.6t-6.3 6.2-8.6 2.3-8.6-2.3-6.2-6.2-2.3-8.6 2.3-8.6 6.2-6.2 8.6-2.3 8.6 2.3 6.3 6.2 2.3 8.6z"}))))}}]),r}(b.a.PureComponent),ep=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.style,r=x(e,["style"]);return b.a.createElement("span",r,b.a.createElement("svg",Object.assign({},em(t),{viewBox:"0 0 40 40",fill:"currentColor",preserveAspectRatio:"xMidYMid meet"}),b.a.createElement("g",null,b.a.createElement("path",{d:"m30.1 21.4v-2.8q0-0.6-0.4-1t-1-0.5h-5.7v-5.7q0-0.6-0.4-1t-1-0.4h-2.9q-0.6 0-1 0.4t-0.4 1v5.7h-5.7q-0.6 0-1 0.5t-0.5 1v2.8q0 0.6 0.5 1t1 0.5h5.7v5.7q0 0.5 0.4 1t1 0.4h2.9q0.6 0 1-0.4t0.4-1v-5.7h5.7q0.6 0 1-0.5t0.4-1z m7.2-1.4q0 4.7-2.3 8.6t-6.3 6.2-8.6 2.3-8.6-2.3-6.2-6.2-2.3-8.6 2.3-8.6 6.2-6.2 8.6-2.3 8.6 2.3 6.3 6.2 2.3 8.6z"}))))}}]),r}(b.a.PureComponent),eh=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.style,r=x(e,["style"]);return b.a.createElement("span",r,b.a.createElement("svg",Object.assign({},em(t),{viewBox:"0 0 40 40",fill:"currentColor",preserveAspectRatio:"xMidYMid meet"}),b.a.createElement("g",null,b.a.createElement("path",{d:"m31.6 21.6h-10v10h-3.2v-10h-10v-3.2h10v-10h3.2v10h10v3.2z"}))))}}]),r}(b.a.PureComponent),eb=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.style,r=x(e,["style"]);return b.a.createElement("span",r,b.a.createElement("svg",Object.assign({},em(t),{viewBox:"0 0 40 40",fill:"currentColor",preserveAspectRatio:"xMidYMid meet"}),b.a.createElement("g",null,b.a.createElement("path",{d:"m19.8 26.4l2.6-2.6-3.4-3.4-2.6 2.6v1.3h2.2v2.1h1.2z m9.8-16q-0.3-0.4-0.7 0l-7.8 7.8q-0.4 0.4 0 0.7t0.7 0l7.8-7.8q0.4-0.4 0-0.7z m1.8 13.2v4.3q0 2.6-1.9 4.5t-4.5 1.9h-18.6q-2.6 0-4.5-1.9t-1.9-4.5v-18.6q0-2.7 1.9-4.6t4.5-1.8h18.6q1.4 0 2.6 0.5 0.3 0.2 0.4 0.5 0.1 0.4-0.2 0.7l-1.1 1.1q-0.3 0.3-0.7 0.1-0.5-0.1-1-0.1h-18.6q-1.4 0-2.5 1.1t-1 2.5v18.6q0 1.4 1 2.5t2.5 1h18.6q1.5 0 2.5-1t1.1-2.5v-2.9q0-0.2 0.2-0.4l1.4-1.5q0.3-0.3 0.8-0.1t0.4 0.6z m-2.1-16.5l6.4 6.5-15 15h-6.4v-6.5z m9.9 3l-2.1 2-6.4-6.4 2.1-2q0.6-0.7 1.5-0.7t1.5 0.7l3.4 3.4q0.6 0.6 0.6 1.5t-0.6 1.5z"}))))}}]),r}(b.a.PureComponent),ey=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.style,r=x(e,["style"]);return b.a.createElement("span",r,b.a.createElement("svg",Object.assign({},em(t),{viewBox:"0 0 40 40",fill:"currentColor",preserveAspectRatio:"xMidYMid meet"}),b.a.createElement("g",null,b.a.createElement("path",{d:"m31.7 16.4q0-0.6-0.4-1l-2.1-2.1q-0.4-0.4-1-0.4t-1 0.4l-9.1 9.1-5-5q-0.5-0.4-1-0.4t-1 0.4l-2.1 2q-0.4 0.4-0.4 1 0 0.6 0.4 1l8.1 8.1q0.4 0.4 1 0.4 0.6 0 1-0.4l12.2-12.1q0.4-0.4 0.4-1z m5.6 3.6q0 4.7-2.3 8.6t-6.3 6.2-8.6 2.3-8.6-2.3-6.2-6.2-2.3-8.6 2.3-8.6 6.2-6.2 8.6-2.3 8.6 2.3 6.3 6.2 2.3 8.6z"}))))}}]),r}(b.a.PureComponent);function em(e){return e||(e={}),{style:a(a({verticalAlign:"middle"},e),{},{color:e.color?e.color:"#000000",height:"1em",width:"1em"})}}var eg=function(e){c(r,e);var t=p(r);function r(e){var n;return i(this,r),(n=t.call(this,e)).copiedTimer=null,n.handleCopy=function(){var e=document.createElement("textarea"),t=n.props,r=t.clickCallback,a=t.src,i=t.namespace;e.innerHTML=JSON.stringify(n.clipboardValue(a),null,"  "),document.body.appendChild(e),e.select(),document.execCommand("copy"),document.body.removeChild(e),n.copiedTimer=setTimeout(function(){n.setState({copied:!1})},5500),n.setState({copied:!0},function(){"function"==typeof r&&r({src:a,namespace:i,name:i[i.length-1]})})},n.getClippyIcon=function(){var e=n.props.theme;return n.state.copied?b.a.createElement("span",null,b.a.createElement(ed,Object.assign({className:"copy-icon"},L(e,"copy-icon"))),b.a.createElement("span",L(e,"copy-icon-copied"),"✔")):b.a.createElement(ed,Object.assign({className:"copy-icon"},L(e,"copy-icon")))},n.clipboardValue=function(e){switch(w(e)){case"function":case"regexp":return e.toString();default:return e}},n.state={copied:!1},n}return s(r,[{key:"componentWillUnmount",value:function(){this.copiedTimer&&(clearTimeout(this.copiedTimer),this.copiedTimer=null)}},{key:"render",value:function(){var e=this.props,t=(e.src,e.theme),r=e.hidden,n=e.rowHovered,i=L(t,"copy-to-clipboard").style,o="inline";return r&&(o="none"),b.a.createElement("span",{className:"copy-to-clipboard-container",title:"Copy to clipboard",style:{verticalAlign:"top",display:n?"inline-block":"none"}},b.a.createElement("span",{style:a(a({},i),{},{display:o}),onClick:this.handleCopy},this.getClippyIcon()))}}]),r}(b.a.PureComponent),ev=function(e){c(r,e);var t=p(r);function r(e){var n;return i(this,r),(n=t.call(this,e)).getEditIcon=function(){var e=n.props,t=e.variable,r=e.theme;return b.a.createElement("div",{className:"click-to-edit",style:{verticalAlign:"top",display:n.state.hovered?"inline-block":"none"}},b.a.createElement(eb,Object.assign({className:"click-to-edit-icon"},L(r,"editVarIcon"),{onClick:function(){n.prepopInput(t)}})))},n.prepopInput=function(e){if(!1!==n.props.onEdit){var t=function(e){var t;switch(w(e)){case"undefined":t="undefined";break;case"nan":t="NaN";break;case"string":t=e;break;case"date":case"function":case"regexp":t=e.toString();break;default:try{t=JSON.stringify(e,null,"  ")}catch(e){t=""}}return t}(e.value),r=en(t);n.setState({editMode:!0,editValue:t,parsedInput:{type:r.type,value:r.value}})}},n.getRemoveIcon=function(){var e=n.props,t=e.variable,r=e.namespace,a=e.theme,i=e.rjvId;return b.a.createElement("div",{className:"click-to-remove",style:{verticalAlign:"top",display:n.state.hovered?"inline-block":"none"}},b.a.createElement(ef,Object.assign({className:"click-to-remove-icon"},L(a,"removeVarIcon"),{onClick:function(){B.dispatch({name:"VARIABLE_REMOVED",rjvId:i,data:{name:t.name,namespace:r,existing_value:t.value,variable_removed:!0}})}})))},n.getValue=function(e,t){var r=!t&&e.type,a=f(n).props;switch(r){case!1:return n.getEditInput();case"string":return b.a.createElement(F,Object.assign({value:e.value},a));case"integer":return b.a.createElement(D,Object.assign({value:e.value},a));case"float":return b.a.createElement(M,Object.assign({value:e.value},a));case"boolean":return b.a.createElement(N,Object.assign({value:e.value},a));case"function":return b.a.createElement(X,Object.assign({value:e.value},a));case"null":return b.a.createElement(A,a);case"nan":return b.a.createElement(U,a);case"undefined":return b.a.createElement(Z,a);case"date":return b.a.createElement(S,Object.assign({value:e.value},a));case"regexp":return b.a.createElement(C,Object.assign({value:e.value},a));default:return b.a.createElement("div",{className:"object-value"},JSON.stringify(e.value))}},n.getEditInput=function(){var e=n.props.theme,t=n.state.editValue;return b.a.createElement("div",null,b.a.createElement(er,Object.assign({type:"text",inputRef:function(e){return e&&e.focus()},value:t,className:"variable-editor",onChange:function(e){var t=e.target.value,r=en(t);n.setState({editValue:t,parsedInput:{type:r.type,value:r.value}})},onKeyDown:function(e){switch(e.key){case"Escape":n.setState({editMode:!1,editValue:""});break;case"Enter":(e.ctrlKey||e.metaKey)&&n.submitEdit(!0)}e.stopPropagation()},placeholder:"update this value",minRows:2},L(e,"edit-input"))),b.a.createElement("div",L(e,"edit-icon-container"),b.a.createElement(ef,Object.assign({className:"edit-cancel"},L(e,"cancel-icon"),{onClick:function(){n.setState({editMode:!1,editValue:""})}})),b.a.createElement(ey,Object.assign({className:"edit-check string-value"},L(e,"check-icon"),{onClick:function(){n.submitEdit()}})),b.a.createElement("div",null,n.showDetected())))},n.submitEdit=function(e){var t=n.props,r=t.variable,a=t.namespace,i=t.rjvId,o=n.state,s=o.editValue,l=o.parsedInput,c=s;e&&l.type&&(c=l.value),n.setState({editMode:!1}),B.dispatch({name:"VARIABLE_UPDATED",rjvId:i,data:{name:r.name,namespace:a,existing_value:r.value,new_value:c,variable_removed:!1}})},n.showDetected=function(){var e=n.props,t=e.theme,r=(e.variable,e.namespace,e.rjvId,n.state.parsedInput),i=(r.type,r.value,n.getDetectedInput());if(i)return b.a.createElement("div",null,b.a.createElement("div",L(t,"detected-row"),i,b.a.createElement(ey,{className:"edit-check detected",style:a({verticalAlign:"top",paddingLeft:"3px"},L(t,"check-icon").style),onClick:function(){n.submitEdit(!0)}})))},n.getDetectedInput=function(){var e=n.state.parsedInput,t=e.type,r=e.value,i=f(n).props,o=i.theme;if(!1!==t)switch(t.toLowerCase()){case"object":return b.a.createElement("span",null,b.a.createElement("span",{style:a(a({},L(o,"brace").style),{},{cursor:"default"})},"{"),b.a.createElement("span",{style:a(a({},L(o,"ellipsis").style),{},{cursor:"default"})},"..."),b.a.createElement("span",{style:a(a({},L(o,"brace").style),{},{cursor:"default"})},"}"));case"array":return b.a.createElement("span",null,b.a.createElement("span",{style:a(a({},L(o,"brace").style),{},{cursor:"default"})},"["),b.a.createElement("span",{style:a(a({},L(o,"ellipsis").style),{},{cursor:"default"})},"..."),b.a.createElement("span",{style:a(a({},L(o,"brace").style),{},{cursor:"default"})},"]"));case"string":return b.a.createElement(F,Object.assign({value:r},i));case"integer":return b.a.createElement(D,Object.assign({value:r},i));case"float":return b.a.createElement(M,Object.assign({value:r},i));case"boolean":return b.a.createElement(N,Object.assign({value:r},i));case"function":return b.a.createElement(X,Object.assign({value:r},i));case"null":return b.a.createElement(A,i);case"nan":return b.a.createElement(U,i);case"undefined":return b.a.createElement(Z,i);case"date":return b.a.createElement(S,Object.assign({value:new Date(r)},i))}},n.state={editMode:!1,editValue:"",hovered:!1,renameKey:!1,parsedInput:{type:!1,value:null}},n}return s(r,[{key:"render",value:function(){var e=this,t=this.props,r=t.variable,n=t.singleIndent,i=t.type,o=t.theme,s=t.namespace,l=t.indentWidth,c=t.enableClipboard,u=t.onEdit,d=t.onDelete,f=t.onSelect,p=t.displayArrayKey,h=t.quotesOnKeys,y=this.state.editMode;return b.a.createElement("div",Object.assign({},L(o,"objectKeyVal",{paddingLeft:l*n}),{onMouseEnter:function(){return e.setState(a(a({},e.state),{},{hovered:!0}))},onMouseLeave:function(){return e.setState(a(a({},e.state),{},{hovered:!1}))},className:"variable-row",key:r.name}),"array"==i?p?b.a.createElement("span",Object.assign({},L(o,"array-key"),{key:r.name+"_"+s}),r.name,b.a.createElement("div",L(o,"colon"),":")):null:b.a.createElement("span",null,b.a.createElement("span",Object.assign({},L(o,"object-name"),{className:"object-key",key:r.name+"_"+s}),!!h&&b.a.createElement("span",{style:{verticalAlign:"top"}},'"'),b.a.createElement("span",{style:{display:"inline-block"}},r.name),!!h&&b.a.createElement("span",{style:{verticalAlign:"top"}},'"')),b.a.createElement("span",L(o,"colon"),":")),b.a.createElement("div",Object.assign({className:"variable-value",onClick:!1===f&&!1===u?null:function(t){var n=R(s);(t.ctrlKey||t.metaKey)&&!1!==u?e.prepopInput(r):!1!==f&&(n.shift(),f(a(a({},r),{},{namespace:n})))}},L(o,"variableValue",{cursor:!1===f?"default":"pointer"})),this.getValue(r,y)),c?b.a.createElement(eg,{rowHovered:this.state.hovered,hidden:y,src:r.value,clickCallback:c,theme:o,namespace:[].concat(R(s),[r.name])}):null,!1!==u&&0==y?this.getEditIcon():null,!1!==d&&0==y?this.getRemoveIcon():null)}}]),r}(b.a.PureComponent),ex=function(e){c(r,e);var t=p(r);function r(){var e;i(this,r);for(var n=arguments.length,o=Array(n),s=0;s<n;s++)o[s]=arguments[s];return(e=t.call.apply(t,[this].concat(o))).getObjectSize=function(){var t=e.props,r=t.size,n=t.theme;if(t.displayObjectSize)return b.a.createElement("span",Object.assign({className:"object-size"},L(n,"object-size")),r," item",1===r?"":"s")},e.getAddAttribute=function(t){var r=e.props,n=r.theme,i=r.namespace,o=r.name,s=r.src,l=r.rjvId,c=r.depth;return b.a.createElement("span",{className:"click-to-add",style:{verticalAlign:"top",display:t?"inline-block":"none"}},b.a.createElement(ep,Object.assign({className:"click-to-add-icon"},L(n,"addVarIcon"),{onClick:function(){var e={name:c>0?o:null,namespace:i.splice(0,i.length-1),existing_value:s,variable_removed:!1,key_name:null};"object"===w(s)?B.dispatch({name:"ADD_VARIABLE_KEY_REQUEST",rjvId:l,data:e}):B.dispatch({name:"VARIABLE_ADDED",rjvId:l,data:a(a({},e),{},{new_value:[].concat(R(s),[null])})})}})))},e.getRemoveObject=function(t){var r=e.props,n=r.theme,a=(r.hover,r.namespace),i=r.name,o=r.src,s=r.rjvId;if(1!==a.length)return b.a.createElement("span",{className:"click-to-remove",style:{display:t?"inline-block":"none"}},b.a.createElement(ef,Object.assign({className:"click-to-remove-icon"},L(n,"removeVarIcon"),{onClick:function(){B.dispatch({name:"VARIABLE_REMOVED",rjvId:s,data:{name:i,namespace:a.splice(0,a.length-1),existing_value:o,variable_removed:!0}})}})))},e.render=function(){var t=e.props,r=t.theme,n=t.onDelete,a=t.onAdd,i=t.enableClipboard,o=t.src,s=t.namespace,l=t.rowHovered;return b.a.createElement("div",Object.assign({},L(r,"object-meta-data"),{className:"object-meta-data",onClick:function(e){e.stopPropagation()}}),e.getObjectSize(),i?b.a.createElement(eg,{rowHovered:l,clickCallback:i,src:o,theme:r,namespace:s}):null,!1!==a?e.getAddAttribute(l):null,!1!==n?e.getRemoveObject(l):null)},e}return r}(b.a.PureComponent);function ew(e){var t=e.parent_type,r=e.namespace,n=e.quotesOnKeys,a=e.theme,i=e.jsvRoot,o=e.name,s=e.displayArrayKey,l=e.name?e.name:"";return i&&(!1===o||null===o)?b.a.createElement("span",null):"array"==t?s?b.a.createElement("span",Object.assign({},L(a,"array-key"),{key:r}),b.a.createElement("span",{className:"array-key"},l),b.a.createElement("span",L(a,"colon"),":")):b.a.createElement("span",null):b.a.createElement("span",Object.assign({},L(a,"object-name"),{key:r}),b.a.createElement("span",{className:"object-key"},n&&b.a.createElement("span",{style:{verticalAlign:"top"}},'"'),b.a.createElement("span",null,l),n&&b.a.createElement("span",{style:{verticalAlign:"top"}},'"')),b.a.createElement("span",L(a,"colon"),":"))}function eP(e){var t=e.theme;switch(e.iconStyle){case"triangle":return b.a.createElement(eu,Object.assign({},L(t,"expanded-icon"),{className:"expanded-icon"}));case"square":return b.a.createElement(es,Object.assign({},L(t,"expanded-icon"),{className:"expanded-icon"}));default:return b.a.createElement(ei,Object.assign({},L(t,"expanded-icon"),{className:"expanded-icon"}))}}function eO(e){var t=e.theme;switch(e.iconStyle){case"triangle":return b.a.createElement(ec,Object.assign({},L(t,"collapsed-icon"),{className:"collapsed-icon"}));case"square":return b.a.createElement(el,Object.assign({},L(t,"collapsed-icon"),{className:"collapsed-icon"}));default:return b.a.createElement(eo,Object.assign({},L(t,"collapsed-icon"),{className:"collapsed-icon"}))}}var eT=function(e){c(r,e);var t=p(r);function r(e){var n;return i(this,r),(n=t.call(this,e)).toggleCollapsed=function(e){var t=[];for(var r in n.state.expanded)t.push(n.state.expanded[r]);t[e]=!t[e],n.setState({expanded:t})},n.state={expanded:[]},n}return s(r,[{key:"getExpandedIcon",value:function(e){var t=this.props,r=t.theme,n=t.iconStyle;return this.state.expanded[e]?b.a.createElement(eP,{theme:r,iconStyle:n}):b.a.createElement(eO,{theme:r,iconStyle:n})}},{key:"render",value:function(){var e=this,t=this.props,r=t.src,n=t.groupArraysAfterLength,a=(t.depth,t.name),i=t.theme,o=t.jsvRoot,s=t.namespace,l=(t.parent_type,x(t,["src","groupArraysAfterLength","depth","name","theme","jsvRoot","namespace","parent_type"])),c=0,u=5*this.props.indentWidth;o||(c=5*this.props.indentWidth);var d=Math.ceil(r.length/n);return b.a.createElement("div",Object.assign({className:"object-key-val"},L(i,o?"jsv-root":"objectKeyVal",{paddingLeft:c})),b.a.createElement(ew,this.props),b.a.createElement("span",null,b.a.createElement(ex,Object.assign({size:r.length},this.props))),R(Array(d)).map(function(t,o){return b.a.createElement("div",Object.assign({key:o,className:"object-key-val array-group"},L(i,"objectKeyVal",{marginLeft:6,paddingLeft:u})),b.a.createElement("span",L(i,"brace-row"),b.a.createElement("div",Object.assign({className:"icon-container"},L(i,"icon-container"),{onClick:function(t){e.toggleCollapsed(o)}}),e.getExpandedIcon(o)),e.state.expanded[o]?b.a.createElement(eL,Object.assign({key:a+o,depth:0,name:!1,collapsed:!1,groupArraysAfterLength:n,index_offset:o*n,src:r.slice(o*n,o*n+n),namespace:s,type:"array",parent_type:"array_group",theme:i},l)):b.a.createElement("span",Object.assign({},L(i,"brace"),{onClick:function(t){e.toggleCollapsed(o)},className:"array-group-brace"}),"[",b.a.createElement("div",Object.assign({},L(i,"array-group-meta-data"),{className:"array-group-meta-data"}),b.a.createElement("span",Object.assign({className:"object-size"},L(i,"object-size")),o*n," - ",o*n+n>r.length?r.length:o*n+n)),"]")))}))}}]),r}(b.a.PureComponent),ez=function(e){c(r,e);var t=p(r);function r(e){i(this,r),(n=t.call(this,e)).toggleCollapsed=function(){n.setState({expanded:!n.state.expanded},function(){V.set(n.props.rjvId,n.props.namespace,"expanded",n.state.expanded)})},n.getObjectContent=function(e,t,r){return b.a.createElement("div",{className:"pushed-content object-container"},b.a.createElement("div",Object.assign({className:"object-content"},L(n.props.theme,"pushed-content")),n.renderObjectContents(t,r)))},n.getEllipsis=function(){return 0===n.state.size?null:b.a.createElement("div",Object.assign({},L(n.props.theme,"ellipsis"),{className:"node-ellipsis",onClick:n.toggleCollapsed}),"...")},n.getObjectMetaData=function(e){var t=n.props,r=(t.rjvId,t.theme,n.state),a=r.size,i=r.hovered;return b.a.createElement(ex,Object.assign({rowHovered:i,size:a},n.props))},n.renderObjectContents=function(e,t){var r,a=n.props,i=a.depth,o=a.parent_type,s=a.index_offset,l=a.groupArraysAfterLength,c=a.namespace,u=n.state.object_type,d=[],f=Object.keys(e||{});return n.props.sortKeys&&"array"!==u&&(f=f.sort()),f.forEach(function(a){if(r=new ek(a,e[a]),"array_group"===o&&s&&(r.name=parseInt(r.name)+s),e.hasOwnProperty(a)){if("object"===r.type)d.push(b.a.createElement(eL,Object.assign({key:r.name,depth:i+1,name:r.name,src:r.value,namespace:c.concat(r.name),parent_type:u},t)));else if("array"===r.type){var f=eL;l&&r.value.length>l&&(f=eT),d.push(b.a.createElement(f,Object.assign({key:r.name,depth:i+1,name:r.name,src:r.value,namespace:c.concat(r.name),type:"array",parent_type:u},t)))}else d.push(b.a.createElement(ev,Object.assign({key:r.name+"_"+c,variable:r,singleIndent:5,namespace:c,type:n.props.type},t)))}}),d};var n,o=r.getState(e);return n.state=a(a({},o),{},{prevProps:{}}),n}return s(r,[{key:"getBraceStart",value:function(e,t){var r=this,n=this.props,a=n.src,i=n.theme,o=n.iconStyle;if("array_group"===n.parent_type)return b.a.createElement("span",null,b.a.createElement("span",L(i,"brace"),"array"===e?"[":"{"),t?this.getObjectMetaData(a):null);var s=t?eP:eO;return b.a.createElement("span",null,b.a.createElement("span",Object.assign({onClick:function(e){r.toggleCollapsed()}},L(i,"brace-row")),b.a.createElement("div",Object.assign({className:"icon-container"},L(i,"icon-container")),b.a.createElement(s,{theme:i,iconStyle:o})),b.a.createElement(ew,this.props),b.a.createElement("span",L(i,"brace"),"array"===e?"[":"{")),t?this.getObjectMetaData(a):null)}},{key:"render",value:function(){var e=this,t=this.props,r=t.depth,n=t.src,i=(t.namespace,t.name,t.type,t.parent_type),o=t.theme,s=t.jsvRoot,l=t.iconStyle,c=x(t,["depth","src","namespace","name","type","parent_type","theme","jsvRoot","iconStyle"]),u=this.state,d=u.object_type,f=u.expanded,p={};return s||"array_group"===i?"array_group"===i&&(p.borderLeft=0,p.display="inline"):p.paddingLeft=5*this.props.indentWidth,b.a.createElement("div",Object.assign({className:"object-key-val",onMouseEnter:function(){return e.setState(a(a({},e.state),{},{hovered:!0}))},onMouseLeave:function(){return e.setState(a(a({},e.state),{},{hovered:!1}))}},L(o,s?"jsv-root":"objectKeyVal",p)),this.getBraceStart(d,f),f?this.getObjectContent(r,n,a({theme:o,iconStyle:l},c)):this.getEllipsis(),b.a.createElement("span",{className:"brace-row"},b.a.createElement("span",{style:a(a({},L(o,"brace").style),{},{paddingLeft:f?"3px":"0px"})},"array"===d?"]":"}"),f?null:this.getObjectMetaData(n)))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=t.prevProps;return e.src!==n.src||e.collapsed!==n.collapsed||e.name!==n.name||e.namespace!==n.namespace||e.rjvId!==n.rjvId?a(a({},r.getState(e)),{},{prevProps:e}):null}}]),r}(b.a.PureComponent);ez.getState=function(e){var t=Object.keys(e.src).length,r=(!1===e.collapsed||!0!==e.collapsed&&e.collapsed>e.depth)&&(!e.shouldCollapse||!1===e.shouldCollapse({name:e.name,src:e.src,type:w(e.src),namespace:e.namespace}))&&0!==t;return{expanded:V.get(e.rjvId,e.namespace,"expanded",r),object_type:"array"===e.type?"array":"object",parent_type:"array"===e.type?"array":"object",size:t,hovered:!1}};var ek=function e(t,r){i(this,e),this.name=t,this.value=r,this.type=w(r)};v(ez);var eL=ez,eE=function(e){c(r,e);var t=p(r);function r(){var e;i(this,r);for(var n=arguments.length,a=Array(n),o=0;o<n;o++)a[o]=arguments[o];return(e=t.call.apply(t,[this].concat(a))).render=function(){var t=f(e).props,r=[t.name],n=eL;return Array.isArray(t.src)&&t.groupArraysAfterLength&&t.src.length>t.groupArraysAfterLength&&(n=eT),b.a.createElement("div",{className:"pretty-json-container object-container"},b.a.createElement("div",{className:"object-content"},b.a.createElement(n,Object.assign({namespace:r,depth:0,jsvRoot:!0},t))))},e}return r}(b.a.PureComponent),eN=function(e){c(r,e);var t=p(r);function r(e){var n;return i(this,r),(n=t.call(this,e)).closeModal=function(){B.dispatch({rjvId:n.props.rjvId,name:"RESET"})},n.submit=function(){n.props.submit(n.state.input)},n.state={input:e.input?e.input:""},n}return s(r,[{key:"render",value:function(){var e=this,t=this.props,r=t.theme,n=t.rjvId,a=t.isValid,i=this.state.input,o=a(i);return b.a.createElement("div",Object.assign({className:"key-modal-request"},L(r,"key-modal-request"),{onClick:this.closeModal}),b.a.createElement("div",Object.assign({},L(r,"key-modal"),{onClick:function(e){e.stopPropagation()}}),b.a.createElement("div",L(r,"key-modal-label"),"Key Name:"),b.a.createElement("div",{style:{position:"relative"}},b.a.createElement("input",Object.assign({},L(r,"key-modal-input"),{className:"key-modal-input",ref:function(e){return e&&e.focus()},spellCheck:!1,value:i,placeholder:"...",onChange:function(t){e.setState({input:t.target.value})},onKeyPress:function(t){o&&"Enter"===t.key?e.submit():"Escape"===t.key&&e.closeModal()}})),o?b.a.createElement(ey,Object.assign({},L(r,"key-modal-submit"),{className:"key-modal-submit",onClick:function(t){return e.submit()}})):null),b.a.createElement("span",L(r,"key-modal-cancel"),b.a.createElement(eh,Object.assign({},L(r,"key-modal-cancel-icon"),{className:"key-modal-cancel",onClick:function(){B.dispatch({rjvId:n,name:"RESET"})}})))))}}]),r}(b.a.PureComponent),eS=function(e){c(r,e);var t=p(r);function r(){var e;i(this,r);for(var n=arguments.length,o=Array(n),s=0;s<n;s++)o[s]=arguments[s];return(e=t.call.apply(t,[this].concat(o))).isValid=function(t){var r=e.props.rjvId,n=V.get(r,"action","new-key-request");return""!=t&&-1===Object.keys(n.existing_value).indexOf(t)},e.submit=function(t){var r=e.props.rjvId,n=V.get(r,"action","new-key-request");n.new_value=a({},n.existing_value),n.new_value[t]=e.props.defaultValue,B.dispatch({name:"VARIABLE_ADDED",rjvId:r,data:n})},e}return s(r,[{key:"render",value:function(){var e=this.props,t=e.active,r=e.theme,n=e.rjvId;return t?b.a.createElement(eN,{rjvId:n,theme:r,isValid:this.isValid,submit:this.submit}):null}}]),r}(b.a.PureComponent),eM=function(e){c(r,e);var t=p(r);function r(){return i(this,r),t.apply(this,arguments)}return s(r,[{key:"render",value:function(){var e=this.props,t=e.message,r=e.active,n=e.theme,a=e.rjvId;return r?b.a.createElement("div",Object.assign({className:"validation-failure"},L(n,"validation-failure"),{onClick:function(){B.dispatch({rjvId:a,name:"RESET"})}}),b.a.createElement("span",L(n,"validation-failure-label"),t),b.a.createElement(eh,L(n,"validation-failure-clear"))):null}}]),r}(b.a.PureComponent),ej=function(e){c(r,e);var t=p(r);function r(e){var n;return i(this,r),(n=t.call(this,e)).rjvId=Date.now().toString(),n.getListeners=function(){return{reset:n.resetState,"variable-update":n.updateSrc,"add-key-request":n.addKeyRequest}},n.updateSrc=function(){var e,t=V.get(n.rjvId,"action","variable-update"),r=t.name,a=t.namespace,i=t.new_value,o=t.existing_value,s=(t.variable_removed,t.updated_src),l=t.type,c=n.props,u=c.onEdit,d=c.onDelete,f=c.onAdd,p={existing_src:n.state.src,new_value:i,updated_src:s,name:r,namespace:a,existing_value:o};switch(l){case"variable-added":e=f(p);break;case"variable-edited":e=u(p);break;case"variable-removed":e=d(p)}!1!==e?(V.set(n.rjvId,"global","src",s),n.setState({src:s})):n.setState({validationFailure:!0})},n.addKeyRequest=function(){n.setState({addKeyRequest:!0})},n.resetState=function(){n.setState({validationFailure:!1,addKeyRequest:!1})},n.state={addKeyRequest:!1,editKeyRequest:!1,validationFailure:!1,src:r.defaultProps.src,name:r.defaultProps.name,theme:r.defaultProps.theme,validationMessage:r.defaultProps.validationMessage,prevSrc:r.defaultProps.src,prevName:r.defaultProps.name,prevTheme:r.defaultProps.theme},n}return s(r,[{key:"componentDidMount",value:function(){V.set(this.rjvId,"global","src",this.state.src);var e=this.getListeners();for(var t in e)V.on(t+"-"+this.rjvId,e[t]);this.setState({addKeyRequest:!1,editKeyRequest:!1})}},{key:"componentDidUpdate",value:function(e,t){!1!==t.addKeyRequest&&this.setState({addKeyRequest:!1}),!1!==t.editKeyRequest&&this.setState({editKeyRequest:!1}),e.src!==this.state.src&&V.set(this.rjvId,"global","src",this.state.src)}},{key:"componentWillUnmount",value:function(){var e=this.getListeners();for(var t in e)V.removeListener(t+"-"+this.rjvId,e[t])}},{key:"render",value:function(){var e=this.state,t=e.validationFailure,r=e.validationMessage,n=e.addKeyRequest,i=e.theme,o=e.src,s=e.name,l=this.props,c=l.style,u=l.defaultValue;return b.a.createElement("div",{className:"react-json-view",style:a(a({},L(i,"app-container").style),c)},b.a.createElement(eM,{message:r,active:t,theme:i,rjvId:this.rjvId}),b.a.createElement(eE,Object.assign({},this.props,{src:o,name:s,theme:i,type:w(o),rjvId:this.rjvId})),b.a.createElement(eS,{active:n,theme:i,rjvId:this.rjvId,defaultValue:u}))}}],[{key:"getDerivedStateFromProps",value:function(e,t){if(e.src!==t.prevSrc||e.name!==t.prevName||e.theme!==t.prevTheme){var n={src:e.src,name:e.name,theme:e.theme,validationMessage:e.validationMessage,prevSrc:e.src,prevName:e.name,prevTheme:e.theme};return r.validateState(n)}return null}}]),r}(b.a.PureComponent);ej.defaultProps={src:{},name:"root",theme:"rjv-default",collapsed:!1,collapseStringsAfterLength:!1,shouldCollapse:!1,sortKeys:!1,quotesOnKeys:!0,groupArraysAfterLength:100,indentWidth:4,enableClipboard:!0,displayObjectSize:!0,displayDataTypes:!0,onEdit:!1,onDelete:!1,onAdd:!1,onSelect:!1,iconStyle:"triangle",style:{},validationMessage:"Validation Error",defaultValue:null,displayArrayKey:!0},ej.validateState=function(e){var t={};return"object"!==w(e.theme)||function(e){var t=["base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F"];if("object"===w(e)){for(var r=0;r<t.length;r++)if(!(t[r]in e))return!1;return!0}return!1}(e.theme)||(console.error("react-json-view error:","theme prop must be a theme name or valid base-16 theme object.",'defaulting to "rjv-default" theme'),t.theme="rjv-default"),"object"!==w(e.src)&&"array"!==w(e.src)&&(console.error("react-json-view error:","src property must be a valid json object"),t.name="ERROR",t.src={message:"src property must be a valid json object"}),a(a({},e),t)},v(ej),t.default=ej}]);const Dd=["Art der Anlage","Anschlussnetzbetreiber","Betreiber","Betreiberstatus","Bruttoleistung","EEG Inbetriebnahmedatum","EEG Registrierungsdatum","Errichtungsort(Lage)","Inbetriebnahmedatum","Installierte Leistung","Marktlokations-ID","Messlokations-ID","Meter ID","Name der Einheit","Registrierungsdatum im aktuellen Betriebsstatus","SMGW ID","Standort","Wechselrichterleistung"];function Df({hasDid:e}){return/*#__PURE__*/(0,C.jsxs)("fieldset",{children:[/*#__PURE__*/(0,C.jsx)("legend",{children:"DIVE Anlagenzertifikat"}),/*#__PURE__*/(0,C.jsxs)("p",{children:["Art der Anlage:",/*#__PURE__*/(0,C.jsxs)("label",{children:[/*#__PURE__*/(0,C.jsx)("input",{name:"Art der Anlage",value:"Solar",type:"radio",defaultChecked:!0}),"Solar"]}),/*#__PURE__*/(0,C.jsxs)("label",{children:[/*#__PURE__*/(0,C.jsx)("input",{name:"Art der Anlage",value:"Speicher",type:"radio"}),"Speicher"]})]}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Betreiber: ",/*#__PURE__*/(0,C.jsx)("input",{name:"Betreiber"})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Betreiberstatus: ",/*#__PURE__*/(0,C.jsx)("input",{name:"Betreiberstatus"})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Standort: ",/*#__PURE__*/(0,C.jsx)("input",{name:"Standort"})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Errichtungsort (Lage): ",/*#__PURE__*/(0,C.jsx)("input",{name:"Errichtungsort (Lage)"})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Name der Einheit: ",/*#__PURE__*/(0,C.jsx)("input",{name:"Name der Einheit"})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Bruttoleistung:",/*#__PURE__*/(0,C.jsx)("input",{name:"Bruttoleistung",type:"number",step:"any"})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Wechselrichterleistung:",/*#__PURE__*/(0,C.jsx)("input",{name:"Wechselrichterleistung",type:"number",step:"any"})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Inbetriebnahmedatum: ",/*#__PURE__*/(0,C.jsx)("input",{name:"Inbetriebnahmedatum",type:"date"})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Anschlussnetzbetreiber: ",/*#__PURE__*/(0,C.jsx)("input",{name:"Anschlussnetzbetreiber"})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Registrierungsdatum im aktuellen Betriebsstatus:",/*#__PURE__*/(0,C.jsx)("input",{name:"Registrierungsdatum im aktuellen Betriebsstatus",type:"date"})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Installierte Leistung:",/*#__PURE__*/(0,C.jsx)("input",{name:"Installierte Leistung",type:"number",step:"any"})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["EEG Inbetriebnahmedatum:",/*#__PURE__*/(0,C.jsx)("input",{name:"EEG Inbetriebnahmedatum",type:"date"})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["EEG Registrierungsdatum:",/*#__PURE__*/(0,C.jsx)("input",{name:"EEG Registrierungsdatum",type:"date"})]})}),/*#__PURE__*/(0,C.jsx)("button",{disabled:e,type:"submit",children:"Anfordern"})]})}function Dp({credentials:e,claim:t}){let r=(0,Z.useRef)(),[a,i]=(0,Z.useState)(void 0);(0,Z.useEffect)(()=>{let t=e.find(e=>`kilt:ctype:${e.credential.claim.cTypeHash}`===Di.$id&&e.approved);i(t)},[e]);let o=(0,Z.useCallback)(()=>{r.current?.showModal()},[]);return/*#__PURE__*/(0,C.jsxs)("fieldset",{children:[/*#__PURE__*/(0,C.jsx)("legend",{children:"DIVE Anlagenzertifikat"}),Dd.map(e=>/*#__PURE__*/(0,C.jsx)("p",{children:e in t&&`${e}: ${t[e]} \u{2705}\u{FE0F}`},e)),a&&a.approved&&!a.revoked&&/*#__PURE__*/(0,C.jsxs)("p",{children:["✅️ Zertifikat beglaubigt",/*#__PURE__*/(0,C.jsx)("button",{type:"button",onClick:o,id:"credential",children:"\uD83D\uDD0D️"})]}),a&&a.approved&&a.revoked&&/*#__PURE__*/(0,C.jsx)("p",{children:"❌ Zertifikat Widerruft"}),/*#__PURE__*/(0,C.jsxs)("dialog",{ref:r,children:[/*#__PURE__*/(0,C.jsx)("a",{href:"https://polkadot.js.org/apps/#/chainstate",target:"_blank",rel:"noreferrer",children:"Polkadot"}),/*#__PURE__*/(0,C.jsx)("form",{method:"dialog",children:/*#__PURE__*/(0,C.jsx)("button",{type:"submit",children:"✖️"})}),/*#__PURE__*/(0,C.jsx)(/*@__PURE__*/n(Du),{src:a?a.credential:[]})]}),a&&/*#__PURE__*/(0,C.jsxs)(Z.Fragment,{children:[/*#__PURE__*/(0,C.jsxs)("p",{children:["Status: ",a.revoked?"Widerrufen":"Beglaubigt"]}),/*#__PURE__*/(0,C.jsxs)("p",{children:["Credential hash: ",a.credential.rootHash]}),/*#__PURE__*/(0,C.jsxs)("p",{children:["CType: ",a.credential.claim.cTypeHash]})]}),!a&&/*#__PURE__*/(0,C.jsx)("p",{children:"\uD83D\uDCA1️ Zertifikat in Bearbeitung"})]})}var Dh=function({boxDid:e,boxDidPending:t,handleCreateBoxDIDClick:r,ownerDidPending:n,progress:a}){// states
let[i,o]=(0,Z.useState)(void 0),[s,l]=(0,Z.useState)([]),[c,u]=(0,Z.useState)("");// side effects
(0,Z.useEffect)(()=>{ev().then(e=>o(e)).catch(e=>u(c+"\n"+e.toString())),ex().then(e=>l(e)).catch(e=>u(c+"\n"+e.toString()))},[]);// Callbacks
let d=(0,Z.useCallback)(async t=>{t.preventDefault();let r=new FormData(t.currentTarget),n=Object.fromEntries(r.entries());Object.entries(Di.properties).forEach(([e,t])=>{"type"in t&&"number"===t.type&&e in n&&(n[e]=parseFloat(n[e])),(""===n[e]||Number.isNaN(n[e]))&&delete n[e]});try{let t=mO.fromCTypeAndClaimContents(Di,n,e),r=mw.fromClaim(t),a=await ew(r);o(a.contents)}catch(e){console.error(e.cause),u(e.toString());return}},[e]);return/*#__PURE__*/(0,C.jsxs)("section",{children:[""!==c&&c,/*#__PURE__*/(0,C.jsxs)(C.Fragment,{children:[e&&/*#__PURE__*/(0,C.jsxs)("p",{children:["✅️ Identit\xe4t: ",e]}),!e&&/*#__PURE__*/(0,C.jsxs)("p",{children:["Noch keine Identit\xe4t vorhanden",!t&&/*#__PURE__*/(0,C.jsx)("button",{className:"init",type:"button",onClick:r,disabled:n,children:"Identit\xe4t erstellen!"}),t&&/*#__PURE__*/(0,C.jsx)("progress",{max:60,value:a})]}),i&&/*#__PURE__*/(0,C.jsx)(Dp,{credentials:s,claim:i}),!i&&/*#__PURE__*/(0,C.jsx)("form",{onSubmit:d,children:/*#__PURE__*/(0,C.jsx)(Df,{hasDid:!e})})]})]})},Z=A("acw62");const Db=[{name:"Energy Web Green Proofs",did:"did:web:dive-greenproofs.energywebx.com",url:"https://greenproofs.dive.energyweb.org"},{name:"Track & Trace (via Energy Web)",did:"did:web:dive-ett-proxy.energywebx.com",url:"https://greenproofs.dive.energyweb.org"},{name:"Energy Web Flex",did:"did:web:dive-flex.energywebx.com",url:"https://greenproofs.dive.energyweb.org"},{name:"Energy Web Green Proofs",did:"did:web:dive-ev-supplier-switch.energywebx.com",url:"https://greenproofs.dive.energyweb.org"},{name:"Example",did:"did:web:example.com",url:"https://greenproofs.dive.energyweb.org"}];var Dy=function(){// states
let[e,t]=(0,Z.useState)(),[r,n]=(0,Z.useState)(),[a,i]=(0,Z.useState)(""),[o,s]=(0,Z.useState)(""),[l,c]=(0,Z.useState)(0),[u,d]=(0,Z.useState)(!1),[f,p]=(0,Z.useState)(!1),[h,b]=(0,Z.useState)(!1),[y,m]=(0,Z.useState)(!1),[g,v]=(0,Z.useState)(Db),x=e=>{let t=g.find(t=>t.did===e),r=t?t.name:"None";n(r)};// side effects
(0,Z.useEffect)(()=>{eO().then(e=>{x(e)}).catch(e=>i(a+"\n"+e.toString()))},[]);// callbacks
let w=(0,Z.useCallback)(()=>{let e=[...g];e.push({did:o,name:o,url:"http://greenproofs.dive.energyweb.org"}),v(e),s("")},[o]),P=(0,Z.useCallback)(e=>{t(e.target.value)},[]),O=(0,Z.useCallback)(async()=>{if(void 0===e)return;let t=g.filter(t=>t.did===e);if(0===t.length){console.error("Selected use case does not exists");return}let r=t[0],{did:n,url:a}=r;c(0);let i=setInterval(()=>{c(e=>e+1)},1e3);b(!0);let o=await eP({notifyUseCase:!0,updateServiceEndpoint:!0,useCaseDidUrl:n,useCaseUrl:a});x(o),b(!1),clearInterval(i)},[e]),T=(0,Z.useCallback)(()=>{p(!f)},[f]),z=(0,Z.useCallback)(async()=>{c(0),m(!0);let e=setInterval(()=>{c(e=>e+1)},1e3),t=await eP({notifyUseCase:!0,updateServiceEndpoint:!1,useCaseDidUrl:"invalid",useCaseUrl:"http://greenproofs.dive.energyweb.org"});x(t),m(!1),clearInterval(e)},[e]),k=(0,Z.useCallback)(async()=>{c(0),d(!0);let e=setInterval(()=>{c(e=>e+1)},1e3),t=await eP({notifyUseCase:!1,updateServiceEndpoint:!0,useCaseDidUrl:"deregistration",useCaseUrl:""});x(t),clearInterval(e),d(!1)},[e]),L=u||y||h;return/*#__PURE__*/(0,C.jsxs)(C.Fragment,{children:[""!==a&&a,/*#__PURE__*/(0,C.jsxs)("fieldset",{children:[/*#__PURE__*/(0,C.jsx)("legend",{children:"Aktueller Use Case"}),/*#__PURE__*/(0,C.jsxs)("p",{children:["Die Anlage ist aktuell angemeldet f\xfcr: ",r]}),/*#__PURE__*/(0,C.jsx)("button",{disabled:L,type:"submit",onClick:k,children:"Abmelden"}),u&&/*#__PURE__*/(0,C.jsx)("progress",{max:90,style:{marginLeft:"1em"},value:l})]}),/*#__PURE__*/(0,C.jsxs)("fieldset",{children:[/*#__PURE__*/(0,C.jsx)("legend",{children:"Wechsel oder erstmalige Anmeldung an einem Use Case"}),/*#__PURE__*/(0,C.jsx)("p",{children:"Auswahl aus der Liste der bekannten Use Cases"}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Use Case Name:",/*#__PURE__*/(0,C.jsx)("select",{name:"Use Case",onChange:P,disabled:L,children:g.map(e=>/*#__PURE__*/(0,C.jsxs)("option",{value:e.did,children:[" ",e.name," "]}))})]})}),/*#__PURE__*/(0,C.jsx)("p",{children:"Bei der regul\xe4ren Anmeldung wird der 'Konflikt-Token' vor der Anmeldung aktualisiert. Dies entspricht einer Abmeldung beim vorherigen Use Case und vermeidet daher mehrere, glechzeitige Use Case Teilnahmen."}),/*#__PURE__*/(0,C.jsxs)("button",{type:"submit",disabled:L||!f,onClick:O,title:"Bei der regul\xe4ren Anmeldung wird der 'Konflikt-Token' vor der Anmeldung aktualisiert. Dies entspricht einer Abmeldung beim vorherigen Use Case und vermeidet daher mehrere, glechzeitige Use Case Teilnahmen.",children:["Anmelden (Regul\xe4r mit Abmeldung)"," "]}),h&&/*#__PURE__*/(0,C.jsx)("progress",{max:90,style:{marginLeft:"1em"},value:l}),/*#__PURE__*/(0,C.jsx)("p",{children:"Die Anmeldung ohne vorherige Abmeldung dient nur zur Demonstration der Funktionsweise der Konfliktvermeidung. Die Anmeldung am Use Case wird fehlschlagen. Die Anlage wird folglich nicht tats\xe4chlich beim Use Case angemeldet."}),/*#__PURE__*/(0,C.jsx)("button",{type:"submit",disabled:L||!f,onClick:z,title:"Die Anmeldung ohne vorherige Abmeldung dient nur zur Demonstration der Funktionsweise der Konfliktvermeidung. Die Anmeldung am Use Case wird fehlschlagen. Die Anlage wird folglich nicht tats\xe4chlich beim Use Case angemeldet.",children:"Anmelden (ohne Abmeldung)"}),y&&/*#__PURE__*/(0,C.jsx)("progress",{max:90,style:{marginLeft:"1em"},value:l}),/*#__PURE__*/(0,C.jsxs)("div",{style:{marginTop:"1rem",display:"flex",flexDirection:"row",fontSize:"0.8rem"},children:[/*#__PURE__*/(0,C.jsx)("input",{type:"checkbox",id:"acceptTermsAndConditions",onClick:T,checked:f}),/*#__PURE__*/(0,C.jsxs)("label",{htmlFor:"acceptTermsAndConditions",children:["Ich stimme den AGB und der Datenschutzerkl\xe4rung zu"," "]})]})]}),/*#__PURE__*/(0,C.jsxs)("fieldset",{children:[/*#__PURE__*/(0,C.jsx)("legend",{children:"Bekanntmachen"}),/*#__PURE__*/(0,C.jsx)("p",{children:"F\xfcgt einen Use Case zur Liste der bekannten Use Cases hinzu. Danach kann die Anlage beim Use Case angemeldet werden."}),/*#__PURE__*/(0,C.jsx)("p",{children:/*#__PURE__*/(0,C.jsxs)("label",{children:["Use Case DID:"," ",/*#__PURE__*/(0,C.jsx)("input",{name:"New Use Case DID",value:o,required:!0,onChange:e=>s(e.target.value)})]})}),/*#__PURE__*/(0,C.jsx)("button",{type:"submit",onClick:w,children:"Hinzuf\xfcgen"})]})]})},Z=A("acw62");function Dm(){// Callbacks
let e=(0,Z.useCallback)(()=>{confirm("STOPP! Wirklich zur\xfccksetzen?")&&(async()=>{await ey.delete("did"),window.location.reload()})()},[]);return/*#__PURE__*/(0,C.jsx)("button",{onClick:e,children:"Zur\xfccksetzen"})}const Dg=document.getElementById("root"),Dv=S(Dg);Dv.render(/*#__PURE__*/(0,C.jsx)(function(){let[e,t]=(0,Z.useState)(!1),[r,n]=(0,Z.useState)(0),[a,i]=(0,Z.useState)(""),[o,s]=(0,Z.useState)(void 0),[l,c]=(0,Z.useState)(void 0),[u,d]=(0,Z.useState)(!1),[f,p]=(0,Z.useState)(!1),[h,b]=(0,Z.useState)([]),[y,m]=(0,Z.useState)("Anlage"),g=(0,Z.useCallback)(({target:e})=>{m(e.value)},[]);// useEffects
(0,Z.useEffect)(()=>{eg().then(e=>s(e)).catch(e=>i(a+"\n"+e.toString())),em().then(e=>c(e)).catch(e=>i(a+"\n"+e.toString())),eT().catch(e=>i(a+"\n"+e.toString()))},[]);// Callbacks
let v=(0,Z.useCallback)(async()=>{n(0);let e=setInterval(()=>{n(e=>e+1)},1e3);try{t(!0);let e=await ey.post("did",{timeout:!1}).json();s(e.did)}catch(e){i(a+"\n"+e.toString()),console.error(e)}finally{t(!1),clearInterval(e)}},[]),x=(0,Z.useCallback)(async e=>{let t;try{if(d(!0),!l)throw Error("Impossible: no address");let{name:r}=e.currentTarget,{getSignedDidCreationExtrinsic:a}=window.kilt[r],{signedExtrinsic:i}=await a(l);n(0),t=setInterval(()=>{n(e=>e+1)},1e3),await ey.post("payment",{json:i,timeout:!1}),confirm("Did is created!"),p(!0)}catch(e){i(a+"\n"+e.toString()),console.error(e)}finally{d(!1),clearInterval(t)}},[l]),w=(0,Z.useCallback)(async e=>{try{let{name:t}=e.currentTarget,{getDidList:r}=window.kilt[t];b(await r())}catch(e){i(a+"\n"+e.toString()),console.error(e)}},[l]);return/*#__PURE__*/(0,C.jsxs)(C.Fragment,{children:[/*#__PURE__*/(0,C.jsx)("h1",{children:"OLI Box"}),/*#__PURE__*/(0,C.jsxs)("section",{className:"box",children:[/*#__PURE__*/(0,C.jsxs)("header",{onChange:g,children:[/*#__PURE__*/(0,C.jsxs)("label",{children:[/*#__PURE__*/(0,C.jsx)("input",{type:"radio",name:"tab",value:"Anlage",checked:"Anlage"===y}),"Anlage"]}),/*#__PURE__*/(0,C.jsxs)("label",{children:[/*#__PURE__*/(0,C.jsx)("input",{type:"radio",name:"tab",value:"Betreiber",checked:"Betreiber"===y}),"Betreiber"]}),/*#__PURE__*/(0,C.jsxs)("label",{children:[/*#__PURE__*/(0,C.jsx)("input",{type:"radio",name:"tab",value:"Use Case",checked:"Use Case"===y}),"Use Case"]}),/*#__PURE__*/(0,C.jsxs)("label",{children:[/*#__PURE__*/(0,C.jsx)("input",{type:"radio",name:"tab",value:"Admin",checked:"Admin"===y}),"Admin"]})]}),""!==a&&a,"Anlage"===y&&/*#__PURE__*/(0,C.jsx)(Dh,{boxDid:o,boxDidPending:e,handleCreateBoxDIDClick:v,ownerDidPending:u,progress:r}),"Betreiber"===y&&/*#__PURE__*/(0,C.jsx)(Dc,{address:l,ownerDidPending:u,boxDidPending:e,progress:r,ownerDIDReady:f,ownerDIDs:h,handleCreateOwnerDIDClick:x,handleGetOwnerDIDsClick:w}),"Use Case"===y&&/*#__PURE__*/(0,C.jsx)(Dy,{}),"Admin"===y&&/*#__PURE__*/(0,C.jsx)(Dm,{})]}),/*#__PURE__*/(0,C.jsx)(eL,{})]})},{}));//# sourceMappingURL=index.3408317e.js.map

//# sourceMappingURL=index.3408317e.js.map
